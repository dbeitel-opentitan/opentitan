// SPDX-FileCopyrightText: Copyright (c) 2022 by Rivos Inc.
// Confidential and proprietary, see LICENSE for details.
// SPDX-License-Identifier: LicenseRef-Rivos-Internal-Only

// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module rstmgr_reg_top (
  input clk_i,
  input swWenClk,
  input hwUpdClk,
  input rst_ni,
  input deepReset_L,
  input lightReset_L,
  input clk_por_i,
  input rst_por_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output rstmgr_reg_pkg::rstmgr_reg2hw_t reg2hw, // Write
  input  rstmgr_reg_pkg::rstmgr_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output raclViol,
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import rstmgr_reg_pkg::* ;

  localparam int AW = 7;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [27:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(28)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .en_ifetch_i    (prim_mubi_pkg::MuBi4False),
    .intg_error_o   (),

    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)

  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ALERT_TEST_we;
  logic ALERT_TEST_fatal_fault_wd;
  logic ALERT_TEST_fatal_cnsty_fault_wd;
  logic RESET_REQ_we;
  logic [3:0] RESET_REQ_qs;
  logic [3:0] RESET_REQ_wd;
  logic RESET_INFO_we;
  logic RESET_INFO_POR_qs;
  logic RESET_INFO_POR_wd;
  logic RESET_INFO_LOW_POWER_EXIT_qs;
  logic RESET_INFO_LOW_POWER_EXIT_wd;
  logic RESET_INFO_SW_RESET_qs;
  logic RESET_INFO_SW_RESET_wd;
  logic [3:0] RESET_INFO_HW_REQ_qs;
  logic [3:0] RESET_INFO_HW_REQ_wd;
  logic ALERT_REGWEN_we;
  logic ALERT_REGWEN_qs;
  logic ALERT_REGWEN_wd;
  logic ALERT_INFO_CTRL_we;
  logic ALERT_INFO_CTRL_EN_qs;
  logic ALERT_INFO_CTRL_EN_wd;
  logic [3:0] ALERT_INFO_CTRL_INDEX_qs;
  logic [3:0] ALERT_INFO_CTRL_INDEX_wd;
  logic ALERT_INFO_ATTR_re;
  logic [3:0] ALERT_INFO_ATTR_qs;
  logic ALERT_INFO_re;
  logic [31:0] ALERT_INFO_qs;
  logic CPU_REGWEN_we;
  logic CPU_REGWEN_qs;
  logic CPU_REGWEN_wd;
  logic CPU_INFO_CTRL_we;
  logic CPU_INFO_CTRL_EN_qs;
  logic CPU_INFO_CTRL_EN_wd;
  logic [3:0] CPU_INFO_CTRL_INDEX_qs;
  logic [3:0] CPU_INFO_CTRL_INDEX_wd;
  logic CPU_INFO_ATTR_re;
  logic [3:0] CPU_INFO_ATTR_qs;
  logic CPU_INFO_re;
  logic [31:0] CPU_INFO_qs;
  logic SW_RST_REGWEN_0_we;
  logic SW_RST_REGWEN_0_qs;
  logic SW_RST_REGWEN_0_wd;
  logic SW_RST_REGWEN_1_we;
  logic SW_RST_REGWEN_1_qs;
  logic SW_RST_REGWEN_1_wd;
  logic SW_RST_REGWEN_2_we;
  logic SW_RST_REGWEN_2_qs;
  logic SW_RST_REGWEN_2_wd;
  logic SW_RST_REGWEN_3_we;
  logic SW_RST_REGWEN_3_qs;
  logic SW_RST_REGWEN_3_wd;
  logic SW_RST_REGWEN_4_we;
  logic SW_RST_REGWEN_4_qs;
  logic SW_RST_REGWEN_4_wd;
  logic SW_RST_REGWEN_5_we;
  logic SW_RST_REGWEN_5_qs;
  logic SW_RST_REGWEN_5_wd;
  logic SW_RST_REGWEN_6_we;
  logic SW_RST_REGWEN_6_qs;
  logic SW_RST_REGWEN_6_wd;
  logic SW_RST_REGWEN_7_we;
  logic SW_RST_REGWEN_7_qs;
  logic SW_RST_REGWEN_7_wd;
  logic SW_RST_CTRL_N_0_we;
  logic SW_RST_CTRL_N_0_qs;
  logic SW_RST_CTRL_N_0_wd;
  logic SW_RST_CTRL_N_1_we;
  logic SW_RST_CTRL_N_1_qs;
  logic SW_RST_CTRL_N_1_wd;
  logic SW_RST_CTRL_N_2_we;
  logic SW_RST_CTRL_N_2_qs;
  logic SW_RST_CTRL_N_2_wd;
  logic SW_RST_CTRL_N_3_we;
  logic SW_RST_CTRL_N_3_qs;
  logic SW_RST_CTRL_N_3_wd;
  logic SW_RST_CTRL_N_4_we;
  logic SW_RST_CTRL_N_4_qs;
  logic SW_RST_CTRL_N_4_wd;
  logic SW_RST_CTRL_N_5_we;
  logic SW_RST_CTRL_N_5_qs;
  logic SW_RST_CTRL_N_5_wd;
  logic SW_RST_CTRL_N_6_we;
  logic SW_RST_CTRL_N_6_qs;
  logic SW_RST_CTRL_N_6_wd;
  logic SW_RST_CTRL_N_7_we;
  logic SW_RST_CTRL_N_7_qs;
  logic SW_RST_CTRL_N_7_wd;
  logic ERR_CODE_REG_INTG_ERR_qs;
  logic ERR_CODE_RESET_CONSISTENCY_ERR_qs;
  logic ERR_CODE_FSM_ERR_qs;
  // Define register CDC handling.
  // CDC handling is done on a per-reg instead of per-field boundary.

  // Register instances
  // R[ALERT_TEST]: V(True)
  logic ALERT_TEST_qe;
  logic [1:0] ALERT_TEST_flds_we;
  assign ALERT_TEST_qe = |ALERT_TEST_flds_we; //  Rivos: &*_we --> |*_we
  //   F[fatal_fault]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_ALERT_TEST_fatal_fault (
    .re     (1'b0),
    .we     (ALERT_TEST_we),
    .wd     (ALERT_TEST_fatal_fault_wd),
    .d      ('0),
    .qre    (),
    .qe     (ALERT_TEST_flds_we[0]),
    .q      (reg2hw.ALERT_TEST.fatal_fault.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.ALERT_TEST.fatal_fault.qe = ALERT_TEST_qe;

  //   F[fatal_cnsty_fault]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_ALERT_TEST_fatal_cnsty_fault (
    .re     (1'b0),
    .we     (ALERT_TEST_we),
    .wd     (ALERT_TEST_fatal_cnsty_fault_wd),
    .d      ('0),
    .qre    (),
    .qe     (ALERT_TEST_flds_we[1]),
    .q      (reg2hw.ALERT_TEST.fatal_cnsty_fault.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.ALERT_TEST.fatal_cnsty_fault.qe = ALERT_TEST_qe;


  // R[RESET_REQ]: V(False)


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_RESET_REQ (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RESET_REQ_we),
    .wd     (RESET_REQ_wd),

    // from internal hardware
    .de     (hw2reg.RESET_REQ.de),
    .d      (hw2reg.RESET_REQ.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.RESET_REQ.q),
    .ds     (),

    // to register interface (read)
    .qs     (RESET_REQ_qs)
  );


  // R[RESET_INFO]: V(False)
  //   F[POR]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h1)
  ) u_RESET_INFO_POR (
    // sync clock and reset required for this register
    .clk_i   (clk_por_i),
    .rst_ni  (rst_por_ni),

    // from register interface
    .we     (RESET_INFO_we),
    .wd     (RESET_INFO_POR_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RESET_INFO_POR_qs)
  );

  //   F[LOW_POWER_EXIT]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RESET_INFO_LOW_POWER_EXIT (
    // sync clock and reset required for this register
    .clk_i   (clk_por_i),
    .rst_ni  (rst_por_ni),

    // from register interface
    .we     (RESET_INFO_we),
    .wd     (RESET_INFO_LOW_POWER_EXIT_wd),

    // from internal hardware
    .de     (hw2reg.RESET_INFO.LOW_POWER_EXIT.de),
    .d      (hw2reg.RESET_INFO.LOW_POWER_EXIT.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RESET_INFO_LOW_POWER_EXIT_qs)
  );

  //   F[SW_RESET]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RESET_INFO_SW_RESET (
    // sync clock and reset required for this register
    .clk_i   (clk_por_i),
    .rst_ni  (rst_por_ni),

    // from register interface
    .we     (RESET_INFO_we),
    .wd     (RESET_INFO_SW_RESET_wd),

    // from internal hardware
    .de     (hw2reg.RESET_INFO.SW_RESET.de),
    .d      (hw2reg.RESET_INFO.SW_RESET.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.RESET_INFO.SW_RESET.q),
    .ds     (),

    // to register interface (read)
    .qs     (RESET_INFO_SW_RESET_qs)
  );

  //   F[HW_REQ]: 6:3


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (4'h0)
  ) u_RESET_INFO_HW_REQ (
    // sync clock and reset required for this register
    .clk_i   (clk_por_i),
    .rst_ni  (rst_por_ni),

    // from register interface
    .we     (RESET_INFO_we),
    .wd     (RESET_INFO_HW_REQ_wd),

    // from internal hardware
    .de     (hw2reg.RESET_INFO.HW_REQ.de),
    .d      (hw2reg.RESET_INFO.HW_REQ.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.RESET_INFO.HW_REQ.q),
    .ds     (),

    // to register interface (read)
    .qs     (RESET_INFO_HW_REQ_qs)
  );


  // R[ALERT_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_we),
    .wd     (ALERT_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_qs)
  );


  // R[ALERT_INFO_CTRL]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_INFO_CTRL_gated_we;
  assign ALERT_INFO_CTRL_gated_we = ALERT_INFO_CTRL_we & ALERT_REGWEN_qs;
  //   F[EN]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_INFO_CTRL_EN (
    // sync clock and reset required for this register
    .clk_i   (clk_por_i),
    .rst_ni  (rst_por_ni),

    // from register interface
    .we     (ALERT_INFO_CTRL_gated_we),
    .wd     (ALERT_INFO_CTRL_EN_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_INFO_CTRL.EN.de),
    .d      (hw2reg.ALERT_INFO_CTRL.EN.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_INFO_CTRL.EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_INFO_CTRL_EN_qs)
  );

  //   F[INDEX]: 7:4


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0)
  ) u_ALERT_INFO_CTRL_INDEX (
    // sync clock and reset required for this register
    .clk_i   (clk_por_i),
    .rst_ni  (rst_por_ni),

    // from register interface
    .we     (ALERT_INFO_CTRL_gated_we),
    .wd     (ALERT_INFO_CTRL_INDEX_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_INFO_CTRL.INDEX.q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_INFO_CTRL_INDEX_qs)
  );


  // R[ALERT_INFO_ATTR]: V(True)
  prim_subreg_ext #(
    .DW    (4)
  ) u_ALERT_INFO_ATTR (
    .re     (ALERT_INFO_ATTR_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.ALERT_INFO_ATTR.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (ALERT_INFO_ATTR_qs)
  );


  // R[ALERT_INFO]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_ALERT_INFO (
    .re     (ALERT_INFO_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.ALERT_INFO.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (ALERT_INFO_qs)
  );


  // R[CPU_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_CPU_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CPU_REGWEN_we),
    .wd     (CPU_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CPU_REGWEN_qs)
  );


  // R[CPU_INFO_CTRL]: V(False)
  // Create REGWEN-gated WE signal
  logic CPU_INFO_CTRL_gated_we;
  assign CPU_INFO_CTRL_gated_we = CPU_INFO_CTRL_we & CPU_REGWEN_qs;
  //   F[EN]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CPU_INFO_CTRL_EN (
    // sync clock and reset required for this register
    .clk_i   (clk_por_i),
    .rst_ni  (rst_por_ni),

    // from register interface
    .we     (CPU_INFO_CTRL_gated_we),
    .wd     (CPU_INFO_CTRL_EN_wd),

    // from internal hardware
    .de     (hw2reg.CPU_INFO_CTRL.EN.de),
    .d      (hw2reg.CPU_INFO_CTRL.EN.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CPU_INFO_CTRL.EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CPU_INFO_CTRL_EN_qs)
  );

  //   F[INDEX]: 7:4


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0)
  ) u_CPU_INFO_CTRL_INDEX (
    // sync clock and reset required for this register
    .clk_i   (clk_por_i),
    .rst_ni  (rst_por_ni),

    // from register interface
    .we     (CPU_INFO_CTRL_gated_we),
    .wd     (CPU_INFO_CTRL_INDEX_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CPU_INFO_CTRL.INDEX.q),
    .ds     (),

    // to register interface (read)
    .qs     (CPU_INFO_CTRL_INDEX_qs)
  );


  // R[CPU_INFO_ATTR]: V(True)
  prim_subreg_ext #(
    .DW    (4)
  ) u_CPU_INFO_ATTR (
    .re     (CPU_INFO_ATTR_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CPU_INFO_ATTR.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CPU_INFO_ATTR_qs)
  );


  // R[CPU_INFO]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_CPU_INFO (
    .re     (CPU_INFO_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CPU_INFO.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CPU_INFO_qs)
  );


  // Subregister 0 of Multireg SW_RST_REGWEN
  // R[SW_RST_REGWEN_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_SW_RST_REGWEN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_REGWEN_0_we),
    .wd     (SW_RST_REGWEN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_REGWEN_0_qs)
  );


  // Subregister 1 of Multireg SW_RST_REGWEN
  // R[SW_RST_REGWEN_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_SW_RST_REGWEN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_REGWEN_1_we),
    .wd     (SW_RST_REGWEN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_REGWEN_1_qs)
  );


  // Subregister 2 of Multireg SW_RST_REGWEN
  // R[SW_RST_REGWEN_2]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_SW_RST_REGWEN_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_REGWEN_2_we),
    .wd     (SW_RST_REGWEN_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_REGWEN_2_qs)
  );


  // Subregister 3 of Multireg SW_RST_REGWEN
  // R[SW_RST_REGWEN_3]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_SW_RST_REGWEN_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_REGWEN_3_we),
    .wd     (SW_RST_REGWEN_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_REGWEN_3_qs)
  );


  // Subregister 4 of Multireg SW_RST_REGWEN
  // R[SW_RST_REGWEN_4]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_SW_RST_REGWEN_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_REGWEN_4_we),
    .wd     (SW_RST_REGWEN_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_REGWEN_4_qs)
  );


  // Subregister 5 of Multireg SW_RST_REGWEN
  // R[SW_RST_REGWEN_5]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_SW_RST_REGWEN_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_REGWEN_5_we),
    .wd     (SW_RST_REGWEN_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_REGWEN_5_qs)
  );


  // Subregister 6 of Multireg SW_RST_REGWEN
  // R[SW_RST_REGWEN_6]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_SW_RST_REGWEN_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_REGWEN_6_we),
    .wd     (SW_RST_REGWEN_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_REGWEN_6_qs)
  );


  // Subregister 7 of Multireg SW_RST_REGWEN
  // R[SW_RST_REGWEN_7]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_SW_RST_REGWEN_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_REGWEN_7_we),
    .wd     (SW_RST_REGWEN_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_REGWEN_7_qs)
  );


  // Subregister 0 of Multireg SW_RST_CTRL_N
  // R[SW_RST_CTRL_N_0]: V(False)
  // Create REGWEN-gated WE signal
  logic SW_RST_CTRL_N_0_gated_we;
  assign SW_RST_CTRL_N_0_gated_we = SW_RST_CTRL_N_0_we & SW_RST_REGWEN_0_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_SW_RST_CTRL_N_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_CTRL_N_0_gated_we),
    .wd     (SW_RST_CTRL_N_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.SW_RST_CTRL_N[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_CTRL_N_0_qs)
  );


  // Subregister 1 of Multireg SW_RST_CTRL_N
  // R[SW_RST_CTRL_N_1]: V(False)
  // Create REGWEN-gated WE signal
  logic SW_RST_CTRL_N_1_gated_we;
  assign SW_RST_CTRL_N_1_gated_we = SW_RST_CTRL_N_1_we & SW_RST_REGWEN_1_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_SW_RST_CTRL_N_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_CTRL_N_1_gated_we),
    .wd     (SW_RST_CTRL_N_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.SW_RST_CTRL_N[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_CTRL_N_1_qs)
  );


  // Subregister 2 of Multireg SW_RST_CTRL_N
  // R[SW_RST_CTRL_N_2]: V(False)
  // Create REGWEN-gated WE signal
  logic SW_RST_CTRL_N_2_gated_we;
  assign SW_RST_CTRL_N_2_gated_we = SW_RST_CTRL_N_2_we & SW_RST_REGWEN_2_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_SW_RST_CTRL_N_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_CTRL_N_2_gated_we),
    .wd     (SW_RST_CTRL_N_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.SW_RST_CTRL_N[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_CTRL_N_2_qs)
  );


  // Subregister 3 of Multireg SW_RST_CTRL_N
  // R[SW_RST_CTRL_N_3]: V(False)
  // Create REGWEN-gated WE signal
  logic SW_RST_CTRL_N_3_gated_we;
  assign SW_RST_CTRL_N_3_gated_we = SW_RST_CTRL_N_3_we & SW_RST_REGWEN_3_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_SW_RST_CTRL_N_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_CTRL_N_3_gated_we),
    .wd     (SW_RST_CTRL_N_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.SW_RST_CTRL_N[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_CTRL_N_3_qs)
  );


  // Subregister 4 of Multireg SW_RST_CTRL_N
  // R[SW_RST_CTRL_N_4]: V(False)
  // Create REGWEN-gated WE signal
  logic SW_RST_CTRL_N_4_gated_we;
  assign SW_RST_CTRL_N_4_gated_we = SW_RST_CTRL_N_4_we & SW_RST_REGWEN_4_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_SW_RST_CTRL_N_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_CTRL_N_4_gated_we),
    .wd     (SW_RST_CTRL_N_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.SW_RST_CTRL_N[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_CTRL_N_4_qs)
  );


  // Subregister 5 of Multireg SW_RST_CTRL_N
  // R[SW_RST_CTRL_N_5]: V(False)
  // Create REGWEN-gated WE signal
  logic SW_RST_CTRL_N_5_gated_we;
  assign SW_RST_CTRL_N_5_gated_we = SW_RST_CTRL_N_5_we & SW_RST_REGWEN_5_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_SW_RST_CTRL_N_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_CTRL_N_5_gated_we),
    .wd     (SW_RST_CTRL_N_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.SW_RST_CTRL_N[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_CTRL_N_5_qs)
  );


  // Subregister 6 of Multireg SW_RST_CTRL_N
  // R[SW_RST_CTRL_N_6]: V(False)
  // Create REGWEN-gated WE signal
  logic SW_RST_CTRL_N_6_gated_we;
  assign SW_RST_CTRL_N_6_gated_we = SW_RST_CTRL_N_6_we & SW_RST_REGWEN_6_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_SW_RST_CTRL_N_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_CTRL_N_6_gated_we),
    .wd     (SW_RST_CTRL_N_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.SW_RST_CTRL_N[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_CTRL_N_6_qs)
  );


  // Subregister 7 of Multireg SW_RST_CTRL_N
  // R[SW_RST_CTRL_N_7]: V(False)
  // Create REGWEN-gated WE signal
  logic SW_RST_CTRL_N_7_gated_we;
  assign SW_RST_CTRL_N_7_gated_we = SW_RST_CTRL_N_7_we & SW_RST_REGWEN_7_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_SW_RST_CTRL_N_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (SW_RST_CTRL_N_7_gated_we),
    .wd     (SW_RST_CTRL_N_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.SW_RST_CTRL_N[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (SW_RST_CTRL_N_7_qs)
  );


  // R[ERR_CODE]: V(False)
  //   F[REG_INTG_ERR]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_ERR_CODE_REG_INTG_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ERR_CODE.REG_INTG_ERR.de),
    .d      (hw2reg.ERR_CODE.REG_INTG_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ERR_CODE.REG_INTG_ERR.q),
    .ds     (),

    // to register interface (read)
    .qs     (ERR_CODE_REG_INTG_ERR_qs)
  );

  //   F[RESET_CONSISTENCY_ERR]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_ERR_CODE_RESET_CONSISTENCY_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ERR_CODE.RESET_CONSISTENCY_ERR.de),
    .d      (hw2reg.ERR_CODE.RESET_CONSISTENCY_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ERR_CODE.RESET_CONSISTENCY_ERR.q),
    .ds     (),

    // to register interface (read)
    .qs     (ERR_CODE_RESET_CONSISTENCY_ERR_qs)
  );

  //   F[FSM_ERR]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_ERR_CODE_FSM_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ERR_CODE.FSM_ERR.de),
    .d      (hw2reg.ERR_CODE.FSM_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ERR_CODE.FSM_ERR.q),
    .ds     (),

    // to register interface (read)
    .qs     (ERR_CODE_FSM_ERR_qs)
  );



  logic [15:0]  reqRoleVec;
  RDP_DECODE  #(.ENC_WID(4))
    raclRoleXDEC  (.dec(reqRoleVec),  .enc(tl_i.a_user.rsvd[3:0])); // incoming RACL, assigned in scsctnif.sv

  logic [27:0] addr_hit;
  logic [27:0] addrHitNRdAllowed;
  logic [27:0] addrHitNWrAllowed;
  always_comb begin
    addr_hit   = '0;
    addrHitNRdAllowed = '0;
    addrHitNWrAllowed = '0;

    addr_hit[ 0]          = (reg_addr == RSTMGR_ALERT_TEST_OFFSET);  // ALERT_TEST
    addrHitNRdAllowed[ 0] = (reg_addr == RSTMGR_ALERT_TEST_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 0] = (reg_addr == RSTMGR_ALERT_TEST_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 1]          = (reg_addr == RSTMGR_RESET_REQ_OFFSET);  // RESET_REQ
    addrHitNRdAllowed[ 1] = (reg_addr == RSTMGR_RESET_REQ_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 1] = (reg_addr == RSTMGR_RESET_REQ_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 2]          = (reg_addr == RSTMGR_RESET_INFO_OFFSET);  // RESET_INFO
    addrHitNRdAllowed[ 2] = (reg_addr == RSTMGR_RESET_INFO_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 2] = (reg_addr == RSTMGR_RESET_INFO_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 3]          = (reg_addr == RSTMGR_ALERT_REGWEN_OFFSET);  // ALERT_REGWEN
    addrHitNRdAllowed[ 3] = (reg_addr == RSTMGR_ALERT_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 3] = (reg_addr == RSTMGR_ALERT_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 4]          = (reg_addr == RSTMGR_ALERT_INFO_CTRL_OFFSET);  // ALERT_INFO_CTRL
    addrHitNRdAllowed[ 4] = (reg_addr == RSTMGR_ALERT_INFO_CTRL_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 4] = (reg_addr == RSTMGR_ALERT_INFO_CTRL_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 5]          = (reg_addr == RSTMGR_ALERT_INFO_ATTR_OFFSET);  // ALERT_INFO_ATTR
    addrHitNRdAllowed[ 5] = (reg_addr == RSTMGR_ALERT_INFO_ATTR_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 5] = (reg_addr == RSTMGR_ALERT_INFO_ATTR_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 6]          = (reg_addr == RSTMGR_ALERT_INFO_OFFSET);  // ALERT_INFO
    addrHitNRdAllowed[ 6] = (reg_addr == RSTMGR_ALERT_INFO_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 6] = (reg_addr == RSTMGR_ALERT_INFO_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 7]          = (reg_addr == RSTMGR_CPU_REGWEN_OFFSET);  // CPU_REGWEN
    addrHitNRdAllowed[ 7] = (reg_addr == RSTMGR_CPU_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 7] = (reg_addr == RSTMGR_CPU_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 8]          = (reg_addr == RSTMGR_CPU_INFO_CTRL_OFFSET);  // CPU_INFO_CTRL
    addrHitNRdAllowed[ 8] = (reg_addr == RSTMGR_CPU_INFO_CTRL_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 8] = (reg_addr == RSTMGR_CPU_INFO_CTRL_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 9]          = (reg_addr == RSTMGR_CPU_INFO_ATTR_OFFSET);  // CPU_INFO_ATTR
    addrHitNRdAllowed[ 9] = (reg_addr == RSTMGR_CPU_INFO_ATTR_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 9] = (reg_addr == RSTMGR_CPU_INFO_ATTR_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[10]          = (reg_addr == RSTMGR_CPU_INFO_OFFSET);  // CPU_INFO
    addrHitNRdAllowed[10] = (reg_addr == RSTMGR_CPU_INFO_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[10] = (reg_addr == RSTMGR_CPU_INFO_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[11]          = (reg_addr == RSTMGR_SW_RST_REGWEN_0_OFFSET);  // SW_RST_REGWEN_0
    addrHitNRdAllowed[11] = (reg_addr == RSTMGR_SW_RST_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[11] = (reg_addr == RSTMGR_SW_RST_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[12]          = (reg_addr == RSTMGR_SW_RST_REGWEN_1_OFFSET);  // SW_RST_REGWEN_1
    addrHitNRdAllowed[12] = (reg_addr == RSTMGR_SW_RST_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[12] = (reg_addr == RSTMGR_SW_RST_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[13]          = (reg_addr == RSTMGR_SW_RST_REGWEN_2_OFFSET);  // SW_RST_REGWEN_2
    addrHitNRdAllowed[13] = (reg_addr == RSTMGR_SW_RST_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[13] = (reg_addr == RSTMGR_SW_RST_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[14]          = (reg_addr == RSTMGR_SW_RST_REGWEN_3_OFFSET);  // SW_RST_REGWEN_3
    addrHitNRdAllowed[14] = (reg_addr == RSTMGR_SW_RST_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[14] = (reg_addr == RSTMGR_SW_RST_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[15]          = (reg_addr == RSTMGR_SW_RST_REGWEN_4_OFFSET);  // SW_RST_REGWEN_4
    addrHitNRdAllowed[15] = (reg_addr == RSTMGR_SW_RST_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[15] = (reg_addr == RSTMGR_SW_RST_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[16]          = (reg_addr == RSTMGR_SW_RST_REGWEN_5_OFFSET);  // SW_RST_REGWEN_5
    addrHitNRdAllowed[16] = (reg_addr == RSTMGR_SW_RST_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[16] = (reg_addr == RSTMGR_SW_RST_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[17]          = (reg_addr == RSTMGR_SW_RST_REGWEN_6_OFFSET);  // SW_RST_REGWEN_6
    addrHitNRdAllowed[17] = (reg_addr == RSTMGR_SW_RST_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[17] = (reg_addr == RSTMGR_SW_RST_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[18]          = (reg_addr == RSTMGR_SW_RST_REGWEN_7_OFFSET);  // SW_RST_REGWEN_7
    addrHitNRdAllowed[18] = (reg_addr == RSTMGR_SW_RST_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[18] = (reg_addr == RSTMGR_SW_RST_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[19]          = (reg_addr == RSTMGR_SW_RST_CTRL_N_0_OFFSET);  // SW_RST_CTRL_N_0
    addrHitNRdAllowed[19] = (reg_addr == RSTMGR_SW_RST_CTRL_N_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[19] = (reg_addr == RSTMGR_SW_RST_CTRL_N_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[20]          = (reg_addr == RSTMGR_SW_RST_CTRL_N_1_OFFSET);  // SW_RST_CTRL_N_1
    addrHitNRdAllowed[20] = (reg_addr == RSTMGR_SW_RST_CTRL_N_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[20] = (reg_addr == RSTMGR_SW_RST_CTRL_N_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[21]          = (reg_addr == RSTMGR_SW_RST_CTRL_N_2_OFFSET);  // SW_RST_CTRL_N_2
    addrHitNRdAllowed[21] = (reg_addr == RSTMGR_SW_RST_CTRL_N_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[21] = (reg_addr == RSTMGR_SW_RST_CTRL_N_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[22]          = (reg_addr == RSTMGR_SW_RST_CTRL_N_3_OFFSET);  // SW_RST_CTRL_N_3
    addrHitNRdAllowed[22] = (reg_addr == RSTMGR_SW_RST_CTRL_N_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[22] = (reg_addr == RSTMGR_SW_RST_CTRL_N_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[23]          = (reg_addr == RSTMGR_SW_RST_CTRL_N_4_OFFSET);  // SW_RST_CTRL_N_4
    addrHitNRdAllowed[23] = (reg_addr == RSTMGR_SW_RST_CTRL_N_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[23] = (reg_addr == RSTMGR_SW_RST_CTRL_N_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[24]          = (reg_addr == RSTMGR_SW_RST_CTRL_N_5_OFFSET);  // SW_RST_CTRL_N_5
    addrHitNRdAllowed[24] = (reg_addr == RSTMGR_SW_RST_CTRL_N_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[24] = (reg_addr == RSTMGR_SW_RST_CTRL_N_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[25]          = (reg_addr == RSTMGR_SW_RST_CTRL_N_6_OFFSET);  // SW_RST_CTRL_N_6
    addrHitNRdAllowed[25] = (reg_addr == RSTMGR_SW_RST_CTRL_N_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[25] = (reg_addr == RSTMGR_SW_RST_CTRL_N_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[26]          = (reg_addr == RSTMGR_SW_RST_CTRL_N_7_OFFSET);  // SW_RST_CTRL_N_7
    addrHitNRdAllowed[26] = (reg_addr == RSTMGR_SW_RST_CTRL_N_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[26] = (reg_addr == RSTMGR_SW_RST_CTRL_N_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[27]          = (reg_addr == RSTMGR_ERR_CODE_OFFSET);  // ERR_CODE
    addrHitNRdAllowed[27] = (reg_addr == RSTMGR_ERR_CODE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[27] = (reg_addr == RSTMGR_ERR_CODE_OFFSET) & (|(16'hffff & reqRoleVec));

  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
  assign raclViol = (|addr_hit) & ~(|(addr_hit & (addrHitNRdAllowed | addrHitNWrAllowed))); // address hit but failed the RACL check

  // Check sub-word write is permitted
  always_comb begin
    wr_err = reg_we &
              (( addrHitNWrAllowed[ 0] & (|(RSTMGR_PERMIT[ 0] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 1] & (|(RSTMGR_PERMIT[ 1] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 2] & (|(RSTMGR_PERMIT[ 2] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 3] & (|(RSTMGR_PERMIT[ 3] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 4] & (|(RSTMGR_PERMIT[ 4] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 5] & (|(RSTMGR_PERMIT[ 5] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 6] & (|(RSTMGR_PERMIT[ 6] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 7] & (|(RSTMGR_PERMIT[ 7] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 8] & (|(RSTMGR_PERMIT[ 8] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 9] & (|(RSTMGR_PERMIT[ 9] & ~reg_be)) ) |
               ( addrHitNWrAllowed[10] & (|(RSTMGR_PERMIT[10] & ~reg_be)) ) |
               ( addrHitNWrAllowed[11] & (|(RSTMGR_PERMIT[11] & ~reg_be)) ) |
               ( addrHitNWrAllowed[12] & (|(RSTMGR_PERMIT[12] & ~reg_be)) ) |
               ( addrHitNWrAllowed[13] & (|(RSTMGR_PERMIT[13] & ~reg_be)) ) |
               ( addrHitNWrAllowed[14] & (|(RSTMGR_PERMIT[14] & ~reg_be)) ) |
               ( addrHitNWrAllowed[15] & (|(RSTMGR_PERMIT[15] & ~reg_be)) ) |
               ( addrHitNWrAllowed[16] & (|(RSTMGR_PERMIT[16] & ~reg_be)) ) |
               ( addrHitNWrAllowed[17] & (|(RSTMGR_PERMIT[17] & ~reg_be)) ) |
               ( addrHitNWrAllowed[18] & (|(RSTMGR_PERMIT[18] & ~reg_be)) ) |
               ( addrHitNWrAllowed[19] & (|(RSTMGR_PERMIT[19] & ~reg_be)) ) |
               ( addrHitNWrAllowed[20] & (|(RSTMGR_PERMIT[20] & ~reg_be)) ) |
               ( addrHitNWrAllowed[21] & (|(RSTMGR_PERMIT[21] & ~reg_be)) ) |
               ( addrHitNWrAllowed[22] & (|(RSTMGR_PERMIT[22] & ~reg_be)) ) |
               ( addrHitNWrAllowed[23] & (|(RSTMGR_PERMIT[23] & ~reg_be)) ) |
               ( addrHitNWrAllowed[24] & (|(RSTMGR_PERMIT[24] & ~reg_be)) ) |
               ( addrHitNWrAllowed[25] & (|(RSTMGR_PERMIT[25] & ~reg_be)) ) |
               ( addrHitNWrAllowed[26] & (|(RSTMGR_PERMIT[26] & ~reg_be)) ) |
               ( addrHitNWrAllowed[27] & (|(RSTMGR_PERMIT[27] & ~reg_be)) ) );
  end

  // Generate write-enables
  assign ALERT_TEST_we = addrHitNWrAllowed[0] & reg_we & !reg_error;
  assign ALERT_TEST_fatal_fault_wd = reg_wdata[0];

  assign ALERT_TEST_fatal_cnsty_fault_wd = reg_wdata[1];

  assign RESET_REQ_we = addrHitNWrAllowed[1] & reg_we & !reg_error;
  assign RESET_REQ_wd = reg_wdata[3:0];

  assign RESET_INFO_we = addrHitNWrAllowed[2] & reg_we & !reg_error;
  assign RESET_INFO_POR_wd = reg_wdata[0];

  assign RESET_INFO_LOW_POWER_EXIT_wd = reg_wdata[1];

  assign RESET_INFO_SW_RESET_wd = reg_wdata[2];

  assign RESET_INFO_HW_REQ_wd = reg_wdata[6:3];

  assign ALERT_REGWEN_we = addrHitNWrAllowed[3] & reg_we & !reg_error;
  assign ALERT_REGWEN_wd = reg_wdata[0];

  assign ALERT_INFO_CTRL_we = addrHitNWrAllowed[4] & reg_we & !reg_error;
  assign ALERT_INFO_CTRL_EN_wd = reg_wdata[0];

  assign ALERT_INFO_CTRL_INDEX_wd = reg_wdata[7:4];

  assign ALERT_INFO_ATTR_re = addrHitNRdAllowed[5] & reg_re & !reg_error;
  assign ALERT_INFO_re = addrHitNRdAllowed[6] & reg_re & !reg_error;
  assign CPU_REGWEN_we = addrHitNWrAllowed[7] & reg_we & !reg_error;
  assign CPU_REGWEN_wd = reg_wdata[0];

  assign CPU_INFO_CTRL_we = addrHitNWrAllowed[8] & reg_we & !reg_error;
  assign CPU_INFO_CTRL_EN_wd = reg_wdata[0];

  assign CPU_INFO_CTRL_INDEX_wd = reg_wdata[7:4];

  assign CPU_INFO_ATTR_re = addrHitNRdAllowed[9] & reg_re & !reg_error;
  assign CPU_INFO_re = addrHitNRdAllowed[10] & reg_re & !reg_error;
  assign SW_RST_REGWEN_0_we = addrHitNWrAllowed[11] & reg_we & !reg_error;
  assign SW_RST_REGWEN_0_wd = reg_wdata[0];

  assign SW_RST_REGWEN_1_we = addrHitNWrAllowed[12] & reg_we & !reg_error;
  assign SW_RST_REGWEN_1_wd = reg_wdata[0];

  assign SW_RST_REGWEN_2_we = addrHitNWrAllowed[13] & reg_we & !reg_error;
  assign SW_RST_REGWEN_2_wd = reg_wdata[0];

  assign SW_RST_REGWEN_3_we = addrHitNWrAllowed[14] & reg_we & !reg_error;
  assign SW_RST_REGWEN_3_wd = reg_wdata[0];

  assign SW_RST_REGWEN_4_we = addrHitNWrAllowed[15] & reg_we & !reg_error;
  assign SW_RST_REGWEN_4_wd = reg_wdata[0];

  assign SW_RST_REGWEN_5_we = addrHitNWrAllowed[16] & reg_we & !reg_error;
  assign SW_RST_REGWEN_5_wd = reg_wdata[0];

  assign SW_RST_REGWEN_6_we = addrHitNWrAllowed[17] & reg_we & !reg_error;
  assign SW_RST_REGWEN_6_wd = reg_wdata[0];

  assign SW_RST_REGWEN_7_we = addrHitNWrAllowed[18] & reg_we & !reg_error;
  assign SW_RST_REGWEN_7_wd = reg_wdata[0];

  assign SW_RST_CTRL_N_0_we = addrHitNWrAllowed[19] & reg_we & !reg_error;
  assign SW_RST_CTRL_N_0_wd = reg_wdata[0];

  assign SW_RST_CTRL_N_1_we = addrHitNWrAllowed[20] & reg_we & !reg_error;
  assign SW_RST_CTRL_N_1_wd = reg_wdata[0];

  assign SW_RST_CTRL_N_2_we = addrHitNWrAllowed[21] & reg_we & !reg_error;
  assign SW_RST_CTRL_N_2_wd = reg_wdata[0];

  assign SW_RST_CTRL_N_3_we = addrHitNWrAllowed[22] & reg_we & !reg_error;
  assign SW_RST_CTRL_N_3_wd = reg_wdata[0];

  assign SW_RST_CTRL_N_4_we = addrHitNWrAllowed[23] & reg_we & !reg_error;
  assign SW_RST_CTRL_N_4_wd = reg_wdata[0];

  assign SW_RST_CTRL_N_5_we = addrHitNWrAllowed[24] & reg_we & !reg_error;
  assign SW_RST_CTRL_N_5_wd = reg_wdata[0];

  assign SW_RST_CTRL_N_6_we = addrHitNWrAllowed[25] & reg_we & !reg_error;
  assign SW_RST_CTRL_N_6_wd = reg_wdata[0];

  assign SW_RST_CTRL_N_7_we = addrHitNWrAllowed[26] & reg_we & !reg_error;
  assign SW_RST_CTRL_N_7_wd = reg_wdata[0];


  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = ALERT_TEST_we;
    reg_we_check[1] = RESET_REQ_we;
    reg_we_check[2] = RESET_INFO_we;
    reg_we_check[3] = ALERT_REGWEN_we;
    reg_we_check[4] = ALERT_INFO_CTRL_gated_we;
    reg_we_check[5] = 1'b0;
    reg_we_check[6] = 1'b0;
    reg_we_check[7] = CPU_REGWEN_we;
    reg_we_check[8] = CPU_INFO_CTRL_gated_we;
    reg_we_check[9] = 1'b0;
    reg_we_check[10] = 1'b0;
    reg_we_check[11] = SW_RST_REGWEN_0_we;
    reg_we_check[12] = SW_RST_REGWEN_1_we;
    reg_we_check[13] = SW_RST_REGWEN_2_we;
    reg_we_check[14] = SW_RST_REGWEN_3_we;
    reg_we_check[15] = SW_RST_REGWEN_4_we;
    reg_we_check[16] = SW_RST_REGWEN_5_we;
    reg_we_check[17] = SW_RST_REGWEN_6_we;
    reg_we_check[18] = SW_RST_REGWEN_7_we;
    reg_we_check[19] = SW_RST_CTRL_N_0_gated_we;
    reg_we_check[20] = SW_RST_CTRL_N_1_gated_we;
    reg_we_check[21] = SW_RST_CTRL_N_2_gated_we;
    reg_we_check[22] = SW_RST_CTRL_N_3_gated_we;
    reg_we_check[23] = SW_RST_CTRL_N_4_gated_we;
    reg_we_check[24] = SW_RST_CTRL_N_5_gated_we;
    reg_we_check[25] = SW_RST_CTRL_N_6_gated_we;
    reg_we_check[26] = SW_RST_CTRL_N_7_gated_we;
    reg_we_check[27] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addrHitNRdAllowed[0]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addrHitNRdAllowed[1]: begin
        reg_rdata_next[3:0] = RESET_REQ_qs;
      end

      addrHitNRdAllowed[2]: begin
        reg_rdata_next[0] = RESET_INFO_POR_qs;
        reg_rdata_next[1] = RESET_INFO_LOW_POWER_EXIT_qs;
        reg_rdata_next[2] = RESET_INFO_SW_RESET_qs;
        reg_rdata_next[6:3] = RESET_INFO_HW_REQ_qs;
      end

      addrHitNRdAllowed[3]: begin
        reg_rdata_next[0] = ALERT_REGWEN_qs;
      end

      addrHitNRdAllowed[4]: begin
        reg_rdata_next[0] = ALERT_INFO_CTRL_EN_qs;
        reg_rdata_next[7:4] = ALERT_INFO_CTRL_INDEX_qs;
      end

      addrHitNRdAllowed[5]: begin
        reg_rdata_next[3:0] = ALERT_INFO_ATTR_qs;
      end

      addrHitNRdAllowed[6]: begin
        reg_rdata_next[31:0] = ALERT_INFO_qs;
      end

      addrHitNRdAllowed[7]: begin
        reg_rdata_next[0] = CPU_REGWEN_qs;
      end

      addrHitNRdAllowed[8]: begin
        reg_rdata_next[0] = CPU_INFO_CTRL_EN_qs;
        reg_rdata_next[7:4] = CPU_INFO_CTRL_INDEX_qs;
      end

      addrHitNRdAllowed[9]: begin
        reg_rdata_next[3:0] = CPU_INFO_ATTR_qs;
      end

      addrHitNRdAllowed[10]: begin
        reg_rdata_next[31:0] = CPU_INFO_qs;
      end

      addrHitNRdAllowed[11]: begin
        reg_rdata_next[0] = SW_RST_REGWEN_0_qs;
      end

      addrHitNRdAllowed[12]: begin
        reg_rdata_next[0] = SW_RST_REGWEN_1_qs;
      end

      addrHitNRdAllowed[13]: begin
        reg_rdata_next[0] = SW_RST_REGWEN_2_qs;
      end

      addrHitNRdAllowed[14]: begin
        reg_rdata_next[0] = SW_RST_REGWEN_3_qs;
      end

      addrHitNRdAllowed[15]: begin
        reg_rdata_next[0] = SW_RST_REGWEN_4_qs;
      end

      addrHitNRdAllowed[16]: begin
        reg_rdata_next[0] = SW_RST_REGWEN_5_qs;
      end

      addrHitNRdAllowed[17]: begin
        reg_rdata_next[0] = SW_RST_REGWEN_6_qs;
      end

      addrHitNRdAllowed[18]: begin
        reg_rdata_next[0] = SW_RST_REGWEN_7_qs;
      end

      addrHitNRdAllowed[19]: begin
        reg_rdata_next[0] = SW_RST_CTRL_N_0_qs;
      end

      addrHitNRdAllowed[20]: begin
        reg_rdata_next[0] = SW_RST_CTRL_N_1_qs;
      end

      addrHitNRdAllowed[21]: begin
        reg_rdata_next[0] = SW_RST_CTRL_N_2_qs;
      end

      addrHitNRdAllowed[22]: begin
        reg_rdata_next[0] = SW_RST_CTRL_N_3_qs;
      end

      addrHitNRdAllowed[23]: begin
        reg_rdata_next[0] = SW_RST_CTRL_N_4_qs;
      end

      addrHitNRdAllowed[24]: begin
        reg_rdata_next[0] = SW_RST_CTRL_N_5_qs;
      end

      addrHitNRdAllowed[25]: begin
        reg_rdata_next[0] = SW_RST_CTRL_N_6_qs;
      end

      addrHitNRdAllowed[26]: begin
        reg_rdata_next[0] = SW_RST_CTRL_N_7_qs;
      end

      addrHitNRdAllowed[27]: begin
        reg_rdata_next[0] = ERR_CODE_REG_INTG_ERR_qs;
        reg_rdata_next[1] = ERR_CODE_RESET_CONSISTENCY_ERR_qs;
        reg_rdata_next[2] = ERR_CODE_FSM_ERR_qs;
      end

      default: begin
        reg_rdata_next = '0;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
// Local Variables:
// fill-column:1
// verilog-auto-arg-sort:t
// verilog-typedef-regexp: "_[etu]$"
// verilog-library-directories:(".")
// End:
