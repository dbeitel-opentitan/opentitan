// SPDX-FileCopyrightText: Copyright (c) 2022 by Rivos Inc.
// Confidential and proprietary, see LICENSE for details.
// SPDX-License-Identifier: LicenseRef-Rivos-Internal-Only

// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package clkmgr_reg_pkg;

  // Param list
  parameter int NumGroups = 7;
  parameter int NumSwGateableClocks = 3;
  parameter int NumHintableClocks = 1;
  parameter int NumAlerts = 2;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } recov_fault;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_fault;
  } clkmgr_reg2hw_alert_test_reg_t;  // register struct

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
    } SEL;
    struct packed {
      logic [3:0]  q;
    } HI_SPEED_SEL;
  } clkmgr_reg2hw_extclk_ctrl_reg_t;  // register struct

  typedef struct packed {
    logic [3:0]  q;
  } clkmgr_reg2hw_jitter_enable_reg_t;  // register struct

  typedef struct packed {
    struct packed {
      logic        q;
    } CLK_IO_DIV4_PERI_EN;
    struct packed {
      logic        q;
    } CLK_USB_PERI_EN;
    struct packed {
      logic        q;
    } CLK_IO_PERI_EN;
  } clkmgr_reg2hw_clk_enables_reg_t;  // register struct

  typedef struct packed {
    logic        q;
  } clkmgr_reg2hw_clk_hints_reg_t;  // register struct

  typedef struct packed {
    logic        q;
  } clkmgr_reg2hw_measure_ctrl_regwen_reg_t;  // register struct

  typedef struct packed {
    logic [3:0]  q;
  } clkmgr_reg2hw_io_meas_ctrl_en_reg_t;  // register struct

  typedef struct packed {
    struct packed {
      logic [9:0] q;
    } HI;
    struct packed {
      logic [9:0] q;
    } LO;
  } clkmgr_reg2hw_io_meas_ctrl_shadowed_reg_t;  // register struct

  typedef struct packed {
    logic [3:0]  q;
  } clkmgr_reg2hw_io_div2_meas_ctrl_en_reg_t;  // register struct

  typedef struct packed {
    struct packed {
      logic [8:0]  q;
    } HI;
    struct packed {
      logic [8:0]  q;
    } LO;
  } clkmgr_reg2hw_io_div2_meas_ctrl_shadowed_reg_t;  // register struct

  typedef struct packed {
    logic [3:0]  q;
  } clkmgr_reg2hw_io_div4_meas_ctrl_en_reg_t;  // register struct

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } HI;
    struct packed {
      logic [7:0]  q;
    } LO;
  } clkmgr_reg2hw_io_div4_meas_ctrl_shadowed_reg_t;  // register struct

  typedef struct packed {
    logic [3:0]  q;
  } clkmgr_reg2hw_main_meas_ctrl_en_reg_t;  // register struct

  typedef struct packed {
    struct packed {
      logic [9:0] q;
    } HI;
    struct packed {
      logic [9:0] q;
    } LO;
  } clkmgr_reg2hw_main_meas_ctrl_shadowed_reg_t;  // register struct

  typedef struct packed {
    logic [3:0]  q;
  } clkmgr_reg2hw_usb_meas_ctrl_en_reg_t;  // register struct

  typedef struct packed {
    struct packed {
      logic [8:0]  q;
    } HI;
    struct packed {
      logic [8:0]  q;
    } LO;
  } clkmgr_reg2hw_usb_meas_ctrl_shadowed_reg_t;  // register struct

  typedef struct packed {
    struct packed {
      logic        q;
    } REG_INTG;
    struct packed {
      logic        q;
    } IDLE_CNT;
    struct packed {
      logic        q;
    } SHADOW_STORAGE_ERR;
  } clkmgr_reg2hw_fatal_err_code_reg_t;  // register struct

  typedef struct packed {
    logic [3:0]  d;
  } clkmgr_hw2reg_extclk_status_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } clkmgr_hw2reg_clk_hints_status_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } clkmgr_hw2reg_measure_ctrl_regwen_reg_t;

  typedef struct packed {
    logic [3:0]  d;
    logic        de;
  } clkmgr_hw2reg_io_meas_ctrl_en_reg_t;

  typedef struct packed {
    logic [3:0]  d;
    logic        de;
  } clkmgr_hw2reg_io_div2_meas_ctrl_en_reg_t;

  typedef struct packed {
    logic [3:0]  d;
    logic        de;
  } clkmgr_hw2reg_io_div4_meas_ctrl_en_reg_t;

  typedef struct packed {
    logic [3:0]  d;
    logic        de;
  } clkmgr_hw2reg_main_meas_ctrl_en_reg_t;

  typedef struct packed {
    logic [3:0]  d;
    logic        de;
  } clkmgr_hw2reg_usb_meas_ctrl_en_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } SHADOW_UPDATE_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } IO_MEASURE_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } IO_DIV2_MEASURE_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } IO_DIV4_MEASURE_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } MAIN_MEASURE_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } USB_MEASURE_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } IO_TIMEOUT_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } IO_DIV2_TIMEOUT_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } IO_DIV4_TIMEOUT_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } MAIN_TIMEOUT_ERR; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } USB_TIMEOUT_ERR; // field struct type2
  } clkmgr_hw2reg_recov_err_code_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } REG_INTG; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } IDLE_CNT; // field struct type2
    struct packed {
      logic        d;
      logic        de;
    } SHADOW_STORAGE_ERR; // field struct type2
  } clkmgr_hw2reg_fatal_err_code_reg_t;

  // Register -> HW type (packed registers)
  typedef struct packed {
    clkmgr_reg2hw_alert_test_reg_t ALERT_TEST; // [135:132]
    clkmgr_reg2hw_extclk_ctrl_reg_t EXTCLK_CTRL; // [131:124]
    clkmgr_reg2hw_jitter_enable_reg_t JITTER_ENABLE; // [123:120]
    clkmgr_reg2hw_clk_enables_reg_t CLK_ENABLES; // [119:117]
    clkmgr_reg2hw_clk_hints_reg_t CLK_HINTS; // [116:116]
    clkmgr_reg2hw_measure_ctrl_regwen_reg_t MEASURE_CTRL_REGWEN; // [115:115]
    clkmgr_reg2hw_io_meas_ctrl_en_reg_t IO_MEAS_CTRL_EN; // [114:111]
    clkmgr_reg2hw_io_meas_ctrl_shadowed_reg_t IO_MEAS_CTRL_SHADOWED; // [110:91]
    clkmgr_reg2hw_io_div2_meas_ctrl_en_reg_t IO_DIV2_MEAS_CTRL_EN; // [90:87]
    clkmgr_reg2hw_io_div2_meas_ctrl_shadowed_reg_t IO_DIV2_MEAS_CTRL_SHADOWED; // [86:69]
    clkmgr_reg2hw_io_div4_meas_ctrl_en_reg_t IO_DIV4_MEAS_CTRL_EN; // [68:65]
    clkmgr_reg2hw_io_div4_meas_ctrl_shadowed_reg_t IO_DIV4_MEAS_CTRL_SHADOWED; // [64:49]
    clkmgr_reg2hw_main_meas_ctrl_en_reg_t MAIN_MEAS_CTRL_EN; // [48:45]
    clkmgr_reg2hw_main_meas_ctrl_shadowed_reg_t MAIN_MEAS_CTRL_SHADOWED; // [44:25]
    clkmgr_reg2hw_usb_meas_ctrl_en_reg_t USB_MEAS_CTRL_EN; // [24:21]
    clkmgr_reg2hw_usb_meas_ctrl_shadowed_reg_t USB_MEAS_CTRL_SHADOWED; // [20:3]
    clkmgr_reg2hw_fatal_err_code_reg_t FATAL_ERR_CODE; // [2:0]
  } clkmgr_reg2hw_t;

  // HW -> register type  (packed d+de HW updates)
  typedef struct packed {
    clkmgr_hw2reg_extclk_status_reg_t EXTCLK_STATUS; // [60:57]
    clkmgr_hw2reg_clk_hints_status_reg_t CLK_HINTS_STATUS; // [56:55]
    clkmgr_hw2reg_measure_ctrl_regwen_reg_t MEASURE_CTRL_REGWEN; // [54:53]
    clkmgr_hw2reg_io_meas_ctrl_en_reg_t IO_MEAS_CTRL_EN; // [52:48]
    clkmgr_hw2reg_io_div2_meas_ctrl_en_reg_t IO_DIV2_MEAS_CTRL_EN; // [47:43]
    clkmgr_hw2reg_io_div4_meas_ctrl_en_reg_t IO_DIV4_MEAS_CTRL_EN; // [42:38]
    clkmgr_hw2reg_main_meas_ctrl_en_reg_t MAIN_MEAS_CTRL_EN; // [37:33]
    clkmgr_hw2reg_usb_meas_ctrl_en_reg_t USB_MEAS_CTRL_EN; // [32:28]
    clkmgr_hw2reg_recov_err_code_reg_t RECOV_ERR_CODE; // [27:6]
    clkmgr_hw2reg_fatal_err_code_reg_t FATAL_ERR_CODE; // [5:0]
  } clkmgr_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CLKMGR_ALERT_TEST_OFFSET = 7'h 0;
  parameter logic [BlockAw-1:0] CLKMGR_EXTCLK_CTRL_REGWEN_OFFSET = 7'h 4;
  parameter logic [BlockAw-1:0] CLKMGR_EXTCLK_CTRL_OFFSET = 7'h 8;
  parameter logic [BlockAw-1:0] CLKMGR_EXTCLK_STATUS_OFFSET = 7'h c;
  parameter logic [BlockAw-1:0] CLKMGR_JITTER_REGWEN_OFFSET = 7'h 10;
  parameter logic [BlockAw-1:0] CLKMGR_JITTER_ENABLE_OFFSET = 7'h 14;
  parameter logic [BlockAw-1:0] CLKMGR_CLK_ENABLES_OFFSET = 7'h 18;
  parameter logic [BlockAw-1:0] CLKMGR_CLK_HINTS_OFFSET = 7'h 1c;
  parameter logic [BlockAw-1:0] CLKMGR_CLK_HINTS_STATUS_OFFSET = 7'h 20;
  parameter logic [BlockAw-1:0] CLKMGR_MEASURE_CTRL_REGWEN_OFFSET = 7'h 24;
  parameter logic [BlockAw-1:0] CLKMGR_IO_MEAS_CTRL_EN_OFFSET = 7'h 28;
  parameter logic [BlockAw-1:0] CLKMGR_IO_MEAS_CTRL_SHADOWED_OFFSET = 7'h 2c;
  parameter logic [BlockAw-1:0] CLKMGR_IO_DIV2_MEAS_CTRL_EN_OFFSET = 7'h 30;
  parameter logic [BlockAw-1:0] CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_OFFSET = 7'h 34;
  parameter logic [BlockAw-1:0] CLKMGR_IO_DIV4_MEAS_CTRL_EN_OFFSET = 7'h 38;
  parameter logic [BlockAw-1:0] CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_OFFSET = 7'h 3c;
  parameter logic [BlockAw-1:0] CLKMGR_MAIN_MEAS_CTRL_EN_OFFSET = 7'h 40;
  parameter logic [BlockAw-1:0] CLKMGR_MAIN_MEAS_CTRL_SHADOWED_OFFSET = 7'h 44;
  parameter logic [BlockAw-1:0] CLKMGR_USB_MEAS_CTRL_EN_OFFSET = 7'h 48;
  parameter logic [BlockAw-1:0] CLKMGR_USB_MEAS_CTRL_SHADOWED_OFFSET = 7'h 4c;
  parameter logic [BlockAw-1:0] CLKMGR_RECOV_ERR_CODE_OFFSET = 7'h 50;
  parameter logic [BlockAw-1:0] CLKMGR_FATAL_ERR_CODE_OFFSET = 7'h 54;

  // Reset values for hwext registers and their fields
  parameter logic [1:0] CLKMGR_ALERT_TEST_RESVAL = 2'h 0;
  parameter logic [0:0] CLKMGR_ALERT_TEST_RECOV_FAULT_RESVAL = 1'h 0;
  parameter logic [0:0] CLKMGR_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;
  parameter logic [3:0] CLKMGR_EXTCLK_STATUS_RESVAL = 4'h 9;
  parameter logic [3:0] CLKMGR_EXTCLK_STATUS_ACK_RESVAL = 4'h 9;

  // Register index
  typedef enum int {
    CLKMGR_ALERT_TEST,
    CLKMGR_EXTCLK_CTRL_REGWEN,
    CLKMGR_EXTCLK_CTRL,
    CLKMGR_EXTCLK_STATUS,
    CLKMGR_JITTER_REGWEN,
    CLKMGR_JITTER_ENABLE,
    CLKMGR_CLK_ENABLES,
    CLKMGR_CLK_HINTS,
    CLKMGR_CLK_HINTS_STATUS,
    CLKMGR_MEASURE_CTRL_REGWEN,
    CLKMGR_IO_MEAS_CTRL_EN,
    CLKMGR_IO_MEAS_CTRL_SHADOWED,
    CLKMGR_IO_DIV2_MEAS_CTRL_EN,
    CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED,
    CLKMGR_IO_DIV4_MEAS_CTRL_EN,
    CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED,
    CLKMGR_MAIN_MEAS_CTRL_EN,
    CLKMGR_MAIN_MEAS_CTRL_SHADOWED,
    CLKMGR_USB_MEAS_CTRL_EN,
    CLKMGR_USB_MEAS_CTRL_SHADOWED,
    CLKMGR_RECOV_ERR_CODE,
    CLKMGR_FATAL_ERR_CODE
  } clkmgr_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CLKMGR_PERMIT [22] = '{
    4'b 0001, // index[ 0] CLKMGR_ALERT_TEST
    4'b 0001, // index[ 1] CLKMGR_EXTCLK_CTRL_REGWEN
    4'b 0001, // index[ 2] CLKMGR_EXTCLK_CTRL
    4'b 0001, // index[ 3] CLKMGR_EXTCLK_STATUS
    4'b 0001, // index[ 4] CLKMGR_JITTER_REGWEN
    4'b 0001, // index[ 5] CLKMGR_JITTER_ENABLE
    4'b 0001, // index[ 6] CLKMGR_CLK_ENABLES
    4'b 0001, // index[ 7] CLKMGR_CLK_HINTS
    4'b 0001, // index[ 8] CLKMGR_CLK_HINTS_STATUS
    4'b 0001, // index[ 9] CLKMGR_MEASURE_CTRL_REGWEN
    4'b 0001, // index[10] CLKMGR_IO_MEAS_CTRL_EN
    4'b 0111, // index[11] CLKMGR_IO_MEAS_CTRL_SHADOWED
    4'b 0001, // index[12] CLKMGR_IO_DIV2_MEAS_CTRL_EN
    4'b 0111, // index[13] CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED
    4'b 0001, // index[14] CLKMGR_IO_DIV4_MEAS_CTRL_EN
    4'b 0011, // index[15] CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED
    4'b 0001, // index[16] CLKMGR_MAIN_MEAS_CTRL_EN
    4'b 0111, // index[17] CLKMGR_MAIN_MEAS_CTRL_SHADOWED
    4'b 0001, // index[18] CLKMGR_USB_MEAS_CTRL_EN
    4'b 0111, // index[19] CLKMGR_USB_MEAS_CTRL_SHADOWED
    4'b 0011, // index[20] CLKMGR_RECOV_ERR_CODE
    4'b 0001  // index[21] CLKMGR_FATAL_ERR_CODE
  };

endpackage
