// SPDX-FileCopyrightText: Copyright (c) 2022 by Rivos Inc.
// Confidential and proprietary, see LICENSE for details.
// SPDX-License-Identifier: LicenseRef-Rivos-Internal-Only

// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module clkmgr_reg_top (
  input clk_i,
  input swWenClk,
  input hwUpdClk,
  input rst_ni,
  input deepReset_L,
  input lightReset_L,
  input rst_shadowed_ni,
  input clk_io_i,
  input rst_io_ni,
  input clk_io_div2_i,
  input rst_io_div2_ni,
  input clk_io_div4_i,
  input rst_io_div4_ni,
  input clk_main_i,
  input rst_main_ni,
  input clk_usb_i,
  input rst_usb_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output clkmgr_reg_pkg::clkmgr_reg2hw_t reg2hw, // Write
  input  clkmgr_reg_pkg::clkmgr_hw2reg_t hw2reg, // Read

  output logic shadowed_storage_err_o,
  output logic shadowed_update_err_o,

  // Integrity check errors
  output raclViol,
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import clkmgr_reg_pkg::* ;

  localparam int AW = 7;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [21:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(22)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .en_ifetch_i    (prim_mubi_pkg::MuBi4False),
    .intg_error_o   (),

    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)

  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ALERT_TEST_we;
  logic ALERT_TEST_recov_fault_wd;
  logic ALERT_TEST_fatal_fault_wd;
  logic EXTCLK_CTRL_REGWEN_we;
  logic EXTCLK_CTRL_REGWEN_qs;
  logic EXTCLK_CTRL_REGWEN_wd;
  logic EXTCLK_CTRL_we;
  logic [3:0] EXTCLK_CTRL_SEL_qs;
  logic [3:0] EXTCLK_CTRL_SEL_wd;
  logic [3:0] EXTCLK_CTRL_HI_SPEED_SEL_qs;
  logic [3:0] EXTCLK_CTRL_HI_SPEED_SEL_wd;
  logic EXTCLK_STATUS_re;
  logic [3:0] EXTCLK_STATUS_qs;
  logic JITTER_REGWEN_we;
  logic JITTER_REGWEN_qs;
  logic JITTER_REGWEN_wd;
  logic JITTER_ENABLE_we;
  logic [3:0] JITTER_ENABLE_qs;
  logic [3:0] JITTER_ENABLE_wd;
  logic CLK_ENABLES_we;
  logic CLK_ENABLES_CLK_IO_DIV4_PERI_EN_qs;
  logic CLK_ENABLES_CLK_IO_DIV4_PERI_EN_wd;
  logic CLK_ENABLES_CLK_IO_DIV2_PERI_EN_qs;
  logic CLK_ENABLES_CLK_IO_DIV2_PERI_EN_wd;
  logic CLK_ENABLES_CLK_USB_PERI_EN_qs;
  logic CLK_ENABLES_CLK_USB_PERI_EN_wd;
  logic CLK_ENABLES_CLK_IO_PERI_EN_qs;
  logic CLK_ENABLES_CLK_IO_PERI_EN_wd;
  logic CLK_HINTS_we;
  logic CLK_HINTS_CLK_MAIN_AES_HINT_qs;
  logic CLK_HINTS_CLK_MAIN_AES_HINT_wd;
  logic CLK_HINTS_CLK_MAIN_HMAC_HINT_qs;
  logic CLK_HINTS_CLK_MAIN_HMAC_HINT_wd;
  logic CLK_HINTS_CLK_MAIN_KMAC_HINT_qs;
  logic CLK_HINTS_CLK_MAIN_KMAC_HINT_wd;
  logic CLK_HINTS_CLK_MAIN_OTBN_HINT_qs;
  logic CLK_HINTS_CLK_MAIN_OTBN_HINT_wd;
  logic CLK_HINTS_STATUS_CLK_MAIN_AES_VAL_qs;
  logic CLK_HINTS_STATUS_CLK_MAIN_HMAC_VAL_qs;
  logic CLK_HINTS_STATUS_CLK_MAIN_KMAC_VAL_qs;
  logic CLK_HINTS_STATUS_CLK_MAIN_OTBN_VAL_qs;
  logic MEASURE_CTRL_REGWEN_we;
  logic MEASURE_CTRL_REGWEN_qs;
  logic MEASURE_CTRL_REGWEN_wd;
  logic IO_MEAS_CTRL_EN_we;
  logic [3:0] IO_MEAS_CTRL_EN_qs;
  logic IO_MEAS_CTRL_EN_busy;
  logic IO_MEAS_CTRL_SHADOWED_re;
  logic IO_MEAS_CTRL_SHADOWED_we;
  logic [19:0] IO_MEAS_CTRL_SHADOWED_qs;
  logic IO_MEAS_CTRL_SHADOWED_busy;
  logic IO_MEAS_CTRL_SHADOWED_HI_storage_err;
  logic IO_MEAS_CTRL_SHADOWED_HI_update_err;
  logic IO_MEAS_CTRL_SHADOWED_LO_storage_err;
  logic IO_MEAS_CTRL_SHADOWED_LO_update_err;
  logic IO_DIV2_MEAS_CTRL_EN_we;
  logic [3:0] IO_DIV2_MEAS_CTRL_EN_qs;
  logic IO_DIV2_MEAS_CTRL_EN_busy;
  logic IO_DIV2_MEAS_CTRL_SHADOWED_re;
  logic IO_DIV2_MEAS_CTRL_SHADOWED_we;
  logic [17:0] IO_DIV2_MEAS_CTRL_SHADOWED_qs;
  logic IO_DIV2_MEAS_CTRL_SHADOWED_busy;
  logic IO_DIV2_MEAS_CTRL_SHADOWED_HI_storage_err;
  logic IO_DIV2_MEAS_CTRL_SHADOWED_HI_update_err;
  logic IO_DIV2_MEAS_CTRL_SHADOWED_LO_storage_err;
  logic IO_DIV2_MEAS_CTRL_SHADOWED_LO_update_err;
  logic IO_DIV4_MEAS_CTRL_EN_we;
  logic [3:0] IO_DIV4_MEAS_CTRL_EN_qs;
  logic IO_DIV4_MEAS_CTRL_EN_busy;
  logic IO_DIV4_MEAS_CTRL_SHADOWED_re;
  logic IO_DIV4_MEAS_CTRL_SHADOWED_we;
  logic [15:0] IO_DIV4_MEAS_CTRL_SHADOWED_qs;
  logic IO_DIV4_MEAS_CTRL_SHADOWED_busy;
  logic IO_DIV4_MEAS_CTRL_SHADOWED_HI_storage_err;
  logic IO_DIV4_MEAS_CTRL_SHADOWED_HI_update_err;
  logic IO_DIV4_MEAS_CTRL_SHADOWED_LO_storage_err;
  logic IO_DIV4_MEAS_CTRL_SHADOWED_LO_update_err;
  logic MAIN_MEAS_CTRL_EN_we;
  logic [3:0] MAIN_MEAS_CTRL_EN_qs;
  logic MAIN_MEAS_CTRL_EN_busy;
  logic MAIN_MEAS_CTRL_SHADOWED_re;
  logic MAIN_MEAS_CTRL_SHADOWED_we;
  logic [19:0] MAIN_MEAS_CTRL_SHADOWED_qs;
  logic MAIN_MEAS_CTRL_SHADOWED_busy;
  logic MAIN_MEAS_CTRL_SHADOWED_HI_storage_err;
  logic MAIN_MEAS_CTRL_SHADOWED_HI_update_err;
  logic MAIN_MEAS_CTRL_SHADOWED_LO_storage_err;
  logic MAIN_MEAS_CTRL_SHADOWED_LO_update_err;
  logic USB_MEAS_CTRL_EN_we;
  logic [3:0] USB_MEAS_CTRL_EN_qs;
  logic USB_MEAS_CTRL_EN_busy;
  logic USB_MEAS_CTRL_SHADOWED_re;
  logic USB_MEAS_CTRL_SHADOWED_we;
  logic [17:0] USB_MEAS_CTRL_SHADOWED_qs;
  logic USB_MEAS_CTRL_SHADOWED_busy;
  logic USB_MEAS_CTRL_SHADOWED_HI_storage_err;
  logic USB_MEAS_CTRL_SHADOWED_HI_update_err;
  logic USB_MEAS_CTRL_SHADOWED_LO_storage_err;
  logic USB_MEAS_CTRL_SHADOWED_LO_update_err;
  logic RECOV_ERR_CODE_we;
  logic RECOV_ERR_CODE_SHADOW_UPDATE_ERR_qs;
  logic RECOV_ERR_CODE_SHADOW_UPDATE_ERR_wd;
  logic RECOV_ERR_CODE_IO_MEASURE_ERR_qs;
  logic RECOV_ERR_CODE_IO_MEASURE_ERR_wd;
  logic RECOV_ERR_CODE_IO_DIV2_MEASURE_ERR_qs;
  logic RECOV_ERR_CODE_IO_DIV2_MEASURE_ERR_wd;
  logic RECOV_ERR_CODE_IO_DIV4_MEASURE_ERR_qs;
  logic RECOV_ERR_CODE_IO_DIV4_MEASURE_ERR_wd;
  logic RECOV_ERR_CODE_MAIN_MEASURE_ERR_qs;
  logic RECOV_ERR_CODE_MAIN_MEASURE_ERR_wd;
  logic RECOV_ERR_CODE_USB_MEASURE_ERR_qs;
  logic RECOV_ERR_CODE_USB_MEASURE_ERR_wd;
  logic RECOV_ERR_CODE_IO_TIMEOUT_ERR_qs;
  logic RECOV_ERR_CODE_IO_TIMEOUT_ERR_wd;
  logic RECOV_ERR_CODE_IO_DIV2_TIMEOUT_ERR_qs;
  logic RECOV_ERR_CODE_IO_DIV2_TIMEOUT_ERR_wd;
  logic RECOV_ERR_CODE_IO_DIV4_TIMEOUT_ERR_qs;
  logic RECOV_ERR_CODE_IO_DIV4_TIMEOUT_ERR_wd;
  logic RECOV_ERR_CODE_MAIN_TIMEOUT_ERR_qs;
  logic RECOV_ERR_CODE_MAIN_TIMEOUT_ERR_wd;
  logic RECOV_ERR_CODE_USB_TIMEOUT_ERR_qs;
  logic RECOV_ERR_CODE_USB_TIMEOUT_ERR_wd;
  logic FATAL_ERR_CODE_REG_INTG_qs;
  logic FATAL_ERR_CODE_IDLE_CNT_qs;
  logic FATAL_ERR_CODE_SHADOW_STORAGE_ERR_qs;
  // Define register CDC handling.
  // CDC handling is done on a per-reg instead of per-field boundary.

  logic [3:0]  io_IO_MEAS_CTRL_EN_ds_int;
  logic [3:0]  io_IO_MEAS_CTRL_EN_qs_int;
  logic [3:0] io_IO_MEAS_CTRL_EN_ds;
  logic io_IO_MEAS_CTRL_EN_qe;
  logic [3:0] io_IO_MEAS_CTRL_EN_qs;
  logic [3:0] io_IO_MEAS_CTRL_EN_wdata;
  logic io_IO_MEAS_CTRL_EN_we;
  logic unused_io_IO_MEAS_CTRL_EN_wdata;
  logic io_IO_MEAS_CTRL_EN_regwen;

  always_comb begin
    io_IO_MEAS_CTRL_EN_qs = 4'h9;
    io_IO_MEAS_CTRL_EN_ds = 4'h9;
    io_IO_MEAS_CTRL_EN_ds = io_IO_MEAS_CTRL_EN_ds_int;
    io_IO_MEAS_CTRL_EN_qs = io_IO_MEAS_CTRL_EN_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_IO_MEAS_CTRL_EN_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_i),
    .rst_dst_ni   (rst_io_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (IO_MEAS_CTRL_EN_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (IO_MEAS_CTRL_EN_busy),
    .src_qs_o     (IO_MEAS_CTRL_EN_qs), // for software read back
    .dst_update_i (io_IO_MEAS_CTRL_EN_qe),
    .dst_ds_i     (io_IO_MEAS_CTRL_EN_ds),
    .dst_qs_i     (io_IO_MEAS_CTRL_EN_qs),
    .dst_we_o     (io_IO_MEAS_CTRL_EN_we),
    .dst_re_o     (),
    .dst_regwen_o (io_IO_MEAS_CTRL_EN_regwen),
    .dst_wd_o     (io_IO_MEAS_CTRL_EN_wdata)
  );
  assign unused_io_IO_MEAS_CTRL_EN_wdata =
      ^io_IO_MEAS_CTRL_EN_wdata;

  logic [9:0]  io_IO_MEAS_CTRL_SHADOWED_HI_qs_int;
  logic [9:0]  io_IO_MEAS_CTRL_SHADOWED_LO_qs_int;
  logic [19:0] io_IO_MEAS_CTRL_SHADOWED_qs;
  logic [19:0] io_IO_MEAS_CTRL_SHADOWED_wdata;
  logic io_IO_MEAS_CTRL_SHADOWED_we;
  logic unused_io_IO_MEAS_CTRL_SHADOWED_wdata;
  logic io_IO_MEAS_CTRL_SHADOWED_re;
  logic io_IO_MEAS_CTRL_SHADOWED_regwen;

  always_comb begin
    io_IO_MEAS_CTRL_SHADOWED_qs = 20'h759ea;
    io_IO_MEAS_CTRL_SHADOWED_qs[9:0] = io_IO_MEAS_CTRL_SHADOWED_HI_qs_int;
    io_IO_MEAS_CTRL_SHADOWED_qs[19:10] = io_IO_MEAS_CTRL_SHADOWED_LO_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(20),
    .ResetVal(20'h759ea),
    .BitMask(20'hfffff),
    .DstWrReq(0)
  ) u_IO_MEAS_CTRL_SHADOWED_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_i),
    .rst_dst_ni   (rst_io_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (IO_MEAS_CTRL_SHADOWED_we),
    .src_re_i     (IO_MEAS_CTRL_SHADOWED_re),
    .src_wd_i     (reg_wdata[19:0]),
    .src_busy_o   (IO_MEAS_CTRL_SHADOWED_busy),
    .src_qs_o     (IO_MEAS_CTRL_SHADOWED_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (io_IO_MEAS_CTRL_SHADOWED_qs),
    .dst_we_o     (io_IO_MEAS_CTRL_SHADOWED_we),
    .dst_re_o     (io_IO_MEAS_CTRL_SHADOWED_re),
    .dst_regwen_o (io_IO_MEAS_CTRL_SHADOWED_regwen),
    .dst_wd_o     (io_IO_MEAS_CTRL_SHADOWED_wdata)
  );
  assign unused_io_IO_MEAS_CTRL_SHADOWED_wdata =
      ^io_IO_MEAS_CTRL_SHADOWED_wdata;

  logic [3:0]  io_div2_IO_DIV2_MEAS_CTRL_EN_ds_int;
  logic [3:0]  io_div2_IO_DIV2_MEAS_CTRL_EN_qs_int;
  logic [3:0] io_div2_IO_DIV2_MEAS_CTRL_EN_ds;
  logic io_div2_IO_DIV2_MEAS_CTRL_EN_qe;
  logic [3:0] io_div2_IO_DIV2_MEAS_CTRL_EN_qs;
  logic [3:0] io_div2_IO_DIV2_MEAS_CTRL_EN_wdata;
  logic io_div2_IO_DIV2_MEAS_CTRL_EN_we;
  logic unused_io_div2_IO_DIV2_MEAS_CTRL_EN_wdata;
  logic io_div2_IO_DIV2_MEAS_CTRL_EN_regwen;

  always_comb begin
    io_div2_IO_DIV2_MEAS_CTRL_EN_qs = 4'h9;
    io_div2_IO_DIV2_MEAS_CTRL_EN_ds = 4'h9;
    io_div2_IO_DIV2_MEAS_CTRL_EN_ds = io_div2_IO_DIV2_MEAS_CTRL_EN_ds_int;
    io_div2_IO_DIV2_MEAS_CTRL_EN_qs = io_div2_IO_DIV2_MEAS_CTRL_EN_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_IO_DIV2_MEAS_CTRL_EN_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_div2_i),
    .rst_dst_ni   (rst_io_div2_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (IO_DIV2_MEAS_CTRL_EN_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (IO_DIV2_MEAS_CTRL_EN_busy),
    .src_qs_o     (IO_DIV2_MEAS_CTRL_EN_qs), // for software read back
    .dst_update_i (io_div2_IO_DIV2_MEAS_CTRL_EN_qe),
    .dst_ds_i     (io_div2_IO_DIV2_MEAS_CTRL_EN_ds),
    .dst_qs_i     (io_div2_IO_DIV2_MEAS_CTRL_EN_qs),
    .dst_we_o     (io_div2_IO_DIV2_MEAS_CTRL_EN_we),
    .dst_re_o     (),
    .dst_regwen_o (io_div2_IO_DIV2_MEAS_CTRL_EN_regwen),
    .dst_wd_o     (io_div2_IO_DIV2_MEAS_CTRL_EN_wdata)
  );
  assign unused_io_div2_IO_DIV2_MEAS_CTRL_EN_wdata =
      ^io_div2_IO_DIV2_MEAS_CTRL_EN_wdata;

  logic [8:0]  io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_HI_qs_int;
  logic [8:0]  io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_LO_qs_int;
  logic [17:0] io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_qs;
  logic [17:0] io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_wdata;
  logic io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_we;
  logic unused_io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_wdata;
  logic io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_re;
  logic io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_regwen;

  always_comb begin
    io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_qs = 18'h1ccfa;
    io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_qs[8:0] = io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_HI_qs_int;
    io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_qs[17:9] = io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_LO_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(18),
    .ResetVal(18'h1ccfa),
    .BitMask(18'h3ffff),
    .DstWrReq(0)
  ) u_IO_DIV2_MEAS_CTRL_SHADOWED_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_div2_i),
    .rst_dst_ni   (rst_io_div2_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (IO_DIV2_MEAS_CTRL_SHADOWED_we),
    .src_re_i     (IO_DIV2_MEAS_CTRL_SHADOWED_re),
    .src_wd_i     (reg_wdata[17:0]),
    .src_busy_o   (IO_DIV2_MEAS_CTRL_SHADOWED_busy),
    .src_qs_o     (IO_DIV2_MEAS_CTRL_SHADOWED_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_qs),
    .dst_we_o     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_we),
    .dst_re_o     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_re),
    .dst_regwen_o (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_regwen),
    .dst_wd_o     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_wdata)
  );
  assign unused_io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_wdata =
      ^io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_wdata;

  logic [3:0]  io_div4_IO_DIV4_MEAS_CTRL_EN_ds_int;
  logic [3:0]  io_div4_IO_DIV4_MEAS_CTRL_EN_qs_int;
  logic [3:0] io_div4_IO_DIV4_MEAS_CTRL_EN_ds;
  logic io_div4_IO_DIV4_MEAS_CTRL_EN_qe;
  logic [3:0] io_div4_IO_DIV4_MEAS_CTRL_EN_qs;
  logic [3:0] io_div4_IO_DIV4_MEAS_CTRL_EN_wdata;
  logic io_div4_IO_DIV4_MEAS_CTRL_EN_we;
  logic unused_io_div4_IO_DIV4_MEAS_CTRL_EN_wdata;
  logic io_div4_IO_DIV4_MEAS_CTRL_EN_regwen;

  always_comb begin
    io_div4_IO_DIV4_MEAS_CTRL_EN_qs = 4'h9;
    io_div4_IO_DIV4_MEAS_CTRL_EN_ds = 4'h9;
    io_div4_IO_DIV4_MEAS_CTRL_EN_ds = io_div4_IO_DIV4_MEAS_CTRL_EN_ds_int;
    io_div4_IO_DIV4_MEAS_CTRL_EN_qs = io_div4_IO_DIV4_MEAS_CTRL_EN_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_IO_DIV4_MEAS_CTRL_EN_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_div4_i),
    .rst_dst_ni   (rst_io_div4_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (IO_DIV4_MEAS_CTRL_EN_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (IO_DIV4_MEAS_CTRL_EN_busy),
    .src_qs_o     (IO_DIV4_MEAS_CTRL_EN_qs), // for software read back
    .dst_update_i (io_div4_IO_DIV4_MEAS_CTRL_EN_qe),
    .dst_ds_i     (io_div4_IO_DIV4_MEAS_CTRL_EN_ds),
    .dst_qs_i     (io_div4_IO_DIV4_MEAS_CTRL_EN_qs),
    .dst_we_o     (io_div4_IO_DIV4_MEAS_CTRL_EN_we),
    .dst_re_o     (),
    .dst_regwen_o (io_div4_IO_DIV4_MEAS_CTRL_EN_regwen),
    .dst_wd_o     (io_div4_IO_DIV4_MEAS_CTRL_EN_wdata)
  );
  assign unused_io_div4_IO_DIV4_MEAS_CTRL_EN_wdata =
      ^io_div4_IO_DIV4_MEAS_CTRL_EN_wdata;

  logic [7:0]  io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_HI_qs_int;
  logic [7:0]  io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_LO_qs_int;
  logic [15:0] io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_qs;
  logic [15:0] io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_wdata;
  logic io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_we;
  logic unused_io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_wdata;
  logic io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_re;
  logic io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_regwen;

  always_comb begin
    io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_qs = 16'h6e82;
    io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_qs[7:0] = io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_HI_qs_int;
    io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_qs[15:8] = io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_LO_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(16),
    .ResetVal(16'h6e82),
    .BitMask(16'hffff),
    .DstWrReq(0)
  ) u_IO_DIV4_MEAS_CTRL_SHADOWED_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_div4_i),
    .rst_dst_ni   (rst_io_div4_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (IO_DIV4_MEAS_CTRL_SHADOWED_we),
    .src_re_i     (IO_DIV4_MEAS_CTRL_SHADOWED_re),
    .src_wd_i     (reg_wdata[15:0]),
    .src_busy_o   (IO_DIV4_MEAS_CTRL_SHADOWED_busy),
    .src_qs_o     (IO_DIV4_MEAS_CTRL_SHADOWED_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_qs),
    .dst_we_o     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_we),
    .dst_re_o     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_re),
    .dst_regwen_o (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_regwen),
    .dst_wd_o     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_wdata)
  );
  assign unused_io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_wdata =
      ^io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_wdata;

  logic [3:0]  main_MAIN_MEAS_CTRL_EN_ds_int;
  logic [3:0]  main_MAIN_MEAS_CTRL_EN_qs_int;
  logic [3:0] main_MAIN_MEAS_CTRL_EN_ds;
  logic main_MAIN_MEAS_CTRL_EN_qe;
  logic [3:0] main_MAIN_MEAS_CTRL_EN_qs;
  logic [3:0] main_MAIN_MEAS_CTRL_EN_wdata;
  logic main_MAIN_MEAS_CTRL_EN_we;
  logic unused_main_MAIN_MEAS_CTRL_EN_wdata;
  logic main_MAIN_MEAS_CTRL_EN_regwen;

  always_comb begin
    main_MAIN_MEAS_CTRL_EN_qs = 4'h9;
    main_MAIN_MEAS_CTRL_EN_ds = 4'h9;
    main_MAIN_MEAS_CTRL_EN_ds = main_MAIN_MEAS_CTRL_EN_ds_int;
    main_MAIN_MEAS_CTRL_EN_qs = main_MAIN_MEAS_CTRL_EN_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_MAIN_MEAS_CTRL_EN_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_main_i),
    .rst_dst_ni   (rst_main_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (MAIN_MEAS_CTRL_EN_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (MAIN_MEAS_CTRL_EN_busy),
    .src_qs_o     (MAIN_MEAS_CTRL_EN_qs), // for software read back
    .dst_update_i (main_MAIN_MEAS_CTRL_EN_qe),
    .dst_ds_i     (main_MAIN_MEAS_CTRL_EN_ds),
    .dst_qs_i     (main_MAIN_MEAS_CTRL_EN_qs),
    .dst_we_o     (main_MAIN_MEAS_CTRL_EN_we),
    .dst_re_o     (),
    .dst_regwen_o (main_MAIN_MEAS_CTRL_EN_regwen),
    .dst_wd_o     (main_MAIN_MEAS_CTRL_EN_wdata)
  );
  assign unused_main_MAIN_MEAS_CTRL_EN_wdata =
      ^main_MAIN_MEAS_CTRL_EN_wdata;

  logic [9:0]  main_MAIN_MEAS_CTRL_SHADOWED_HI_qs_int;
  logic [9:0]  main_MAIN_MEAS_CTRL_SHADOWED_LO_qs_int;
  logic [19:0] main_MAIN_MEAS_CTRL_SHADOWED_qs;
  logic [19:0] main_MAIN_MEAS_CTRL_SHADOWED_wdata;
  logic main_MAIN_MEAS_CTRL_SHADOWED_we;
  logic unused_main_MAIN_MEAS_CTRL_SHADOWED_wdata;
  logic main_MAIN_MEAS_CTRL_SHADOWED_re;
  logic main_MAIN_MEAS_CTRL_SHADOWED_regwen;

  always_comb begin
    main_MAIN_MEAS_CTRL_SHADOWED_qs = 20'h7a9fe;
    main_MAIN_MEAS_CTRL_SHADOWED_qs[9:0] = main_MAIN_MEAS_CTRL_SHADOWED_HI_qs_int;
    main_MAIN_MEAS_CTRL_SHADOWED_qs[19:10] = main_MAIN_MEAS_CTRL_SHADOWED_LO_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(20),
    .ResetVal(20'h7a9fe),
    .BitMask(20'hfffff),
    .DstWrReq(0)
  ) u_MAIN_MEAS_CTRL_SHADOWED_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_main_i),
    .rst_dst_ni   (rst_main_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (MAIN_MEAS_CTRL_SHADOWED_we),
    .src_re_i     (MAIN_MEAS_CTRL_SHADOWED_re),
    .src_wd_i     (reg_wdata[19:0]),
    .src_busy_o   (MAIN_MEAS_CTRL_SHADOWED_busy),
    .src_qs_o     (MAIN_MEAS_CTRL_SHADOWED_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (main_MAIN_MEAS_CTRL_SHADOWED_qs),
    .dst_we_o     (main_MAIN_MEAS_CTRL_SHADOWED_we),
    .dst_re_o     (main_MAIN_MEAS_CTRL_SHADOWED_re),
    .dst_regwen_o (main_MAIN_MEAS_CTRL_SHADOWED_regwen),
    .dst_wd_o     (main_MAIN_MEAS_CTRL_SHADOWED_wdata)
  );
  assign unused_main_MAIN_MEAS_CTRL_SHADOWED_wdata =
      ^main_MAIN_MEAS_CTRL_SHADOWED_wdata;

  logic [3:0]  usb_USB_MEAS_CTRL_EN_ds_int;
  logic [3:0]  usb_USB_MEAS_CTRL_EN_qs_int;
  logic [3:0] usb_USB_MEAS_CTRL_EN_ds;
  logic usb_USB_MEAS_CTRL_EN_qe;
  logic [3:0] usb_USB_MEAS_CTRL_EN_qs;
  logic [3:0] usb_USB_MEAS_CTRL_EN_wdata;
  logic usb_USB_MEAS_CTRL_EN_we;
  logic unused_usb_USB_MEAS_CTRL_EN_wdata;
  logic usb_USB_MEAS_CTRL_EN_regwen;

  always_comb begin
    usb_USB_MEAS_CTRL_EN_qs = 4'h9;
    usb_USB_MEAS_CTRL_EN_ds = 4'h9;
    usb_USB_MEAS_CTRL_EN_ds = usb_USB_MEAS_CTRL_EN_ds_int;
    usb_USB_MEAS_CTRL_EN_qs = usb_USB_MEAS_CTRL_EN_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_USB_MEAS_CTRL_EN_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_usb_i),
    .rst_dst_ni   (rst_usb_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (USB_MEAS_CTRL_EN_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (USB_MEAS_CTRL_EN_busy),
    .src_qs_o     (USB_MEAS_CTRL_EN_qs), // for software read back
    .dst_update_i (usb_USB_MEAS_CTRL_EN_qe),
    .dst_ds_i     (usb_USB_MEAS_CTRL_EN_ds),
    .dst_qs_i     (usb_USB_MEAS_CTRL_EN_qs),
    .dst_we_o     (usb_USB_MEAS_CTRL_EN_we),
    .dst_re_o     (),
    .dst_regwen_o (usb_USB_MEAS_CTRL_EN_regwen),
    .dst_wd_o     (usb_USB_MEAS_CTRL_EN_wdata)
  );
  assign unused_usb_USB_MEAS_CTRL_EN_wdata =
      ^usb_USB_MEAS_CTRL_EN_wdata;

  logic [8:0]  usb_USB_MEAS_CTRL_SHADOWED_HI_qs_int;
  logic [8:0]  usb_USB_MEAS_CTRL_SHADOWED_LO_qs_int;
  logic [17:0] usb_USB_MEAS_CTRL_SHADOWED_qs;
  logic [17:0] usb_USB_MEAS_CTRL_SHADOWED_wdata;
  logic usb_USB_MEAS_CTRL_SHADOWED_we;
  logic unused_usb_USB_MEAS_CTRL_SHADOWED_wdata;
  logic usb_USB_MEAS_CTRL_SHADOWED_re;
  logic usb_USB_MEAS_CTRL_SHADOWED_regwen;

  always_comb begin
    usb_USB_MEAS_CTRL_SHADOWED_qs = 18'h1ccfa;
    usb_USB_MEAS_CTRL_SHADOWED_qs[8:0] = usb_USB_MEAS_CTRL_SHADOWED_HI_qs_int;
    usb_USB_MEAS_CTRL_SHADOWED_qs[17:9] = usb_USB_MEAS_CTRL_SHADOWED_LO_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(18),
    .ResetVal(18'h1ccfa),
    .BitMask(18'h3ffff),
    .DstWrReq(0)
  ) u_USB_MEAS_CTRL_SHADOWED_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_usb_i),
    .rst_dst_ni   (rst_usb_ni),
    .src_regwen_i (MEASURE_CTRL_REGWEN_qs),
    .src_we_i     (USB_MEAS_CTRL_SHADOWED_we),
    .src_re_i     (USB_MEAS_CTRL_SHADOWED_re),
    .src_wd_i     (reg_wdata[17:0]),
    .src_busy_o   (USB_MEAS_CTRL_SHADOWED_busy),
    .src_qs_o     (USB_MEAS_CTRL_SHADOWED_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (usb_USB_MEAS_CTRL_SHADOWED_qs),
    .dst_we_o     (usb_USB_MEAS_CTRL_SHADOWED_we),
    .dst_re_o     (usb_USB_MEAS_CTRL_SHADOWED_re),
    .dst_regwen_o (usb_USB_MEAS_CTRL_SHADOWED_regwen),
    .dst_wd_o     (usb_USB_MEAS_CTRL_SHADOWED_wdata)
  );
  assign unused_usb_USB_MEAS_CTRL_SHADOWED_wdata =
      ^usb_USB_MEAS_CTRL_SHADOWED_wdata;

  // Register instances
  // R[ALERT_TEST]: V(True)
  logic ALERT_TEST_qe;
  logic [1:0] ALERT_TEST_flds_we;
  assign ALERT_TEST_qe = |ALERT_TEST_flds_we; //  Rivos: &*_we --> |*_we
  //   F[recov_fault]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_ALERT_TEST_recov_fault (
    .re     (1'b0),
    .we     (ALERT_TEST_we),
    .wd     (ALERT_TEST_recov_fault_wd),
    .d      ('0),
    .qre    (),
    .qe     (ALERT_TEST_flds_we[0]),
    .q      (reg2hw.ALERT_TEST.recov_fault.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.ALERT_TEST.recov_fault.qe = ALERT_TEST_qe;

  //   F[fatal_fault]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_ALERT_TEST_fatal_fault (
    .re     (1'b0),
    .we     (ALERT_TEST_we),
    .wd     (ALERT_TEST_fatal_fault_wd),
    .d      ('0),
    .qre    (),
    .qe     (ALERT_TEST_flds_we[1]),
    .q      (reg2hw.ALERT_TEST.fatal_fault.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.ALERT_TEST.fatal_fault.qe = ALERT_TEST_qe;


  // R[EXTCLK_CTRL_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_EXTCLK_CTRL_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (EXTCLK_CTRL_REGWEN_we),
    .wd     (EXTCLK_CTRL_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (EXTCLK_CTRL_REGWEN_qs)
  );


  // R[EXTCLK_CTRL]: V(False)
  // Create REGWEN-gated WE signal
  logic EXTCLK_CTRL_gated_we;
  assign EXTCLK_CTRL_gated_we = EXTCLK_CTRL_we & EXTCLK_CTRL_REGWEN_qs;
  //   F[SEL]: 3:0


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_EXTCLK_CTRL_SEL (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (EXTCLK_CTRL_gated_we),
    .wd     (EXTCLK_CTRL_SEL_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.EXTCLK_CTRL.SEL.q),
    .ds     (),

    // to register interface (read)
    .qs     (EXTCLK_CTRL_SEL_qs)
  );

  //   F[HI_SPEED_SEL]: 7:4


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_EXTCLK_CTRL_HI_SPEED_SEL (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (EXTCLK_CTRL_gated_we),
    .wd     (EXTCLK_CTRL_HI_SPEED_SEL_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.EXTCLK_CTRL.HI_SPEED_SEL.q),
    .ds     (),

    // to register interface (read)
    .qs     (EXTCLK_CTRL_HI_SPEED_SEL_qs)
  );


  // R[EXTCLK_STATUS]: V(True)
  prim_subreg_ext #(
    .DW    (4)
  ) u_EXTCLK_STATUS (
    .re     (EXTCLK_STATUS_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.EXTCLK_STATUS.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (EXTCLK_STATUS_qs)
  );


  // R[JITTER_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_JITTER_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (JITTER_REGWEN_we),
    .wd     (JITTER_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (JITTER_REGWEN_qs)
  );


  // R[JITTER_ENABLE]: V(False)


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_JITTER_ENABLE (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (JITTER_ENABLE_we),
    .wd     (JITTER_ENABLE_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.JITTER_ENABLE.q),
    .ds     (),

    // to register interface (read)
    .qs     (JITTER_ENABLE_qs)
  );


  // R[CLK_ENABLES]: V(False)
  //   F[CLK_IO_DIV4_PERI_EN]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLK_ENABLES_CLK_IO_DIV4_PERI_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLK_ENABLES_we),
    .wd     (CLK_ENABLES_CLK_IO_DIV4_PERI_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLK_ENABLES.CLK_IO_DIV4_PERI_EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_ENABLES_CLK_IO_DIV4_PERI_EN_qs)
  );

  //   F[CLK_IO_DIV2_PERI_EN]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLK_ENABLES_CLK_IO_DIV2_PERI_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLK_ENABLES_we),
    .wd     (CLK_ENABLES_CLK_IO_DIV2_PERI_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLK_ENABLES.CLK_IO_DIV2_PERI_EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_ENABLES_CLK_IO_DIV2_PERI_EN_qs)
  );

  //   F[CLK_USB_PERI_EN]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLK_ENABLES_CLK_USB_PERI_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLK_ENABLES_we),
    .wd     (CLK_ENABLES_CLK_USB_PERI_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLK_ENABLES.CLK_USB_PERI_EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_ENABLES_CLK_USB_PERI_EN_qs)
  );

  //   F[CLK_IO_PERI_EN]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLK_ENABLES_CLK_IO_PERI_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLK_ENABLES_we),
    .wd     (CLK_ENABLES_CLK_IO_PERI_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLK_ENABLES.CLK_IO_PERI_EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_ENABLES_CLK_IO_PERI_EN_qs)
  );


  // R[CLK_HINTS]: V(False)
  //   F[CLK_MAIN_AES_HINT]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLK_HINTS_CLK_MAIN_AES_HINT (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLK_HINTS_we),
    .wd     (CLK_HINTS_CLK_MAIN_AES_HINT_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLK_HINTS.CLK_MAIN_AES_HINT.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_HINTS_CLK_MAIN_AES_HINT_qs)
  );

  //   F[CLK_MAIN_HMAC_HINT]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLK_HINTS_CLK_MAIN_HMAC_HINT (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLK_HINTS_we),
    .wd     (CLK_HINTS_CLK_MAIN_HMAC_HINT_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLK_HINTS.CLK_MAIN_HMAC_HINT.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_HINTS_CLK_MAIN_HMAC_HINT_qs)
  );

  //   F[CLK_MAIN_KMAC_HINT]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLK_HINTS_CLK_MAIN_KMAC_HINT (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLK_HINTS_we),
    .wd     (CLK_HINTS_CLK_MAIN_KMAC_HINT_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLK_HINTS.CLK_MAIN_KMAC_HINT.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_HINTS_CLK_MAIN_KMAC_HINT_qs)
  );

  //   F[CLK_MAIN_OTBN_HINT]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLK_HINTS_CLK_MAIN_OTBN_HINT (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLK_HINTS_we),
    .wd     (CLK_HINTS_CLK_MAIN_OTBN_HINT_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLK_HINTS.CLK_MAIN_OTBN_HINT.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_HINTS_CLK_MAIN_OTBN_HINT_qs)
  );


  // R[CLK_HINTS_STATUS]: V(False)
  //   F[CLK_MAIN_AES_VAL]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_CLK_HINTS_STATUS_CLK_MAIN_AES_VAL (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.CLK_HINTS_STATUS.CLK_MAIN_AES_VAL.de),
    .d      (hw2reg.CLK_HINTS_STATUS.CLK_MAIN_AES_VAL.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_HINTS_STATUS_CLK_MAIN_AES_VAL_qs)
  );

  //   F[CLK_MAIN_HMAC_VAL]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_CLK_HINTS_STATUS_CLK_MAIN_HMAC_VAL (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.CLK_HINTS_STATUS.CLK_MAIN_HMAC_VAL.de),
    .d      (hw2reg.CLK_HINTS_STATUS.CLK_MAIN_HMAC_VAL.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_HINTS_STATUS_CLK_MAIN_HMAC_VAL_qs)
  );

  //   F[CLK_MAIN_KMAC_VAL]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_CLK_HINTS_STATUS_CLK_MAIN_KMAC_VAL (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.CLK_HINTS_STATUS.CLK_MAIN_KMAC_VAL.de),
    .d      (hw2reg.CLK_HINTS_STATUS.CLK_MAIN_KMAC_VAL.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_HINTS_STATUS_CLK_MAIN_KMAC_VAL_qs)
  );

  //   F[CLK_MAIN_OTBN_VAL]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_CLK_HINTS_STATUS_CLK_MAIN_OTBN_VAL (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.CLK_HINTS_STATUS.CLK_MAIN_OTBN_VAL.de),
    .d      (hw2reg.CLK_HINTS_STATUS.CLK_MAIN_OTBN_VAL.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLK_HINTS_STATUS_CLK_MAIN_OTBN_VAL_qs)
  );


  // R[MEASURE_CTRL_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MEASURE_CTRL_REGWEN (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MEASURE_CTRL_REGWEN_we),
    .wd     (MEASURE_CTRL_REGWEN_wd),

    // from internal hardware
    .de     (hw2reg.MEASURE_CTRL_REGWEN.de),
    .d      (hw2reg.MEASURE_CTRL_REGWEN.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MEASURE_CTRL_REGWEN.q),
    .ds     (),

    // to register interface (read)
    .qs     (MEASURE_CTRL_REGWEN_qs)
  );


  // R[IO_MEAS_CTRL_EN]: V(False)
  logic [0:0] IO_MEAS_CTRL_EN_flds_we;
  assign io_IO_MEAS_CTRL_EN_qe = |IO_MEAS_CTRL_EN_flds_we;
  // Create REGWEN-gated WE signal
  logic io_IO_MEAS_CTRL_EN_gated_we;
  assign io_IO_MEAS_CTRL_EN_gated_we = io_IO_MEAS_CTRL_EN_we & io_IO_MEAS_CTRL_EN_regwen;


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_IO_MEAS_CTRL_EN (
    .clk_i   (hwUpdClk), // OT: clk_io_i
    .rst_ni  (rst_io_ni), // OT: rst_io_ni

    // from register interface
    .we     (io_IO_MEAS_CTRL_EN_gated_we),
    .wd     (io_IO_MEAS_CTRL_EN_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.IO_MEAS_CTRL_EN.de),
    .d      (hw2reg.IO_MEAS_CTRL_EN.d),

    // to internal hardware
    .qe     (IO_MEAS_CTRL_EN_flds_we[0]),
    .q      (reg2hw.IO_MEAS_CTRL_EN.q),
    .ds     (io_IO_MEAS_CTRL_EN_ds_int),

    // to register interface (read)
    .qs     (io_IO_MEAS_CTRL_EN_qs_int)
  );


  // R[IO_MEAS_CTRL_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic io_IO_MEAS_CTRL_SHADOWED_gated_we;
  assign io_IO_MEAS_CTRL_SHADOWED_gated_we =
    io_IO_MEAS_CTRL_SHADOWED_we & io_IO_MEAS_CTRL_SHADOWED_regwen;
  //   F[HI]: 9:0
  logic async_IO_MEAS_CTRL_SHADOWED_HI_err_update;
  logic async_IO_MEAS_CTRL_SHADOWED_HI_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_IO_MEAS_CTRL_SHADOWED_HI_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_IO_MEAS_CTRL_SHADOWED_HI_err_storage),
    .q_o(IO_MEAS_CTRL_SHADOWED_HI_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_IO_MEAS_CTRL_SHADOWED_HI_err_update_sync (
    .clk_src_i(clk_io_i),
    .rst_src_ni(rst_io_ni),
    .src_pulse_i(async_IO_MEAS_CTRL_SHADOWED_HI_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(IO_MEAS_CTRL_SHADOWED_HI_update_err)
  );


  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h1ea)
  ) u_IO_MEAS_CTRL_SHADOWED_HI (
    .clk_i   (swWenClk), // OT: clk_io_i
    .rst_ni  (rst_io_ni), // OT: rst_io_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_IO_MEAS_CTRL_SHADOWED_re),
    .we     (io_IO_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (io_IO_MEAS_CTRL_SHADOWED_wdata[9:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.IO_MEAS_CTRL_SHADOWED.HI.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_IO_MEAS_CTRL_SHADOWED_HI_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_IO_MEAS_CTRL_SHADOWED_HI_err_update),
    .err_storage (async_IO_MEAS_CTRL_SHADOWED_HI_err_storage)
  );

  //   F[LO]: 19:10
  logic async_IO_MEAS_CTRL_SHADOWED_LO_err_update;
  logic async_IO_MEAS_CTRL_SHADOWED_LO_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_IO_MEAS_CTRL_SHADOWED_LO_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_IO_MEAS_CTRL_SHADOWED_LO_err_storage),
    .q_o(IO_MEAS_CTRL_SHADOWED_LO_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_IO_MEAS_CTRL_SHADOWED_LO_err_update_sync (
    .clk_src_i(clk_io_i),
    .rst_src_ni(rst_io_ni),
    .src_pulse_i(async_IO_MEAS_CTRL_SHADOWED_LO_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(IO_MEAS_CTRL_SHADOWED_LO_update_err)
  );


  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h1d6)
  ) u_IO_MEAS_CTRL_SHADOWED_LO (
    .clk_i   (swWenClk), // OT: clk_io_i
    .rst_ni  (rst_io_ni), // OT: rst_io_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_IO_MEAS_CTRL_SHADOWED_re),
    .we     (io_IO_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (io_IO_MEAS_CTRL_SHADOWED_wdata[19:10]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.IO_MEAS_CTRL_SHADOWED.LO.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_IO_MEAS_CTRL_SHADOWED_LO_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_IO_MEAS_CTRL_SHADOWED_LO_err_update),
    .err_storage (async_IO_MEAS_CTRL_SHADOWED_LO_err_storage)
  );


  // R[IO_DIV2_MEAS_CTRL_EN]: V(False)
  logic [0:0] IO_DIV2_MEAS_CTRL_EN_flds_we;
  assign io_div2_IO_DIV2_MEAS_CTRL_EN_qe = |IO_DIV2_MEAS_CTRL_EN_flds_we;
  // Create REGWEN-gated WE signal
  logic io_div2_IO_DIV2_MEAS_CTRL_EN_gated_we;
  assign io_div2_IO_DIV2_MEAS_CTRL_EN_gated_we =
    io_div2_IO_DIV2_MEAS_CTRL_EN_we & io_div2_IO_DIV2_MEAS_CTRL_EN_regwen;


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_IO_DIV2_MEAS_CTRL_EN (
    .clk_i   (hwUpdClk), // OT: clk_io_div2_i
    .rst_ni  (rst_io_div2_ni), // OT: rst_io_div2_ni

    // from register interface
    .we     (io_div2_IO_DIV2_MEAS_CTRL_EN_gated_we),
    .wd     (io_div2_IO_DIV2_MEAS_CTRL_EN_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.IO_DIV2_MEAS_CTRL_EN.de),
    .d      (hw2reg.IO_DIV2_MEAS_CTRL_EN.d),

    // to internal hardware
    .qe     (IO_DIV2_MEAS_CTRL_EN_flds_we[0]),
    .q      (reg2hw.IO_DIV2_MEAS_CTRL_EN.q),
    .ds     (io_div2_IO_DIV2_MEAS_CTRL_EN_ds_int),

    // to register interface (read)
    .qs     (io_div2_IO_DIV2_MEAS_CTRL_EN_qs_int)
  );


  // R[IO_DIV2_MEAS_CTRL_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_gated_we;
  assign io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_gated_we =
    io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_we & io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_regwen;
  //   F[HI]: 8:0
  logic async_IO_DIV2_MEAS_CTRL_SHADOWED_HI_err_update;
  logic async_IO_DIV2_MEAS_CTRL_SHADOWED_HI_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_IO_DIV2_MEAS_CTRL_SHADOWED_HI_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_IO_DIV2_MEAS_CTRL_SHADOWED_HI_err_storage),
    .q_o(IO_DIV2_MEAS_CTRL_SHADOWED_HI_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_IO_DIV2_MEAS_CTRL_SHADOWED_HI_err_update_sync (
    .clk_src_i(clk_io_div2_i),
    .rst_src_ni(rst_io_div2_ni),
    .src_pulse_i(async_IO_DIV2_MEAS_CTRL_SHADOWED_HI_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(IO_DIV2_MEAS_CTRL_SHADOWED_HI_update_err)
  );


  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'hfa)
  ) u_IO_DIV2_MEAS_CTRL_SHADOWED_HI (
    .clk_i   (swWenClk), // OT: clk_io_div2_i
    .rst_ni  (rst_io_div2_ni), // OT: rst_io_div2_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_re),
    .we     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_wdata[8:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.IO_DIV2_MEAS_CTRL_SHADOWED.HI.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_HI_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_IO_DIV2_MEAS_CTRL_SHADOWED_HI_err_update),
    .err_storage (async_IO_DIV2_MEAS_CTRL_SHADOWED_HI_err_storage)
  );

  //   F[LO]: 17:9
  logic async_IO_DIV2_MEAS_CTRL_SHADOWED_LO_err_update;
  logic async_IO_DIV2_MEAS_CTRL_SHADOWED_LO_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_IO_DIV2_MEAS_CTRL_SHADOWED_LO_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_IO_DIV2_MEAS_CTRL_SHADOWED_LO_err_storage),
    .q_o(IO_DIV2_MEAS_CTRL_SHADOWED_LO_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_IO_DIV2_MEAS_CTRL_SHADOWED_LO_err_update_sync (
    .clk_src_i(clk_io_div2_i),
    .rst_src_ni(rst_io_div2_ni),
    .src_pulse_i(async_IO_DIV2_MEAS_CTRL_SHADOWED_LO_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(IO_DIV2_MEAS_CTRL_SHADOWED_LO_update_err)
  );


  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'he6)
  ) u_IO_DIV2_MEAS_CTRL_SHADOWED_LO (
    .clk_i   (swWenClk), // OT: clk_io_div2_i
    .rst_ni  (rst_io_div2_ni), // OT: rst_io_div2_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_re),
    .we     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_wdata[17:9]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.IO_DIV2_MEAS_CTRL_SHADOWED.LO.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_div2_IO_DIV2_MEAS_CTRL_SHADOWED_LO_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_IO_DIV2_MEAS_CTRL_SHADOWED_LO_err_update),
    .err_storage (async_IO_DIV2_MEAS_CTRL_SHADOWED_LO_err_storage)
  );


  // R[IO_DIV4_MEAS_CTRL_EN]: V(False)
  logic [0:0] IO_DIV4_MEAS_CTRL_EN_flds_we;
  assign io_div4_IO_DIV4_MEAS_CTRL_EN_qe = |IO_DIV4_MEAS_CTRL_EN_flds_we;
  // Create REGWEN-gated WE signal
  logic io_div4_IO_DIV4_MEAS_CTRL_EN_gated_we;
  assign io_div4_IO_DIV4_MEAS_CTRL_EN_gated_we =
    io_div4_IO_DIV4_MEAS_CTRL_EN_we & io_div4_IO_DIV4_MEAS_CTRL_EN_regwen;


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_IO_DIV4_MEAS_CTRL_EN (
    .clk_i   (hwUpdClk), // OT: clk_io_div4_i
    .rst_ni  (rst_io_div4_ni), // OT: rst_io_div4_ni

    // from register interface
    .we     (io_div4_IO_DIV4_MEAS_CTRL_EN_gated_we),
    .wd     (io_div4_IO_DIV4_MEAS_CTRL_EN_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.IO_DIV4_MEAS_CTRL_EN.de),
    .d      (hw2reg.IO_DIV4_MEAS_CTRL_EN.d),

    // to internal hardware
    .qe     (IO_DIV4_MEAS_CTRL_EN_flds_we[0]),
    .q      (reg2hw.IO_DIV4_MEAS_CTRL_EN.q),
    .ds     (io_div4_IO_DIV4_MEAS_CTRL_EN_ds_int),

    // to register interface (read)
    .qs     (io_div4_IO_DIV4_MEAS_CTRL_EN_qs_int)
  );


  // R[IO_DIV4_MEAS_CTRL_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_gated_we;
  assign io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_gated_we =
    io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_we & io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_regwen;
  //   F[HI]: 7:0
  logic async_IO_DIV4_MEAS_CTRL_SHADOWED_HI_err_update;
  logic async_IO_DIV4_MEAS_CTRL_SHADOWED_HI_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_IO_DIV4_MEAS_CTRL_SHADOWED_HI_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_IO_DIV4_MEAS_CTRL_SHADOWED_HI_err_storage),
    .q_o(IO_DIV4_MEAS_CTRL_SHADOWED_HI_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_IO_DIV4_MEAS_CTRL_SHADOWED_HI_err_update_sync (
    .clk_src_i(clk_io_div4_i),
    .rst_src_ni(rst_io_div4_ni),
    .src_pulse_i(async_IO_DIV4_MEAS_CTRL_SHADOWED_HI_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(IO_DIV4_MEAS_CTRL_SHADOWED_HI_update_err)
  );


  prim_subreg_shadow #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h82)
  ) u_IO_DIV4_MEAS_CTRL_SHADOWED_HI (
    .clk_i   (swWenClk), // OT: clk_io_div4_i
    .rst_ni  (rst_io_div4_ni), // OT: rst_io_div4_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_re),
    .we     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.IO_DIV4_MEAS_CTRL_SHADOWED.HI.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_HI_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_IO_DIV4_MEAS_CTRL_SHADOWED_HI_err_update),
    .err_storage (async_IO_DIV4_MEAS_CTRL_SHADOWED_HI_err_storage)
  );

  //   F[LO]: 15:8
  logic async_IO_DIV4_MEAS_CTRL_SHADOWED_LO_err_update;
  logic async_IO_DIV4_MEAS_CTRL_SHADOWED_LO_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_IO_DIV4_MEAS_CTRL_SHADOWED_LO_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_IO_DIV4_MEAS_CTRL_SHADOWED_LO_err_storage),
    .q_o(IO_DIV4_MEAS_CTRL_SHADOWED_LO_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_IO_DIV4_MEAS_CTRL_SHADOWED_LO_err_update_sync (
    .clk_src_i(clk_io_div4_i),
    .rst_src_ni(rst_io_div4_ni),
    .src_pulse_i(async_IO_DIV4_MEAS_CTRL_SHADOWED_LO_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(IO_DIV4_MEAS_CTRL_SHADOWED_LO_update_err)
  );


  prim_subreg_shadow #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h6e)
  ) u_IO_DIV4_MEAS_CTRL_SHADOWED_LO (
    .clk_i   (swWenClk), // OT: clk_io_div4_i
    .rst_ni  (rst_io_div4_ni), // OT: rst_io_div4_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_re),
    .we     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_wdata[15:8]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.IO_DIV4_MEAS_CTRL_SHADOWED.LO.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_div4_IO_DIV4_MEAS_CTRL_SHADOWED_LO_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_IO_DIV4_MEAS_CTRL_SHADOWED_LO_err_update),
    .err_storage (async_IO_DIV4_MEAS_CTRL_SHADOWED_LO_err_storage)
  );


  // R[MAIN_MEAS_CTRL_EN]: V(False)
  logic [0:0] MAIN_MEAS_CTRL_EN_flds_we;
  assign main_MAIN_MEAS_CTRL_EN_qe = |MAIN_MEAS_CTRL_EN_flds_we;
  // Create REGWEN-gated WE signal
  logic main_MAIN_MEAS_CTRL_EN_gated_we;
  assign main_MAIN_MEAS_CTRL_EN_gated_we =
    main_MAIN_MEAS_CTRL_EN_we & main_MAIN_MEAS_CTRL_EN_regwen;


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_MAIN_MEAS_CTRL_EN (
    .clk_i   (hwUpdClk), // OT: clk_main_i
    .rst_ni  (rst_main_ni), // OT: rst_main_ni

    // from register interface
    .we     (main_MAIN_MEAS_CTRL_EN_gated_we),
    .wd     (main_MAIN_MEAS_CTRL_EN_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.MAIN_MEAS_CTRL_EN.de),
    .d      (hw2reg.MAIN_MEAS_CTRL_EN.d),

    // to internal hardware
    .qe     (MAIN_MEAS_CTRL_EN_flds_we[0]),
    .q      (reg2hw.MAIN_MEAS_CTRL_EN.q),
    .ds     (main_MAIN_MEAS_CTRL_EN_ds_int),

    // to register interface (read)
    .qs     (main_MAIN_MEAS_CTRL_EN_qs_int)
  );


  // R[MAIN_MEAS_CTRL_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic main_MAIN_MEAS_CTRL_SHADOWED_gated_we;
  assign main_MAIN_MEAS_CTRL_SHADOWED_gated_we =
    main_MAIN_MEAS_CTRL_SHADOWED_we & main_MAIN_MEAS_CTRL_SHADOWED_regwen;
  //   F[HI]: 9:0
  logic async_MAIN_MEAS_CTRL_SHADOWED_HI_err_update;
  logic async_MAIN_MEAS_CTRL_SHADOWED_HI_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_MAIN_MEAS_CTRL_SHADOWED_HI_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_MAIN_MEAS_CTRL_SHADOWED_HI_err_storage),
    .q_o(MAIN_MEAS_CTRL_SHADOWED_HI_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_MAIN_MEAS_CTRL_SHADOWED_HI_err_update_sync (
    .clk_src_i(clk_main_i),
    .rst_src_ni(rst_main_ni),
    .src_pulse_i(async_MAIN_MEAS_CTRL_SHADOWED_HI_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(MAIN_MEAS_CTRL_SHADOWED_HI_update_err)
  );


  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h1fe)
  ) u_MAIN_MEAS_CTRL_SHADOWED_HI (
    .clk_i   (swWenClk), // OT: clk_main_i
    .rst_ni  (rst_main_ni), // OT: rst_main_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (main_MAIN_MEAS_CTRL_SHADOWED_re),
    .we     (main_MAIN_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (main_MAIN_MEAS_CTRL_SHADOWED_wdata[9:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MAIN_MEAS_CTRL_SHADOWED.HI.q),
    .ds     (),

    // to register interface (read)
    .qs     (main_MAIN_MEAS_CTRL_SHADOWED_HI_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_MAIN_MEAS_CTRL_SHADOWED_HI_err_update),
    .err_storage (async_MAIN_MEAS_CTRL_SHADOWED_HI_err_storage)
  );

  //   F[LO]: 19:10
  logic async_MAIN_MEAS_CTRL_SHADOWED_LO_err_update;
  logic async_MAIN_MEAS_CTRL_SHADOWED_LO_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_MAIN_MEAS_CTRL_SHADOWED_LO_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_MAIN_MEAS_CTRL_SHADOWED_LO_err_storage),
    .q_o(MAIN_MEAS_CTRL_SHADOWED_LO_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_MAIN_MEAS_CTRL_SHADOWED_LO_err_update_sync (
    .clk_src_i(clk_main_i),
    .rst_src_ni(rst_main_ni),
    .src_pulse_i(async_MAIN_MEAS_CTRL_SHADOWED_LO_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(MAIN_MEAS_CTRL_SHADOWED_LO_update_err)
  );


  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h1ea)
  ) u_MAIN_MEAS_CTRL_SHADOWED_LO (
    .clk_i   (swWenClk), // OT: clk_main_i
    .rst_ni  (rst_main_ni), // OT: rst_main_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (main_MAIN_MEAS_CTRL_SHADOWED_re),
    .we     (main_MAIN_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (main_MAIN_MEAS_CTRL_SHADOWED_wdata[19:10]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MAIN_MEAS_CTRL_SHADOWED.LO.q),
    .ds     (),

    // to register interface (read)
    .qs     (main_MAIN_MEAS_CTRL_SHADOWED_LO_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_MAIN_MEAS_CTRL_SHADOWED_LO_err_update),
    .err_storage (async_MAIN_MEAS_CTRL_SHADOWED_LO_err_storage)
  );


  // R[USB_MEAS_CTRL_EN]: V(False)
  logic [0:0] USB_MEAS_CTRL_EN_flds_we;
  assign usb_USB_MEAS_CTRL_EN_qe = |USB_MEAS_CTRL_EN_flds_we;
  // Create REGWEN-gated WE signal
  logic usb_USB_MEAS_CTRL_EN_gated_we;
  assign usb_USB_MEAS_CTRL_EN_gated_we = usb_USB_MEAS_CTRL_EN_we & usb_USB_MEAS_CTRL_EN_regwen;


  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_USB_MEAS_CTRL_EN (
    .clk_i   (hwUpdClk), // OT: clk_usb_i
    .rst_ni  (rst_usb_ni), // OT: rst_usb_ni

    // from register interface
    .we     (usb_USB_MEAS_CTRL_EN_gated_we),
    .wd     (usb_USB_MEAS_CTRL_EN_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.USB_MEAS_CTRL_EN.de),
    .d      (hw2reg.USB_MEAS_CTRL_EN.d),

    // to internal hardware
    .qe     (USB_MEAS_CTRL_EN_flds_we[0]),
    .q      (reg2hw.USB_MEAS_CTRL_EN.q),
    .ds     (usb_USB_MEAS_CTRL_EN_ds_int),

    // to register interface (read)
    .qs     (usb_USB_MEAS_CTRL_EN_qs_int)
  );


  // R[USB_MEAS_CTRL_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic usb_USB_MEAS_CTRL_SHADOWED_gated_we;
  assign usb_USB_MEAS_CTRL_SHADOWED_gated_we =
    usb_USB_MEAS_CTRL_SHADOWED_we & usb_USB_MEAS_CTRL_SHADOWED_regwen;
  //   F[HI]: 8:0
  logic async_USB_MEAS_CTRL_SHADOWED_HI_err_update;
  logic async_USB_MEAS_CTRL_SHADOWED_HI_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_USB_MEAS_CTRL_SHADOWED_HI_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_USB_MEAS_CTRL_SHADOWED_HI_err_storage),
    .q_o(USB_MEAS_CTRL_SHADOWED_HI_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_USB_MEAS_CTRL_SHADOWED_HI_err_update_sync (
    .clk_src_i(clk_usb_i),
    .rst_src_ni(rst_usb_ni),
    .src_pulse_i(async_USB_MEAS_CTRL_SHADOWED_HI_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(USB_MEAS_CTRL_SHADOWED_HI_update_err)
  );


  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'hfa)
  ) u_USB_MEAS_CTRL_SHADOWED_HI (
    .clk_i   (swWenClk), // OT: clk_usb_i
    .rst_ni  (rst_usb_ni), // OT: rst_usb_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (usb_USB_MEAS_CTRL_SHADOWED_re),
    .we     (usb_USB_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (usb_USB_MEAS_CTRL_SHADOWED_wdata[8:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.USB_MEAS_CTRL_SHADOWED.HI.q),
    .ds     (),

    // to register interface (read)
    .qs     (usb_USB_MEAS_CTRL_SHADOWED_HI_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_USB_MEAS_CTRL_SHADOWED_HI_err_update),
    .err_storage (async_USB_MEAS_CTRL_SHADOWED_HI_err_storage)
  );

  //   F[LO]: 17:9
  logic async_USB_MEAS_CTRL_SHADOWED_LO_err_update;
  logic async_USB_MEAS_CTRL_SHADOWED_LO_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_USB_MEAS_CTRL_SHADOWED_LO_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_USB_MEAS_CTRL_SHADOWED_LO_err_storage),
    .q_o(USB_MEAS_CTRL_SHADOWED_LO_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_USB_MEAS_CTRL_SHADOWED_LO_err_update_sync (
    .clk_src_i(clk_usb_i),
    .rst_src_ni(rst_usb_ni),
    .src_pulse_i(async_USB_MEAS_CTRL_SHADOWED_LO_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(USB_MEAS_CTRL_SHADOWED_LO_update_err)
  );


  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'he6)
  ) u_USB_MEAS_CTRL_SHADOWED_LO (
    .clk_i   (swWenClk), // OT: clk_usb_i
    .rst_ni  (rst_usb_ni), // OT: rst_usb_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (usb_USB_MEAS_CTRL_SHADOWED_re),
    .we     (usb_USB_MEAS_CTRL_SHADOWED_gated_we),
    .wd     (usb_USB_MEAS_CTRL_SHADOWED_wdata[17:9]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.USB_MEAS_CTRL_SHADOWED.LO.q),
    .ds     (),

    // to register interface (read)
    .qs     (usb_USB_MEAS_CTRL_SHADOWED_LO_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_USB_MEAS_CTRL_SHADOWED_LO_err_update),
    .err_storage (async_USB_MEAS_CTRL_SHADOWED_LO_err_storage)
  );


  // R[RECOV_ERR_CODE]: V(False)
  //   F[SHADOW_UPDATE_ERR]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_SHADOW_UPDATE_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_SHADOW_UPDATE_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.SHADOW_UPDATE_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.SHADOW_UPDATE_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_SHADOW_UPDATE_ERR_qs)
  );

  //   F[IO_MEASURE_ERR]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_IO_MEASURE_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_IO_MEASURE_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.IO_MEASURE_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.IO_MEASURE_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_IO_MEASURE_ERR_qs)
  );

  //   F[IO_DIV2_MEASURE_ERR]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_IO_DIV2_MEASURE_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_IO_DIV2_MEASURE_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.IO_DIV2_MEASURE_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.IO_DIV2_MEASURE_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_IO_DIV2_MEASURE_ERR_qs)
  );

  //   F[IO_DIV4_MEASURE_ERR]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_IO_DIV4_MEASURE_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_IO_DIV4_MEASURE_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.IO_DIV4_MEASURE_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.IO_DIV4_MEASURE_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_IO_DIV4_MEASURE_ERR_qs)
  );

  //   F[MAIN_MEASURE_ERR]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_MAIN_MEASURE_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_MAIN_MEASURE_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.MAIN_MEASURE_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.MAIN_MEASURE_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_MAIN_MEASURE_ERR_qs)
  );

  //   F[USB_MEASURE_ERR]: 5:5


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_USB_MEASURE_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_USB_MEASURE_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.USB_MEASURE_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.USB_MEASURE_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_USB_MEASURE_ERR_qs)
  );

  //   F[IO_TIMEOUT_ERR]: 6:6


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_IO_TIMEOUT_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_IO_TIMEOUT_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.IO_TIMEOUT_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.IO_TIMEOUT_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_IO_TIMEOUT_ERR_qs)
  );

  //   F[IO_DIV2_TIMEOUT_ERR]: 7:7


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_IO_DIV2_TIMEOUT_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_IO_DIV2_TIMEOUT_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.IO_DIV2_TIMEOUT_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.IO_DIV2_TIMEOUT_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_IO_DIV2_TIMEOUT_ERR_qs)
  );

  //   F[IO_DIV4_TIMEOUT_ERR]: 8:8


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_IO_DIV4_TIMEOUT_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_IO_DIV4_TIMEOUT_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.IO_DIV4_TIMEOUT_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.IO_DIV4_TIMEOUT_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_IO_DIV4_TIMEOUT_ERR_qs)
  );

  //   F[MAIN_TIMEOUT_ERR]: 9:9


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_MAIN_TIMEOUT_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_MAIN_TIMEOUT_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.MAIN_TIMEOUT_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.MAIN_TIMEOUT_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_MAIN_TIMEOUT_ERR_qs)
  );

  //   F[USB_TIMEOUT_ERR]: 10:10


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_RECOV_ERR_CODE_USB_TIMEOUT_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RECOV_ERR_CODE_we),
    .wd     (RECOV_ERR_CODE_USB_TIMEOUT_ERR_wd),

    // from internal hardware
    .de     (hw2reg.RECOV_ERR_CODE.USB_TIMEOUT_ERR.de),
    .d      (hw2reg.RECOV_ERR_CODE.USB_TIMEOUT_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RECOV_ERR_CODE_USB_TIMEOUT_ERR_qs)
  );


  // R[FATAL_ERR_CODE]: V(False)
  //   F[REG_INTG]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_FATAL_ERR_CODE_REG_INTG (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.FATAL_ERR_CODE.REG_INTG.de),
    .d      (hw2reg.FATAL_ERR_CODE.REG_INTG.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.FATAL_ERR_CODE.REG_INTG.q),
    .ds     (),

    // to register interface (read)
    .qs     (FATAL_ERR_CODE_REG_INTG_qs)
  );

  //   F[IDLE_CNT]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_FATAL_ERR_CODE_IDLE_CNT (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.FATAL_ERR_CODE.IDLE_CNT.de),
    .d      (hw2reg.FATAL_ERR_CODE.IDLE_CNT.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.FATAL_ERR_CODE.IDLE_CNT.q),
    .ds     (),

    // to register interface (read)
    .qs     (FATAL_ERR_CODE_IDLE_CNT_qs)
  );

  //   F[SHADOW_STORAGE_ERR]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_FATAL_ERR_CODE_SHADOW_STORAGE_ERR (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.FATAL_ERR_CODE.SHADOW_STORAGE_ERR.de),
    .d      (hw2reg.FATAL_ERR_CODE.SHADOW_STORAGE_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.FATAL_ERR_CODE.SHADOW_STORAGE_ERR.q),
    .ds     (),

    // to register interface (read)
    .qs     (FATAL_ERR_CODE_SHADOW_STORAGE_ERR_qs)
  );



  logic [15:0]  reqRoleVec;
  RDP_DECODE  #(.ENC_WID(4))
    raclRoleXDEC  (.dec(reqRoleVec),  .enc(tl_i.a_user.rsvd[3:0])); // incoming RACL, assigned in scsctnif.sv

  logic [21:0] addr_hit;
  logic [21:0] addrHitNRdAllowed;
  logic [21:0] addrHitNWrAllowed;
  always_comb begin
    addr_hit   = '0;
    addrHitNRdAllowed = '0;
    addrHitNWrAllowed = '0;

    addr_hit[ 0]          = (reg_addr == CLKMGR_ALERT_TEST_OFFSET);  // ALERT_TEST
    addrHitNRdAllowed[ 0] = (reg_addr == CLKMGR_ALERT_TEST_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 0] = (reg_addr == CLKMGR_ALERT_TEST_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 1]          = (reg_addr == CLKMGR_EXTCLK_CTRL_REGWEN_OFFSET);  // EXTCLK_CTRL_REGWEN
    addrHitNRdAllowed[ 1] = (reg_addr == CLKMGR_EXTCLK_CTRL_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 1] = (reg_addr == CLKMGR_EXTCLK_CTRL_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 2]          = (reg_addr == CLKMGR_EXTCLK_CTRL_OFFSET);  // EXTCLK_CTRL
    addrHitNRdAllowed[ 2] = (reg_addr == CLKMGR_EXTCLK_CTRL_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 2] = (reg_addr == CLKMGR_EXTCLK_CTRL_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 3]          = (reg_addr == CLKMGR_EXTCLK_STATUS_OFFSET);  // EXTCLK_STATUS
    addrHitNRdAllowed[ 3] = (reg_addr == CLKMGR_EXTCLK_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 3] = (reg_addr == CLKMGR_EXTCLK_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 4]          = (reg_addr == CLKMGR_JITTER_REGWEN_OFFSET);  // JITTER_REGWEN
    addrHitNRdAllowed[ 4] = (reg_addr == CLKMGR_JITTER_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 4] = (reg_addr == CLKMGR_JITTER_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 5]          = (reg_addr == CLKMGR_JITTER_ENABLE_OFFSET);  // JITTER_ENABLE
    addrHitNRdAllowed[ 5] = (reg_addr == CLKMGR_JITTER_ENABLE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 5] = (reg_addr == CLKMGR_JITTER_ENABLE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 6]          = (reg_addr == CLKMGR_CLK_ENABLES_OFFSET);  // CLK_ENABLES
    addrHitNRdAllowed[ 6] = (reg_addr == CLKMGR_CLK_ENABLES_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 6] = (reg_addr == CLKMGR_CLK_ENABLES_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 7]          = (reg_addr == CLKMGR_CLK_HINTS_OFFSET);  // CLK_HINTS
    addrHitNRdAllowed[ 7] = (reg_addr == CLKMGR_CLK_HINTS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 7] = (reg_addr == CLKMGR_CLK_HINTS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 8]          = (reg_addr == CLKMGR_CLK_HINTS_STATUS_OFFSET);  // CLK_HINTS_STATUS
    addrHitNRdAllowed[ 8] = (reg_addr == CLKMGR_CLK_HINTS_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 8] = (reg_addr == CLKMGR_CLK_HINTS_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 9]          = (reg_addr == CLKMGR_MEASURE_CTRL_REGWEN_OFFSET);  // MEASURE_CTRL_REGWEN
    addrHitNRdAllowed[ 9] = (reg_addr == CLKMGR_MEASURE_CTRL_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 9] = (reg_addr == CLKMGR_MEASURE_CTRL_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[10]          = (reg_addr == CLKMGR_IO_MEAS_CTRL_EN_OFFSET);  // IO_MEAS_CTRL_EN
    addrHitNRdAllowed[10] = (reg_addr == CLKMGR_IO_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[10] = (reg_addr == CLKMGR_IO_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[11]          = (reg_addr == CLKMGR_IO_MEAS_CTRL_SHADOWED_OFFSET);  // IO_MEAS_CTRL_SHADOWED
    addrHitNRdAllowed[11] = (reg_addr == CLKMGR_IO_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[11] = (reg_addr == CLKMGR_IO_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[12]          = (reg_addr == CLKMGR_IO_DIV2_MEAS_CTRL_EN_OFFSET);  // IO_DIV2_MEAS_CTRL_EN
    addrHitNRdAllowed[12] = (reg_addr == CLKMGR_IO_DIV2_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[12] = (reg_addr == CLKMGR_IO_DIV2_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[13]          = (reg_addr == CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_OFFSET);  // IO_DIV2_MEAS_CTRL_SHADOWED
    addrHitNRdAllowed[13] = (reg_addr == CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[13] = (reg_addr == CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[14]          = (reg_addr == CLKMGR_IO_DIV4_MEAS_CTRL_EN_OFFSET);  // IO_DIV4_MEAS_CTRL_EN
    addrHitNRdAllowed[14] = (reg_addr == CLKMGR_IO_DIV4_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[14] = (reg_addr == CLKMGR_IO_DIV4_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[15]          = (reg_addr == CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_OFFSET);  // IO_DIV4_MEAS_CTRL_SHADOWED
    addrHitNRdAllowed[15] = (reg_addr == CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[15] = (reg_addr == CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[16]          = (reg_addr == CLKMGR_MAIN_MEAS_CTRL_EN_OFFSET);  // MAIN_MEAS_CTRL_EN
    addrHitNRdAllowed[16] = (reg_addr == CLKMGR_MAIN_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[16] = (reg_addr == CLKMGR_MAIN_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[17]          = (reg_addr == CLKMGR_MAIN_MEAS_CTRL_SHADOWED_OFFSET);  // MAIN_MEAS_CTRL_SHADOWED
    addrHitNRdAllowed[17] = (reg_addr == CLKMGR_MAIN_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[17] = (reg_addr == CLKMGR_MAIN_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[18]          = (reg_addr == CLKMGR_USB_MEAS_CTRL_EN_OFFSET);  // USB_MEAS_CTRL_EN
    addrHitNRdAllowed[18] = (reg_addr == CLKMGR_USB_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[18] = (reg_addr == CLKMGR_USB_MEAS_CTRL_EN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[19]          = (reg_addr == CLKMGR_USB_MEAS_CTRL_SHADOWED_OFFSET);  // USB_MEAS_CTRL_SHADOWED
    addrHitNRdAllowed[19] = (reg_addr == CLKMGR_USB_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[19] = (reg_addr == CLKMGR_USB_MEAS_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[20]          = (reg_addr == CLKMGR_RECOV_ERR_CODE_OFFSET);  // RECOV_ERR_CODE
    addrHitNRdAllowed[20] = (reg_addr == CLKMGR_RECOV_ERR_CODE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[20] = (reg_addr == CLKMGR_RECOV_ERR_CODE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[21]          = (reg_addr == CLKMGR_FATAL_ERR_CODE_OFFSET);  // FATAL_ERR_CODE
    addrHitNRdAllowed[21] = (reg_addr == CLKMGR_FATAL_ERR_CODE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[21] = (reg_addr == CLKMGR_FATAL_ERR_CODE_OFFSET) & (|(16'hffff & reqRoleVec));

  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
  assign raclViol = (|addr_hit) & ~(|(addr_hit & (addrHitNRdAllowed | addrHitNWrAllowed))); // address hit but failed the RACL check

  // Check sub-word write is permitted
  always_comb begin
    wr_err = reg_we &
              (( addrHitNWrAllowed[ 0] & (|(CLKMGR_PERMIT[ 0] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 1] & (|(CLKMGR_PERMIT[ 1] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 2] & (|(CLKMGR_PERMIT[ 2] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 3] & (|(CLKMGR_PERMIT[ 3] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 4] & (|(CLKMGR_PERMIT[ 4] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 5] & (|(CLKMGR_PERMIT[ 5] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 6] & (|(CLKMGR_PERMIT[ 6] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 7] & (|(CLKMGR_PERMIT[ 7] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 8] & (|(CLKMGR_PERMIT[ 8] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 9] & (|(CLKMGR_PERMIT[ 9] & ~reg_be)) ) |
               ( addrHitNWrAllowed[10] & (|(CLKMGR_PERMIT[10] & ~reg_be)) ) |
               ( addrHitNWrAllowed[11] & (|(CLKMGR_PERMIT[11] & ~reg_be)) ) |
               ( addrHitNWrAllowed[12] & (|(CLKMGR_PERMIT[12] & ~reg_be)) ) |
               ( addrHitNWrAllowed[13] & (|(CLKMGR_PERMIT[13] & ~reg_be)) ) |
               ( addrHitNWrAllowed[14] & (|(CLKMGR_PERMIT[14] & ~reg_be)) ) |
               ( addrHitNWrAllowed[15] & (|(CLKMGR_PERMIT[15] & ~reg_be)) ) |
               ( addrHitNWrAllowed[16] & (|(CLKMGR_PERMIT[16] & ~reg_be)) ) |
               ( addrHitNWrAllowed[17] & (|(CLKMGR_PERMIT[17] & ~reg_be)) ) |
               ( addrHitNWrAllowed[18] & (|(CLKMGR_PERMIT[18] & ~reg_be)) ) |
               ( addrHitNWrAllowed[19] & (|(CLKMGR_PERMIT[19] & ~reg_be)) ) |
               ( addrHitNWrAllowed[20] & (|(CLKMGR_PERMIT[20] & ~reg_be)) ) |
               ( addrHitNWrAllowed[21] & (|(CLKMGR_PERMIT[21] & ~reg_be)) ) );
  end

  // Generate write-enables
  assign ALERT_TEST_we = addrHitNWrAllowed[0] & reg_we & !reg_error;
  assign ALERT_TEST_recov_fault_wd = reg_wdata[0];

  assign ALERT_TEST_fatal_fault_wd = reg_wdata[1];

  assign EXTCLK_CTRL_REGWEN_we = addrHitNWrAllowed[1] & reg_we & !reg_error;
  assign EXTCLK_CTRL_REGWEN_wd = reg_wdata[0];

  assign EXTCLK_CTRL_we = addrHitNWrAllowed[2] & reg_we & !reg_error;
  assign EXTCLK_CTRL_SEL_wd = reg_wdata[3:0];

  assign EXTCLK_CTRL_HI_SPEED_SEL_wd = reg_wdata[7:4];

  assign EXTCLK_STATUS_re = addrHitNRdAllowed[3] & reg_re & !reg_error;
  assign JITTER_REGWEN_we = addrHitNWrAllowed[4] & reg_we & !reg_error;
  assign JITTER_REGWEN_wd = reg_wdata[0];

  assign JITTER_ENABLE_we = addrHitNWrAllowed[5] & reg_we & !reg_error;
  assign JITTER_ENABLE_wd = reg_wdata[3:0];

  assign CLK_ENABLES_we = addrHitNWrAllowed[6] & reg_we & !reg_error;
  assign CLK_ENABLES_CLK_IO_DIV4_PERI_EN_wd = reg_wdata[0];

  assign CLK_ENABLES_CLK_IO_DIV2_PERI_EN_wd = reg_wdata[1];

  assign CLK_ENABLES_CLK_USB_PERI_EN_wd = reg_wdata[2];

  assign CLK_ENABLES_CLK_IO_PERI_EN_wd = reg_wdata[3];

  assign CLK_HINTS_we = addrHitNWrAllowed[7] & reg_we & !reg_error;
  assign CLK_HINTS_CLK_MAIN_AES_HINT_wd = reg_wdata[0];

  assign CLK_HINTS_CLK_MAIN_HMAC_HINT_wd = reg_wdata[1];

  assign CLK_HINTS_CLK_MAIN_KMAC_HINT_wd = reg_wdata[2];

  assign CLK_HINTS_CLK_MAIN_OTBN_HINT_wd = reg_wdata[3];

  assign MEASURE_CTRL_REGWEN_we = addrHitNWrAllowed[9] & reg_we & !reg_error;
  assign MEASURE_CTRL_REGWEN_wd = reg_wdata[0];

  assign IO_MEAS_CTRL_EN_we = addrHitNWrAllowed[10] & reg_we & !reg_error;
  assign IO_MEAS_CTRL_SHADOWED_re = addrHitNRdAllowed[11] & reg_re & !reg_error;
  assign IO_MEAS_CTRL_SHADOWED_we = addrHitNWrAllowed[11] & reg_we & !reg_error;
  assign IO_DIV2_MEAS_CTRL_EN_we = addrHitNWrAllowed[12] & reg_we & !reg_error;
  assign IO_DIV2_MEAS_CTRL_SHADOWED_re = addrHitNRdAllowed[13] & reg_re & !reg_error;
  assign IO_DIV2_MEAS_CTRL_SHADOWED_we = addrHitNWrAllowed[13] & reg_we & !reg_error;
  assign IO_DIV4_MEAS_CTRL_EN_we = addrHitNWrAllowed[14] & reg_we & !reg_error;
  assign IO_DIV4_MEAS_CTRL_SHADOWED_re = addrHitNRdAllowed[15] & reg_re & !reg_error;
  assign IO_DIV4_MEAS_CTRL_SHADOWED_we = addrHitNWrAllowed[15] & reg_we & !reg_error;
  assign MAIN_MEAS_CTRL_EN_we = addrHitNWrAllowed[16] & reg_we & !reg_error;
  assign MAIN_MEAS_CTRL_SHADOWED_re = addrHitNRdAllowed[17] & reg_re & !reg_error;
  assign MAIN_MEAS_CTRL_SHADOWED_we = addrHitNWrAllowed[17] & reg_we & !reg_error;
  assign USB_MEAS_CTRL_EN_we = addrHitNWrAllowed[18] & reg_we & !reg_error;
  assign USB_MEAS_CTRL_SHADOWED_re = addrHitNRdAllowed[19] & reg_re & !reg_error;
  assign USB_MEAS_CTRL_SHADOWED_we = addrHitNWrAllowed[19] & reg_we & !reg_error;
  assign RECOV_ERR_CODE_we = addrHitNWrAllowed[20] & reg_we & !reg_error;
  assign RECOV_ERR_CODE_SHADOW_UPDATE_ERR_wd = reg_wdata[0];

  assign RECOV_ERR_CODE_IO_MEASURE_ERR_wd = reg_wdata[1];

  assign RECOV_ERR_CODE_IO_DIV2_MEASURE_ERR_wd = reg_wdata[2];

  assign RECOV_ERR_CODE_IO_DIV4_MEASURE_ERR_wd = reg_wdata[3];

  assign RECOV_ERR_CODE_MAIN_MEASURE_ERR_wd = reg_wdata[4];

  assign RECOV_ERR_CODE_USB_MEASURE_ERR_wd = reg_wdata[5];

  assign RECOV_ERR_CODE_IO_TIMEOUT_ERR_wd = reg_wdata[6];

  assign RECOV_ERR_CODE_IO_DIV2_TIMEOUT_ERR_wd = reg_wdata[7];

  assign RECOV_ERR_CODE_IO_DIV4_TIMEOUT_ERR_wd = reg_wdata[8];

  assign RECOV_ERR_CODE_MAIN_TIMEOUT_ERR_wd = reg_wdata[9];

  assign RECOV_ERR_CODE_USB_TIMEOUT_ERR_wd = reg_wdata[10];


  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = ALERT_TEST_we;
    reg_we_check[1] = EXTCLK_CTRL_REGWEN_we;
    reg_we_check[2] = EXTCLK_CTRL_gated_we;
    reg_we_check[3] = 1'b0;
    reg_we_check[4] = JITTER_REGWEN_we;
    reg_we_check[5] = JITTER_ENABLE_we;
    reg_we_check[6] = CLK_ENABLES_we;
    reg_we_check[7] = CLK_HINTS_we;
    reg_we_check[8] = 1'b0;
    reg_we_check[9] = MEASURE_CTRL_REGWEN_we;
    reg_we_check[10] = IO_MEAS_CTRL_EN_we;
    reg_we_check[11] = IO_MEAS_CTRL_SHADOWED_we;
    reg_we_check[12] = IO_DIV2_MEAS_CTRL_EN_we;
    reg_we_check[13] = IO_DIV2_MEAS_CTRL_SHADOWED_we;
    reg_we_check[14] = IO_DIV4_MEAS_CTRL_EN_we;
    reg_we_check[15] = IO_DIV4_MEAS_CTRL_SHADOWED_we;
    reg_we_check[16] = MAIN_MEAS_CTRL_EN_we;
    reg_we_check[17] = MAIN_MEAS_CTRL_SHADOWED_we;
    reg_we_check[18] = USB_MEAS_CTRL_EN_we;
    reg_we_check[19] = USB_MEAS_CTRL_SHADOWED_we;
    reg_we_check[20] = RECOV_ERR_CODE_we;
    reg_we_check[21] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addrHitNRdAllowed[0]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addrHitNRdAllowed[1]: begin
        reg_rdata_next[0] = EXTCLK_CTRL_REGWEN_qs;
      end

      addrHitNRdAllowed[2]: begin
        reg_rdata_next[3:0] = EXTCLK_CTRL_SEL_qs;
        reg_rdata_next[7:4] = EXTCLK_CTRL_HI_SPEED_SEL_qs;
      end

      addrHitNRdAllowed[3]: begin
        reg_rdata_next[3:0] = EXTCLK_STATUS_qs;
      end

      addrHitNRdAllowed[4]: begin
        reg_rdata_next[0] = JITTER_REGWEN_qs;
      end

      addrHitNRdAllowed[5]: begin
        reg_rdata_next[3:0] = JITTER_ENABLE_qs;
      end

      addrHitNRdAllowed[6]: begin
        reg_rdata_next[0] = CLK_ENABLES_CLK_IO_DIV4_PERI_EN_qs;
        reg_rdata_next[1] = CLK_ENABLES_CLK_IO_DIV2_PERI_EN_qs;
        reg_rdata_next[2] = CLK_ENABLES_CLK_USB_PERI_EN_qs;
        reg_rdata_next[3] = CLK_ENABLES_CLK_IO_PERI_EN_qs;
      end

      addrHitNRdAllowed[7]: begin
        reg_rdata_next[0] = CLK_HINTS_CLK_MAIN_AES_HINT_qs;
        reg_rdata_next[1] = CLK_HINTS_CLK_MAIN_HMAC_HINT_qs;
        reg_rdata_next[2] = CLK_HINTS_CLK_MAIN_KMAC_HINT_qs;
        reg_rdata_next[3] = CLK_HINTS_CLK_MAIN_OTBN_HINT_qs;
      end

      addrHitNRdAllowed[8]: begin
        reg_rdata_next[0] = CLK_HINTS_STATUS_CLK_MAIN_AES_VAL_qs;
        reg_rdata_next[1] = CLK_HINTS_STATUS_CLK_MAIN_HMAC_VAL_qs;
        reg_rdata_next[2] = CLK_HINTS_STATUS_CLK_MAIN_KMAC_VAL_qs;
        reg_rdata_next[3] = CLK_HINTS_STATUS_CLK_MAIN_OTBN_VAL_qs;
      end

      addrHitNRdAllowed[9]: begin
        reg_rdata_next[0] = MEASURE_CTRL_REGWEN_qs;
      end

      addrHitNRdAllowed[10]: begin
        reg_rdata_next = DW'(IO_MEAS_CTRL_EN_qs);
      end
      addrHitNRdAllowed[11]: begin
        reg_rdata_next = DW'(IO_MEAS_CTRL_SHADOWED_qs);
      end
      addrHitNRdAllowed[12]: begin
        reg_rdata_next = DW'(IO_DIV2_MEAS_CTRL_EN_qs);
      end
      addrHitNRdAllowed[13]: begin
        reg_rdata_next = DW'(IO_DIV2_MEAS_CTRL_SHADOWED_qs);
      end
      addrHitNRdAllowed[14]: begin
        reg_rdata_next = DW'(IO_DIV4_MEAS_CTRL_EN_qs);
      end
      addrHitNRdAllowed[15]: begin
        reg_rdata_next = DW'(IO_DIV4_MEAS_CTRL_SHADOWED_qs);
      end
      addrHitNRdAllowed[16]: begin
        reg_rdata_next = DW'(MAIN_MEAS_CTRL_EN_qs);
      end
      addrHitNRdAllowed[17]: begin
        reg_rdata_next = DW'(MAIN_MEAS_CTRL_SHADOWED_qs);
      end
      addrHitNRdAllowed[18]: begin
        reg_rdata_next = DW'(USB_MEAS_CTRL_EN_qs);
      end
      addrHitNRdAllowed[19]: begin
        reg_rdata_next = DW'(USB_MEAS_CTRL_SHADOWED_qs);
      end
      addrHitNRdAllowed[20]: begin
        reg_rdata_next[0] = RECOV_ERR_CODE_SHADOW_UPDATE_ERR_qs;
        reg_rdata_next[1] = RECOV_ERR_CODE_IO_MEASURE_ERR_qs;
        reg_rdata_next[2] = RECOV_ERR_CODE_IO_DIV2_MEASURE_ERR_qs;
        reg_rdata_next[3] = RECOV_ERR_CODE_IO_DIV4_MEASURE_ERR_qs;
        reg_rdata_next[4] = RECOV_ERR_CODE_MAIN_MEASURE_ERR_qs;
        reg_rdata_next[5] = RECOV_ERR_CODE_USB_MEASURE_ERR_qs;
        reg_rdata_next[6] = RECOV_ERR_CODE_IO_TIMEOUT_ERR_qs;
        reg_rdata_next[7] = RECOV_ERR_CODE_IO_DIV2_TIMEOUT_ERR_qs;
        reg_rdata_next[8] = RECOV_ERR_CODE_IO_DIV4_TIMEOUT_ERR_qs;
        reg_rdata_next[9] = RECOV_ERR_CODE_MAIN_TIMEOUT_ERR_qs;
        reg_rdata_next[10] = RECOV_ERR_CODE_USB_TIMEOUT_ERR_qs;
      end

      addrHitNRdAllowed[21]: begin
        reg_rdata_next[0] = FATAL_ERR_CODE_REG_INTG_qs;
        reg_rdata_next[1] = FATAL_ERR_CODE_IDLE_CNT_qs;
        reg_rdata_next[2] = FATAL_ERR_CODE_SHADOW_STORAGE_ERR_qs;
      end

      default: begin
        reg_rdata_next = '0;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  logic rst_done;
  logic shadow_rst_done;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      rst_done <= '0;
    end else begin
      rst_done <= 1'b1;
    end
  end

  always_ff @(posedge clk_i or negedge rst_shadowed_ni) begin
    if (!rst_shadowed_ni) begin
      shadow_rst_done <= '0;
    end else begin
      shadow_rst_done <= 1'b1;
    end
  end

  // both shadow and normal resets have been released
  assign shadow_busy = ~(rst_done & shadow_rst_done);

  // Collect up storage and update errors
  assign shadowed_storage_err_o = |{
    IO_MEAS_CTRL_SHADOWED_HI_storage_err,
    IO_MEAS_CTRL_SHADOWED_LO_storage_err,
    IO_DIV2_MEAS_CTRL_SHADOWED_HI_storage_err,
    IO_DIV2_MEAS_CTRL_SHADOWED_LO_storage_err,
    IO_DIV4_MEAS_CTRL_SHADOWED_HI_storage_err,
    IO_DIV4_MEAS_CTRL_SHADOWED_LO_storage_err,
    MAIN_MEAS_CTRL_SHADOWED_HI_storage_err,
    MAIN_MEAS_CTRL_SHADOWED_LO_storage_err,
    USB_MEAS_CTRL_SHADOWED_HI_storage_err,
    USB_MEAS_CTRL_SHADOWED_LO_storage_err
  };
  assign shadowed_update_err_o = |{
    IO_MEAS_CTRL_SHADOWED_HI_update_err,
    IO_MEAS_CTRL_SHADOWED_LO_update_err,
    IO_DIV2_MEAS_CTRL_SHADOWED_HI_update_err,
    IO_DIV2_MEAS_CTRL_SHADOWED_LO_update_err,
    IO_DIV4_MEAS_CTRL_SHADOWED_HI_update_err,
    IO_DIV4_MEAS_CTRL_SHADOWED_LO_update_err,
    MAIN_MEAS_CTRL_SHADOWED_HI_update_err,
    MAIN_MEAS_CTRL_SHADOWED_LO_update_err,
    USB_MEAS_CTRL_SHADOWED_HI_update_err,
    USB_MEAS_CTRL_SHADOWED_LO_update_err
  };

  // register busy
  logic reg_busy_sel;
  assign reg_busy = reg_busy_sel | shadow_busy;
  always_comb begin
    reg_busy_sel = '0;
    unique case (1'b1)
      addr_hit[10]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = IO_MEAS_CTRL_EN_busy;
      end
      addr_hit[11]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = IO_MEAS_CTRL_SHADOWED_busy;
      end
      addr_hit[12]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = IO_DIV2_MEAS_CTRL_EN_busy;
      end
      addr_hit[13]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = IO_DIV2_MEAS_CTRL_SHADOWED_busy;
      end
      addr_hit[14]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = IO_DIV4_MEAS_CTRL_EN_busy;
      end
      addr_hit[15]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = IO_DIV4_MEAS_CTRL_SHADOWED_busy;
      end
      addr_hit[16]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = MAIN_MEAS_CTRL_EN_busy;
      end
      addr_hit[17]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = MAIN_MEAS_CTRL_SHADOWED_busy;
      end
      addr_hit[18]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = USB_MEAS_CTRL_EN_busy;
      end
      addr_hit[19]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = USB_MEAS_CTRL_SHADOWED_busy;
      end
      default: begin
        reg_busy_sel  = '0;
      end
    endcase
  end


  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
// Local Variables:
// fill-column:1
// verilog-auto-arg-sort:t
// verilog-typedef-regexp: "_[etu]$"
// verilog-library-directories:(".")
// End:
