// SPDX-FileCopyrightText: Copyright (c) 2022 by Rivos Inc.
// Confidential and proprietary, see LICENSE for details.
// SPDX-License-Identifier: LicenseRef-Rivos-Internal-Only

// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module pwrmgr_reg_top (
  input clk_i,
  input swWenClk,
  input hwUpdClk,
  input rst_ni,
  input deepReset_L,
  input lightReset_L,
  input clk_lc_i,
  input rst_lc_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output pwrmgr_reg_pkg::pwrmgr_reg2hw_t reg2hw, // Write
  input  pwrmgr_reg_pkg::pwrmgr_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output raclViol,
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import pwrmgr_reg_pkg::* ;

  localparam int AW = 7;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [16:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(17)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_lc_i or negedge rst_lc_ni) begin
    if (!rst_lc_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .en_ifetch_i    (prim_mubi_pkg::MuBi4False),
    .intg_error_o   (),

    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)

  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic INTR_STATE_we;
  logic INTR_STATE_qs;
  logic INTR_STATE_wd;
  logic INTR_ENABLE_we;
  logic INTR_ENABLE_qs;
  logic INTR_ENABLE_wd;
  logic INTR_TEST_we;
  logic INTR_TEST_wd;
  logic ALERT_TEST_we;
  logic ALERT_TEST_wd;
  logic CTRL_CFG_REGWEN_re;
  logic CTRL_CFG_REGWEN_qs;
  logic CONTROL_we;
  logic CONTROL_LOW_POWER_HINT_qs;
  logic CONTROL_LOW_POWER_HINT_wd;
  logic CONTROL_CORE_CLK_EN_qs;
  logic CONTROL_CORE_CLK_EN_wd;
  logic CONTROL_IO_CLK_EN_qs;
  logic CONTROL_IO_CLK_EN_wd;
  logic CONTROL_USB_CLK_EN_LP_qs;
  logic CONTROL_USB_CLK_EN_LP_wd;
  logic CONTROL_USB_CLK_EN_ACTIVE_qs;
  logic CONTROL_USB_CLK_EN_ACTIVE_wd;
  logic CONTROL_MAIN_PD_N_qs;
  logic CONTROL_MAIN_PD_N_wd;
  logic CFG_CDC_SYNC_we;
  logic CFG_CDC_SYNC_qs;
  logic CFG_CDC_SYNC_wd;
  logic WAKEUP_EN_REGWEN_we;
  logic WAKEUP_EN_REGWEN_qs;
  logic WAKEUP_EN_REGWEN_wd;
  logic WAKEUP_EN_we;
  logic WAKEUP_EN_EN_0_qs;
  logic WAKEUP_EN_EN_0_wd;
  logic WAKEUP_EN_EN_1_qs;
  logic WAKEUP_EN_EN_1_wd;
  logic WAKEUP_EN_EN_2_qs;
  logic WAKEUP_EN_EN_2_wd;
  logic WAKE_STATUS_VAL_0_qs;
  logic WAKE_STATUS_VAL_1_qs;
  logic WAKE_STATUS_VAL_2_qs;
  logic RESET_EN_REGWEN_we;
  logic RESET_EN_REGWEN_qs;
  logic RESET_EN_REGWEN_wd;
  logic RESET_EN_we;
  logic RESET_EN_qs;
  logic RESET_EN_wd;
  logic RESET_STATUS_qs;
  logic ESCALATE_RESET_STATUS_qs;
  logic WAKE_INFO_CAPTURE_DIS_we;
  logic WAKE_INFO_CAPTURE_DIS_qs;
  logic WAKE_INFO_CAPTURE_DIS_wd;
  logic WAKE_INFO_re;
  logic WAKE_INFO_we;
  logic [2:0] WAKE_INFO_REASONS_qs;
  logic [2:0] WAKE_INFO_REASONS_wd;
  logic WAKE_INFO_FALL_THROUGH_qs;
  logic WAKE_INFO_FALL_THROUGH_wd;
  logic WAKE_INFO_ABORT_qs;
  logic WAKE_INFO_ABORT_wd;
  logic FAULT_STATUS_REG_INTG_ERR_qs;
  logic FAULT_STATUS_ESC_TIMEOUT_qs;
  logic FAULT_STATUS_MAIN_PD_GLITCH_qs;
  // Define register CDC handling.
  // CDC handling is done on a per-reg instead of per-field boundary.

  // Register instances
  // R[INTR_STATE]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_INTR_STATE (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_STATE_we),
    .wd     (INTR_STATE_wd),

    // from internal hardware
    .de     (hw2reg.INTR_STATE.de),
    .d      (hw2reg.INTR_STATE.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_STATE.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_STATE_qs)
  );


  // R[INTR_ENABLE]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_INTR_ENABLE (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_ENABLE_we),
    .wd     (INTR_ENABLE_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_ENABLE.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_ENABLE_qs)
  );


  // R[INTR_TEST]: V(True)
  logic INTR_TEST_qe;
  logic [0:0] INTR_TEST_flds_we;
  assign INTR_TEST_qe = |INTR_TEST_flds_we; //  Rivos: &*_we --> |*_we
  prim_subreg_ext #(
    .DW    (1)
  ) u_INTR_TEST (
    .re     (1'b0),
    .we     (INTR_TEST_we),
    .wd     (INTR_TEST_wd),
    .d      ('0),
    .qre    (),
    .qe     (INTR_TEST_flds_we[0]),
    .q      (reg2hw.INTR_TEST.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.INTR_TEST.qe = INTR_TEST_qe;


  // R[ALERT_TEST]: V(True)
  logic ALERT_TEST_qe;
  logic [0:0] ALERT_TEST_flds_we;
  assign ALERT_TEST_qe = |ALERT_TEST_flds_we; //  Rivos: &*_we --> |*_we
  prim_subreg_ext #(
    .DW    (1)
  ) u_ALERT_TEST (
    .re     (1'b0),
    .we     (ALERT_TEST_we),
    .wd     (ALERT_TEST_wd),
    .d      ('0),
    .qre    (),
    .qe     (ALERT_TEST_flds_we[0]),
    .q      (reg2hw.ALERT_TEST.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.ALERT_TEST.qe = ALERT_TEST_qe;


  // R[CTRL_CFG_REGWEN]: V(True)
  prim_subreg_ext #(
    .DW    (1)
  ) u_CTRL_CFG_REGWEN (
    .re     (CTRL_CFG_REGWEN_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CTRL_CFG_REGWEN.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CTRL_CFG_REGWEN_qs)
  );


  // R[CONTROL]: V(False)
  // Create REGWEN-gated WE signal
  logic CONTROL_gated_we;
  assign CONTROL_gated_we = CONTROL_we & CTRL_CFG_REGWEN_qs;
  //   F[LOW_POWER_HINT]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CONTROL_LOW_POWER_HINT (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CONTROL_gated_we),
    .wd     (CONTROL_LOW_POWER_HINT_wd),

    // from internal hardware
    .de     (hw2reg.CONTROL.LOW_POWER_HINT.de),
    .d      (hw2reg.CONTROL.LOW_POWER_HINT.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CONTROL.LOW_POWER_HINT.q),
    .ds     (),

    // to register interface (read)
    .qs     (CONTROL_LOW_POWER_HINT_qs)
  );

  //   F[CORE_CLK_EN]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CONTROL_CORE_CLK_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CONTROL_gated_we),
    .wd     (CONTROL_CORE_CLK_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CONTROL.CORE_CLK_EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CONTROL_CORE_CLK_EN_qs)
  );

  //   F[IO_CLK_EN]: 5:5


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CONTROL_IO_CLK_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CONTROL_gated_we),
    .wd     (CONTROL_IO_CLK_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CONTROL.IO_CLK_EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CONTROL_IO_CLK_EN_qs)
  );

  //   F[USB_CLK_EN_LP]: 6:6


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CONTROL_USB_CLK_EN_LP (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CONTROL_gated_we),
    .wd     (CONTROL_USB_CLK_EN_LP_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CONTROL.USB_CLK_EN_LP.q),
    .ds     (),

    // to register interface (read)
    .qs     (CONTROL_USB_CLK_EN_LP_qs)
  );

  //   F[USB_CLK_EN_ACTIVE]: 7:7


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CONTROL_USB_CLK_EN_ACTIVE (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CONTROL_gated_we),
    .wd     (CONTROL_USB_CLK_EN_ACTIVE_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CONTROL.USB_CLK_EN_ACTIVE.q),
    .ds     (),

    // to register interface (read)
    .qs     (CONTROL_USB_CLK_EN_ACTIVE_qs)
  );

  //   F[MAIN_PD_N]: 8:8


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CONTROL_MAIN_PD_N (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CONTROL_gated_we),
    .wd     (CONTROL_MAIN_PD_N_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CONTROL.MAIN_PD_N.q),
    .ds     (),

    // to register interface (read)
    .qs     (CONTROL_MAIN_PD_N_qs)
  );


  // R[CFG_CDC_SYNC]: V(False)
  logic CFG_CDC_SYNC_qe;
  logic [0:0] CFG_CDC_SYNC_flds_we;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CFG_CDC_SYNC (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CFG_CDC_SYNC_we),
    .wd     (CFG_CDC_SYNC_wd),

    // from internal hardware
    .de     (hw2reg.CFG_CDC_SYNC.de),
    .d      (hw2reg.CFG_CDC_SYNC.d),

    // to internal hardware
    .qe     (CFG_CDC_SYNC_flds_we[0]),
    .q      (reg2hw.CFG_CDC_SYNC.q),
    .ds     (),

    // to register interface (read)
    .qs     (CFG_CDC_SYNC_qs)
  );
  assign reg2hw.CFG_CDC_SYNC.qe = CFG_CDC_SYNC_qe;


  // R[WAKEUP_EN_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_WAKEUP_EN_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WAKEUP_EN_REGWEN_we),
    .wd     (WAKEUP_EN_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WAKEUP_EN_REGWEN_qs)
  );


  // Subregister 0 of Multireg WAKEUP_EN
  // R[WAKEUP_EN]: V(False)
  // Create REGWEN-gated WE signal
  logic WAKEUP_EN_gated_we;
  assign WAKEUP_EN_gated_we = WAKEUP_EN_we & WAKEUP_EN_REGWEN_qs;
  //   F[EN_0]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WAKEUP_EN_EN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WAKEUP_EN_gated_we),
    .wd     (WAKEUP_EN_EN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WAKEUP_EN[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (WAKEUP_EN_EN_0_qs)
  );

  //   F[EN_1]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WAKEUP_EN_EN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WAKEUP_EN_gated_we),
    .wd     (WAKEUP_EN_EN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WAKEUP_EN[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (WAKEUP_EN_EN_1_qs)
  );

  //   F[EN_2]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WAKEUP_EN_EN_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WAKEUP_EN_gated_we),
    .wd     (WAKEUP_EN_EN_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WAKEUP_EN[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (WAKEUP_EN_EN_2_qs)
  );


  // Subregister 0 of Multireg WAKE_STATUS
  // R[WAKE_STATUS]: V(False)
  //   F[VAL_0]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_WAKE_STATUS_VAL_0 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.WAKE_STATUS[0].de),
    .d      (hw2reg.WAKE_STATUS[0].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WAKE_STATUS_VAL_0_qs)
  );

  //   F[VAL_1]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_WAKE_STATUS_VAL_1 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.WAKE_STATUS[1].de),
    .d      (hw2reg.WAKE_STATUS[1].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WAKE_STATUS_VAL_1_qs)
  );

  //   F[VAL_2]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_WAKE_STATUS_VAL_2 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.WAKE_STATUS[2].de),
    .d      (hw2reg.WAKE_STATUS[2].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WAKE_STATUS_VAL_2_qs)
  );


  // R[RESET_EN_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_RESET_EN_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RESET_EN_REGWEN_we),
    .wd     (RESET_EN_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RESET_EN_REGWEN_qs)
  );


  // Subregister 0 of Multireg RESET_EN
  // R[RESET_EN]: V(False)
  // Create REGWEN-gated WE signal
  logic RESET_EN_gated_we;
  assign RESET_EN_gated_we = RESET_EN_we & RESET_EN_REGWEN_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_RESET_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (RESET_EN_gated_we),
    .wd     (RESET_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.RESET_EN[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (RESET_EN_qs)
  );


  // Subregister 0 of Multireg RESET_STATUS
  // R[RESET_STATUS]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_RESET_STATUS (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.RESET_STATUS[0].de),
    .d      (hw2reg.RESET_STATUS[0].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (RESET_STATUS_qs)
  );


  // R[ESCALATE_RESET_STATUS]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_ESCALATE_RESET_STATUS (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ESCALATE_RESET_STATUS.de),
    .d      (hw2reg.ESCALATE_RESET_STATUS.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ESCALATE_RESET_STATUS_qs)
  );


  // R[WAKE_INFO_CAPTURE_DIS]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WAKE_INFO_CAPTURE_DIS (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WAKE_INFO_CAPTURE_DIS_we),
    .wd     (WAKE_INFO_CAPTURE_DIS_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WAKE_INFO_CAPTURE_DIS.q),
    .ds     (),

    // to register interface (read)
    .qs     (WAKE_INFO_CAPTURE_DIS_qs)
  );


  // R[WAKE_INFO]: V(True)
  logic WAKE_INFO_qe;
  logic [2:0] WAKE_INFO_flds_we;
  assign WAKE_INFO_qe = |WAKE_INFO_flds_we; //  Rivos: &*_we --> |*_we
  //   F[REASONS]: 2:0
  prim_subreg_ext #(
    .DW    (3)
  ) u_WAKE_INFO_REASONS (
    .re     (WAKE_INFO_re),
    .we     (WAKE_INFO_we),
    .wd     (WAKE_INFO_REASONS_wd),
    .d      (hw2reg.WAKE_INFO.REASONS.d),
    .qre    (),
    .qe     (WAKE_INFO_flds_we[0]),
    .q      (reg2hw.WAKE_INFO.REASONS.q),
    .ds     (),
    .qs     (WAKE_INFO_REASONS_qs)
  );
  assign reg2hw.WAKE_INFO.REASONS.qe = WAKE_INFO_qe;

  //   F[FALL_THROUGH]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_WAKE_INFO_FALL_THROUGH (
    .re     (WAKE_INFO_re),
    .we     (WAKE_INFO_we),
    .wd     (WAKE_INFO_FALL_THROUGH_wd),
    .d      (hw2reg.WAKE_INFO.FALL_THROUGH.d),
    .qre    (),
    .qe     (WAKE_INFO_flds_we[1]),
    .q      (reg2hw.WAKE_INFO.FALL_THROUGH.q),
    .ds     (),
    .qs     (WAKE_INFO_FALL_THROUGH_qs)
  );
  assign reg2hw.WAKE_INFO.FALL_THROUGH.qe = WAKE_INFO_qe;

  //   F[ABORT]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_WAKE_INFO_ABORT (
    .re     (WAKE_INFO_re),
    .we     (WAKE_INFO_we),
    .wd     (WAKE_INFO_ABORT_wd),
    .d      (hw2reg.WAKE_INFO.ABORT.d),
    .qre    (),
    .qe     (WAKE_INFO_flds_we[2]),
    .q      (reg2hw.WAKE_INFO.ABORT.q),
    .ds     (),
    .qs     (WAKE_INFO_ABORT_qs)
  );
  assign reg2hw.WAKE_INFO.ABORT.qe = WAKE_INFO_qe;


  // R[FAULT_STATUS]: V(False)
  //   F[REG_INTG_ERR]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_FAULT_STATUS_REG_INTG_ERR (
    // sync clock and reset required for this register
    .clk_i   (clk_lc_i),
    .rst_ni  (rst_lc_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.FAULT_STATUS.REG_INTG_ERR.de),
    .d      (hw2reg.FAULT_STATUS.REG_INTG_ERR.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.FAULT_STATUS.REG_INTG_ERR.q),
    .ds     (),

    // to register interface (read)
    .qs     (FAULT_STATUS_REG_INTG_ERR_qs)
  );

  //   F[ESC_TIMEOUT]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_FAULT_STATUS_ESC_TIMEOUT (
    // sync clock and reset required for this register
    .clk_i   (clk_lc_i),
    .rst_ni  (rst_lc_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.FAULT_STATUS.ESC_TIMEOUT.de),
    .d      (hw2reg.FAULT_STATUS.ESC_TIMEOUT.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.FAULT_STATUS.ESC_TIMEOUT.q),
    .ds     (),

    // to register interface (read)
    .qs     (FAULT_STATUS_ESC_TIMEOUT_qs)
  );

  //   F[MAIN_PD_GLITCH]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_FAULT_STATUS_MAIN_PD_GLITCH (
    // sync clock and reset required for this register
    .clk_i   (clk_lc_i),
    .rst_ni  (rst_lc_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.FAULT_STATUS.MAIN_PD_GLITCH.de),
    .d      (hw2reg.FAULT_STATUS.MAIN_PD_GLITCH.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.FAULT_STATUS.MAIN_PD_GLITCH.q),
    .ds     (),

    // to register interface (read)
    .qs     (FAULT_STATUS_MAIN_PD_GLITCH_qs)
  );



  logic [15:0]  reqRoleVec;
  RDP_DECODE  #(.ENC_WID(4))
    raclRoleXDEC  (.dec(reqRoleVec),  .enc(tl_i.a_user.rsvd[3:0])); // incoming RACL, assigned in scsctnif.sv

  logic [16:0] addr_hit;
  logic [16:0] addrHitNRdAllowed;
  logic [16:0] addrHitNWrAllowed;
  always_comb begin
    addr_hit   = '0;
    addrHitNRdAllowed = '0;
    addrHitNWrAllowed = '0;

    addr_hit[ 0]          = (reg_addr == PWRMGR_INTR_STATE_OFFSET);  // INTR_STATE
    addrHitNRdAllowed[ 0] = (reg_addr == PWRMGR_INTR_STATE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 0] = (reg_addr == PWRMGR_INTR_STATE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 1]          = (reg_addr == PWRMGR_INTR_ENABLE_OFFSET);  // INTR_ENABLE
    addrHitNRdAllowed[ 1] = (reg_addr == PWRMGR_INTR_ENABLE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 1] = (reg_addr == PWRMGR_INTR_ENABLE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 2]          = (reg_addr == PWRMGR_INTR_TEST_OFFSET);  // INTR_TEST
    addrHitNRdAllowed[ 2] = (reg_addr == PWRMGR_INTR_TEST_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 2] = (reg_addr == PWRMGR_INTR_TEST_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 3]          = (reg_addr == PWRMGR_ALERT_TEST_OFFSET);  // ALERT_TEST
    addrHitNRdAllowed[ 3] = (reg_addr == PWRMGR_ALERT_TEST_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 3] = (reg_addr == PWRMGR_ALERT_TEST_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 4]          = (reg_addr == PWRMGR_CTRL_CFG_REGWEN_OFFSET);  // CTRL_CFG_REGWEN
    addrHitNRdAllowed[ 4] = (reg_addr == PWRMGR_CTRL_CFG_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 4] = (reg_addr == PWRMGR_CTRL_CFG_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 5]          = (reg_addr == PWRMGR_CONTROL_OFFSET);  // CONTROL
    addrHitNRdAllowed[ 5] = (reg_addr == PWRMGR_CONTROL_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 5] = (reg_addr == PWRMGR_CONTROL_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 6]          = (reg_addr == PWRMGR_CFG_CDC_SYNC_OFFSET);  // CFG_CDC_SYNC
    addrHitNRdAllowed[ 6] = (reg_addr == PWRMGR_CFG_CDC_SYNC_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 6] = (reg_addr == PWRMGR_CFG_CDC_SYNC_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 7]          = (reg_addr == PWRMGR_WAKEUP_EN_REGWEN_OFFSET);  // WAKEUP_EN_REGWEN
    addrHitNRdAllowed[ 7] = (reg_addr == PWRMGR_WAKEUP_EN_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 7] = (reg_addr == PWRMGR_WAKEUP_EN_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 8]          = (reg_addr == PWRMGR_WAKEUP_EN_OFFSET);  // WAKEUP_EN
    addrHitNRdAllowed[ 8] = (reg_addr == PWRMGR_WAKEUP_EN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 8] = (reg_addr == PWRMGR_WAKEUP_EN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 9]          = (reg_addr == PWRMGR_WAKE_STATUS_OFFSET);  // WAKE_STATUS
    addrHitNRdAllowed[ 9] = (reg_addr == PWRMGR_WAKE_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 9] = (reg_addr == PWRMGR_WAKE_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[10]          = (reg_addr == PWRMGR_RESET_EN_REGWEN_OFFSET);  // RESET_EN_REGWEN
    addrHitNRdAllowed[10] = (reg_addr == PWRMGR_RESET_EN_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[10] = (reg_addr == PWRMGR_RESET_EN_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[11]          = (reg_addr == PWRMGR_RESET_EN_OFFSET);  // RESET_EN
    addrHitNRdAllowed[11] = (reg_addr == PWRMGR_RESET_EN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[11] = (reg_addr == PWRMGR_RESET_EN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[12]          = (reg_addr == PWRMGR_RESET_STATUS_OFFSET);  // RESET_STATUS
    addrHitNRdAllowed[12] = (reg_addr == PWRMGR_RESET_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[12] = (reg_addr == PWRMGR_RESET_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[13]          = (reg_addr == PWRMGR_ESCALATE_RESET_STATUS_OFFSET);  // ESCALATE_RESET_STATUS
    addrHitNRdAllowed[13] = (reg_addr == PWRMGR_ESCALATE_RESET_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[13] = (reg_addr == PWRMGR_ESCALATE_RESET_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[14]          = (reg_addr == PWRMGR_WAKE_INFO_CAPTURE_DIS_OFFSET);  // WAKE_INFO_CAPTURE_DIS
    addrHitNRdAllowed[14] = (reg_addr == PWRMGR_WAKE_INFO_CAPTURE_DIS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[14] = (reg_addr == PWRMGR_WAKE_INFO_CAPTURE_DIS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[15]          = (reg_addr == PWRMGR_WAKE_INFO_OFFSET);  // WAKE_INFO
    addrHitNRdAllowed[15] = (reg_addr == PWRMGR_WAKE_INFO_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[15] = (reg_addr == PWRMGR_WAKE_INFO_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[16]          = (reg_addr == PWRMGR_FAULT_STATUS_OFFSET);  // FAULT_STATUS
    addrHitNRdAllowed[16] = (reg_addr == PWRMGR_FAULT_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[16] = (reg_addr == PWRMGR_FAULT_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));

  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
  assign raclViol = (|addr_hit) & ~(|(addr_hit & (addrHitNRdAllowed | addrHitNWrAllowed))); // address hit but failed the RACL check

  // Check sub-word write is permitted
  always_comb begin
    wr_err = reg_we &
              (( addrHitNWrAllowed[ 0] & (|(PWRMGR_PERMIT[ 0] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 1] & (|(PWRMGR_PERMIT[ 1] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 2] & (|(PWRMGR_PERMIT[ 2] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 3] & (|(PWRMGR_PERMIT[ 3] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 4] & (|(PWRMGR_PERMIT[ 4] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 5] & (|(PWRMGR_PERMIT[ 5] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 6] & (|(PWRMGR_PERMIT[ 6] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 7] & (|(PWRMGR_PERMIT[ 7] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 8] & (|(PWRMGR_PERMIT[ 8] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 9] & (|(PWRMGR_PERMIT[ 9] & ~reg_be)) ) |
               ( addrHitNWrAllowed[10] & (|(PWRMGR_PERMIT[10] & ~reg_be)) ) |
               ( addrHitNWrAllowed[11] & (|(PWRMGR_PERMIT[11] & ~reg_be)) ) |
               ( addrHitNWrAllowed[12] & (|(PWRMGR_PERMIT[12] & ~reg_be)) ) |
               ( addrHitNWrAllowed[13] & (|(PWRMGR_PERMIT[13] & ~reg_be)) ) |
               ( addrHitNWrAllowed[14] & (|(PWRMGR_PERMIT[14] & ~reg_be)) ) |
               ( addrHitNWrAllowed[15] & (|(PWRMGR_PERMIT[15] & ~reg_be)) ) |
               ( addrHitNWrAllowed[16] & (|(PWRMGR_PERMIT[16] & ~reg_be)) ) );
  end

  // Generate write-enables
  assign INTR_STATE_we = addrHitNWrAllowed[0] & reg_we & !reg_error;
  assign INTR_STATE_wd = reg_wdata[0];

  assign INTR_ENABLE_we = addrHitNWrAllowed[1] & reg_we & !reg_error;
  assign INTR_ENABLE_wd = reg_wdata[0];

  assign INTR_TEST_we = addrHitNWrAllowed[2] & reg_we & !reg_error;
  assign INTR_TEST_wd = reg_wdata[0];

  assign ALERT_TEST_we = addrHitNWrAllowed[3] & reg_we & !reg_error;
  assign ALERT_TEST_wd = reg_wdata[0];

  assign CTRL_CFG_REGWEN_re = addrHitNRdAllowed[4] & reg_re & !reg_error;
  assign CONTROL_we = addrHitNWrAllowed[5] & reg_we & !reg_error;
  assign CONTROL_LOW_POWER_HINT_wd = reg_wdata[0];

  assign CONTROL_CORE_CLK_EN_wd = reg_wdata[4];

  assign CONTROL_IO_CLK_EN_wd = reg_wdata[5];

  assign CONTROL_USB_CLK_EN_LP_wd = reg_wdata[6];

  assign CONTROL_USB_CLK_EN_ACTIVE_wd = reg_wdata[7];

  assign CONTROL_MAIN_PD_N_wd = reg_wdata[8];

  assign CFG_CDC_SYNC_we = addrHitNWrAllowed[6] & reg_we & !reg_error;
  assign CFG_CDC_SYNC_wd = reg_wdata[0];

  assign WAKEUP_EN_REGWEN_we = addrHitNWrAllowed[7] & reg_we & !reg_error;
  assign WAKEUP_EN_REGWEN_wd = reg_wdata[0];

  assign WAKEUP_EN_we = addrHitNWrAllowed[8] & reg_we & !reg_error;
  assign WAKEUP_EN_EN_0_wd = reg_wdata[0];

  assign WAKEUP_EN_EN_1_wd = reg_wdata[1];

  assign WAKEUP_EN_EN_2_wd = reg_wdata[2];

  assign RESET_EN_REGWEN_we = addrHitNWrAllowed[10] & reg_we & !reg_error;
  assign RESET_EN_REGWEN_wd = reg_wdata[0];

  assign RESET_EN_we = addrHitNWrAllowed[11] & reg_we & !reg_error;
  assign RESET_EN_wd = reg_wdata[0];

  assign WAKE_INFO_CAPTURE_DIS_we = addrHitNWrAllowed[14] & reg_we & !reg_error;
  assign WAKE_INFO_CAPTURE_DIS_wd = reg_wdata[0];

  assign WAKE_INFO_re = addrHitNRdAllowed[15] & reg_re & !reg_error;
  assign WAKE_INFO_we = addrHitNWrAllowed[15] & reg_we & !reg_error;
  assign WAKE_INFO_REASONS_wd = reg_wdata[2:0];

  assign WAKE_INFO_FALL_THROUGH_wd = reg_wdata[3];

  assign WAKE_INFO_ABORT_wd = reg_wdata[4];


  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = INTR_STATE_we;
    reg_we_check[1] = INTR_ENABLE_we;
    reg_we_check[2] = INTR_TEST_we;
    reg_we_check[3] = ALERT_TEST_we;
    reg_we_check[4] = 1'b0;
    reg_we_check[5] = CONTROL_gated_we;
    reg_we_check[6] = CFG_CDC_SYNC_we;
    reg_we_check[7] = WAKEUP_EN_REGWEN_we;
    reg_we_check[8] = WAKEUP_EN_gated_we;
    reg_we_check[9] = 1'b0;
    reg_we_check[10] = RESET_EN_REGWEN_we;
    reg_we_check[11] = RESET_EN_gated_we;
    reg_we_check[12] = 1'b0;
    reg_we_check[13] = 1'b0;
    reg_we_check[14] = WAKE_INFO_CAPTURE_DIS_we;
    reg_we_check[15] = WAKE_INFO_we;
    reg_we_check[16] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addrHitNRdAllowed[0]: begin
        reg_rdata_next[0] = INTR_STATE_qs;
      end

      addrHitNRdAllowed[1]: begin
        reg_rdata_next[0] = INTR_ENABLE_qs;
      end

      addrHitNRdAllowed[2]: begin
        reg_rdata_next[0] = '0;
      end

      addrHitNRdAllowed[3]: begin
        reg_rdata_next[0] = '0;
      end

      addrHitNRdAllowed[4]: begin
        reg_rdata_next[0] = CTRL_CFG_REGWEN_qs;
      end

      addrHitNRdAllowed[5]: begin
        reg_rdata_next[0] = CONTROL_LOW_POWER_HINT_qs;
        reg_rdata_next[4] = CONTROL_CORE_CLK_EN_qs;
        reg_rdata_next[5] = CONTROL_IO_CLK_EN_qs;
        reg_rdata_next[6] = CONTROL_USB_CLK_EN_LP_qs;
        reg_rdata_next[7] = CONTROL_USB_CLK_EN_ACTIVE_qs;
        reg_rdata_next[8] = CONTROL_MAIN_PD_N_qs;
      end

      addrHitNRdAllowed[6]: begin
        reg_rdata_next[0] = CFG_CDC_SYNC_qs;
      end

      addrHitNRdAllowed[7]: begin
        reg_rdata_next[0] = WAKEUP_EN_REGWEN_qs;
      end

      addrHitNRdAllowed[8]: begin
        reg_rdata_next[0] = WAKEUP_EN_EN_0_qs;
        reg_rdata_next[1] = WAKEUP_EN_EN_1_qs;
        reg_rdata_next[2] = WAKEUP_EN_EN_2_qs;
      end

      addrHitNRdAllowed[9]: begin
        reg_rdata_next[0] = WAKE_STATUS_VAL_0_qs;
        reg_rdata_next[1] = WAKE_STATUS_VAL_1_qs;
        reg_rdata_next[2] = WAKE_STATUS_VAL_2_qs;
      end

      addrHitNRdAllowed[10]: begin
        reg_rdata_next[0] = RESET_EN_REGWEN_qs;
      end

      addrHitNRdAllowed[11]: begin
        reg_rdata_next[0] = RESET_EN_qs;
      end

      addrHitNRdAllowed[12]: begin
        reg_rdata_next[0] = RESET_STATUS_qs;
      end

      addrHitNRdAllowed[13]: begin
        reg_rdata_next[0] = ESCALATE_RESET_STATUS_qs;
      end

      addrHitNRdAllowed[14]: begin
        reg_rdata_next[0] = WAKE_INFO_CAPTURE_DIS_qs;
      end

      addrHitNRdAllowed[15]: begin
        reg_rdata_next[2:0] = WAKE_INFO_REASONS_qs;
        reg_rdata_next[3] = WAKE_INFO_FALL_THROUGH_qs;
        reg_rdata_next[4] = WAKE_INFO_ABORT_qs;
      end

      addrHitNRdAllowed[16]: begin
        reg_rdata_next[0] = FAULT_STATUS_REG_INTG_ERR_qs;
        reg_rdata_next[1] = FAULT_STATUS_ESC_TIMEOUT_qs;
        reg_rdata_next[2] = FAULT_STATUS_MAIN_PD_GLITCH_qs;
      end

      default: begin
        reg_rdata_next = '0;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
// Local Variables:
// fill-column:1
// verilog-auto-arg-sort:t
// verilog-typedef-regexp: "_[etu]$"
// verilog-library-directories:(".")
// End:
