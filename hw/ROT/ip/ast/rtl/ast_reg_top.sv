// SPDX-FileCopyrightText: Copyright (c) 2022 by Rivos Inc.
// Confidential and proprietary, see LICENSE for details.
// SPDX-License-Identifier: LicenseRef-Rivos-Internal-Only

// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module ast_reg_top (
  input clk_i,
  input swWenClk,
  input hwUpdClk,
  input rst_ni,
  input deepReset_L,
  input lightReset_L,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output ast_reg_pkg::ast_reg2hw_t reg2hw, // Write
  input  ast_reg_pkg::ast_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output raclViol,
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import ast_reg_pkg::* ;

  localparam int AW = 10;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [43:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(44)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .en_ifetch_i    (prim_mubi_pkg::MuBi4False),
    .intg_error_o   (),

    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)

  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] REGA0_qs;
  logic [31:0] REGA1_qs;
  logic REGA2_we;
  logic [31:0] REGA2_qs;
  logic [31:0] REGA2_wd;
  logic REGA3_we;
  logic [31:0] REGA3_qs;
  logic [31:0] REGA3_wd;
  logic REGA4_we;
  logic [31:0] REGA4_qs;
  logic [31:0] REGA4_wd;
  logic REGA5_we;
  logic [31:0] REGA5_qs;
  logic [31:0] REGA5_wd;
  logic REGA6_we;
  logic [31:0] REGA6_qs;
  logic [31:0] REGA6_wd;
  logic REGA7_we;
  logic [31:0] REGA7_qs;
  logic [31:0] REGA7_wd;
  logic REGA8_we;
  logic [31:0] REGA8_qs;
  logic [31:0] REGA8_wd;
  logic REGA9_we;
  logic [31:0] REGA9_qs;
  logic [31:0] REGA9_wd;
  logic REGA10_we;
  logic [31:0] REGA10_qs;
  logic [31:0] REGA10_wd;
  logic REGA11_we;
  logic [31:0] REGA11_qs;
  logic [31:0] REGA11_wd;
  logic REGA12_we;
  logic [31:0] REGA12_qs;
  logic [31:0] REGA12_wd;
  logic REGA13_we;
  logic [31:0] REGA13_qs;
  logic [31:0] REGA13_wd;
  logic REGA14_we;
  logic [31:0] REGA14_qs;
  logic [31:0] REGA14_wd;
  logic REGA15_we;
  logic [31:0] REGA15_qs;
  logic [31:0] REGA15_wd;
  logic REGA16_we;
  logic [31:0] REGA16_qs;
  logic [31:0] REGA16_wd;
  logic REGA17_we;
  logic [31:0] REGA17_qs;
  logic [31:0] REGA17_wd;
  logic REGA18_we;
  logic [31:0] REGA18_qs;
  logic [31:0] REGA18_wd;
  logic REGA19_we;
  logic [31:0] REGA19_qs;
  logic [31:0] REGA19_wd;
  logic REGA20_we;
  logic [31:0] REGA20_qs;
  logic [31:0] REGA20_wd;
  logic REGA21_we;
  logic [31:0] REGA21_qs;
  logic [31:0] REGA21_wd;
  logic REGA22_we;
  logic [31:0] REGA22_qs;
  logic [31:0] REGA22_wd;
  logic REGA23_we;
  logic [31:0] REGA23_qs;
  logic [31:0] REGA23_wd;
  logic REGA24_we;
  logic [31:0] REGA24_qs;
  logic [31:0] REGA24_wd;
  logic REGA25_we;
  logic [31:0] REGA25_qs;
  logic [31:0] REGA25_wd;
  logic REGA26_we;
  logic [31:0] REGA26_qs;
  logic [31:0] REGA26_wd;
  logic REGA27_we;
  logic [31:0] REGA27_qs;
  logic [31:0] REGA27_wd;
  logic [31:0] REGA28_qs;
  logic REGA29_we;
  logic [31:0] REGA29_qs;
  logic [31:0] REGA29_wd;
  logic REGA30_we;
  logic [31:0] REGA30_qs;
  logic [31:0] REGA30_wd;
  logic REGA31_we;
  logic [31:0] REGA31_qs;
  logic [31:0] REGA31_wd;
  logic REGA32_we;
  logic [31:0] REGA32_qs;
  logic [31:0] REGA32_wd;
  logic REGA33_we;
  logic [31:0] REGA33_qs;
  logic [31:0] REGA33_wd;
  logic REGA34_we;
  logic [31:0] REGA34_qs;
  logic [31:0] REGA34_wd;
  logic REGA35_we;
  logic [31:0] REGA35_qs;
  logic [31:0] REGA35_wd;
  logic REGA36_we;
  logic [31:0] REGA36_qs;
  logic [31:0] REGA36_wd;
  logic REGA37_we;
  logic [31:0] REGA37_qs;
  logic [31:0] REGA37_wd;
  logic REGAL_we;
  logic [31:0] REGAL_wd;
  logic REGB_0_we;
  logic [31:0] REGB_0_qs;
  logic [31:0] REGB_0_wd;
  logic REGB_1_we;
  logic [31:0] REGB_1_qs;
  logic [31:0] REGB_1_wd;
  logic REGB_2_we;
  logic [31:0] REGB_2_qs;
  logic [31:0] REGB_2_wd;
  logic REGB_3_we;
  logic [31:0] REGB_3_qs;
  logic [31:0] REGB_3_wd;
  logic REGB_4_we;
  logic [31:0] REGB_4_qs;
  logic [31:0] REGB_4_wd;

  // Register instances
  // R[REGA0]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_REGA0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA0.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA0_qs)
  );


  // R[REGA1]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h1)
  ) u_REGA1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA1.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA1_qs)
  );


  // R[REGA2]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h2)
  ) u_REGA2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA2_we),
    .wd     (REGA2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA2.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA2_qs)
  );


  // R[REGA3]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h3)
  ) u_REGA3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA3_we),
    .wd     (REGA3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA3.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA3_qs)
  );


  // R[REGA4]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h4)
  ) u_REGA4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA4_we),
    .wd     (REGA4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA4.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA4_qs)
  );


  // R[REGA5]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h5)
  ) u_REGA5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA5_we),
    .wd     (REGA5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA5.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA5_qs)
  );


  // R[REGA6]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h6)
  ) u_REGA6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA6_we),
    .wd     (REGA6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA6.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA6_qs)
  );


  // R[REGA7]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h7)
  ) u_REGA7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA7_we),
    .wd     (REGA7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA7.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA7_qs)
  );


  // R[REGA8]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h8)
  ) u_REGA8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA8_we),
    .wd     (REGA8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA8.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA8_qs)
  );


  // R[REGA9]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h9)
  ) u_REGA9 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA9_we),
    .wd     (REGA9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA9.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA9_qs)
  );


  // R[REGA10]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'ha)
  ) u_REGA10 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA10_we),
    .wd     (REGA10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA10.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA10_qs)
  );


  // R[REGA11]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'hb)
  ) u_REGA11 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA11_we),
    .wd     (REGA11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA11.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA11_qs)
  );


  // R[REGA12]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'hc)
  ) u_REGA12 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA12_we),
    .wd     (REGA12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA12.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA12_qs)
  );


  // R[REGA13]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'hd)
  ) u_REGA13 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA13_we),
    .wd     (REGA13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA13.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA13_qs)
  );


  // R[REGA14]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'he)
  ) u_REGA14 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA14_we),
    .wd     (REGA14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA14.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA14_qs)
  );


  // R[REGA15]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'hf)
  ) u_REGA15 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA15_we),
    .wd     (REGA15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA15.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA15_qs)
  );


  // R[REGA16]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h10)
  ) u_REGA16 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA16_we),
    .wd     (REGA16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA16.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA16_qs)
  );


  // R[REGA17]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h11)
  ) u_REGA17 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA17_we),
    .wd     (REGA17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA17.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA17_qs)
  );


  // R[REGA18]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h12)
  ) u_REGA18 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA18_we),
    .wd     (REGA18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA18.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA18_qs)
  );


  // R[REGA19]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h13)
  ) u_REGA19 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA19_we),
    .wd     (REGA19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA19.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA19_qs)
  );


  // R[REGA20]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h14)
  ) u_REGA20 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA20_we),
    .wd     (REGA20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA20.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA20_qs)
  );


  // R[REGA21]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h15)
  ) u_REGA21 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA21_we),
    .wd     (REGA21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA21.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA21_qs)
  );


  // R[REGA22]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h16)
  ) u_REGA22 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA22_we),
    .wd     (REGA22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA22.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA22_qs)
  );


  // R[REGA23]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h17)
  ) u_REGA23 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA23_we),
    .wd     (REGA23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA23.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA23_qs)
  );


  // R[REGA24]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h18)
  ) u_REGA24 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA24_we),
    .wd     (REGA24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA24.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA24_qs)
  );


  // R[REGA25]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h19)
  ) u_REGA25 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA25_we),
    .wd     (REGA25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA25.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA25_qs)
  );


  // R[REGA26]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h1a)
  ) u_REGA26 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA26_we),
    .wd     (REGA26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA26.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA26_qs)
  );


  // R[REGA27]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h1b)
  ) u_REGA27 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA27_we),
    .wd     (REGA27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA27.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA27_qs)
  );


  // R[REGA28]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h1c)
  ) u_REGA28 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA28.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA28_qs)
  );


  // R[REGA29]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h1d)
  ) u_REGA29 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA29_we),
    .wd     (REGA29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA29.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA29_qs)
  );


  // R[REGA30]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h1e)
  ) u_REGA30 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA30_we),
    .wd     (REGA30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA30.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA30_qs)
  );


  // R[REGA31]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h1f)
  ) u_REGA31 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA31_we),
    .wd     (REGA31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA31.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA31_qs)
  );


  // R[REGA32]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h20)
  ) u_REGA32 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA32_we),
    .wd     (REGA32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA32.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA32_qs)
  );


  // R[REGA33]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h21)
  ) u_REGA33 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA33_we),
    .wd     (REGA33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA33.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA33_qs)
  );


  // R[REGA34]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h22)
  ) u_REGA34 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA34_we),
    .wd     (REGA34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA34.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA34_qs)
  );


  // R[REGA35]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h23)
  ) u_REGA35 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA35_we),
    .wd     (REGA35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA35.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA35_qs)
  );


  // R[REGA36]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h24)
  ) u_REGA36 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA36_we),
    .wd     (REGA36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA36.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA36_qs)
  );


  // R[REGA37]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h25)
  ) u_REGA37 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGA37_we),
    .wd     (REGA37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGA37.q),
    .ds     (),

    // to register interface (read)
    .qs     (REGA37_qs)
  );


  // R[REGAL]: V(True)
  logic REGAL_qe;
  logic [0:0] REGAL_flds_we;
  assign REGAL_qe = |REGAL_flds_we; //  Rivos: &*_we --> |*_we
  prim_subreg_ext #(
    .DW    (32)
  ) u_REGAL (
    .re     (1'b0),
    .we     (REGAL_we),
    .wd     (REGAL_wd),
    .d      (hw2reg.REGAL.d),
    .qre    (),
    .qe     (REGAL_flds_we[0]),
    .q      (reg2hw.REGAL.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.REGAL.qe = REGAL_qe;


  // Subregister 0 of Multireg REGB
  // R[REGB_0]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_REGB_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGB_0_we),
    .wd     (REGB_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGB[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (REGB_0_qs)
  );


  // Subregister 1 of Multireg REGB
  // R[REGB_1]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_REGB_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGB_1_we),
    .wd     (REGB_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGB[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (REGB_1_qs)
  );


  // Subregister 2 of Multireg REGB
  // R[REGB_2]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_REGB_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGB_2_we),
    .wd     (REGB_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGB[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (REGB_2_qs)
  );


  // Subregister 3 of Multireg REGB
  // R[REGB_3]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_REGB_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGB_3_we),
    .wd     (REGB_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGB[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (REGB_3_qs)
  );


  // Subregister 4 of Multireg REGB
  // R[REGB_4]: V(False)


  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_REGB_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (REGB_4_we),
    .wd     (REGB_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.REGB[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (REGB_4_qs)
  );



  logic [15:0]  reqRoleVec;
  RDP_DECODE  #(.ENC_WID(4))
    raclRoleXDEC  (.dec(reqRoleVec),  .enc(tl_i.a_user.rsvd[3:0])); // incoming RACL, assigned in scsctnif.sv

  logic [43:0] addr_hit;
  logic [43:0] addrHitNRdAllowed;
  logic [43:0] addrHitNWrAllowed;
  always_comb begin
    addr_hit   = '0;
    addrHitNRdAllowed = '0;
    addrHitNWrAllowed = '0;

    addr_hit[ 0]          = (reg_addr == AST_REGA0_OFFSET);  // REGA0
    addrHitNRdAllowed[ 0] = (reg_addr == AST_REGA0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 0] = (reg_addr == AST_REGA0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 1]          = (reg_addr == AST_REGA1_OFFSET);  // REGA1
    addrHitNRdAllowed[ 1] = (reg_addr == AST_REGA1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 1] = (reg_addr == AST_REGA1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 2]          = (reg_addr == AST_REGA2_OFFSET);  // REGA2
    addrHitNRdAllowed[ 2] = (reg_addr == AST_REGA2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 2] = (reg_addr == AST_REGA2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 3]          = (reg_addr == AST_REGA3_OFFSET);  // REGA3
    addrHitNRdAllowed[ 3] = (reg_addr == AST_REGA3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 3] = (reg_addr == AST_REGA3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 4]          = (reg_addr == AST_REGA4_OFFSET);  // REGA4
    addrHitNRdAllowed[ 4] = (reg_addr == AST_REGA4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 4] = (reg_addr == AST_REGA4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 5]          = (reg_addr == AST_REGA5_OFFSET);  // REGA5
    addrHitNRdAllowed[ 5] = (reg_addr == AST_REGA5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 5] = (reg_addr == AST_REGA5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 6]          = (reg_addr == AST_REGA6_OFFSET);  // REGA6
    addrHitNRdAllowed[ 6] = (reg_addr == AST_REGA6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 6] = (reg_addr == AST_REGA6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 7]          = (reg_addr == AST_REGA7_OFFSET);  // REGA7
    addrHitNRdAllowed[ 7] = (reg_addr == AST_REGA7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 7] = (reg_addr == AST_REGA7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 8]          = (reg_addr == AST_REGA8_OFFSET);  // REGA8
    addrHitNRdAllowed[ 8] = (reg_addr == AST_REGA8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 8] = (reg_addr == AST_REGA8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 9]          = (reg_addr == AST_REGA9_OFFSET);  // REGA9
    addrHitNRdAllowed[ 9] = (reg_addr == AST_REGA9_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 9] = (reg_addr == AST_REGA9_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[10]          = (reg_addr == AST_REGA10_OFFSET);  // REGA10
    addrHitNRdAllowed[10] = (reg_addr == AST_REGA10_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[10] = (reg_addr == AST_REGA10_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[11]          = (reg_addr == AST_REGA11_OFFSET);  // REGA11
    addrHitNRdAllowed[11] = (reg_addr == AST_REGA11_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[11] = (reg_addr == AST_REGA11_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[12]          = (reg_addr == AST_REGA12_OFFSET);  // REGA12
    addrHitNRdAllowed[12] = (reg_addr == AST_REGA12_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[12] = (reg_addr == AST_REGA12_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[13]          = (reg_addr == AST_REGA13_OFFSET);  // REGA13
    addrHitNRdAllowed[13] = (reg_addr == AST_REGA13_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[13] = (reg_addr == AST_REGA13_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[14]          = (reg_addr == AST_REGA14_OFFSET);  // REGA14
    addrHitNRdAllowed[14] = (reg_addr == AST_REGA14_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[14] = (reg_addr == AST_REGA14_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[15]          = (reg_addr == AST_REGA15_OFFSET);  // REGA15
    addrHitNRdAllowed[15] = (reg_addr == AST_REGA15_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[15] = (reg_addr == AST_REGA15_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[16]          = (reg_addr == AST_REGA16_OFFSET);  // REGA16
    addrHitNRdAllowed[16] = (reg_addr == AST_REGA16_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[16] = (reg_addr == AST_REGA16_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[17]          = (reg_addr == AST_REGA17_OFFSET);  // REGA17
    addrHitNRdAllowed[17] = (reg_addr == AST_REGA17_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[17] = (reg_addr == AST_REGA17_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[18]          = (reg_addr == AST_REGA18_OFFSET);  // REGA18
    addrHitNRdAllowed[18] = (reg_addr == AST_REGA18_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[18] = (reg_addr == AST_REGA18_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[19]          = (reg_addr == AST_REGA19_OFFSET);  // REGA19
    addrHitNRdAllowed[19] = (reg_addr == AST_REGA19_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[19] = (reg_addr == AST_REGA19_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[20]          = (reg_addr == AST_REGA20_OFFSET);  // REGA20
    addrHitNRdAllowed[20] = (reg_addr == AST_REGA20_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[20] = (reg_addr == AST_REGA20_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[21]          = (reg_addr == AST_REGA21_OFFSET);  // REGA21
    addrHitNRdAllowed[21] = (reg_addr == AST_REGA21_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[21] = (reg_addr == AST_REGA21_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[22]          = (reg_addr == AST_REGA22_OFFSET);  // REGA22
    addrHitNRdAllowed[22] = (reg_addr == AST_REGA22_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[22] = (reg_addr == AST_REGA22_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[23]          = (reg_addr == AST_REGA23_OFFSET);  // REGA23
    addrHitNRdAllowed[23] = (reg_addr == AST_REGA23_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[23] = (reg_addr == AST_REGA23_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[24]          = (reg_addr == AST_REGA24_OFFSET);  // REGA24
    addrHitNRdAllowed[24] = (reg_addr == AST_REGA24_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[24] = (reg_addr == AST_REGA24_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[25]          = (reg_addr == AST_REGA25_OFFSET);  // REGA25
    addrHitNRdAllowed[25] = (reg_addr == AST_REGA25_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[25] = (reg_addr == AST_REGA25_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[26]          = (reg_addr == AST_REGA26_OFFSET);  // REGA26
    addrHitNRdAllowed[26] = (reg_addr == AST_REGA26_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[26] = (reg_addr == AST_REGA26_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[27]          = (reg_addr == AST_REGA27_OFFSET);  // REGA27
    addrHitNRdAllowed[27] = (reg_addr == AST_REGA27_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[27] = (reg_addr == AST_REGA27_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[28]          = (reg_addr == AST_REGA28_OFFSET);  // REGA28
    addrHitNRdAllowed[28] = (reg_addr == AST_REGA28_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[28] = (reg_addr == AST_REGA28_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[29]          = (reg_addr == AST_REGA29_OFFSET);  // REGA29
    addrHitNRdAllowed[29] = (reg_addr == AST_REGA29_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[29] = (reg_addr == AST_REGA29_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[30]          = (reg_addr == AST_REGA30_OFFSET);  // REGA30
    addrHitNRdAllowed[30] = (reg_addr == AST_REGA30_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[30] = (reg_addr == AST_REGA30_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[31]          = (reg_addr == AST_REGA31_OFFSET);  // REGA31
    addrHitNRdAllowed[31] = (reg_addr == AST_REGA31_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[31] = (reg_addr == AST_REGA31_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[32]          = (reg_addr == AST_REGA32_OFFSET);  // REGA32
    addrHitNRdAllowed[32] = (reg_addr == AST_REGA32_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[32] = (reg_addr == AST_REGA32_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[33]          = (reg_addr == AST_REGA33_OFFSET);  // REGA33
    addrHitNRdAllowed[33] = (reg_addr == AST_REGA33_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[33] = (reg_addr == AST_REGA33_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[34]          = (reg_addr == AST_REGA34_OFFSET);  // REGA34
    addrHitNRdAllowed[34] = (reg_addr == AST_REGA34_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[34] = (reg_addr == AST_REGA34_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[35]          = (reg_addr == AST_REGA35_OFFSET);  // REGA35
    addrHitNRdAllowed[35] = (reg_addr == AST_REGA35_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[35] = (reg_addr == AST_REGA35_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[36]          = (reg_addr == AST_REGA36_OFFSET);  // REGA36
    addrHitNRdAllowed[36] = (reg_addr == AST_REGA36_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[36] = (reg_addr == AST_REGA36_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[37]          = (reg_addr == AST_REGA37_OFFSET);  // REGA37
    addrHitNRdAllowed[37] = (reg_addr == AST_REGA37_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[37] = (reg_addr == AST_REGA37_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[38]          = (reg_addr == AST_REGAL_OFFSET);  // REGAL
    addrHitNRdAllowed[38] = (reg_addr == AST_REGAL_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[38] = (reg_addr == AST_REGAL_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[39]          = (reg_addr == AST_REGB_0_OFFSET);  // REGB_0
    addrHitNRdAllowed[39] = (reg_addr == AST_REGB_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[39] = (reg_addr == AST_REGB_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[40]          = (reg_addr == AST_REGB_1_OFFSET);  // REGB_1
    addrHitNRdAllowed[40] = (reg_addr == AST_REGB_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[40] = (reg_addr == AST_REGB_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[41]          = (reg_addr == AST_REGB_2_OFFSET);  // REGB_2
    addrHitNRdAllowed[41] = (reg_addr == AST_REGB_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[41] = (reg_addr == AST_REGB_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[42]          = (reg_addr == AST_REGB_3_OFFSET);  // REGB_3
    addrHitNRdAllowed[42] = (reg_addr == AST_REGB_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[42] = (reg_addr == AST_REGB_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[43]          = (reg_addr == AST_REGB_4_OFFSET);  // REGB_4
    addrHitNRdAllowed[43] = (reg_addr == AST_REGB_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[43] = (reg_addr == AST_REGB_4_OFFSET) & (|(16'hffff & reqRoleVec));

  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
  assign raclViol = (|addr_hit) & ~(|(addr_hit & (addrHitNRdAllowed | addrHitNWrAllowed))); // address hit but failed the RACL check

  // Check sub-word write is permitted
  always_comb begin
    wr_err = reg_we &
              (( addrHitNWrAllowed[ 0] & (|(AST_PERMIT[ 0] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 1] & (|(AST_PERMIT[ 1] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 2] & (|(AST_PERMIT[ 2] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 3] & (|(AST_PERMIT[ 3] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 4] & (|(AST_PERMIT[ 4] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 5] & (|(AST_PERMIT[ 5] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 6] & (|(AST_PERMIT[ 6] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 7] & (|(AST_PERMIT[ 7] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 8] & (|(AST_PERMIT[ 8] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 9] & (|(AST_PERMIT[ 9] & ~reg_be)) ) |
               ( addrHitNWrAllowed[10] & (|(AST_PERMIT[10] & ~reg_be)) ) |
               ( addrHitNWrAllowed[11] & (|(AST_PERMIT[11] & ~reg_be)) ) |
               ( addrHitNWrAllowed[12] & (|(AST_PERMIT[12] & ~reg_be)) ) |
               ( addrHitNWrAllowed[13] & (|(AST_PERMIT[13] & ~reg_be)) ) |
               ( addrHitNWrAllowed[14] & (|(AST_PERMIT[14] & ~reg_be)) ) |
               ( addrHitNWrAllowed[15] & (|(AST_PERMIT[15] & ~reg_be)) ) |
               ( addrHitNWrAllowed[16] & (|(AST_PERMIT[16] & ~reg_be)) ) |
               ( addrHitNWrAllowed[17] & (|(AST_PERMIT[17] & ~reg_be)) ) |
               ( addrHitNWrAllowed[18] & (|(AST_PERMIT[18] & ~reg_be)) ) |
               ( addrHitNWrAllowed[19] & (|(AST_PERMIT[19] & ~reg_be)) ) |
               ( addrHitNWrAllowed[20] & (|(AST_PERMIT[20] & ~reg_be)) ) |
               ( addrHitNWrAllowed[21] & (|(AST_PERMIT[21] & ~reg_be)) ) |
               ( addrHitNWrAllowed[22] & (|(AST_PERMIT[22] & ~reg_be)) ) |
               ( addrHitNWrAllowed[23] & (|(AST_PERMIT[23] & ~reg_be)) ) |
               ( addrHitNWrAllowed[24] & (|(AST_PERMIT[24] & ~reg_be)) ) |
               ( addrHitNWrAllowed[25] & (|(AST_PERMIT[25] & ~reg_be)) ) |
               ( addrHitNWrAllowed[26] & (|(AST_PERMIT[26] & ~reg_be)) ) |
               ( addrHitNWrAllowed[27] & (|(AST_PERMIT[27] & ~reg_be)) ) |
               ( addrHitNWrAllowed[28] & (|(AST_PERMIT[28] & ~reg_be)) ) |
               ( addrHitNWrAllowed[29] & (|(AST_PERMIT[29] & ~reg_be)) ) |
               ( addrHitNWrAllowed[30] & (|(AST_PERMIT[30] & ~reg_be)) ) |
               ( addrHitNWrAllowed[31] & (|(AST_PERMIT[31] & ~reg_be)) ) |
               ( addrHitNWrAllowed[32] & (|(AST_PERMIT[32] & ~reg_be)) ) |
               ( addrHitNWrAllowed[33] & (|(AST_PERMIT[33] & ~reg_be)) ) |
               ( addrHitNWrAllowed[34] & (|(AST_PERMIT[34] & ~reg_be)) ) |
               ( addrHitNWrAllowed[35] & (|(AST_PERMIT[35] & ~reg_be)) ) |
               ( addrHitNWrAllowed[36] & (|(AST_PERMIT[36] & ~reg_be)) ) |
               ( addrHitNWrAllowed[37] & (|(AST_PERMIT[37] & ~reg_be)) ) |
               ( addrHitNWrAllowed[38] & (|(AST_PERMIT[38] & ~reg_be)) ) |
               ( addrHitNWrAllowed[39] & (|(AST_PERMIT[39] & ~reg_be)) ) |
               ( addrHitNWrAllowed[40] & (|(AST_PERMIT[40] & ~reg_be)) ) |
               ( addrHitNWrAllowed[41] & (|(AST_PERMIT[41] & ~reg_be)) ) |
               ( addrHitNWrAllowed[42] & (|(AST_PERMIT[42] & ~reg_be)) ) |
               ( addrHitNWrAllowed[43] & (|(AST_PERMIT[43] & ~reg_be)) ) );
  end

  // Generate write-enables
  assign REGA2_we = addrHitNWrAllowed[2] & reg_we & !reg_error;
  assign REGA2_wd = reg_wdata[31:0];

  assign REGA3_we = addrHitNWrAllowed[3] & reg_we & !reg_error;
  assign REGA3_wd = reg_wdata[31:0];

  assign REGA4_we = addrHitNWrAllowed[4] & reg_we & !reg_error;
  assign REGA4_wd = reg_wdata[31:0];

  assign REGA5_we = addrHitNWrAllowed[5] & reg_we & !reg_error;
  assign REGA5_wd = reg_wdata[31:0];

  assign REGA6_we = addrHitNWrAllowed[6] & reg_we & !reg_error;
  assign REGA6_wd = reg_wdata[31:0];

  assign REGA7_we = addrHitNWrAllowed[7] & reg_we & !reg_error;
  assign REGA7_wd = reg_wdata[31:0];

  assign REGA8_we = addrHitNWrAllowed[8] & reg_we & !reg_error;
  assign REGA8_wd = reg_wdata[31:0];

  assign REGA9_we = addrHitNWrAllowed[9] & reg_we & !reg_error;
  assign REGA9_wd = reg_wdata[31:0];

  assign REGA10_we = addrHitNWrAllowed[10] & reg_we & !reg_error;
  assign REGA10_wd = reg_wdata[31:0];

  assign REGA11_we = addrHitNWrAllowed[11] & reg_we & !reg_error;
  assign REGA11_wd = reg_wdata[31:0];

  assign REGA12_we = addrHitNWrAllowed[12] & reg_we & !reg_error;
  assign REGA12_wd = reg_wdata[31:0];

  assign REGA13_we = addrHitNWrAllowed[13] & reg_we & !reg_error;
  assign REGA13_wd = reg_wdata[31:0];

  assign REGA14_we = addrHitNWrAllowed[14] & reg_we & !reg_error;
  assign REGA14_wd = reg_wdata[31:0];

  assign REGA15_we = addrHitNWrAllowed[15] & reg_we & !reg_error;
  assign REGA15_wd = reg_wdata[31:0];

  assign REGA16_we = addrHitNWrAllowed[16] & reg_we & !reg_error;
  assign REGA16_wd = reg_wdata[31:0];

  assign REGA17_we = addrHitNWrAllowed[17] & reg_we & !reg_error;
  assign REGA17_wd = reg_wdata[31:0];

  assign REGA18_we = addrHitNWrAllowed[18] & reg_we & !reg_error;
  assign REGA18_wd = reg_wdata[31:0];

  assign REGA19_we = addrHitNWrAllowed[19] & reg_we & !reg_error;
  assign REGA19_wd = reg_wdata[31:0];

  assign REGA20_we = addrHitNWrAllowed[20] & reg_we & !reg_error;
  assign REGA20_wd = reg_wdata[31:0];

  assign REGA21_we = addrHitNWrAllowed[21] & reg_we & !reg_error;
  assign REGA21_wd = reg_wdata[31:0];

  assign REGA22_we = addrHitNWrAllowed[22] & reg_we & !reg_error;
  assign REGA22_wd = reg_wdata[31:0];

  assign REGA23_we = addrHitNWrAllowed[23] & reg_we & !reg_error;
  assign REGA23_wd = reg_wdata[31:0];

  assign REGA24_we = addrHitNWrAllowed[24] & reg_we & !reg_error;
  assign REGA24_wd = reg_wdata[31:0];

  assign REGA25_we = addrHitNWrAllowed[25] & reg_we & !reg_error;
  assign REGA25_wd = reg_wdata[31:0];

  assign REGA26_we = addrHitNWrAllowed[26] & reg_we & !reg_error;
  assign REGA26_wd = reg_wdata[31:0];

  assign REGA27_we = addrHitNWrAllowed[27] & reg_we & !reg_error;
  assign REGA27_wd = reg_wdata[31:0];

  assign REGA29_we = addrHitNWrAllowed[29] & reg_we & !reg_error;
  assign REGA29_wd = reg_wdata[31:0];

  assign REGA30_we = addrHitNWrAllowed[30] & reg_we & !reg_error;
  assign REGA30_wd = reg_wdata[31:0];

  assign REGA31_we = addrHitNWrAllowed[31] & reg_we & !reg_error;
  assign REGA31_wd = reg_wdata[31:0];

  assign REGA32_we = addrHitNWrAllowed[32] & reg_we & !reg_error;
  assign REGA32_wd = reg_wdata[31:0];

  assign REGA33_we = addrHitNWrAllowed[33] & reg_we & !reg_error;
  assign REGA33_wd = reg_wdata[31:0];

  assign REGA34_we = addrHitNWrAllowed[34] & reg_we & !reg_error;
  assign REGA34_wd = reg_wdata[31:0];

  assign REGA35_we = addrHitNWrAllowed[35] & reg_we & !reg_error;
  assign REGA35_wd = reg_wdata[31:0];

  assign REGA36_we = addrHitNWrAllowed[36] & reg_we & !reg_error;
  assign REGA36_wd = reg_wdata[31:0];

  assign REGA37_we = addrHitNWrAllowed[37] & reg_we & !reg_error;
  assign REGA37_wd = reg_wdata[31:0];

  assign REGAL_we = addrHitNWrAllowed[38] & reg_we & !reg_error;
  assign REGAL_wd = reg_wdata[31:0];

  assign REGB_0_we = addrHitNWrAllowed[39] & reg_we & !reg_error;
  assign REGB_0_wd = reg_wdata[31:0];

  assign REGB_1_we = addrHitNWrAllowed[40] & reg_we & !reg_error;
  assign REGB_1_wd = reg_wdata[31:0];

  assign REGB_2_we = addrHitNWrAllowed[41] & reg_we & !reg_error;
  assign REGB_2_wd = reg_wdata[31:0];

  assign REGB_3_we = addrHitNWrAllowed[42] & reg_we & !reg_error;
  assign REGB_3_wd = reg_wdata[31:0];

  assign REGB_4_we = addrHitNWrAllowed[43] & reg_we & !reg_error;
  assign REGB_4_wd = reg_wdata[31:0];


  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = 1'b0;
    reg_we_check[1] = 1'b0;
    reg_we_check[2] = REGA2_we;
    reg_we_check[3] = REGA3_we;
    reg_we_check[4] = REGA4_we;
    reg_we_check[5] = REGA5_we;
    reg_we_check[6] = REGA6_we;
    reg_we_check[7] = REGA7_we;
    reg_we_check[8] = REGA8_we;
    reg_we_check[9] = REGA9_we;
    reg_we_check[10] = REGA10_we;
    reg_we_check[11] = REGA11_we;
    reg_we_check[12] = REGA12_we;
    reg_we_check[13] = REGA13_we;
    reg_we_check[14] = REGA14_we;
    reg_we_check[15] = REGA15_we;
    reg_we_check[16] = REGA16_we;
    reg_we_check[17] = REGA17_we;
    reg_we_check[18] = REGA18_we;
    reg_we_check[19] = REGA19_we;
    reg_we_check[20] = REGA20_we;
    reg_we_check[21] = REGA21_we;
    reg_we_check[22] = REGA22_we;
    reg_we_check[23] = REGA23_we;
    reg_we_check[24] = REGA24_we;
    reg_we_check[25] = REGA25_we;
    reg_we_check[26] = REGA26_we;
    reg_we_check[27] = REGA27_we;
    reg_we_check[28] = 1'b0;
    reg_we_check[29] = REGA29_we;
    reg_we_check[30] = REGA30_we;
    reg_we_check[31] = REGA31_we;
    reg_we_check[32] = REGA32_we;
    reg_we_check[33] = REGA33_we;
    reg_we_check[34] = REGA34_we;
    reg_we_check[35] = REGA35_we;
    reg_we_check[36] = REGA36_we;
    reg_we_check[37] = REGA37_we;
    reg_we_check[38] = REGAL_we;
    reg_we_check[39] = REGB_0_we;
    reg_we_check[40] = REGB_1_we;
    reg_we_check[41] = REGB_2_we;
    reg_we_check[42] = REGB_3_we;
    reg_we_check[43] = REGB_4_we;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addrHitNRdAllowed[0]: begin
        reg_rdata_next[31:0] = REGA0_qs;
      end

      addrHitNRdAllowed[1]: begin
        reg_rdata_next[31:0] = REGA1_qs;
      end

      addrHitNRdAllowed[2]: begin
        reg_rdata_next[31:0] = REGA2_qs;
      end

      addrHitNRdAllowed[3]: begin
        reg_rdata_next[31:0] = REGA3_qs;
      end

      addrHitNRdAllowed[4]: begin
        reg_rdata_next[31:0] = REGA4_qs;
      end

      addrHitNRdAllowed[5]: begin
        reg_rdata_next[31:0] = REGA5_qs;
      end

      addrHitNRdAllowed[6]: begin
        reg_rdata_next[31:0] = REGA6_qs;
      end

      addrHitNRdAllowed[7]: begin
        reg_rdata_next[31:0] = REGA7_qs;
      end

      addrHitNRdAllowed[8]: begin
        reg_rdata_next[31:0] = REGA8_qs;
      end

      addrHitNRdAllowed[9]: begin
        reg_rdata_next[31:0] = REGA9_qs;
      end

      addrHitNRdAllowed[10]: begin
        reg_rdata_next[31:0] = REGA10_qs;
      end

      addrHitNRdAllowed[11]: begin
        reg_rdata_next[31:0] = REGA11_qs;
      end

      addrHitNRdAllowed[12]: begin
        reg_rdata_next[31:0] = REGA12_qs;
      end

      addrHitNRdAllowed[13]: begin
        reg_rdata_next[31:0] = REGA13_qs;
      end

      addrHitNRdAllowed[14]: begin
        reg_rdata_next[31:0] = REGA14_qs;
      end

      addrHitNRdAllowed[15]: begin
        reg_rdata_next[31:0] = REGA15_qs;
      end

      addrHitNRdAllowed[16]: begin
        reg_rdata_next[31:0] = REGA16_qs;
      end

      addrHitNRdAllowed[17]: begin
        reg_rdata_next[31:0] = REGA17_qs;
      end

      addrHitNRdAllowed[18]: begin
        reg_rdata_next[31:0] = REGA18_qs;
      end

      addrHitNRdAllowed[19]: begin
        reg_rdata_next[31:0] = REGA19_qs;
      end

      addrHitNRdAllowed[20]: begin
        reg_rdata_next[31:0] = REGA20_qs;
      end

      addrHitNRdAllowed[21]: begin
        reg_rdata_next[31:0] = REGA21_qs;
      end

      addrHitNRdAllowed[22]: begin
        reg_rdata_next[31:0] = REGA22_qs;
      end

      addrHitNRdAllowed[23]: begin
        reg_rdata_next[31:0] = REGA23_qs;
      end

      addrHitNRdAllowed[24]: begin
        reg_rdata_next[31:0] = REGA24_qs;
      end

      addrHitNRdAllowed[25]: begin
        reg_rdata_next[31:0] = REGA25_qs;
      end

      addrHitNRdAllowed[26]: begin
        reg_rdata_next[31:0] = REGA26_qs;
      end

      addrHitNRdAllowed[27]: begin
        reg_rdata_next[31:0] = REGA27_qs;
      end

      addrHitNRdAllowed[28]: begin
        reg_rdata_next[31:0] = REGA28_qs;
      end

      addrHitNRdAllowed[29]: begin
        reg_rdata_next[31:0] = REGA29_qs;
      end

      addrHitNRdAllowed[30]: begin
        reg_rdata_next[31:0] = REGA30_qs;
      end

      addrHitNRdAllowed[31]: begin
        reg_rdata_next[31:0] = REGA31_qs;
      end

      addrHitNRdAllowed[32]: begin
        reg_rdata_next[31:0] = REGA32_qs;
      end

      addrHitNRdAllowed[33]: begin
        reg_rdata_next[31:0] = REGA33_qs;
      end

      addrHitNRdAllowed[34]: begin
        reg_rdata_next[31:0] = REGA34_qs;
      end

      addrHitNRdAllowed[35]: begin
        reg_rdata_next[31:0] = REGA35_qs;
      end

      addrHitNRdAllowed[36]: begin
        reg_rdata_next[31:0] = REGA36_qs;
      end

      addrHitNRdAllowed[37]: begin
        reg_rdata_next[31:0] = REGA37_qs;
      end

      addrHitNRdAllowed[38]: begin
        reg_rdata_next[31:0] = '0;
      end

      addrHitNRdAllowed[39]: begin
        reg_rdata_next[31:0] = REGB_0_qs;
      end

      addrHitNRdAllowed[40]: begin
        reg_rdata_next[31:0] = REGB_1_qs;
      end

      addrHitNRdAllowed[41]: begin
        reg_rdata_next[31:0] = REGB_2_qs;
      end

      addrHitNRdAllowed[42]: begin
        reg_rdata_next[31:0] = REGB_3_qs;
      end

      addrHitNRdAllowed[43]: begin
        reg_rdata_next[31:0] = REGB_4_qs;
      end

      default: begin
        reg_rdata_next = '0;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
// Local Variables:
// fill-column:1
// verilog-auto-arg-sort:t
// verilog-typedef-regexp: "_[etu]$"
// verilog-library-directories:(".")
// End:
