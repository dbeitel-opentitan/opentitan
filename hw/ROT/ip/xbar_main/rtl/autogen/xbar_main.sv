// SPDX-FileCopyrightText: Copyright (c) 2022 by Rivos Inc.
// Confidential and proprietary, see LICENSE for details.
// SPDX-License-Identifier: LicenseRef-Rivos-Internal-Only

// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect
// u_rv_core_ibex.corei --> u_rv_core_ibex1n32 --> u_sm1rom_ctrl033 --> u_rom_ctrl0.rom
// u_rv_core_ibex.corei --> u_rv_core_ibex1n32 --> u_sm1rom_ctrl134 --> u_rom_ctrl1.rom
// u_rv_core_ibex.corei --> u_rv_core_ibex1n32 --> u_sm1rv_dm35   --> u_rv_dm.mem   
// u_rv_core_ibex.corei --> u_rv_core_ibex1n32 --> u_sm1sram_ctrl_main36 --> u_sram_ctrl_main.ram
// u_rv_core_ibex.corei --> u_rv_core_ibex1n32 --> u_sm1extr37    --> u_extr.dev    
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1rom_ctrl033 --> u_rom_ctrl0.rom
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1rom_ctrl039 --> u_rom_ctrl0.regs
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1rom_ctrl134 --> u_rom_ctrl1.rom
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1rom_ctrl140 --> u_rom_ctrl1.regs
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1rv_dm35   --> u_rv_dm.mem   
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1rv_dm41   --> u_rv_dm.regs  
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1sram_ctrl_main36 --> u_sram_ctrl_main.ram
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1asf43     --> u_asf42        --> u_peri        
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1aes44     --> u_aes         
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1entropy_src45 --> u_entropy_src 
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1csrng46   --> u_csrng       
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1edn047    --> u_edn0        
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1edn148    --> u_edn1        
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1hmac49    --> u_hmac        
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1rv_plic50 --> u_rv_plic     
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1otbn51    --> u_otbn        
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1keymgr52  --> u_keymgr      
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1kmac53    --> u_kmac        
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1sram_ctrl_main54 --> u_sram_ctrl_main.regs
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1rv_core_ibex55 --> u_rv_core_ibex.cfg
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1sram_ctrl_mbox56 --> u_sram_ctrl_mbox.ram
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1sram_ctrl_mbox57 --> u_sram_ctrl_mbox.regs
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_mbx.dev     
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_dma.dev     
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_dbgctlhstreg.dev
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_dbgctlmbxmem.dev
// u_rv_core_ibex.cored --> u_rv_core_ibex1n38 --> u_sm1extr37    --> u_extr.dev    
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1rom_ctrl033 --> u_rom_ctrl0.rom
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1rom_ctrl039 --> u_rom_ctrl0.regs
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1rom_ctrl134 --> u_rom_ctrl1.rom
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1rom_ctrl140 --> u_rom_ctrl1.regs
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1rv_dm35   --> u_rv_dm.mem   
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1rv_dm41   --> u_rv_dm.regs  
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1sram_ctrl_main36 --> u_sram_ctrl_main.ram
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1asf43     --> u_asf42        --> u_peri        
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1aes44     --> u_aes         
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1entropy_src45 --> u_entropy_src 
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1csrng46   --> u_csrng       
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1edn047    --> u_edn0        
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1edn148    --> u_edn1        
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1hmac49    --> u_hmac        
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1rv_plic50 --> u_rv_plic     
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1otbn51    --> u_otbn        
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1keymgr52  --> u_keymgr      
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1kmac53    --> u_kmac        
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1sram_ctrl_main54 --> u_sram_ctrl_main.regs
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1rv_core_ibex55 --> u_rv_core_ibex.cfg
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1sram_ctrl_mbox56 --> u_sram_ctrl_mbox.ram
// u_rv_dm.sba    --> u_rv_dm1n58    --> u_sm1sram_ctrl_mbox57 --> u_sram_ctrl_mbox.regs
// u_mbx.hst      --> u_sm1sram_ctrl_mbox56 --> u_sram_ctrl_mbox.ram
// u_dma.hst      --> u_dma1n59      --> u_sm1rom_ctrl033 --> u_rom_ctrl0.rom
// u_dma.hst      --> u_dma1n59      --> u_sm1rom_ctrl039 --> u_rom_ctrl0.regs
// u_dma.hst      --> u_dma1n59      --> u_sm1rom_ctrl134 --> u_rom_ctrl1.rom
// u_dma.hst      --> u_dma1n59      --> u_sm1rom_ctrl140 --> u_rom_ctrl1.regs
// u_dma.hst      --> u_dma1n59      --> u_sm1sram_ctrl_main36 --> u_sram_ctrl_main.ram
// u_dma.hst      --> u_dma1n59      --> u_sm1sram_ctrl_main54 --> u_sram_ctrl_main.regs
// u_dma.hst      --> u_dma1n59      --> u_sm1rv_dm35   --> u_rv_dm.mem   
// u_dma.hst      --> u_dma1n59      --> u_sm1rv_dm41   --> u_rv_dm.regs  
// u_dma.hst      --> u_dma1n59      --> u_sm1aes44     --> u_aes         
// u_dma.hst      --> u_dma1n59      --> u_sm1hmac49    --> u_hmac        
// u_dma.hst      --> u_dma1n59      --> u_sm1kmac53    --> u_kmac        
// u_dma.hst      --> u_dma1n59      --> u_sm1otbn51    --> u_otbn        
// u_dma.hst      --> u_dma1n59      --> u_sm1keymgr52  --> u_keymgr      
// u_dma.hst      --> u_dma1n59      --> u_sm1csrng46   --> u_csrng       
// u_dma.hst      --> u_dma1n59      --> u_sm1entropy_src45 --> u_entropy_src 
// u_dma.hst      --> u_dma1n59      --> u_sm1edn047    --> u_edn0        
// u_dma.hst      --> u_dma1n59      --> u_sm1edn148    --> u_edn1        
// u_dma.hst      --> u_dma1n59      --> u_sm1rv_core_ibex55 --> u_rv_core_ibex.cfg
// u_dma.hst      --> u_dma1n59      --> u_sm1rv_plic50 --> u_rv_plic     
// u_dma.hst      --> u_dma1n59      --> u_sm1asf43     --> u_asf42        --> u_peri        
// u_dma.hst      --> u_dma1n59      --> u_sm1extr37    --> u_extr.dev    

module xbar_main (
  input clk_main_i,
  input clk_fixed_i,
  input clk_usb_i,
  input clk_spi_host1_i,
  input rst_main_ni,
  input rst_fixed_ni,
  input rst_usb_ni,
  input rst_spi_host1_ni,

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_rv_core_ibex__corei_i,
  output tlul_pkg::tl_d2h_t tl_rv_core_ibex__corei_o,
  input  tlul_pkg::tl_h2d_t tl_rv_core_ibex__cored_i,
  output tlul_pkg::tl_d2h_t tl_rv_core_ibex__cored_o,
  input  tlul_pkg::tl_h2d_t tl_rv_dm__sba_i,
  output tlul_pkg::tl_d2h_t tl_rv_dm__sba_o,
  input  tlul_pkg::tl_h2d_t tl_mbx__hst_i,
  output tlul_pkg::tl_d2h_t tl_mbx__hst_o,
  input  tlul_pkg::tl_h2d_t tl_dma__hst_i,
  output tlul_pkg::tl_d2h_t tl_dma__hst_o,

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_rv_dm__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rv_dm__regs_i,
  output tlul_pkg::tl_h2d_t tl_rv_dm__mem_o,
  input  tlul_pkg::tl_d2h_t tl_rv_dm__mem_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl0__rom_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl0__rom_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl0__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl0__regs_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl1__rom_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl1__rom_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl1__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl1__regs_i,
  output tlul_pkg::tl_h2d_t tl_peri_o,
  input  tlul_pkg::tl_d2h_t tl_peri_i,
  output tlul_pkg::tl_h2d_t tl_hmac_o,
  input  tlul_pkg::tl_d2h_t tl_hmac_i,
  output tlul_pkg::tl_h2d_t tl_kmac_o,
  input  tlul_pkg::tl_d2h_t tl_kmac_i,
  output tlul_pkg::tl_h2d_t tl_aes_o,
  input  tlul_pkg::tl_d2h_t tl_aes_i,
  output tlul_pkg::tl_h2d_t tl_entropy_src_o,
  input  tlul_pkg::tl_d2h_t tl_entropy_src_i,
  output tlul_pkg::tl_h2d_t tl_csrng_o,
  input  tlul_pkg::tl_d2h_t tl_csrng_i,
  output tlul_pkg::tl_h2d_t tl_edn0_o,
  input  tlul_pkg::tl_d2h_t tl_edn0_i,
  output tlul_pkg::tl_h2d_t tl_edn1_o,
  input  tlul_pkg::tl_d2h_t tl_edn1_i,
  output tlul_pkg::tl_h2d_t tl_rv_plic_o,
  input  tlul_pkg::tl_d2h_t tl_rv_plic_i,
  output tlul_pkg::tl_h2d_t tl_otbn_o,
  input  tlul_pkg::tl_d2h_t tl_otbn_i,
  output tlul_pkg::tl_h2d_t tl_keymgr_o,
  input  tlul_pkg::tl_d2h_t tl_keymgr_i,
  output tlul_pkg::tl_h2d_t tl_rv_core_ibex__cfg_o,
  input  tlul_pkg::tl_d2h_t tl_rv_core_ibex__cfg_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_main__regs_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_main__regs_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_main__ram_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_main__ram_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_mbox__regs_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_mbox__regs_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_mbox__ram_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_mbox__ram_i,
  output tlul_pkg::tl_h2d_t tl_mbx__dev_o,
  input  tlul_pkg::tl_d2h_t tl_mbx__dev_i,
  output tlul_pkg::tl_h2d_t tl_dma__dev_o,
  input  tlul_pkg::tl_d2h_t tl_dma__dev_i,
  output tlul_pkg::tl_h2d_t tl_dbgctlhstreg__dev_o,
  input  tlul_pkg::tl_d2h_t tl_dbgctlhstreg__dev_i,
  output tlul_pkg::tl_h2d_t tl_dbgctlmbxmem__dev_o,
  input  tlul_pkg::tl_d2h_t tl_dbgctlmbxmem__dev_i,
  output tlul_pkg::tl_h2d_t tl_extr__dev_o,
  input  tlul_pkg::tl_d2h_t tl_extr__dev_i,

  input prim_mubi_pkg::mubi4_t scanmode_i
);

  import tlul_pkg::*;
  import tl_main_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
  logic unused_scanmode;
  assign unused_scanmode = ^scanmode_i;

  tl_h2d_t tl_rv_core_ibex1n32_us_h2d ;
  tl_d2h_t tl_rv_core_ibex1n32_us_d2h ;


  tl_h2d_t tl_rv_core_ibex1n32_ds_h2d [5];
  tl_d2h_t tl_rv_core_ibex1n32_ds_d2h [5];

  // Create steering signal
  logic [2:0] dev_sel_rv_core_ibex1n32;


  tl_h2d_t tl_sm1rom_ctrl033_us_h2d [4];
  tl_d2h_t tl_sm1rom_ctrl033_us_d2h [4];

  tl_h2d_t tl_sm1rom_ctrl033_ds_h2d ;
  tl_d2h_t tl_sm1rom_ctrl033_ds_d2h ;


  tl_h2d_t tl_sm1rom_ctrl134_us_h2d [4];
  tl_d2h_t tl_sm1rom_ctrl134_us_d2h [4];

  tl_h2d_t tl_sm1rom_ctrl134_ds_h2d ;
  tl_d2h_t tl_sm1rom_ctrl134_ds_d2h ;


  tl_h2d_t tl_sm1rv_dm35_us_h2d [4];
  tl_d2h_t tl_sm1rv_dm35_us_d2h [4];

  tl_h2d_t tl_sm1rv_dm35_ds_h2d ;
  tl_d2h_t tl_sm1rv_dm35_ds_d2h ;


  tl_h2d_t tl_sm1sram_ctrl_main36_us_h2d [4];
  tl_d2h_t tl_sm1sram_ctrl_main36_us_d2h [4];

  tl_h2d_t tl_sm1sram_ctrl_main36_ds_h2d ;
  tl_d2h_t tl_sm1sram_ctrl_main36_ds_d2h ;


  tl_h2d_t tl_sm1extr37_us_h2d [3];
  tl_d2h_t tl_sm1extr37_us_d2h [3];

  tl_h2d_t tl_sm1extr37_ds_h2d ;
  tl_d2h_t tl_sm1extr37_ds_d2h ;

  tl_h2d_t tl_rv_core_ibex1n38_us_h2d ;
  tl_d2h_t tl_rv_core_ibex1n38_us_d2h ;


  tl_h2d_t tl_rv_core_ibex1n38_ds_h2d [27];
  tl_d2h_t tl_rv_core_ibex1n38_ds_d2h [27];

  // Create steering signal
  logic [4:0] dev_sel_rv_core_ibex1n38;


  tl_h2d_t tl_sm1rom_ctrl039_us_h2d [3];
  tl_d2h_t tl_sm1rom_ctrl039_us_d2h [3];

  tl_h2d_t tl_sm1rom_ctrl039_ds_h2d ;
  tl_d2h_t tl_sm1rom_ctrl039_ds_d2h ;


  tl_h2d_t tl_sm1rom_ctrl140_us_h2d [3];
  tl_d2h_t tl_sm1rom_ctrl140_us_d2h [3];

  tl_h2d_t tl_sm1rom_ctrl140_ds_h2d ;
  tl_d2h_t tl_sm1rom_ctrl140_ds_d2h ;


  tl_h2d_t tl_sm1rv_dm41_us_h2d [3];
  tl_d2h_t tl_sm1rv_dm41_us_d2h [3];

  tl_h2d_t tl_sm1rv_dm41_ds_h2d ;
  tl_d2h_t tl_sm1rv_dm41_ds_d2h ;

  tl_h2d_t tl_asf42_us_h2d ;
  tl_d2h_t tl_asf42_us_d2h ;
  tl_h2d_t tl_asf42_ds_h2d ;
  tl_d2h_t tl_asf42_ds_d2h ;


  tl_h2d_t tl_sm1asf43_us_h2d [3];
  tl_d2h_t tl_sm1asf43_us_d2h [3];

  tl_h2d_t tl_sm1asf43_ds_h2d ;
  tl_d2h_t tl_sm1asf43_ds_d2h ;


  tl_h2d_t tl_sm1aes44_us_h2d [3];
  tl_d2h_t tl_sm1aes44_us_d2h [3];

  tl_h2d_t tl_sm1aes44_ds_h2d ;
  tl_d2h_t tl_sm1aes44_ds_d2h ;


  tl_h2d_t tl_sm1entropy_src45_us_h2d [3];
  tl_d2h_t tl_sm1entropy_src45_us_d2h [3];

  tl_h2d_t tl_sm1entropy_src45_ds_h2d ;
  tl_d2h_t tl_sm1entropy_src45_ds_d2h ;


  tl_h2d_t tl_sm1csrng46_us_h2d [3];
  tl_d2h_t tl_sm1csrng46_us_d2h [3];

  tl_h2d_t tl_sm1csrng46_ds_h2d ;
  tl_d2h_t tl_sm1csrng46_ds_d2h ;


  tl_h2d_t tl_sm1edn047_us_h2d [3];
  tl_d2h_t tl_sm1edn047_us_d2h [3];

  tl_h2d_t tl_sm1edn047_ds_h2d ;
  tl_d2h_t tl_sm1edn047_ds_d2h ;


  tl_h2d_t tl_sm1edn148_us_h2d [3];
  tl_d2h_t tl_sm1edn148_us_d2h [3];

  tl_h2d_t tl_sm1edn148_ds_h2d ;
  tl_d2h_t tl_sm1edn148_ds_d2h ;


  tl_h2d_t tl_sm1hmac49_us_h2d [3];
  tl_d2h_t tl_sm1hmac49_us_d2h [3];

  tl_h2d_t tl_sm1hmac49_ds_h2d ;
  tl_d2h_t tl_sm1hmac49_ds_d2h ;


  tl_h2d_t tl_sm1rv_plic50_us_h2d [3];
  tl_d2h_t tl_sm1rv_plic50_us_d2h [3];

  tl_h2d_t tl_sm1rv_plic50_ds_h2d ;
  tl_d2h_t tl_sm1rv_plic50_ds_d2h ;


  tl_h2d_t tl_sm1otbn51_us_h2d [3];
  tl_d2h_t tl_sm1otbn51_us_d2h [3];

  tl_h2d_t tl_sm1otbn51_ds_h2d ;
  tl_d2h_t tl_sm1otbn51_ds_d2h ;


  tl_h2d_t tl_sm1keymgr52_us_h2d [3];
  tl_d2h_t tl_sm1keymgr52_us_d2h [3];

  tl_h2d_t tl_sm1keymgr52_ds_h2d ;
  tl_d2h_t tl_sm1keymgr52_ds_d2h ;


  tl_h2d_t tl_sm1kmac53_us_h2d [3];
  tl_d2h_t tl_sm1kmac53_us_d2h [3];

  tl_h2d_t tl_sm1kmac53_ds_h2d ;
  tl_d2h_t tl_sm1kmac53_ds_d2h ;


  tl_h2d_t tl_sm1sram_ctrl_main54_us_h2d [3];
  tl_d2h_t tl_sm1sram_ctrl_main54_us_d2h [3];

  tl_h2d_t tl_sm1sram_ctrl_main54_ds_h2d ;
  tl_d2h_t tl_sm1sram_ctrl_main54_ds_d2h ;


  tl_h2d_t tl_sm1rv_core_ibex55_us_h2d [3];
  tl_d2h_t tl_sm1rv_core_ibex55_us_d2h [3];

  tl_h2d_t tl_sm1rv_core_ibex55_ds_h2d ;
  tl_d2h_t tl_sm1rv_core_ibex55_ds_d2h ;


  tl_h2d_t tl_sm1sram_ctrl_mbox56_us_h2d [3];
  tl_d2h_t tl_sm1sram_ctrl_mbox56_us_d2h [3];

  tl_h2d_t tl_sm1sram_ctrl_mbox56_ds_h2d ;
  tl_d2h_t tl_sm1sram_ctrl_mbox56_ds_d2h ;


  tl_h2d_t tl_sm1sram_ctrl_mbox57_us_h2d [2];
  tl_d2h_t tl_sm1sram_ctrl_mbox57_us_d2h [2];

  tl_h2d_t tl_sm1sram_ctrl_mbox57_ds_h2d ;
  tl_d2h_t tl_sm1sram_ctrl_mbox57_ds_d2h ;

  tl_h2d_t tl_rv_dm1n58_us_h2d ;
  tl_d2h_t tl_rv_dm1n58_us_d2h ;


  tl_h2d_t tl_rv_dm1n58_ds_h2d [22];
  tl_d2h_t tl_rv_dm1n58_ds_d2h [22];

  // Create steering signal
  logic [4:0] dev_sel_rv_dm1n58;

  tl_h2d_t tl_dma1n59_us_h2d ;
  tl_d2h_t tl_dma1n59_us_d2h ;


  tl_h2d_t tl_dma1n59_ds_h2d [21];
  tl_d2h_t tl_dma1n59_ds_d2h [21];

  // Create steering signal
  logic [4:0] dev_sel_dma1n59;



  assign tl_sm1rom_ctrl033_us_h2d[0] = tl_rv_core_ibex1n32_ds_h2d[0];
  assign tl_rv_core_ibex1n32_ds_d2h[0] = tl_sm1rom_ctrl033_us_d2h[0];

  assign tl_sm1rom_ctrl134_us_h2d[0] = tl_rv_core_ibex1n32_ds_h2d[1];
  assign tl_rv_core_ibex1n32_ds_d2h[1] = tl_sm1rom_ctrl134_us_d2h[0];

  assign tl_sm1rv_dm35_us_h2d[0] = tl_rv_core_ibex1n32_ds_h2d[2];
  assign tl_rv_core_ibex1n32_ds_d2h[2] = tl_sm1rv_dm35_us_d2h[0];

  assign tl_sm1sram_ctrl_main36_us_h2d[0] = tl_rv_core_ibex1n32_ds_h2d[3];
  assign tl_rv_core_ibex1n32_ds_d2h[3] = tl_sm1sram_ctrl_main36_us_d2h[0];

  assign tl_sm1extr37_us_h2d[0] = tl_rv_core_ibex1n32_ds_h2d[4];
  assign tl_rv_core_ibex1n32_ds_d2h[4] = tl_sm1extr37_us_d2h[0];

  assign tl_sm1rom_ctrl033_us_h2d[1] = tl_rv_core_ibex1n38_ds_h2d[0];
  assign tl_rv_core_ibex1n38_ds_d2h[0] = tl_sm1rom_ctrl033_us_d2h[1];

  assign tl_sm1rom_ctrl039_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[1];
  assign tl_rv_core_ibex1n38_ds_d2h[1] = tl_sm1rom_ctrl039_us_d2h[0];

  assign tl_sm1rom_ctrl134_us_h2d[1] = tl_rv_core_ibex1n38_ds_h2d[2];
  assign tl_rv_core_ibex1n38_ds_d2h[2] = tl_sm1rom_ctrl134_us_d2h[1];

  assign tl_sm1rom_ctrl140_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[3];
  assign tl_rv_core_ibex1n38_ds_d2h[3] = tl_sm1rom_ctrl140_us_d2h[0];

  assign tl_sm1rv_dm35_us_h2d[1] = tl_rv_core_ibex1n38_ds_h2d[4];
  assign tl_rv_core_ibex1n38_ds_d2h[4] = tl_sm1rv_dm35_us_d2h[1];

  assign tl_sm1rv_dm41_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[5];
  assign tl_rv_core_ibex1n38_ds_d2h[5] = tl_sm1rv_dm41_us_d2h[0];

  assign tl_sm1sram_ctrl_main36_us_h2d[1] = tl_rv_core_ibex1n38_ds_h2d[6];
  assign tl_rv_core_ibex1n38_ds_d2h[6] = tl_sm1sram_ctrl_main36_us_d2h[1];

  assign tl_sm1asf43_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[7];
  assign tl_rv_core_ibex1n38_ds_d2h[7] = tl_sm1asf43_us_d2h[0];

  assign tl_sm1aes44_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[8];
  assign tl_rv_core_ibex1n38_ds_d2h[8] = tl_sm1aes44_us_d2h[0];

  assign tl_sm1entropy_src45_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[9];
  assign tl_rv_core_ibex1n38_ds_d2h[9] = tl_sm1entropy_src45_us_d2h[0];

  assign tl_sm1csrng46_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[10];
  assign tl_rv_core_ibex1n38_ds_d2h[10] = tl_sm1csrng46_us_d2h[0];

  assign tl_sm1edn047_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[11];
  assign tl_rv_core_ibex1n38_ds_d2h[11] = tl_sm1edn047_us_d2h[0];

  assign tl_sm1edn148_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[12];
  assign tl_rv_core_ibex1n38_ds_d2h[12] = tl_sm1edn148_us_d2h[0];

  assign tl_sm1hmac49_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[13];
  assign tl_rv_core_ibex1n38_ds_d2h[13] = tl_sm1hmac49_us_d2h[0];

  assign tl_sm1rv_plic50_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[14];
  assign tl_rv_core_ibex1n38_ds_d2h[14] = tl_sm1rv_plic50_us_d2h[0];

  assign tl_sm1otbn51_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[15];
  assign tl_rv_core_ibex1n38_ds_d2h[15] = tl_sm1otbn51_us_d2h[0];

  assign tl_sm1keymgr52_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[16];
  assign tl_rv_core_ibex1n38_ds_d2h[16] = tl_sm1keymgr52_us_d2h[0];

  assign tl_sm1kmac53_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[17];
  assign tl_rv_core_ibex1n38_ds_d2h[17] = tl_sm1kmac53_us_d2h[0];

  assign tl_sm1sram_ctrl_main54_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[18];
  assign tl_rv_core_ibex1n38_ds_d2h[18] = tl_sm1sram_ctrl_main54_us_d2h[0];

  assign tl_sm1rv_core_ibex55_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[19];
  assign tl_rv_core_ibex1n38_ds_d2h[19] = tl_sm1rv_core_ibex55_us_d2h[0];

  assign tl_sm1sram_ctrl_mbox56_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[20];
  assign tl_rv_core_ibex1n38_ds_d2h[20] = tl_sm1sram_ctrl_mbox56_us_d2h[0];

  assign tl_sm1sram_ctrl_mbox57_us_h2d[0] = tl_rv_core_ibex1n38_ds_h2d[21];
  assign tl_rv_core_ibex1n38_ds_d2h[21] = tl_sm1sram_ctrl_mbox57_us_d2h[0];

  assign tl_mbx__dev_o = tl_rv_core_ibex1n38_ds_h2d[22];
  assign tl_rv_core_ibex1n38_ds_d2h[22] = tl_mbx__dev_i;

  assign tl_dma__dev_o = tl_rv_core_ibex1n38_ds_h2d[23];
  assign tl_rv_core_ibex1n38_ds_d2h[23] = tl_dma__dev_i;

  assign tl_dbgctlhstreg__dev_o = tl_rv_core_ibex1n38_ds_h2d[24];
  assign tl_rv_core_ibex1n38_ds_d2h[24] = tl_dbgctlhstreg__dev_i;

  assign tl_dbgctlmbxmem__dev_o = tl_rv_core_ibex1n38_ds_h2d[25];
  assign tl_rv_core_ibex1n38_ds_d2h[25] = tl_dbgctlmbxmem__dev_i;

  assign tl_sm1extr37_us_h2d[1] = tl_rv_core_ibex1n38_ds_h2d[26];
  assign tl_rv_core_ibex1n38_ds_d2h[26] = tl_sm1extr37_us_d2h[1];

  assign tl_sm1rom_ctrl033_us_h2d[2] = tl_rv_dm1n58_ds_h2d[0];
  assign tl_rv_dm1n58_ds_d2h[0] = tl_sm1rom_ctrl033_us_d2h[2];

  assign tl_sm1rom_ctrl039_us_h2d[1] = tl_rv_dm1n58_ds_h2d[1];
  assign tl_rv_dm1n58_ds_d2h[1] = tl_sm1rom_ctrl039_us_d2h[1];

  assign tl_sm1rom_ctrl134_us_h2d[2] = tl_rv_dm1n58_ds_h2d[2];
  assign tl_rv_dm1n58_ds_d2h[2] = tl_sm1rom_ctrl134_us_d2h[2];

  assign tl_sm1rom_ctrl140_us_h2d[1] = tl_rv_dm1n58_ds_h2d[3];
  assign tl_rv_dm1n58_ds_d2h[3] = tl_sm1rom_ctrl140_us_d2h[1];

  assign tl_sm1rv_dm35_us_h2d[2] = tl_rv_dm1n58_ds_h2d[4];
  assign tl_rv_dm1n58_ds_d2h[4] = tl_sm1rv_dm35_us_d2h[2];

  assign tl_sm1rv_dm41_us_h2d[1] = tl_rv_dm1n58_ds_h2d[5];
  assign tl_rv_dm1n58_ds_d2h[5] = tl_sm1rv_dm41_us_d2h[1];

  assign tl_sm1sram_ctrl_main36_us_h2d[2] = tl_rv_dm1n58_ds_h2d[6];
  assign tl_rv_dm1n58_ds_d2h[6] = tl_sm1sram_ctrl_main36_us_d2h[2];

  assign tl_sm1asf43_us_h2d[1] = tl_rv_dm1n58_ds_h2d[7];
  assign tl_rv_dm1n58_ds_d2h[7] = tl_sm1asf43_us_d2h[1];

  assign tl_sm1aes44_us_h2d[1] = tl_rv_dm1n58_ds_h2d[8];
  assign tl_rv_dm1n58_ds_d2h[8] = tl_sm1aes44_us_d2h[1];

  assign tl_sm1entropy_src45_us_h2d[1] = tl_rv_dm1n58_ds_h2d[9];
  assign tl_rv_dm1n58_ds_d2h[9] = tl_sm1entropy_src45_us_d2h[1];

  assign tl_sm1csrng46_us_h2d[1] = tl_rv_dm1n58_ds_h2d[10];
  assign tl_rv_dm1n58_ds_d2h[10] = tl_sm1csrng46_us_d2h[1];

  assign tl_sm1edn047_us_h2d[1] = tl_rv_dm1n58_ds_h2d[11];
  assign tl_rv_dm1n58_ds_d2h[11] = tl_sm1edn047_us_d2h[1];

  assign tl_sm1edn148_us_h2d[1] = tl_rv_dm1n58_ds_h2d[12];
  assign tl_rv_dm1n58_ds_d2h[12] = tl_sm1edn148_us_d2h[1];

  assign tl_sm1hmac49_us_h2d[1] = tl_rv_dm1n58_ds_h2d[13];
  assign tl_rv_dm1n58_ds_d2h[13] = tl_sm1hmac49_us_d2h[1];

  assign tl_sm1rv_plic50_us_h2d[1] = tl_rv_dm1n58_ds_h2d[14];
  assign tl_rv_dm1n58_ds_d2h[14] = tl_sm1rv_plic50_us_d2h[1];

  assign tl_sm1otbn51_us_h2d[1] = tl_rv_dm1n58_ds_h2d[15];
  assign tl_rv_dm1n58_ds_d2h[15] = tl_sm1otbn51_us_d2h[1];

  assign tl_sm1keymgr52_us_h2d[1] = tl_rv_dm1n58_ds_h2d[16];
  assign tl_rv_dm1n58_ds_d2h[16] = tl_sm1keymgr52_us_d2h[1];

  assign tl_sm1kmac53_us_h2d[1] = tl_rv_dm1n58_ds_h2d[17];
  assign tl_rv_dm1n58_ds_d2h[17] = tl_sm1kmac53_us_d2h[1];

  assign tl_sm1sram_ctrl_main54_us_h2d[1] = tl_rv_dm1n58_ds_h2d[18];
  assign tl_rv_dm1n58_ds_d2h[18] = tl_sm1sram_ctrl_main54_us_d2h[1];

  assign tl_sm1rv_core_ibex55_us_h2d[1] = tl_rv_dm1n58_ds_h2d[19];
  assign tl_rv_dm1n58_ds_d2h[19] = tl_sm1rv_core_ibex55_us_d2h[1];

  assign tl_sm1sram_ctrl_mbox56_us_h2d[1] = tl_rv_dm1n58_ds_h2d[20];
  assign tl_rv_dm1n58_ds_d2h[20] = tl_sm1sram_ctrl_mbox56_us_d2h[1];

  assign tl_sm1sram_ctrl_mbox57_us_h2d[1] = tl_rv_dm1n58_ds_h2d[21];
  assign tl_rv_dm1n58_ds_d2h[21] = tl_sm1sram_ctrl_mbox57_us_d2h[1];

  assign tl_sm1sram_ctrl_mbox56_us_h2d[2] = tl_mbx__hst_i;
  assign tl_mbx__hst_o = tl_sm1sram_ctrl_mbox56_us_d2h[2];

  assign tl_sm1rom_ctrl033_us_h2d[3] = tl_dma1n59_ds_h2d[0];
  assign tl_dma1n59_ds_d2h[0] = tl_sm1rom_ctrl033_us_d2h[3];

  assign tl_sm1rom_ctrl039_us_h2d[2] = tl_dma1n59_ds_h2d[1];
  assign tl_dma1n59_ds_d2h[1] = tl_sm1rom_ctrl039_us_d2h[2];

  assign tl_sm1rom_ctrl134_us_h2d[3] = tl_dma1n59_ds_h2d[2];
  assign tl_dma1n59_ds_d2h[2] = tl_sm1rom_ctrl134_us_d2h[3];

  assign tl_sm1rom_ctrl140_us_h2d[2] = tl_dma1n59_ds_h2d[3];
  assign tl_dma1n59_ds_d2h[3] = tl_sm1rom_ctrl140_us_d2h[2];

  assign tl_sm1sram_ctrl_main36_us_h2d[3] = tl_dma1n59_ds_h2d[4];
  assign tl_dma1n59_ds_d2h[4] = tl_sm1sram_ctrl_main36_us_d2h[3];

  assign tl_sm1sram_ctrl_main54_us_h2d[2] = tl_dma1n59_ds_h2d[5];
  assign tl_dma1n59_ds_d2h[5] = tl_sm1sram_ctrl_main54_us_d2h[2];

  assign tl_sm1rv_dm35_us_h2d[3] = tl_dma1n59_ds_h2d[6];
  assign tl_dma1n59_ds_d2h[6] = tl_sm1rv_dm35_us_d2h[3];

  assign tl_sm1rv_dm41_us_h2d[2] = tl_dma1n59_ds_h2d[7];
  assign tl_dma1n59_ds_d2h[7] = tl_sm1rv_dm41_us_d2h[2];

  assign tl_sm1aes44_us_h2d[2] = tl_dma1n59_ds_h2d[8];
  assign tl_dma1n59_ds_d2h[8] = tl_sm1aes44_us_d2h[2];

  assign tl_sm1hmac49_us_h2d[2] = tl_dma1n59_ds_h2d[9];
  assign tl_dma1n59_ds_d2h[9] = tl_sm1hmac49_us_d2h[2];

  assign tl_sm1kmac53_us_h2d[2] = tl_dma1n59_ds_h2d[10];
  assign tl_dma1n59_ds_d2h[10] = tl_sm1kmac53_us_d2h[2];

  assign tl_sm1otbn51_us_h2d[2] = tl_dma1n59_ds_h2d[11];
  assign tl_dma1n59_ds_d2h[11] = tl_sm1otbn51_us_d2h[2];

  assign tl_sm1keymgr52_us_h2d[2] = tl_dma1n59_ds_h2d[12];
  assign tl_dma1n59_ds_d2h[12] = tl_sm1keymgr52_us_d2h[2];

  assign tl_sm1csrng46_us_h2d[2] = tl_dma1n59_ds_h2d[13];
  assign tl_dma1n59_ds_d2h[13] = tl_sm1csrng46_us_d2h[2];

  assign tl_sm1entropy_src45_us_h2d[2] = tl_dma1n59_ds_h2d[14];
  assign tl_dma1n59_ds_d2h[14] = tl_sm1entropy_src45_us_d2h[2];

  assign tl_sm1edn047_us_h2d[2] = tl_dma1n59_ds_h2d[15];
  assign tl_dma1n59_ds_d2h[15] = tl_sm1edn047_us_d2h[2];

  assign tl_sm1edn148_us_h2d[2] = tl_dma1n59_ds_h2d[16];
  assign tl_dma1n59_ds_d2h[16] = tl_sm1edn148_us_d2h[2];

  assign tl_sm1rv_core_ibex55_us_h2d[2] = tl_dma1n59_ds_h2d[17];
  assign tl_dma1n59_ds_d2h[17] = tl_sm1rv_core_ibex55_us_d2h[2];

  assign tl_sm1rv_plic50_us_h2d[2] = tl_dma1n59_ds_h2d[18];
  assign tl_dma1n59_ds_d2h[18] = tl_sm1rv_plic50_us_d2h[2];

  assign tl_sm1asf43_us_h2d[2] = tl_dma1n59_ds_h2d[19];
  assign tl_dma1n59_ds_d2h[19] = tl_sm1asf43_us_d2h[2];

  assign tl_sm1extr37_us_h2d[2] = tl_dma1n59_ds_h2d[20];
  assign tl_dma1n59_ds_d2h[20] = tl_sm1extr37_us_d2h[2];

  assign tl_rv_core_ibex1n32_us_h2d = tl_rv_core_ibex__corei_i;
  assign tl_rv_core_ibex__corei_o = tl_rv_core_ibex1n32_us_d2h;

  assign tl_rom_ctrl0__rom_o = tl_sm1rom_ctrl033_ds_h2d;
  assign tl_sm1rom_ctrl033_ds_d2h = tl_rom_ctrl0__rom_i;

  assign tl_rom_ctrl1__rom_o = tl_sm1rom_ctrl134_ds_h2d;
  assign tl_sm1rom_ctrl134_ds_d2h = tl_rom_ctrl1__rom_i;

  assign tl_rv_dm__mem_o = tl_sm1rv_dm35_ds_h2d;
  assign tl_sm1rv_dm35_ds_d2h = tl_rv_dm__mem_i;

  assign tl_sram_ctrl_main__ram_o = tl_sm1sram_ctrl_main36_ds_h2d;
  assign tl_sm1sram_ctrl_main36_ds_d2h = tl_sram_ctrl_main__ram_i;

  assign tl_extr__dev_o = tl_sm1extr37_ds_h2d;
  assign tl_sm1extr37_ds_d2h = tl_extr__dev_i;

  assign tl_rv_core_ibex1n38_us_h2d = tl_rv_core_ibex__cored_i;
  assign tl_rv_core_ibex__cored_o = tl_rv_core_ibex1n38_us_d2h;

  assign tl_rom_ctrl0__regs_o = tl_sm1rom_ctrl039_ds_h2d;
  assign tl_sm1rom_ctrl039_ds_d2h = tl_rom_ctrl0__regs_i;

  assign tl_rom_ctrl1__regs_o = tl_sm1rom_ctrl140_ds_h2d;
  assign tl_sm1rom_ctrl140_ds_d2h = tl_rom_ctrl1__regs_i;

  assign tl_rv_dm__regs_o = tl_sm1rv_dm41_ds_h2d;
  assign tl_sm1rv_dm41_ds_d2h = tl_rv_dm__regs_i;

  assign tl_peri_o = tl_asf42_ds_h2d;
  assign tl_asf42_ds_d2h = tl_peri_i;

  assign tl_asf42_us_h2d = tl_sm1asf43_ds_h2d;
  assign tl_sm1asf43_ds_d2h = tl_asf42_us_d2h;

  assign tl_aes_o = tl_sm1aes44_ds_h2d;
  assign tl_sm1aes44_ds_d2h = tl_aes_i;

  assign tl_entropy_src_o = tl_sm1entropy_src45_ds_h2d;
  assign tl_sm1entropy_src45_ds_d2h = tl_entropy_src_i;

  assign tl_csrng_o = tl_sm1csrng46_ds_h2d;
  assign tl_sm1csrng46_ds_d2h = tl_csrng_i;

  assign tl_edn0_o = tl_sm1edn047_ds_h2d;
  assign tl_sm1edn047_ds_d2h = tl_edn0_i;

  assign tl_edn1_o = tl_sm1edn148_ds_h2d;
  assign tl_sm1edn148_ds_d2h = tl_edn1_i;

  assign tl_hmac_o = tl_sm1hmac49_ds_h2d;
  assign tl_sm1hmac49_ds_d2h = tl_hmac_i;

  assign tl_rv_plic_o = tl_sm1rv_plic50_ds_h2d;
  assign tl_sm1rv_plic50_ds_d2h = tl_rv_plic_i;

  assign tl_otbn_o = tl_sm1otbn51_ds_h2d;
  assign tl_sm1otbn51_ds_d2h = tl_otbn_i;

  assign tl_keymgr_o = tl_sm1keymgr52_ds_h2d;
  assign tl_sm1keymgr52_ds_d2h = tl_keymgr_i;

  assign tl_kmac_o = tl_sm1kmac53_ds_h2d;
  assign tl_sm1kmac53_ds_d2h = tl_kmac_i;

  assign tl_sram_ctrl_main__regs_o = tl_sm1sram_ctrl_main54_ds_h2d;
  assign tl_sm1sram_ctrl_main54_ds_d2h = tl_sram_ctrl_main__regs_i;

  assign tl_rv_core_ibex__cfg_o = tl_sm1rv_core_ibex55_ds_h2d;
  assign tl_sm1rv_core_ibex55_ds_d2h = tl_rv_core_ibex__cfg_i;

  assign tl_sram_ctrl_mbox__ram_o = tl_sm1sram_ctrl_mbox56_ds_h2d;
  assign tl_sm1sram_ctrl_mbox56_ds_d2h = tl_sram_ctrl_mbox__ram_i;

  assign tl_sram_ctrl_mbox__regs_o = tl_sm1sram_ctrl_mbox57_ds_h2d;
  assign tl_sm1sram_ctrl_mbox57_ds_d2h = tl_sram_ctrl_mbox__regs_i;

  assign tl_rv_dm1n58_us_h2d = tl_rv_dm__sba_i;
  assign tl_rv_dm__sba_o = tl_rv_dm1n58_us_d2h;

  assign tl_dma1n59_us_h2d = tl_dma__hst_i;
  assign tl_dma__hst_o = tl_dma1n59_us_d2h;

  //
  // Steering ReQ from rv_core_ibex(host) through rv_core_ibex1n32(socket_1n)
  //
  always_comb begin

    // default steering: error out the invalid address
    dev_sel_rv_core_ibex1n32 = 3'd5;

    if ((tl_rv_core_ibex1n32_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL0__ROM)) == ADDR_SPACE_ROM_CTRL0__ROM) begin
      dev_sel_rv_core_ibex1n32 = 3'd0;  // rv_core_ibex --> rom_ctrl0.rom

    end else if ((tl_rv_core_ibex1n32_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__ROM)) == ADDR_SPACE_ROM_CTRL1__ROM) begin
      dev_sel_rv_core_ibex1n32 = 3'd1;  // rv_core_ibex --> rom_ctrl1.rom

    end else if ((tl_rv_core_ibex1n32_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_rv_core_ibex1n32 = 3'd2;  // rv_core_ibex --> rv_dm.mem

    end else if ((tl_rv_core_ibex1n32_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_rv_core_ibex1n32 = 3'd3;  // rv_core_ibex --> sram_ctrl_main.ram

    end else if (((tl_rv_core_ibex1n32_us_h2d.a_address <= (ADDR_MASK_EXTR__DEV + ADDR_SPACE_EXTR__DEV)) &&
       (tl_rv_core_ibex1n32_us_h2d.a_address >= ADDR_SPACE_EXTR__DEV))) begin
      dev_sel_rv_core_ibex1n32 = 3'd4;  // rv_core_ibex --> extr.dev
end
  end

  //
  // Steering ReQ from rv_core_ibex(host) through rv_core_ibex1n38(socket_1n)
  //
  always_comb begin

    // default steering: error out the invalid address
    dev_sel_rv_core_ibex1n38 = 5'd27;

    if ((tl_rv_core_ibex1n38_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL0__ROM)) == ADDR_SPACE_ROM_CTRL0__ROM) begin
      dev_sel_rv_core_ibex1n38 = 5'd0;  // rv_core_ibex --> rom_ctrl0.rom

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL0__REGS)) == ADDR_SPACE_ROM_CTRL0__REGS) begin
      dev_sel_rv_core_ibex1n38 = 5'd1;  // rv_core_ibex --> rom_ctrl0.regs

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__ROM)) == ADDR_SPACE_ROM_CTRL1__ROM) begin
      dev_sel_rv_core_ibex1n38 = 5'd2;  // rv_core_ibex --> rom_ctrl1.rom

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__REGS)) == ADDR_SPACE_ROM_CTRL1__REGS) begin
      dev_sel_rv_core_ibex1n38 = 5'd3;  // rv_core_ibex --> rom_ctrl1.regs

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_rv_core_ibex1n38 = 5'd4;  // rv_core_ibex --> rv_dm.mem

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__REGS)) == ADDR_SPACE_RV_DM__REGS) begin
      dev_sel_rv_core_ibex1n38 = 5'd5;  // rv_core_ibex --> rv_dm.regs

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_rv_core_ibex1n38 = 5'd6;  // rv_core_ibex --> sram_ctrl_main.ram

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_PERI)) == ADDR_SPACE_PERI) begin
      dev_sel_rv_core_ibex1n38 = 5'd7;  // rv_core_ibex --> peri

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_AES)) == ADDR_SPACE_AES) begin
      dev_sel_rv_core_ibex1n38 = 5'd8;  // rv_core_ibex --> aes

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_ENTROPY_SRC)) == ADDR_SPACE_ENTROPY_SRC) begin
      dev_sel_rv_core_ibex1n38 = 5'd9;  // rv_core_ibex --> entropy_src

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_CSRNG)) == ADDR_SPACE_CSRNG) begin
      dev_sel_rv_core_ibex1n38 = 5'd10;  // rv_core_ibex --> csrng

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_EDN0)) == ADDR_SPACE_EDN0) begin
      dev_sel_rv_core_ibex1n38 = 5'd11;  // rv_core_ibex --> edn0

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_EDN1)) == ADDR_SPACE_EDN1) begin
      dev_sel_rv_core_ibex1n38 = 5'd12;  // rv_core_ibex --> edn1

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_HMAC)) == ADDR_SPACE_HMAC) begin
      dev_sel_rv_core_ibex1n38 = 5'd13;  // rv_core_ibex --> hmac

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_RV_PLIC)) == ADDR_SPACE_RV_PLIC) begin
      dev_sel_rv_core_ibex1n38 = 5'd14;  // rv_core_ibex --> rv_plic

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_OTBN)) == ADDR_SPACE_OTBN) begin
      dev_sel_rv_core_ibex1n38 = 5'd15;  // rv_core_ibex --> otbn

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_KEYMGR)) == ADDR_SPACE_KEYMGR) begin
      dev_sel_rv_core_ibex1n38 = 5'd16;  // rv_core_ibex --> keymgr

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_KMAC)) == ADDR_SPACE_KMAC) begin
      dev_sel_rv_core_ibex1n38 = 5'd17;  // rv_core_ibex --> kmac

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__REGS)) == ADDR_SPACE_SRAM_CTRL_MAIN__REGS) begin
      dev_sel_rv_core_ibex1n38 = 5'd18;  // rv_core_ibex --> sram_ctrl_main.regs

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_RV_CORE_IBEX__CFG)) == ADDR_SPACE_RV_CORE_IBEX__CFG) begin
      dev_sel_rv_core_ibex1n38 = 5'd19;  // rv_core_ibex --> rv_core_ibex.cfg

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_rv_core_ibex1n38 = 5'd20;  // rv_core_ibex --> sram_ctrl_mbox.ram

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__REGS)) == ADDR_SPACE_SRAM_CTRL_MBOX__REGS) begin
      dev_sel_rv_core_ibex1n38 = 5'd21;  // rv_core_ibex --> sram_ctrl_mbox.regs

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_MBX__DEV)) == ADDR_SPACE_MBX__DEV) begin
      dev_sel_rv_core_ibex1n38 = 5'd22;  // rv_core_ibex --> mbx.dev

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_DMA__DEV)) == ADDR_SPACE_DMA__DEV) begin
      dev_sel_rv_core_ibex1n38 = 5'd23;  // rv_core_ibex --> dma.dev

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_DBGCTLHSTREG__DEV)) == ADDR_SPACE_DBGCTLHSTREG__DEV) begin
      dev_sel_rv_core_ibex1n38 = 5'd24;  // rv_core_ibex --> dbgctlhstreg.dev

    end else if ((tl_rv_core_ibex1n38_us_h2d.a_address &
                  ~(ADDR_MASK_DBGCTLMBXMEM__DEV)) == ADDR_SPACE_DBGCTLMBXMEM__DEV) begin
      dev_sel_rv_core_ibex1n38 = 5'd25;  // rv_core_ibex --> dbgctlmbxmem.dev

    end else if (((tl_rv_core_ibex1n38_us_h2d.a_address <= (ADDR_MASK_EXTR__DEV + ADDR_SPACE_EXTR__DEV)) &&
       (tl_rv_core_ibex1n38_us_h2d.a_address >= ADDR_SPACE_EXTR__DEV))) begin
      dev_sel_rv_core_ibex1n38 = 5'd26;  // rv_core_ibex --> extr.dev
end
  end

  //
  // Steering ReQ from rv_dm(host) through rv_dm1n58(socket_1n)
  //
  always_comb begin

    // default steering: error out the invalid address
    dev_sel_rv_dm1n58 = 5'd22;

    if ((tl_rv_dm1n58_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL0__ROM)) == ADDR_SPACE_ROM_CTRL0__ROM) begin
      dev_sel_rv_dm1n58 = 5'd0;  // rv_dm --> rom_ctrl0.rom

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL0__REGS)) == ADDR_SPACE_ROM_CTRL0__REGS) begin
      dev_sel_rv_dm1n58 = 5'd1;  // rv_dm --> rom_ctrl0.regs

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__ROM)) == ADDR_SPACE_ROM_CTRL1__ROM) begin
      dev_sel_rv_dm1n58 = 5'd2;  // rv_dm --> rom_ctrl1.rom

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__REGS)) == ADDR_SPACE_ROM_CTRL1__REGS) begin
      dev_sel_rv_dm1n58 = 5'd3;  // rv_dm --> rom_ctrl1.regs

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_rv_dm1n58 = 5'd4;  // rv_dm --> rv_dm.mem

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__REGS)) == ADDR_SPACE_RV_DM__REGS) begin
      dev_sel_rv_dm1n58 = 5'd5;  // rv_dm --> rv_dm.regs

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_rv_dm1n58 = 5'd6;  // rv_dm --> sram_ctrl_main.ram

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_PERI)) == ADDR_SPACE_PERI) begin
      dev_sel_rv_dm1n58 = 5'd7;  // rv_dm --> peri

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_AES)) == ADDR_SPACE_AES) begin
      dev_sel_rv_dm1n58 = 5'd8;  // rv_dm --> aes

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_ENTROPY_SRC)) == ADDR_SPACE_ENTROPY_SRC) begin
      dev_sel_rv_dm1n58 = 5'd9;  // rv_dm --> entropy_src

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_CSRNG)) == ADDR_SPACE_CSRNG) begin
      dev_sel_rv_dm1n58 = 5'd10;  // rv_dm --> csrng

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_EDN0)) == ADDR_SPACE_EDN0) begin
      dev_sel_rv_dm1n58 = 5'd11;  // rv_dm --> edn0

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_EDN1)) == ADDR_SPACE_EDN1) begin
      dev_sel_rv_dm1n58 = 5'd12;  // rv_dm --> edn1

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_HMAC)) == ADDR_SPACE_HMAC) begin
      dev_sel_rv_dm1n58 = 5'd13;  // rv_dm --> hmac

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_RV_PLIC)) == ADDR_SPACE_RV_PLIC) begin
      dev_sel_rv_dm1n58 = 5'd14;  // rv_dm --> rv_plic

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_OTBN)) == ADDR_SPACE_OTBN) begin
      dev_sel_rv_dm1n58 = 5'd15;  // rv_dm --> otbn

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_KEYMGR)) == ADDR_SPACE_KEYMGR) begin
      dev_sel_rv_dm1n58 = 5'd16;  // rv_dm --> keymgr

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_KMAC)) == ADDR_SPACE_KMAC) begin
      dev_sel_rv_dm1n58 = 5'd17;  // rv_dm --> kmac

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__REGS)) == ADDR_SPACE_SRAM_CTRL_MAIN__REGS) begin
      dev_sel_rv_dm1n58 = 5'd18;  // rv_dm --> sram_ctrl_main.regs

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_RV_CORE_IBEX__CFG)) == ADDR_SPACE_RV_CORE_IBEX__CFG) begin
      dev_sel_rv_dm1n58 = 5'd19;  // rv_dm --> rv_core_ibex.cfg

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_rv_dm1n58 = 5'd20;  // rv_dm --> sram_ctrl_mbox.ram

    end else if ((tl_rv_dm1n58_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__REGS)) == ADDR_SPACE_SRAM_CTRL_MBOX__REGS) begin
      dev_sel_rv_dm1n58 = 5'd21;  // rv_dm --> sram_ctrl_mbox.regs
end
  end

  //
  // Steering ReQ from dma(host) through dma1n59(socket_1n)
  //
  always_comb begin

    // default steering: error out the invalid address
    dev_sel_dma1n59 = 5'd21;

    if ((tl_dma1n59_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL0__ROM)) == ADDR_SPACE_ROM_CTRL0__ROM) begin
      dev_sel_dma1n59 = 5'd0;  // dma --> rom_ctrl0.rom

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL0__REGS)) == ADDR_SPACE_ROM_CTRL0__REGS) begin
      dev_sel_dma1n59 = 5'd1;  // dma --> rom_ctrl0.regs

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__ROM)) == ADDR_SPACE_ROM_CTRL1__ROM) begin
      dev_sel_dma1n59 = 5'd2;  // dma --> rom_ctrl1.rom

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__REGS)) == ADDR_SPACE_ROM_CTRL1__REGS) begin
      dev_sel_dma1n59 = 5'd3;  // dma --> rom_ctrl1.regs

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_dma1n59 = 5'd4;  // dma --> sram_ctrl_main.ram

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__REGS)) == ADDR_SPACE_SRAM_CTRL_MAIN__REGS) begin
      dev_sel_dma1n59 = 5'd5;  // dma --> sram_ctrl_main.regs

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_dma1n59 = 5'd6;  // dma --> rv_dm.mem

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__REGS)) == ADDR_SPACE_RV_DM__REGS) begin
      dev_sel_dma1n59 = 5'd7;  // dma --> rv_dm.regs

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_AES)) == ADDR_SPACE_AES) begin
      dev_sel_dma1n59 = 5'd8;  // dma --> aes

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_HMAC)) == ADDR_SPACE_HMAC) begin
      dev_sel_dma1n59 = 5'd9;  // dma --> hmac

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_KMAC)) == ADDR_SPACE_KMAC) begin
      dev_sel_dma1n59 = 5'd10;  // dma --> kmac

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_OTBN)) == ADDR_SPACE_OTBN) begin
      dev_sel_dma1n59 = 5'd11;  // dma --> otbn

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_KEYMGR)) == ADDR_SPACE_KEYMGR) begin
      dev_sel_dma1n59 = 5'd12;  // dma --> keymgr

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_CSRNG)) == ADDR_SPACE_CSRNG) begin
      dev_sel_dma1n59 = 5'd13;  // dma --> csrng

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_ENTROPY_SRC)) == ADDR_SPACE_ENTROPY_SRC) begin
      dev_sel_dma1n59 = 5'd14;  // dma --> entropy_src

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_EDN0)) == ADDR_SPACE_EDN0) begin
      dev_sel_dma1n59 = 5'd15;  // dma --> edn0

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_EDN1)) == ADDR_SPACE_EDN1) begin
      dev_sel_dma1n59 = 5'd16;  // dma --> edn1

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_RV_CORE_IBEX__CFG)) == ADDR_SPACE_RV_CORE_IBEX__CFG) begin
      dev_sel_dma1n59 = 5'd17;  // dma --> rv_core_ibex.cfg

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_RV_PLIC)) == ADDR_SPACE_RV_PLIC) begin
      dev_sel_dma1n59 = 5'd18;  // dma --> rv_plic

    end else if ((tl_dma1n59_us_h2d.a_address &
                  ~(ADDR_MASK_PERI)) == ADDR_SPACE_PERI) begin
      dev_sel_dma1n59 = 5'd19;  // dma --> peri

    end else if (((tl_dma1n59_us_h2d.a_address <= (ADDR_MASK_EXTR__DEV + ADDR_SPACE_EXTR__DEV)) &&
       (tl_dma1n59_us_h2d.a_address >= ADDR_SPACE_EXTR__DEV))) begin
      dev_sel_dma1n59 = 5'd20;  // dma --> extr.dev
end
  end


  // Instantiation phase
  tlul_socket_1n #(
    .N         (5),
    .HReqPass  (1'b1),
    .HRspPass  (1'b1),
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqPass  (5'h1f),
    .DRspPass  (5'h1f),
    .DReqDepth (20'h0),
    .DRspDepth (20'h0)
  ) u_rv_core_ibex1n32 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_rv_core_ibex1n32_us_h2d),
    .tl_h_o       (tl_rv_core_ibex1n32_us_d2h),
    .tl_d_o       (tl_rv_core_ibex1n32_ds_h2d),
    .tl_d_i       (tl_rv_core_ibex1n32_ds_d2h),
    .dev_select_i (dev_sel_rv_core_ibex1n32)
  );
  tlul_socket_m1 #(
    .M         (4),
    .HReqPass  (4'hf),
    .HRspPass  (4'hf),
    .HReqDepth (16'h0),
    .HRspDepth (16'h0),
    .DReqPass  (1'b1),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1rom_ctrl033 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1rom_ctrl033_us_h2d),
    .tl_h_o       (tl_sm1rom_ctrl033_us_d2h),
    .tl_d_o       (tl_sm1rom_ctrl033_ds_h2d),
    .tl_d_i       (tl_sm1rom_ctrl033_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (4),
    .HReqPass  (4'hf),
    .HRspPass  (4'hf),
    .HReqDepth (16'h0),
    .HRspDepth (16'h0),
    .DReqPass  (1'b1),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1rom_ctrl134 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1rom_ctrl134_us_h2d),
    .tl_h_o       (tl_sm1rom_ctrl134_us_d2h),
    .tl_d_o       (tl_sm1rom_ctrl134_ds_h2d),
    .tl_d_i       (tl_sm1rom_ctrl134_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (4),
    .HReqPass  (4'hf),
    .HRspPass  (4'hf),
    .HReqDepth (16'h0),
    .HRspDepth (16'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1rv_dm35 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1rv_dm35_us_h2d),
    .tl_h_o       (tl_sm1rv_dm35_us_d2h),
    .tl_d_o       (tl_sm1rv_dm35_ds_h2d),
    .tl_d_i       (tl_sm1rv_dm35_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (4),
    .HReqPass  (4'hf),
    .HRspPass  (4'hf),
    .HReqDepth (16'h0),
    .HRspDepth (16'h0),
    .DReqPass  (1'b1),
    .DRspPass  (1'b1),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0)
  ) u_sm1sram_ctrl_main36 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1sram_ctrl_main36_us_h2d),
    .tl_h_o       (tl_sm1sram_ctrl_main36_us_d2h),
    .tl_d_o       (tl_sm1sram_ctrl_main36_ds_h2d),
    .tl_d_i       (tl_sm1sram_ctrl_main36_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b1),
    .DRspPass  (1'b1),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0)
  ) u_sm1extr37 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1extr37_us_h2d),
    .tl_h_o       (tl_sm1extr37_us_d2h),
    .tl_d_o       (tl_sm1extr37_ds_h2d),
    .tl_d_i       (tl_sm1extr37_ds_d2h)
  );
  tlul_socket_1n #(
    .N         (27),
    .HReqPass  (1'b1),
    .HRspPass  (1'b1),
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqPass  (27'h7ffffff),
    .DRspPass  (27'h7ffffff),
    .DReqDepth (108'h0),
    .DRspDepth (108'h0)
  ) u_rv_core_ibex1n38 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_rv_core_ibex1n38_us_h2d),
    .tl_h_o       (tl_rv_core_ibex1n38_us_d2h),
    .tl_d_o       (tl_rv_core_ibex1n38_ds_h2d),
    .tl_d_i       (tl_rv_core_ibex1n38_ds_d2h),
    .dev_select_i (dev_sel_rv_core_ibex1n38)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1rom_ctrl039 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1rom_ctrl039_us_h2d),
    .tl_h_o       (tl_sm1rom_ctrl039_us_d2h),
    .tl_d_o       (tl_sm1rom_ctrl039_ds_h2d),
    .tl_d_i       (tl_sm1rom_ctrl039_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1rom_ctrl140 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1rom_ctrl140_us_h2d),
    .tl_h_o       (tl_sm1rom_ctrl140_us_d2h),
    .tl_d_o       (tl_sm1rom_ctrl140_ds_h2d),
    .tl_d_i       (tl_sm1rom_ctrl140_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1rv_dm41 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1rv_dm41_us_h2d),
    .tl_h_o       (tl_sm1rv_dm41_us_d2h),
    .tl_d_o       (tl_sm1rv_dm41_ds_h2d),
    .tl_d_i       (tl_sm1rv_dm41_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (1),
    .RspDepth        (1)
  ) u_asf42 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_fixed_i),
    .rst_d_ni     (rst_fixed_ni),
    .tl_h_i       (tl_asf42_us_h2d),
    .tl_h_o       (tl_asf42_us_d2h),
    .tl_d_o       (tl_asf42_ds_h2d),
    .tl_d_i       (tl_asf42_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b1),
    .DRspPass  (1'b1),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0)
  ) u_sm1asf43 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1asf43_us_h2d),
    .tl_h_o       (tl_sm1asf43_us_d2h),
    .tl_d_o       (tl_sm1asf43_ds_h2d),
    .tl_d_i       (tl_sm1asf43_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1aes44 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1aes44_us_h2d),
    .tl_h_o       (tl_sm1aes44_us_d2h),
    .tl_d_o       (tl_sm1aes44_ds_h2d),
    .tl_d_i       (tl_sm1aes44_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1entropy_src45 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1entropy_src45_us_h2d),
    .tl_h_o       (tl_sm1entropy_src45_us_d2h),
    .tl_d_o       (tl_sm1entropy_src45_ds_h2d),
    .tl_d_i       (tl_sm1entropy_src45_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1csrng46 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1csrng46_us_h2d),
    .tl_h_o       (tl_sm1csrng46_us_d2h),
    .tl_d_o       (tl_sm1csrng46_ds_h2d),
    .tl_d_i       (tl_sm1csrng46_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1edn047 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1edn047_us_h2d),
    .tl_h_o       (tl_sm1edn047_us_d2h),
    .tl_d_o       (tl_sm1edn047_ds_h2d),
    .tl_d_i       (tl_sm1edn047_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1edn148 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1edn148_us_h2d),
    .tl_h_o       (tl_sm1edn148_us_d2h),
    .tl_d_o       (tl_sm1edn148_ds_h2d),
    .tl_d_i       (tl_sm1edn148_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1hmac49 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1hmac49_us_h2d),
    .tl_h_o       (tl_sm1hmac49_us_d2h),
    .tl_d_o       (tl_sm1hmac49_ds_h2d),
    .tl_d_i       (tl_sm1hmac49_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1rv_plic50 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1rv_plic50_us_h2d),
    .tl_h_o       (tl_sm1rv_plic50_us_d2h),
    .tl_d_o       (tl_sm1rv_plic50_ds_h2d),
    .tl_d_i       (tl_sm1rv_plic50_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1otbn51 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1otbn51_us_h2d),
    .tl_h_o       (tl_sm1otbn51_us_d2h),
    .tl_d_o       (tl_sm1otbn51_ds_h2d),
    .tl_d_i       (tl_sm1otbn51_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1keymgr52 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1keymgr52_us_h2d),
    .tl_h_o       (tl_sm1keymgr52_us_d2h),
    .tl_d_o       (tl_sm1keymgr52_ds_h2d),
    .tl_d_i       (tl_sm1keymgr52_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1kmac53 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1kmac53_us_h2d),
    .tl_h_o       (tl_sm1kmac53_us_d2h),
    .tl_d_o       (tl_sm1kmac53_ds_h2d),
    .tl_d_i       (tl_sm1kmac53_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1sram_ctrl_main54 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1sram_ctrl_main54_us_h2d),
    .tl_h_o       (tl_sm1sram_ctrl_main54_us_d2h),
    .tl_d_o       (tl_sm1sram_ctrl_main54_ds_h2d),
    .tl_d_i       (tl_sm1sram_ctrl_main54_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .DReqDepth (4'h1),
    .DRspDepth (4'h1)
  ) u_sm1rv_core_ibex55 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1rv_core_ibex55_us_h2d),
    .tl_h_o       (tl_sm1rv_core_ibex55_us_d2h),
    .tl_d_o       (tl_sm1rv_core_ibex55_ds_h2d),
    .tl_d_i       (tl_sm1rv_core_ibex55_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (3),
    .HReqPass  (3'h7),
    .HRspPass  (3'h7),
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b1),
    .DRspPass  (1'b1),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0)
  ) u_sm1sram_ctrl_mbox56 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1sram_ctrl_mbox56_us_h2d),
    .tl_h_o       (tl_sm1sram_ctrl_mbox56_us_d2h),
    .tl_d_o       (tl_sm1sram_ctrl_mbox56_ds_h2d),
    .tl_d_i       (tl_sm1sram_ctrl_mbox56_ds_d2h)
  );
  tlul_socket_m1 #(
    .M         (2),
    .HReqPass  (2'h3),
    .HRspPass  (2'h3),
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b1),
    .DRspPass  (1'b1),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0)
  ) u_sm1sram_ctrl_mbox57 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1sram_ctrl_mbox57_us_h2d),
    .tl_h_o       (tl_sm1sram_ctrl_mbox57_us_d2h),
    .tl_d_o       (tl_sm1sram_ctrl_mbox57_ds_h2d),
    .tl_d_i       (tl_sm1sram_ctrl_mbox57_ds_d2h)
  );
  tlul_socket_1n #(
    .N         (22),
    .HReqPass  (1'b0),
    .HRspPass  (1'b0),
    .HReqDepth (4'h1),
    .HRspDepth (4'h1),
    .DReqPass  (22'h3fffff),
    .DRspPass  (22'h3fffff),
    .DReqDepth (88'h0),
    .DRspDepth (88'h0)
  ) u_rv_dm1n58 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_rv_dm1n58_us_h2d),
    .tl_h_o       (tl_rv_dm1n58_us_d2h),
    .tl_d_o       (tl_rv_dm1n58_ds_h2d),
    .tl_d_i       (tl_rv_dm1n58_ds_d2h),
    .dev_select_i (dev_sel_rv_dm1n58)
  );
  tlul_socket_1n #(
    .N         (21),
    .HReqPass  (1'b1),
    .HRspPass  (1'b1),
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqPass  (21'h1fffff),
    .DRspPass  (21'h1fffff),
    .DReqDepth (84'h0),
    .DRspDepth (84'h0)
  ) u_dma1n59 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_dma1n59_us_h2d),
    .tl_h_o       (tl_dma1n59_us_d2h),
    .tl_d_o       (tl_dma1n59_ds_h2d),
    .tl_d_i       (tl_dma1n59_ds_d2h),
    .dev_select_i (dev_sel_dma1n59)
  );

endmodule
// Local Variables:
// fill-column:1
// verilog-auto-arg-sort:t
// verilog-typedef-regexp: "_[etu]$"
// End:
