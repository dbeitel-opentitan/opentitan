// SPDX-FileCopyrightText: Copyright (c) 2022 by Rivos Inc.
// Confidential and proprietary, see LICENSE for details.
// SPDX-License-Identifier: LicenseRef-Rivos-Internal-Only

// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module alert_handler_reg_top (
  input clk_i,
  input swWenClk,
  input hwUpdClk,
  input rst_ni,
  input deepReset_L,
  input lightReset_L,
  input rst_shadowed_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output alert_handler_reg_pkg::alert_handler_reg2hw_t reg2hw, // Write
  input  alert_handler_reg_pkg::alert_handler_hw2reg_t hw2reg, // Read

  output logic shadowed_storage_err_o,
  output logic shadowed_update_err_o,

  // Integrity check errors
  output raclViol,
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import alert_handler_reg_pkg::* ;

  localparam int AW = 11;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [345:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(346)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .en_ifetch_i    (prim_mubi_pkg::MuBi4False),
    .intg_error_o   (),

    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)

  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic INTR_STATE_we;
  logic INTR_STATE_classa_qs;
  logic INTR_STATE_classa_wd;
  logic INTR_STATE_classb_qs;
  logic INTR_STATE_classb_wd;
  logic INTR_STATE_classc_qs;
  logic INTR_STATE_classc_wd;
  logic INTR_STATE_classd_qs;
  logic INTR_STATE_classd_wd;
  logic INTR_ENABLE_we;
  logic INTR_ENABLE_classa_qs;
  logic INTR_ENABLE_classa_wd;
  logic INTR_ENABLE_classb_qs;
  logic INTR_ENABLE_classb_wd;
  logic INTR_ENABLE_classc_qs;
  logic INTR_ENABLE_classc_wd;
  logic INTR_ENABLE_classd_qs;
  logic INTR_ENABLE_classd_wd;
  logic INTR_TEST_we;
  logic INTR_TEST_classa_wd;
  logic INTR_TEST_classb_wd;
  logic INTR_TEST_classc_wd;
  logic INTR_TEST_classd_wd;
  logic PING_TIMER_REGWEN_we;
  logic PING_TIMER_REGWEN_qs;
  logic PING_TIMER_REGWEN_wd;
  logic PING_TIMEOUT_CYC_SHADOWED_re;
  logic PING_TIMEOUT_CYC_SHADOWED_we;
  logic [15:0] PING_TIMEOUT_CYC_SHADOWED_qs;
  logic [15:0] PING_TIMEOUT_CYC_SHADOWED_wd;
  logic PING_TIMEOUT_CYC_SHADOWED_storage_err;
  logic PING_TIMEOUT_CYC_SHADOWED_update_err;
  logic PING_TIMER_EN_SHADOWED_re;
  logic PING_TIMER_EN_SHADOWED_we;
  logic PING_TIMER_EN_SHADOWED_qs;
  logic PING_TIMER_EN_SHADOWED_wd;
  logic PING_TIMER_EN_SHADOWED_storage_err;
  logic PING_TIMER_EN_SHADOWED_update_err;
  logic ALERT_REGWEN_0_we;
  logic ALERT_REGWEN_0_qs;
  logic ALERT_REGWEN_0_wd;
  logic ALERT_REGWEN_1_we;
  logic ALERT_REGWEN_1_qs;
  logic ALERT_REGWEN_1_wd;
  logic ALERT_REGWEN_2_we;
  logic ALERT_REGWEN_2_qs;
  logic ALERT_REGWEN_2_wd;
  logic ALERT_REGWEN_3_we;
  logic ALERT_REGWEN_3_qs;
  logic ALERT_REGWEN_3_wd;
  logic ALERT_REGWEN_4_we;
  logic ALERT_REGWEN_4_qs;
  logic ALERT_REGWEN_4_wd;
  logic ALERT_REGWEN_5_we;
  logic ALERT_REGWEN_5_qs;
  logic ALERT_REGWEN_5_wd;
  logic ALERT_REGWEN_6_we;
  logic ALERT_REGWEN_6_qs;
  logic ALERT_REGWEN_6_wd;
  logic ALERT_REGWEN_7_we;
  logic ALERT_REGWEN_7_qs;
  logic ALERT_REGWEN_7_wd;
  logic ALERT_REGWEN_8_we;
  logic ALERT_REGWEN_8_qs;
  logic ALERT_REGWEN_8_wd;
  logic ALERT_REGWEN_9_we;
  logic ALERT_REGWEN_9_qs;
  logic ALERT_REGWEN_9_wd;
  logic ALERT_REGWEN_10_we;
  logic ALERT_REGWEN_10_qs;
  logic ALERT_REGWEN_10_wd;
  logic ALERT_REGWEN_11_we;
  logic ALERT_REGWEN_11_qs;
  logic ALERT_REGWEN_11_wd;
  logic ALERT_REGWEN_12_we;
  logic ALERT_REGWEN_12_qs;
  logic ALERT_REGWEN_12_wd;
  logic ALERT_REGWEN_13_we;
  logic ALERT_REGWEN_13_qs;
  logic ALERT_REGWEN_13_wd;
  logic ALERT_REGWEN_14_we;
  logic ALERT_REGWEN_14_qs;
  logic ALERT_REGWEN_14_wd;
  logic ALERT_REGWEN_15_we;
  logic ALERT_REGWEN_15_qs;
  logic ALERT_REGWEN_15_wd;
  logic ALERT_REGWEN_16_we;
  logic ALERT_REGWEN_16_qs;
  logic ALERT_REGWEN_16_wd;
  logic ALERT_REGWEN_17_we;
  logic ALERT_REGWEN_17_qs;
  logic ALERT_REGWEN_17_wd;
  logic ALERT_REGWEN_18_we;
  logic ALERT_REGWEN_18_qs;
  logic ALERT_REGWEN_18_wd;
  logic ALERT_REGWEN_19_we;
  logic ALERT_REGWEN_19_qs;
  logic ALERT_REGWEN_19_wd;
  logic ALERT_REGWEN_20_we;
  logic ALERT_REGWEN_20_qs;
  logic ALERT_REGWEN_20_wd;
  logic ALERT_REGWEN_21_we;
  logic ALERT_REGWEN_21_qs;
  logic ALERT_REGWEN_21_wd;
  logic ALERT_REGWEN_22_we;
  logic ALERT_REGWEN_22_qs;
  logic ALERT_REGWEN_22_wd;
  logic ALERT_REGWEN_23_we;
  logic ALERT_REGWEN_23_qs;
  logic ALERT_REGWEN_23_wd;
  logic ALERT_REGWEN_24_we;
  logic ALERT_REGWEN_24_qs;
  logic ALERT_REGWEN_24_wd;
  logic ALERT_REGWEN_25_we;
  logic ALERT_REGWEN_25_qs;
  logic ALERT_REGWEN_25_wd;
  logic ALERT_REGWEN_26_we;
  logic ALERT_REGWEN_26_qs;
  logic ALERT_REGWEN_26_wd;
  logic ALERT_REGWEN_27_we;
  logic ALERT_REGWEN_27_qs;
  logic ALERT_REGWEN_27_wd;
  logic ALERT_REGWEN_28_we;
  logic ALERT_REGWEN_28_qs;
  logic ALERT_REGWEN_28_wd;
  logic ALERT_REGWEN_29_we;
  logic ALERT_REGWEN_29_qs;
  logic ALERT_REGWEN_29_wd;
  logic ALERT_REGWEN_30_we;
  logic ALERT_REGWEN_30_qs;
  logic ALERT_REGWEN_30_wd;
  logic ALERT_REGWEN_31_we;
  logic ALERT_REGWEN_31_qs;
  logic ALERT_REGWEN_31_wd;
  logic ALERT_REGWEN_32_we;
  logic ALERT_REGWEN_32_qs;
  logic ALERT_REGWEN_32_wd;
  logic ALERT_REGWEN_33_we;
  logic ALERT_REGWEN_33_qs;
  logic ALERT_REGWEN_33_wd;
  logic ALERT_REGWEN_34_we;
  logic ALERT_REGWEN_34_qs;
  logic ALERT_REGWEN_34_wd;
  logic ALERT_REGWEN_35_we;
  logic ALERT_REGWEN_35_qs;
  logic ALERT_REGWEN_35_wd;
  logic ALERT_REGWEN_36_we;
  logic ALERT_REGWEN_36_qs;
  logic ALERT_REGWEN_36_wd;
  logic ALERT_REGWEN_37_we;
  logic ALERT_REGWEN_37_qs;
  logic ALERT_REGWEN_37_wd;
  logic ALERT_REGWEN_38_we;
  logic ALERT_REGWEN_38_qs;
  logic ALERT_REGWEN_38_wd;
  logic ALERT_REGWEN_39_we;
  logic ALERT_REGWEN_39_qs;
  logic ALERT_REGWEN_39_wd;
  logic ALERT_REGWEN_40_we;
  logic ALERT_REGWEN_40_qs;
  logic ALERT_REGWEN_40_wd;
  logic ALERT_REGWEN_41_we;
  logic ALERT_REGWEN_41_qs;
  logic ALERT_REGWEN_41_wd;
  logic ALERT_REGWEN_42_we;
  logic ALERT_REGWEN_42_qs;
  logic ALERT_REGWEN_42_wd;
  logic ALERT_REGWEN_43_we;
  logic ALERT_REGWEN_43_qs;
  logic ALERT_REGWEN_43_wd;
  logic ALERT_REGWEN_44_we;
  logic ALERT_REGWEN_44_qs;
  logic ALERT_REGWEN_44_wd;
  logic ALERT_REGWEN_45_we;
  logic ALERT_REGWEN_45_qs;
  logic ALERT_REGWEN_45_wd;
  logic ALERT_REGWEN_46_we;
  logic ALERT_REGWEN_46_qs;
  logic ALERT_REGWEN_46_wd;
  logic ALERT_REGWEN_47_we;
  logic ALERT_REGWEN_47_qs;
  logic ALERT_REGWEN_47_wd;
  logic ALERT_REGWEN_48_we;
  logic ALERT_REGWEN_48_qs;
  logic ALERT_REGWEN_48_wd;
  logic ALERT_REGWEN_49_we;
  logic ALERT_REGWEN_49_qs;
  logic ALERT_REGWEN_49_wd;
  logic ALERT_REGWEN_50_we;
  logic ALERT_REGWEN_50_qs;
  logic ALERT_REGWEN_50_wd;
  logic ALERT_REGWEN_51_we;
  logic ALERT_REGWEN_51_qs;
  logic ALERT_REGWEN_51_wd;
  logic ALERT_REGWEN_52_we;
  logic ALERT_REGWEN_52_qs;
  logic ALERT_REGWEN_52_wd;
  logic ALERT_REGWEN_53_we;
  logic ALERT_REGWEN_53_qs;
  logic ALERT_REGWEN_53_wd;
  logic ALERT_REGWEN_54_we;
  logic ALERT_REGWEN_54_qs;
  logic ALERT_REGWEN_54_wd;
  logic ALERT_REGWEN_55_we;
  logic ALERT_REGWEN_55_qs;
  logic ALERT_REGWEN_55_wd;
  logic ALERT_REGWEN_56_we;
  logic ALERT_REGWEN_56_qs;
  logic ALERT_REGWEN_56_wd;
  logic ALERT_REGWEN_57_we;
  logic ALERT_REGWEN_57_qs;
  logic ALERT_REGWEN_57_wd;
  logic ALERT_REGWEN_58_we;
  logic ALERT_REGWEN_58_qs;
  logic ALERT_REGWEN_58_wd;
  logic ALERT_REGWEN_59_we;
  logic ALERT_REGWEN_59_qs;
  logic ALERT_REGWEN_59_wd;
  logic ALERT_REGWEN_60_we;
  logic ALERT_REGWEN_60_qs;
  logic ALERT_REGWEN_60_wd;
  logic ALERT_REGWEN_61_we;
  logic ALERT_REGWEN_61_qs;
  logic ALERT_REGWEN_61_wd;
  logic ALERT_REGWEN_62_we;
  logic ALERT_REGWEN_62_qs;
  logic ALERT_REGWEN_62_wd;
  logic ALERT_REGWEN_63_we;
  logic ALERT_REGWEN_63_qs;
  logic ALERT_REGWEN_63_wd;
  logic ALERT_EN_SHADOWED_0_re;
  logic ALERT_EN_SHADOWED_0_we;
  logic ALERT_EN_SHADOWED_0_qs;
  logic ALERT_EN_SHADOWED_0_wd;
  logic ALERT_EN_SHADOWED_0_storage_err;
  logic ALERT_EN_SHADOWED_0_update_err;
  logic ALERT_EN_SHADOWED_1_re;
  logic ALERT_EN_SHADOWED_1_we;
  logic ALERT_EN_SHADOWED_1_qs;
  logic ALERT_EN_SHADOWED_1_wd;
  logic ALERT_EN_SHADOWED_1_storage_err;
  logic ALERT_EN_SHADOWED_1_update_err;
  logic ALERT_EN_SHADOWED_2_re;
  logic ALERT_EN_SHADOWED_2_we;
  logic ALERT_EN_SHADOWED_2_qs;
  logic ALERT_EN_SHADOWED_2_wd;
  logic ALERT_EN_SHADOWED_2_storage_err;
  logic ALERT_EN_SHADOWED_2_update_err;
  logic ALERT_EN_SHADOWED_3_re;
  logic ALERT_EN_SHADOWED_3_we;
  logic ALERT_EN_SHADOWED_3_qs;
  logic ALERT_EN_SHADOWED_3_wd;
  logic ALERT_EN_SHADOWED_3_storage_err;
  logic ALERT_EN_SHADOWED_3_update_err;
  logic ALERT_EN_SHADOWED_4_re;
  logic ALERT_EN_SHADOWED_4_we;
  logic ALERT_EN_SHADOWED_4_qs;
  logic ALERT_EN_SHADOWED_4_wd;
  logic ALERT_EN_SHADOWED_4_storage_err;
  logic ALERT_EN_SHADOWED_4_update_err;
  logic ALERT_EN_SHADOWED_5_re;
  logic ALERT_EN_SHADOWED_5_we;
  logic ALERT_EN_SHADOWED_5_qs;
  logic ALERT_EN_SHADOWED_5_wd;
  logic ALERT_EN_SHADOWED_5_storage_err;
  logic ALERT_EN_SHADOWED_5_update_err;
  logic ALERT_EN_SHADOWED_6_re;
  logic ALERT_EN_SHADOWED_6_we;
  logic ALERT_EN_SHADOWED_6_qs;
  logic ALERT_EN_SHADOWED_6_wd;
  logic ALERT_EN_SHADOWED_6_storage_err;
  logic ALERT_EN_SHADOWED_6_update_err;
  logic ALERT_EN_SHADOWED_7_re;
  logic ALERT_EN_SHADOWED_7_we;
  logic ALERT_EN_SHADOWED_7_qs;
  logic ALERT_EN_SHADOWED_7_wd;
  logic ALERT_EN_SHADOWED_7_storage_err;
  logic ALERT_EN_SHADOWED_7_update_err;
  logic ALERT_EN_SHADOWED_8_re;
  logic ALERT_EN_SHADOWED_8_we;
  logic ALERT_EN_SHADOWED_8_qs;
  logic ALERT_EN_SHADOWED_8_wd;
  logic ALERT_EN_SHADOWED_8_storage_err;
  logic ALERT_EN_SHADOWED_8_update_err;
  logic ALERT_EN_SHADOWED_9_re;
  logic ALERT_EN_SHADOWED_9_we;
  logic ALERT_EN_SHADOWED_9_qs;
  logic ALERT_EN_SHADOWED_9_wd;
  logic ALERT_EN_SHADOWED_9_storage_err;
  logic ALERT_EN_SHADOWED_9_update_err;
  logic ALERT_EN_SHADOWED_10_re;
  logic ALERT_EN_SHADOWED_10_we;
  logic ALERT_EN_SHADOWED_10_qs;
  logic ALERT_EN_SHADOWED_10_wd;
  logic ALERT_EN_SHADOWED_10_storage_err;
  logic ALERT_EN_SHADOWED_10_update_err;
  logic ALERT_EN_SHADOWED_11_re;
  logic ALERT_EN_SHADOWED_11_we;
  logic ALERT_EN_SHADOWED_11_qs;
  logic ALERT_EN_SHADOWED_11_wd;
  logic ALERT_EN_SHADOWED_11_storage_err;
  logic ALERT_EN_SHADOWED_11_update_err;
  logic ALERT_EN_SHADOWED_12_re;
  logic ALERT_EN_SHADOWED_12_we;
  logic ALERT_EN_SHADOWED_12_qs;
  logic ALERT_EN_SHADOWED_12_wd;
  logic ALERT_EN_SHADOWED_12_storage_err;
  logic ALERT_EN_SHADOWED_12_update_err;
  logic ALERT_EN_SHADOWED_13_re;
  logic ALERT_EN_SHADOWED_13_we;
  logic ALERT_EN_SHADOWED_13_qs;
  logic ALERT_EN_SHADOWED_13_wd;
  logic ALERT_EN_SHADOWED_13_storage_err;
  logic ALERT_EN_SHADOWED_13_update_err;
  logic ALERT_EN_SHADOWED_14_re;
  logic ALERT_EN_SHADOWED_14_we;
  logic ALERT_EN_SHADOWED_14_qs;
  logic ALERT_EN_SHADOWED_14_wd;
  logic ALERT_EN_SHADOWED_14_storage_err;
  logic ALERT_EN_SHADOWED_14_update_err;
  logic ALERT_EN_SHADOWED_15_re;
  logic ALERT_EN_SHADOWED_15_we;
  logic ALERT_EN_SHADOWED_15_qs;
  logic ALERT_EN_SHADOWED_15_wd;
  logic ALERT_EN_SHADOWED_15_storage_err;
  logic ALERT_EN_SHADOWED_15_update_err;
  logic ALERT_EN_SHADOWED_16_re;
  logic ALERT_EN_SHADOWED_16_we;
  logic ALERT_EN_SHADOWED_16_qs;
  logic ALERT_EN_SHADOWED_16_wd;
  logic ALERT_EN_SHADOWED_16_storage_err;
  logic ALERT_EN_SHADOWED_16_update_err;
  logic ALERT_EN_SHADOWED_17_re;
  logic ALERT_EN_SHADOWED_17_we;
  logic ALERT_EN_SHADOWED_17_qs;
  logic ALERT_EN_SHADOWED_17_wd;
  logic ALERT_EN_SHADOWED_17_storage_err;
  logic ALERT_EN_SHADOWED_17_update_err;
  logic ALERT_EN_SHADOWED_18_re;
  logic ALERT_EN_SHADOWED_18_we;
  logic ALERT_EN_SHADOWED_18_qs;
  logic ALERT_EN_SHADOWED_18_wd;
  logic ALERT_EN_SHADOWED_18_storage_err;
  logic ALERT_EN_SHADOWED_18_update_err;
  logic ALERT_EN_SHADOWED_19_re;
  logic ALERT_EN_SHADOWED_19_we;
  logic ALERT_EN_SHADOWED_19_qs;
  logic ALERT_EN_SHADOWED_19_wd;
  logic ALERT_EN_SHADOWED_19_storage_err;
  logic ALERT_EN_SHADOWED_19_update_err;
  logic ALERT_EN_SHADOWED_20_re;
  logic ALERT_EN_SHADOWED_20_we;
  logic ALERT_EN_SHADOWED_20_qs;
  logic ALERT_EN_SHADOWED_20_wd;
  logic ALERT_EN_SHADOWED_20_storage_err;
  logic ALERT_EN_SHADOWED_20_update_err;
  logic ALERT_EN_SHADOWED_21_re;
  logic ALERT_EN_SHADOWED_21_we;
  logic ALERT_EN_SHADOWED_21_qs;
  logic ALERT_EN_SHADOWED_21_wd;
  logic ALERT_EN_SHADOWED_21_storage_err;
  logic ALERT_EN_SHADOWED_21_update_err;
  logic ALERT_EN_SHADOWED_22_re;
  logic ALERT_EN_SHADOWED_22_we;
  logic ALERT_EN_SHADOWED_22_qs;
  logic ALERT_EN_SHADOWED_22_wd;
  logic ALERT_EN_SHADOWED_22_storage_err;
  logic ALERT_EN_SHADOWED_22_update_err;
  logic ALERT_EN_SHADOWED_23_re;
  logic ALERT_EN_SHADOWED_23_we;
  logic ALERT_EN_SHADOWED_23_qs;
  logic ALERT_EN_SHADOWED_23_wd;
  logic ALERT_EN_SHADOWED_23_storage_err;
  logic ALERT_EN_SHADOWED_23_update_err;
  logic ALERT_EN_SHADOWED_24_re;
  logic ALERT_EN_SHADOWED_24_we;
  logic ALERT_EN_SHADOWED_24_qs;
  logic ALERT_EN_SHADOWED_24_wd;
  logic ALERT_EN_SHADOWED_24_storage_err;
  logic ALERT_EN_SHADOWED_24_update_err;
  logic ALERT_EN_SHADOWED_25_re;
  logic ALERT_EN_SHADOWED_25_we;
  logic ALERT_EN_SHADOWED_25_qs;
  logic ALERT_EN_SHADOWED_25_wd;
  logic ALERT_EN_SHADOWED_25_storage_err;
  logic ALERT_EN_SHADOWED_25_update_err;
  logic ALERT_EN_SHADOWED_26_re;
  logic ALERT_EN_SHADOWED_26_we;
  logic ALERT_EN_SHADOWED_26_qs;
  logic ALERT_EN_SHADOWED_26_wd;
  logic ALERT_EN_SHADOWED_26_storage_err;
  logic ALERT_EN_SHADOWED_26_update_err;
  logic ALERT_EN_SHADOWED_27_re;
  logic ALERT_EN_SHADOWED_27_we;
  logic ALERT_EN_SHADOWED_27_qs;
  logic ALERT_EN_SHADOWED_27_wd;
  logic ALERT_EN_SHADOWED_27_storage_err;
  logic ALERT_EN_SHADOWED_27_update_err;
  logic ALERT_EN_SHADOWED_28_re;
  logic ALERT_EN_SHADOWED_28_we;
  logic ALERT_EN_SHADOWED_28_qs;
  logic ALERT_EN_SHADOWED_28_wd;
  logic ALERT_EN_SHADOWED_28_storage_err;
  logic ALERT_EN_SHADOWED_28_update_err;
  logic ALERT_EN_SHADOWED_29_re;
  logic ALERT_EN_SHADOWED_29_we;
  logic ALERT_EN_SHADOWED_29_qs;
  logic ALERT_EN_SHADOWED_29_wd;
  logic ALERT_EN_SHADOWED_29_storage_err;
  logic ALERT_EN_SHADOWED_29_update_err;
  logic ALERT_EN_SHADOWED_30_re;
  logic ALERT_EN_SHADOWED_30_we;
  logic ALERT_EN_SHADOWED_30_qs;
  logic ALERT_EN_SHADOWED_30_wd;
  logic ALERT_EN_SHADOWED_30_storage_err;
  logic ALERT_EN_SHADOWED_30_update_err;
  logic ALERT_EN_SHADOWED_31_re;
  logic ALERT_EN_SHADOWED_31_we;
  logic ALERT_EN_SHADOWED_31_qs;
  logic ALERT_EN_SHADOWED_31_wd;
  logic ALERT_EN_SHADOWED_31_storage_err;
  logic ALERT_EN_SHADOWED_31_update_err;
  logic ALERT_EN_SHADOWED_32_re;
  logic ALERT_EN_SHADOWED_32_we;
  logic ALERT_EN_SHADOWED_32_qs;
  logic ALERT_EN_SHADOWED_32_wd;
  logic ALERT_EN_SHADOWED_32_storage_err;
  logic ALERT_EN_SHADOWED_32_update_err;
  logic ALERT_EN_SHADOWED_33_re;
  logic ALERT_EN_SHADOWED_33_we;
  logic ALERT_EN_SHADOWED_33_qs;
  logic ALERT_EN_SHADOWED_33_wd;
  logic ALERT_EN_SHADOWED_33_storage_err;
  logic ALERT_EN_SHADOWED_33_update_err;
  logic ALERT_EN_SHADOWED_34_re;
  logic ALERT_EN_SHADOWED_34_we;
  logic ALERT_EN_SHADOWED_34_qs;
  logic ALERT_EN_SHADOWED_34_wd;
  logic ALERT_EN_SHADOWED_34_storage_err;
  logic ALERT_EN_SHADOWED_34_update_err;
  logic ALERT_EN_SHADOWED_35_re;
  logic ALERT_EN_SHADOWED_35_we;
  logic ALERT_EN_SHADOWED_35_qs;
  logic ALERT_EN_SHADOWED_35_wd;
  logic ALERT_EN_SHADOWED_35_storage_err;
  logic ALERT_EN_SHADOWED_35_update_err;
  logic ALERT_EN_SHADOWED_36_re;
  logic ALERT_EN_SHADOWED_36_we;
  logic ALERT_EN_SHADOWED_36_qs;
  logic ALERT_EN_SHADOWED_36_wd;
  logic ALERT_EN_SHADOWED_36_storage_err;
  logic ALERT_EN_SHADOWED_36_update_err;
  logic ALERT_EN_SHADOWED_37_re;
  logic ALERT_EN_SHADOWED_37_we;
  logic ALERT_EN_SHADOWED_37_qs;
  logic ALERT_EN_SHADOWED_37_wd;
  logic ALERT_EN_SHADOWED_37_storage_err;
  logic ALERT_EN_SHADOWED_37_update_err;
  logic ALERT_EN_SHADOWED_38_re;
  logic ALERT_EN_SHADOWED_38_we;
  logic ALERT_EN_SHADOWED_38_qs;
  logic ALERT_EN_SHADOWED_38_wd;
  logic ALERT_EN_SHADOWED_38_storage_err;
  logic ALERT_EN_SHADOWED_38_update_err;
  logic ALERT_EN_SHADOWED_39_re;
  logic ALERT_EN_SHADOWED_39_we;
  logic ALERT_EN_SHADOWED_39_qs;
  logic ALERT_EN_SHADOWED_39_wd;
  logic ALERT_EN_SHADOWED_39_storage_err;
  logic ALERT_EN_SHADOWED_39_update_err;
  logic ALERT_EN_SHADOWED_40_re;
  logic ALERT_EN_SHADOWED_40_we;
  logic ALERT_EN_SHADOWED_40_qs;
  logic ALERT_EN_SHADOWED_40_wd;
  logic ALERT_EN_SHADOWED_40_storage_err;
  logic ALERT_EN_SHADOWED_40_update_err;
  logic ALERT_EN_SHADOWED_41_re;
  logic ALERT_EN_SHADOWED_41_we;
  logic ALERT_EN_SHADOWED_41_qs;
  logic ALERT_EN_SHADOWED_41_wd;
  logic ALERT_EN_SHADOWED_41_storage_err;
  logic ALERT_EN_SHADOWED_41_update_err;
  logic ALERT_EN_SHADOWED_42_re;
  logic ALERT_EN_SHADOWED_42_we;
  logic ALERT_EN_SHADOWED_42_qs;
  logic ALERT_EN_SHADOWED_42_wd;
  logic ALERT_EN_SHADOWED_42_storage_err;
  logic ALERT_EN_SHADOWED_42_update_err;
  logic ALERT_EN_SHADOWED_43_re;
  logic ALERT_EN_SHADOWED_43_we;
  logic ALERT_EN_SHADOWED_43_qs;
  logic ALERT_EN_SHADOWED_43_wd;
  logic ALERT_EN_SHADOWED_43_storage_err;
  logic ALERT_EN_SHADOWED_43_update_err;
  logic ALERT_EN_SHADOWED_44_re;
  logic ALERT_EN_SHADOWED_44_we;
  logic ALERT_EN_SHADOWED_44_qs;
  logic ALERT_EN_SHADOWED_44_wd;
  logic ALERT_EN_SHADOWED_44_storage_err;
  logic ALERT_EN_SHADOWED_44_update_err;
  logic ALERT_EN_SHADOWED_45_re;
  logic ALERT_EN_SHADOWED_45_we;
  logic ALERT_EN_SHADOWED_45_qs;
  logic ALERT_EN_SHADOWED_45_wd;
  logic ALERT_EN_SHADOWED_45_storage_err;
  logic ALERT_EN_SHADOWED_45_update_err;
  logic ALERT_EN_SHADOWED_46_re;
  logic ALERT_EN_SHADOWED_46_we;
  logic ALERT_EN_SHADOWED_46_qs;
  logic ALERT_EN_SHADOWED_46_wd;
  logic ALERT_EN_SHADOWED_46_storage_err;
  logic ALERT_EN_SHADOWED_46_update_err;
  logic ALERT_EN_SHADOWED_47_re;
  logic ALERT_EN_SHADOWED_47_we;
  logic ALERT_EN_SHADOWED_47_qs;
  logic ALERT_EN_SHADOWED_47_wd;
  logic ALERT_EN_SHADOWED_47_storage_err;
  logic ALERT_EN_SHADOWED_47_update_err;
  logic ALERT_EN_SHADOWED_48_re;
  logic ALERT_EN_SHADOWED_48_we;
  logic ALERT_EN_SHADOWED_48_qs;
  logic ALERT_EN_SHADOWED_48_wd;
  logic ALERT_EN_SHADOWED_48_storage_err;
  logic ALERT_EN_SHADOWED_48_update_err;
  logic ALERT_EN_SHADOWED_49_re;
  logic ALERT_EN_SHADOWED_49_we;
  logic ALERT_EN_SHADOWED_49_qs;
  logic ALERT_EN_SHADOWED_49_wd;
  logic ALERT_EN_SHADOWED_49_storage_err;
  logic ALERT_EN_SHADOWED_49_update_err;
  logic ALERT_EN_SHADOWED_50_re;
  logic ALERT_EN_SHADOWED_50_we;
  logic ALERT_EN_SHADOWED_50_qs;
  logic ALERT_EN_SHADOWED_50_wd;
  logic ALERT_EN_SHADOWED_50_storage_err;
  logic ALERT_EN_SHADOWED_50_update_err;
  logic ALERT_EN_SHADOWED_51_re;
  logic ALERT_EN_SHADOWED_51_we;
  logic ALERT_EN_SHADOWED_51_qs;
  logic ALERT_EN_SHADOWED_51_wd;
  logic ALERT_EN_SHADOWED_51_storage_err;
  logic ALERT_EN_SHADOWED_51_update_err;
  logic ALERT_EN_SHADOWED_52_re;
  logic ALERT_EN_SHADOWED_52_we;
  logic ALERT_EN_SHADOWED_52_qs;
  logic ALERT_EN_SHADOWED_52_wd;
  logic ALERT_EN_SHADOWED_52_storage_err;
  logic ALERT_EN_SHADOWED_52_update_err;
  logic ALERT_EN_SHADOWED_53_re;
  logic ALERT_EN_SHADOWED_53_we;
  logic ALERT_EN_SHADOWED_53_qs;
  logic ALERT_EN_SHADOWED_53_wd;
  logic ALERT_EN_SHADOWED_53_storage_err;
  logic ALERT_EN_SHADOWED_53_update_err;
  logic ALERT_EN_SHADOWED_54_re;
  logic ALERT_EN_SHADOWED_54_we;
  logic ALERT_EN_SHADOWED_54_qs;
  logic ALERT_EN_SHADOWED_54_wd;
  logic ALERT_EN_SHADOWED_54_storage_err;
  logic ALERT_EN_SHADOWED_54_update_err;
  logic ALERT_EN_SHADOWED_55_re;
  logic ALERT_EN_SHADOWED_55_we;
  logic ALERT_EN_SHADOWED_55_qs;
  logic ALERT_EN_SHADOWED_55_wd;
  logic ALERT_EN_SHADOWED_55_storage_err;
  logic ALERT_EN_SHADOWED_55_update_err;
  logic ALERT_EN_SHADOWED_56_re;
  logic ALERT_EN_SHADOWED_56_we;
  logic ALERT_EN_SHADOWED_56_qs;
  logic ALERT_EN_SHADOWED_56_wd;
  logic ALERT_EN_SHADOWED_56_storage_err;
  logic ALERT_EN_SHADOWED_56_update_err;
  logic ALERT_EN_SHADOWED_57_re;
  logic ALERT_EN_SHADOWED_57_we;
  logic ALERT_EN_SHADOWED_57_qs;
  logic ALERT_EN_SHADOWED_57_wd;
  logic ALERT_EN_SHADOWED_57_storage_err;
  logic ALERT_EN_SHADOWED_57_update_err;
  logic ALERT_EN_SHADOWED_58_re;
  logic ALERT_EN_SHADOWED_58_we;
  logic ALERT_EN_SHADOWED_58_qs;
  logic ALERT_EN_SHADOWED_58_wd;
  logic ALERT_EN_SHADOWED_58_storage_err;
  logic ALERT_EN_SHADOWED_58_update_err;
  logic ALERT_EN_SHADOWED_59_re;
  logic ALERT_EN_SHADOWED_59_we;
  logic ALERT_EN_SHADOWED_59_qs;
  logic ALERT_EN_SHADOWED_59_wd;
  logic ALERT_EN_SHADOWED_59_storage_err;
  logic ALERT_EN_SHADOWED_59_update_err;
  logic ALERT_EN_SHADOWED_60_re;
  logic ALERT_EN_SHADOWED_60_we;
  logic ALERT_EN_SHADOWED_60_qs;
  logic ALERT_EN_SHADOWED_60_wd;
  logic ALERT_EN_SHADOWED_60_storage_err;
  logic ALERT_EN_SHADOWED_60_update_err;
  logic ALERT_EN_SHADOWED_61_re;
  logic ALERT_EN_SHADOWED_61_we;
  logic ALERT_EN_SHADOWED_61_qs;
  logic ALERT_EN_SHADOWED_61_wd;
  logic ALERT_EN_SHADOWED_61_storage_err;
  logic ALERT_EN_SHADOWED_61_update_err;
  logic ALERT_EN_SHADOWED_62_re;
  logic ALERT_EN_SHADOWED_62_we;
  logic ALERT_EN_SHADOWED_62_qs;
  logic ALERT_EN_SHADOWED_62_wd;
  logic ALERT_EN_SHADOWED_62_storage_err;
  logic ALERT_EN_SHADOWED_62_update_err;
  logic ALERT_EN_SHADOWED_63_re;
  logic ALERT_EN_SHADOWED_63_we;
  logic ALERT_EN_SHADOWED_63_qs;
  logic ALERT_EN_SHADOWED_63_wd;
  logic ALERT_EN_SHADOWED_63_storage_err;
  logic ALERT_EN_SHADOWED_63_update_err;
  logic ALERT_CLASS_SHADOWED_0_re;
  logic ALERT_CLASS_SHADOWED_0_we;
  logic [1:0] ALERT_CLASS_SHADOWED_0_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_0_wd;
  logic ALERT_CLASS_SHADOWED_0_storage_err;
  logic ALERT_CLASS_SHADOWED_0_update_err;
  logic ALERT_CLASS_SHADOWED_1_re;
  logic ALERT_CLASS_SHADOWED_1_we;
  logic [1:0] ALERT_CLASS_SHADOWED_1_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_1_wd;
  logic ALERT_CLASS_SHADOWED_1_storage_err;
  logic ALERT_CLASS_SHADOWED_1_update_err;
  logic ALERT_CLASS_SHADOWED_2_re;
  logic ALERT_CLASS_SHADOWED_2_we;
  logic [1:0] ALERT_CLASS_SHADOWED_2_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_2_wd;
  logic ALERT_CLASS_SHADOWED_2_storage_err;
  logic ALERT_CLASS_SHADOWED_2_update_err;
  logic ALERT_CLASS_SHADOWED_3_re;
  logic ALERT_CLASS_SHADOWED_3_we;
  logic [1:0] ALERT_CLASS_SHADOWED_3_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_3_wd;
  logic ALERT_CLASS_SHADOWED_3_storage_err;
  logic ALERT_CLASS_SHADOWED_3_update_err;
  logic ALERT_CLASS_SHADOWED_4_re;
  logic ALERT_CLASS_SHADOWED_4_we;
  logic [1:0] ALERT_CLASS_SHADOWED_4_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_4_wd;
  logic ALERT_CLASS_SHADOWED_4_storage_err;
  logic ALERT_CLASS_SHADOWED_4_update_err;
  logic ALERT_CLASS_SHADOWED_5_re;
  logic ALERT_CLASS_SHADOWED_5_we;
  logic [1:0] ALERT_CLASS_SHADOWED_5_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_5_wd;
  logic ALERT_CLASS_SHADOWED_5_storage_err;
  logic ALERT_CLASS_SHADOWED_5_update_err;
  logic ALERT_CLASS_SHADOWED_6_re;
  logic ALERT_CLASS_SHADOWED_6_we;
  logic [1:0] ALERT_CLASS_SHADOWED_6_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_6_wd;
  logic ALERT_CLASS_SHADOWED_6_storage_err;
  logic ALERT_CLASS_SHADOWED_6_update_err;
  logic ALERT_CLASS_SHADOWED_7_re;
  logic ALERT_CLASS_SHADOWED_7_we;
  logic [1:0] ALERT_CLASS_SHADOWED_7_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_7_wd;
  logic ALERT_CLASS_SHADOWED_7_storage_err;
  logic ALERT_CLASS_SHADOWED_7_update_err;
  logic ALERT_CLASS_SHADOWED_8_re;
  logic ALERT_CLASS_SHADOWED_8_we;
  logic [1:0] ALERT_CLASS_SHADOWED_8_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_8_wd;
  logic ALERT_CLASS_SHADOWED_8_storage_err;
  logic ALERT_CLASS_SHADOWED_8_update_err;
  logic ALERT_CLASS_SHADOWED_9_re;
  logic ALERT_CLASS_SHADOWED_9_we;
  logic [1:0] ALERT_CLASS_SHADOWED_9_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_9_wd;
  logic ALERT_CLASS_SHADOWED_9_storage_err;
  logic ALERT_CLASS_SHADOWED_9_update_err;
  logic ALERT_CLASS_SHADOWED_10_re;
  logic ALERT_CLASS_SHADOWED_10_we;
  logic [1:0] ALERT_CLASS_SHADOWED_10_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_10_wd;
  logic ALERT_CLASS_SHADOWED_10_storage_err;
  logic ALERT_CLASS_SHADOWED_10_update_err;
  logic ALERT_CLASS_SHADOWED_11_re;
  logic ALERT_CLASS_SHADOWED_11_we;
  logic [1:0] ALERT_CLASS_SHADOWED_11_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_11_wd;
  logic ALERT_CLASS_SHADOWED_11_storage_err;
  logic ALERT_CLASS_SHADOWED_11_update_err;
  logic ALERT_CLASS_SHADOWED_12_re;
  logic ALERT_CLASS_SHADOWED_12_we;
  logic [1:0] ALERT_CLASS_SHADOWED_12_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_12_wd;
  logic ALERT_CLASS_SHADOWED_12_storage_err;
  logic ALERT_CLASS_SHADOWED_12_update_err;
  logic ALERT_CLASS_SHADOWED_13_re;
  logic ALERT_CLASS_SHADOWED_13_we;
  logic [1:0] ALERT_CLASS_SHADOWED_13_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_13_wd;
  logic ALERT_CLASS_SHADOWED_13_storage_err;
  logic ALERT_CLASS_SHADOWED_13_update_err;
  logic ALERT_CLASS_SHADOWED_14_re;
  logic ALERT_CLASS_SHADOWED_14_we;
  logic [1:0] ALERT_CLASS_SHADOWED_14_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_14_wd;
  logic ALERT_CLASS_SHADOWED_14_storage_err;
  logic ALERT_CLASS_SHADOWED_14_update_err;
  logic ALERT_CLASS_SHADOWED_15_re;
  logic ALERT_CLASS_SHADOWED_15_we;
  logic [1:0] ALERT_CLASS_SHADOWED_15_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_15_wd;
  logic ALERT_CLASS_SHADOWED_15_storage_err;
  logic ALERT_CLASS_SHADOWED_15_update_err;
  logic ALERT_CLASS_SHADOWED_16_re;
  logic ALERT_CLASS_SHADOWED_16_we;
  logic [1:0] ALERT_CLASS_SHADOWED_16_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_16_wd;
  logic ALERT_CLASS_SHADOWED_16_storage_err;
  logic ALERT_CLASS_SHADOWED_16_update_err;
  logic ALERT_CLASS_SHADOWED_17_re;
  logic ALERT_CLASS_SHADOWED_17_we;
  logic [1:0] ALERT_CLASS_SHADOWED_17_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_17_wd;
  logic ALERT_CLASS_SHADOWED_17_storage_err;
  logic ALERT_CLASS_SHADOWED_17_update_err;
  logic ALERT_CLASS_SHADOWED_18_re;
  logic ALERT_CLASS_SHADOWED_18_we;
  logic [1:0] ALERT_CLASS_SHADOWED_18_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_18_wd;
  logic ALERT_CLASS_SHADOWED_18_storage_err;
  logic ALERT_CLASS_SHADOWED_18_update_err;
  logic ALERT_CLASS_SHADOWED_19_re;
  logic ALERT_CLASS_SHADOWED_19_we;
  logic [1:0] ALERT_CLASS_SHADOWED_19_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_19_wd;
  logic ALERT_CLASS_SHADOWED_19_storage_err;
  logic ALERT_CLASS_SHADOWED_19_update_err;
  logic ALERT_CLASS_SHADOWED_20_re;
  logic ALERT_CLASS_SHADOWED_20_we;
  logic [1:0] ALERT_CLASS_SHADOWED_20_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_20_wd;
  logic ALERT_CLASS_SHADOWED_20_storage_err;
  logic ALERT_CLASS_SHADOWED_20_update_err;
  logic ALERT_CLASS_SHADOWED_21_re;
  logic ALERT_CLASS_SHADOWED_21_we;
  logic [1:0] ALERT_CLASS_SHADOWED_21_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_21_wd;
  logic ALERT_CLASS_SHADOWED_21_storage_err;
  logic ALERT_CLASS_SHADOWED_21_update_err;
  logic ALERT_CLASS_SHADOWED_22_re;
  logic ALERT_CLASS_SHADOWED_22_we;
  logic [1:0] ALERT_CLASS_SHADOWED_22_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_22_wd;
  logic ALERT_CLASS_SHADOWED_22_storage_err;
  logic ALERT_CLASS_SHADOWED_22_update_err;
  logic ALERT_CLASS_SHADOWED_23_re;
  logic ALERT_CLASS_SHADOWED_23_we;
  logic [1:0] ALERT_CLASS_SHADOWED_23_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_23_wd;
  logic ALERT_CLASS_SHADOWED_23_storage_err;
  logic ALERT_CLASS_SHADOWED_23_update_err;
  logic ALERT_CLASS_SHADOWED_24_re;
  logic ALERT_CLASS_SHADOWED_24_we;
  logic [1:0] ALERT_CLASS_SHADOWED_24_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_24_wd;
  logic ALERT_CLASS_SHADOWED_24_storage_err;
  logic ALERT_CLASS_SHADOWED_24_update_err;
  logic ALERT_CLASS_SHADOWED_25_re;
  logic ALERT_CLASS_SHADOWED_25_we;
  logic [1:0] ALERT_CLASS_SHADOWED_25_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_25_wd;
  logic ALERT_CLASS_SHADOWED_25_storage_err;
  logic ALERT_CLASS_SHADOWED_25_update_err;
  logic ALERT_CLASS_SHADOWED_26_re;
  logic ALERT_CLASS_SHADOWED_26_we;
  logic [1:0] ALERT_CLASS_SHADOWED_26_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_26_wd;
  logic ALERT_CLASS_SHADOWED_26_storage_err;
  logic ALERT_CLASS_SHADOWED_26_update_err;
  logic ALERT_CLASS_SHADOWED_27_re;
  logic ALERT_CLASS_SHADOWED_27_we;
  logic [1:0] ALERT_CLASS_SHADOWED_27_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_27_wd;
  logic ALERT_CLASS_SHADOWED_27_storage_err;
  logic ALERT_CLASS_SHADOWED_27_update_err;
  logic ALERT_CLASS_SHADOWED_28_re;
  logic ALERT_CLASS_SHADOWED_28_we;
  logic [1:0] ALERT_CLASS_SHADOWED_28_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_28_wd;
  logic ALERT_CLASS_SHADOWED_28_storage_err;
  logic ALERT_CLASS_SHADOWED_28_update_err;
  logic ALERT_CLASS_SHADOWED_29_re;
  logic ALERT_CLASS_SHADOWED_29_we;
  logic [1:0] ALERT_CLASS_SHADOWED_29_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_29_wd;
  logic ALERT_CLASS_SHADOWED_29_storage_err;
  logic ALERT_CLASS_SHADOWED_29_update_err;
  logic ALERT_CLASS_SHADOWED_30_re;
  logic ALERT_CLASS_SHADOWED_30_we;
  logic [1:0] ALERT_CLASS_SHADOWED_30_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_30_wd;
  logic ALERT_CLASS_SHADOWED_30_storage_err;
  logic ALERT_CLASS_SHADOWED_30_update_err;
  logic ALERT_CLASS_SHADOWED_31_re;
  logic ALERT_CLASS_SHADOWED_31_we;
  logic [1:0] ALERT_CLASS_SHADOWED_31_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_31_wd;
  logic ALERT_CLASS_SHADOWED_31_storage_err;
  logic ALERT_CLASS_SHADOWED_31_update_err;
  logic ALERT_CLASS_SHADOWED_32_re;
  logic ALERT_CLASS_SHADOWED_32_we;
  logic [1:0] ALERT_CLASS_SHADOWED_32_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_32_wd;
  logic ALERT_CLASS_SHADOWED_32_storage_err;
  logic ALERT_CLASS_SHADOWED_32_update_err;
  logic ALERT_CLASS_SHADOWED_33_re;
  logic ALERT_CLASS_SHADOWED_33_we;
  logic [1:0] ALERT_CLASS_SHADOWED_33_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_33_wd;
  logic ALERT_CLASS_SHADOWED_33_storage_err;
  logic ALERT_CLASS_SHADOWED_33_update_err;
  logic ALERT_CLASS_SHADOWED_34_re;
  logic ALERT_CLASS_SHADOWED_34_we;
  logic [1:0] ALERT_CLASS_SHADOWED_34_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_34_wd;
  logic ALERT_CLASS_SHADOWED_34_storage_err;
  logic ALERT_CLASS_SHADOWED_34_update_err;
  logic ALERT_CLASS_SHADOWED_35_re;
  logic ALERT_CLASS_SHADOWED_35_we;
  logic [1:0] ALERT_CLASS_SHADOWED_35_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_35_wd;
  logic ALERT_CLASS_SHADOWED_35_storage_err;
  logic ALERT_CLASS_SHADOWED_35_update_err;
  logic ALERT_CLASS_SHADOWED_36_re;
  logic ALERT_CLASS_SHADOWED_36_we;
  logic [1:0] ALERT_CLASS_SHADOWED_36_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_36_wd;
  logic ALERT_CLASS_SHADOWED_36_storage_err;
  logic ALERT_CLASS_SHADOWED_36_update_err;
  logic ALERT_CLASS_SHADOWED_37_re;
  logic ALERT_CLASS_SHADOWED_37_we;
  logic [1:0] ALERT_CLASS_SHADOWED_37_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_37_wd;
  logic ALERT_CLASS_SHADOWED_37_storage_err;
  logic ALERT_CLASS_SHADOWED_37_update_err;
  logic ALERT_CLASS_SHADOWED_38_re;
  logic ALERT_CLASS_SHADOWED_38_we;
  logic [1:0] ALERT_CLASS_SHADOWED_38_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_38_wd;
  logic ALERT_CLASS_SHADOWED_38_storage_err;
  logic ALERT_CLASS_SHADOWED_38_update_err;
  logic ALERT_CLASS_SHADOWED_39_re;
  logic ALERT_CLASS_SHADOWED_39_we;
  logic [1:0] ALERT_CLASS_SHADOWED_39_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_39_wd;
  logic ALERT_CLASS_SHADOWED_39_storage_err;
  logic ALERT_CLASS_SHADOWED_39_update_err;
  logic ALERT_CLASS_SHADOWED_40_re;
  logic ALERT_CLASS_SHADOWED_40_we;
  logic [1:0] ALERT_CLASS_SHADOWED_40_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_40_wd;
  logic ALERT_CLASS_SHADOWED_40_storage_err;
  logic ALERT_CLASS_SHADOWED_40_update_err;
  logic ALERT_CLASS_SHADOWED_41_re;
  logic ALERT_CLASS_SHADOWED_41_we;
  logic [1:0] ALERT_CLASS_SHADOWED_41_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_41_wd;
  logic ALERT_CLASS_SHADOWED_41_storage_err;
  logic ALERT_CLASS_SHADOWED_41_update_err;
  logic ALERT_CLASS_SHADOWED_42_re;
  logic ALERT_CLASS_SHADOWED_42_we;
  logic [1:0] ALERT_CLASS_SHADOWED_42_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_42_wd;
  logic ALERT_CLASS_SHADOWED_42_storage_err;
  logic ALERT_CLASS_SHADOWED_42_update_err;
  logic ALERT_CLASS_SHADOWED_43_re;
  logic ALERT_CLASS_SHADOWED_43_we;
  logic [1:0] ALERT_CLASS_SHADOWED_43_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_43_wd;
  logic ALERT_CLASS_SHADOWED_43_storage_err;
  logic ALERT_CLASS_SHADOWED_43_update_err;
  logic ALERT_CLASS_SHADOWED_44_re;
  logic ALERT_CLASS_SHADOWED_44_we;
  logic [1:0] ALERT_CLASS_SHADOWED_44_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_44_wd;
  logic ALERT_CLASS_SHADOWED_44_storage_err;
  logic ALERT_CLASS_SHADOWED_44_update_err;
  logic ALERT_CLASS_SHADOWED_45_re;
  logic ALERT_CLASS_SHADOWED_45_we;
  logic [1:0] ALERT_CLASS_SHADOWED_45_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_45_wd;
  logic ALERT_CLASS_SHADOWED_45_storage_err;
  logic ALERT_CLASS_SHADOWED_45_update_err;
  logic ALERT_CLASS_SHADOWED_46_re;
  logic ALERT_CLASS_SHADOWED_46_we;
  logic [1:0] ALERT_CLASS_SHADOWED_46_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_46_wd;
  logic ALERT_CLASS_SHADOWED_46_storage_err;
  logic ALERT_CLASS_SHADOWED_46_update_err;
  logic ALERT_CLASS_SHADOWED_47_re;
  logic ALERT_CLASS_SHADOWED_47_we;
  logic [1:0] ALERT_CLASS_SHADOWED_47_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_47_wd;
  logic ALERT_CLASS_SHADOWED_47_storage_err;
  logic ALERT_CLASS_SHADOWED_47_update_err;
  logic ALERT_CLASS_SHADOWED_48_re;
  logic ALERT_CLASS_SHADOWED_48_we;
  logic [1:0] ALERT_CLASS_SHADOWED_48_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_48_wd;
  logic ALERT_CLASS_SHADOWED_48_storage_err;
  logic ALERT_CLASS_SHADOWED_48_update_err;
  logic ALERT_CLASS_SHADOWED_49_re;
  logic ALERT_CLASS_SHADOWED_49_we;
  logic [1:0] ALERT_CLASS_SHADOWED_49_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_49_wd;
  logic ALERT_CLASS_SHADOWED_49_storage_err;
  logic ALERT_CLASS_SHADOWED_49_update_err;
  logic ALERT_CLASS_SHADOWED_50_re;
  logic ALERT_CLASS_SHADOWED_50_we;
  logic [1:0] ALERT_CLASS_SHADOWED_50_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_50_wd;
  logic ALERT_CLASS_SHADOWED_50_storage_err;
  logic ALERT_CLASS_SHADOWED_50_update_err;
  logic ALERT_CLASS_SHADOWED_51_re;
  logic ALERT_CLASS_SHADOWED_51_we;
  logic [1:0] ALERT_CLASS_SHADOWED_51_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_51_wd;
  logic ALERT_CLASS_SHADOWED_51_storage_err;
  logic ALERT_CLASS_SHADOWED_51_update_err;
  logic ALERT_CLASS_SHADOWED_52_re;
  logic ALERT_CLASS_SHADOWED_52_we;
  logic [1:0] ALERT_CLASS_SHADOWED_52_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_52_wd;
  logic ALERT_CLASS_SHADOWED_52_storage_err;
  logic ALERT_CLASS_SHADOWED_52_update_err;
  logic ALERT_CLASS_SHADOWED_53_re;
  logic ALERT_CLASS_SHADOWED_53_we;
  logic [1:0] ALERT_CLASS_SHADOWED_53_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_53_wd;
  logic ALERT_CLASS_SHADOWED_53_storage_err;
  logic ALERT_CLASS_SHADOWED_53_update_err;
  logic ALERT_CLASS_SHADOWED_54_re;
  logic ALERT_CLASS_SHADOWED_54_we;
  logic [1:0] ALERT_CLASS_SHADOWED_54_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_54_wd;
  logic ALERT_CLASS_SHADOWED_54_storage_err;
  logic ALERT_CLASS_SHADOWED_54_update_err;
  logic ALERT_CLASS_SHADOWED_55_re;
  logic ALERT_CLASS_SHADOWED_55_we;
  logic [1:0] ALERT_CLASS_SHADOWED_55_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_55_wd;
  logic ALERT_CLASS_SHADOWED_55_storage_err;
  logic ALERT_CLASS_SHADOWED_55_update_err;
  logic ALERT_CLASS_SHADOWED_56_re;
  logic ALERT_CLASS_SHADOWED_56_we;
  logic [1:0] ALERT_CLASS_SHADOWED_56_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_56_wd;
  logic ALERT_CLASS_SHADOWED_56_storage_err;
  logic ALERT_CLASS_SHADOWED_56_update_err;
  logic ALERT_CLASS_SHADOWED_57_re;
  logic ALERT_CLASS_SHADOWED_57_we;
  logic [1:0] ALERT_CLASS_SHADOWED_57_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_57_wd;
  logic ALERT_CLASS_SHADOWED_57_storage_err;
  logic ALERT_CLASS_SHADOWED_57_update_err;
  logic ALERT_CLASS_SHADOWED_58_re;
  logic ALERT_CLASS_SHADOWED_58_we;
  logic [1:0] ALERT_CLASS_SHADOWED_58_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_58_wd;
  logic ALERT_CLASS_SHADOWED_58_storage_err;
  logic ALERT_CLASS_SHADOWED_58_update_err;
  logic ALERT_CLASS_SHADOWED_59_re;
  logic ALERT_CLASS_SHADOWED_59_we;
  logic [1:0] ALERT_CLASS_SHADOWED_59_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_59_wd;
  logic ALERT_CLASS_SHADOWED_59_storage_err;
  logic ALERT_CLASS_SHADOWED_59_update_err;
  logic ALERT_CLASS_SHADOWED_60_re;
  logic ALERT_CLASS_SHADOWED_60_we;
  logic [1:0] ALERT_CLASS_SHADOWED_60_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_60_wd;
  logic ALERT_CLASS_SHADOWED_60_storage_err;
  logic ALERT_CLASS_SHADOWED_60_update_err;
  logic ALERT_CLASS_SHADOWED_61_re;
  logic ALERT_CLASS_SHADOWED_61_we;
  logic [1:0] ALERT_CLASS_SHADOWED_61_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_61_wd;
  logic ALERT_CLASS_SHADOWED_61_storage_err;
  logic ALERT_CLASS_SHADOWED_61_update_err;
  logic ALERT_CLASS_SHADOWED_62_re;
  logic ALERT_CLASS_SHADOWED_62_we;
  logic [1:0] ALERT_CLASS_SHADOWED_62_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_62_wd;
  logic ALERT_CLASS_SHADOWED_62_storage_err;
  logic ALERT_CLASS_SHADOWED_62_update_err;
  logic ALERT_CLASS_SHADOWED_63_re;
  logic ALERT_CLASS_SHADOWED_63_we;
  logic [1:0] ALERT_CLASS_SHADOWED_63_qs;
  logic [1:0] ALERT_CLASS_SHADOWED_63_wd;
  logic ALERT_CLASS_SHADOWED_63_storage_err;
  logic ALERT_CLASS_SHADOWED_63_update_err;
  logic ALERT_CAUSE_0_we;
  logic ALERT_CAUSE_0_qs;
  logic ALERT_CAUSE_0_wd;
  logic ALERT_CAUSE_1_we;
  logic ALERT_CAUSE_1_qs;
  logic ALERT_CAUSE_1_wd;
  logic ALERT_CAUSE_2_we;
  logic ALERT_CAUSE_2_qs;
  logic ALERT_CAUSE_2_wd;
  logic ALERT_CAUSE_3_we;
  logic ALERT_CAUSE_3_qs;
  logic ALERT_CAUSE_3_wd;
  logic ALERT_CAUSE_4_we;
  logic ALERT_CAUSE_4_qs;
  logic ALERT_CAUSE_4_wd;
  logic ALERT_CAUSE_5_we;
  logic ALERT_CAUSE_5_qs;
  logic ALERT_CAUSE_5_wd;
  logic ALERT_CAUSE_6_we;
  logic ALERT_CAUSE_6_qs;
  logic ALERT_CAUSE_6_wd;
  logic ALERT_CAUSE_7_we;
  logic ALERT_CAUSE_7_qs;
  logic ALERT_CAUSE_7_wd;
  logic ALERT_CAUSE_8_we;
  logic ALERT_CAUSE_8_qs;
  logic ALERT_CAUSE_8_wd;
  logic ALERT_CAUSE_9_we;
  logic ALERT_CAUSE_9_qs;
  logic ALERT_CAUSE_9_wd;
  logic ALERT_CAUSE_10_we;
  logic ALERT_CAUSE_10_qs;
  logic ALERT_CAUSE_10_wd;
  logic ALERT_CAUSE_11_we;
  logic ALERT_CAUSE_11_qs;
  logic ALERT_CAUSE_11_wd;
  logic ALERT_CAUSE_12_we;
  logic ALERT_CAUSE_12_qs;
  logic ALERT_CAUSE_12_wd;
  logic ALERT_CAUSE_13_we;
  logic ALERT_CAUSE_13_qs;
  logic ALERT_CAUSE_13_wd;
  logic ALERT_CAUSE_14_we;
  logic ALERT_CAUSE_14_qs;
  logic ALERT_CAUSE_14_wd;
  logic ALERT_CAUSE_15_we;
  logic ALERT_CAUSE_15_qs;
  logic ALERT_CAUSE_15_wd;
  logic ALERT_CAUSE_16_we;
  logic ALERT_CAUSE_16_qs;
  logic ALERT_CAUSE_16_wd;
  logic ALERT_CAUSE_17_we;
  logic ALERT_CAUSE_17_qs;
  logic ALERT_CAUSE_17_wd;
  logic ALERT_CAUSE_18_we;
  logic ALERT_CAUSE_18_qs;
  logic ALERT_CAUSE_18_wd;
  logic ALERT_CAUSE_19_we;
  logic ALERT_CAUSE_19_qs;
  logic ALERT_CAUSE_19_wd;
  logic ALERT_CAUSE_20_we;
  logic ALERT_CAUSE_20_qs;
  logic ALERT_CAUSE_20_wd;
  logic ALERT_CAUSE_21_we;
  logic ALERT_CAUSE_21_qs;
  logic ALERT_CAUSE_21_wd;
  logic ALERT_CAUSE_22_we;
  logic ALERT_CAUSE_22_qs;
  logic ALERT_CAUSE_22_wd;
  logic ALERT_CAUSE_23_we;
  logic ALERT_CAUSE_23_qs;
  logic ALERT_CAUSE_23_wd;
  logic ALERT_CAUSE_24_we;
  logic ALERT_CAUSE_24_qs;
  logic ALERT_CAUSE_24_wd;
  logic ALERT_CAUSE_25_we;
  logic ALERT_CAUSE_25_qs;
  logic ALERT_CAUSE_25_wd;
  logic ALERT_CAUSE_26_we;
  logic ALERT_CAUSE_26_qs;
  logic ALERT_CAUSE_26_wd;
  logic ALERT_CAUSE_27_we;
  logic ALERT_CAUSE_27_qs;
  logic ALERT_CAUSE_27_wd;
  logic ALERT_CAUSE_28_we;
  logic ALERT_CAUSE_28_qs;
  logic ALERT_CAUSE_28_wd;
  logic ALERT_CAUSE_29_we;
  logic ALERT_CAUSE_29_qs;
  logic ALERT_CAUSE_29_wd;
  logic ALERT_CAUSE_30_we;
  logic ALERT_CAUSE_30_qs;
  logic ALERT_CAUSE_30_wd;
  logic ALERT_CAUSE_31_we;
  logic ALERT_CAUSE_31_qs;
  logic ALERT_CAUSE_31_wd;
  logic ALERT_CAUSE_32_we;
  logic ALERT_CAUSE_32_qs;
  logic ALERT_CAUSE_32_wd;
  logic ALERT_CAUSE_33_we;
  logic ALERT_CAUSE_33_qs;
  logic ALERT_CAUSE_33_wd;
  logic ALERT_CAUSE_34_we;
  logic ALERT_CAUSE_34_qs;
  logic ALERT_CAUSE_34_wd;
  logic ALERT_CAUSE_35_we;
  logic ALERT_CAUSE_35_qs;
  logic ALERT_CAUSE_35_wd;
  logic ALERT_CAUSE_36_we;
  logic ALERT_CAUSE_36_qs;
  logic ALERT_CAUSE_36_wd;
  logic ALERT_CAUSE_37_we;
  logic ALERT_CAUSE_37_qs;
  logic ALERT_CAUSE_37_wd;
  logic ALERT_CAUSE_38_we;
  logic ALERT_CAUSE_38_qs;
  logic ALERT_CAUSE_38_wd;
  logic ALERT_CAUSE_39_we;
  logic ALERT_CAUSE_39_qs;
  logic ALERT_CAUSE_39_wd;
  logic ALERT_CAUSE_40_we;
  logic ALERT_CAUSE_40_qs;
  logic ALERT_CAUSE_40_wd;
  logic ALERT_CAUSE_41_we;
  logic ALERT_CAUSE_41_qs;
  logic ALERT_CAUSE_41_wd;
  logic ALERT_CAUSE_42_we;
  logic ALERT_CAUSE_42_qs;
  logic ALERT_CAUSE_42_wd;
  logic ALERT_CAUSE_43_we;
  logic ALERT_CAUSE_43_qs;
  logic ALERT_CAUSE_43_wd;
  logic ALERT_CAUSE_44_we;
  logic ALERT_CAUSE_44_qs;
  logic ALERT_CAUSE_44_wd;
  logic ALERT_CAUSE_45_we;
  logic ALERT_CAUSE_45_qs;
  logic ALERT_CAUSE_45_wd;
  logic ALERT_CAUSE_46_we;
  logic ALERT_CAUSE_46_qs;
  logic ALERT_CAUSE_46_wd;
  logic ALERT_CAUSE_47_we;
  logic ALERT_CAUSE_47_qs;
  logic ALERT_CAUSE_47_wd;
  logic ALERT_CAUSE_48_we;
  logic ALERT_CAUSE_48_qs;
  logic ALERT_CAUSE_48_wd;
  logic ALERT_CAUSE_49_we;
  logic ALERT_CAUSE_49_qs;
  logic ALERT_CAUSE_49_wd;
  logic ALERT_CAUSE_50_we;
  logic ALERT_CAUSE_50_qs;
  logic ALERT_CAUSE_50_wd;
  logic ALERT_CAUSE_51_we;
  logic ALERT_CAUSE_51_qs;
  logic ALERT_CAUSE_51_wd;
  logic ALERT_CAUSE_52_we;
  logic ALERT_CAUSE_52_qs;
  logic ALERT_CAUSE_52_wd;
  logic ALERT_CAUSE_53_we;
  logic ALERT_CAUSE_53_qs;
  logic ALERT_CAUSE_53_wd;
  logic ALERT_CAUSE_54_we;
  logic ALERT_CAUSE_54_qs;
  logic ALERT_CAUSE_54_wd;
  logic ALERT_CAUSE_55_we;
  logic ALERT_CAUSE_55_qs;
  logic ALERT_CAUSE_55_wd;
  logic ALERT_CAUSE_56_we;
  logic ALERT_CAUSE_56_qs;
  logic ALERT_CAUSE_56_wd;
  logic ALERT_CAUSE_57_we;
  logic ALERT_CAUSE_57_qs;
  logic ALERT_CAUSE_57_wd;
  logic ALERT_CAUSE_58_we;
  logic ALERT_CAUSE_58_qs;
  logic ALERT_CAUSE_58_wd;
  logic ALERT_CAUSE_59_we;
  logic ALERT_CAUSE_59_qs;
  logic ALERT_CAUSE_59_wd;
  logic ALERT_CAUSE_60_we;
  logic ALERT_CAUSE_60_qs;
  logic ALERT_CAUSE_60_wd;
  logic ALERT_CAUSE_61_we;
  logic ALERT_CAUSE_61_qs;
  logic ALERT_CAUSE_61_wd;
  logic ALERT_CAUSE_62_we;
  logic ALERT_CAUSE_62_qs;
  logic ALERT_CAUSE_62_wd;
  logic ALERT_CAUSE_63_we;
  logic ALERT_CAUSE_63_qs;
  logic ALERT_CAUSE_63_wd;
  logic LOC_ALERT_REGWEN_0_we;
  logic LOC_ALERT_REGWEN_0_qs;
  logic LOC_ALERT_REGWEN_0_wd;
  logic LOC_ALERT_REGWEN_1_we;
  logic LOC_ALERT_REGWEN_1_qs;
  logic LOC_ALERT_REGWEN_1_wd;
  logic LOC_ALERT_REGWEN_2_we;
  logic LOC_ALERT_REGWEN_2_qs;
  logic LOC_ALERT_REGWEN_2_wd;
  logic LOC_ALERT_REGWEN_3_we;
  logic LOC_ALERT_REGWEN_3_qs;
  logic LOC_ALERT_REGWEN_3_wd;
  logic LOC_ALERT_REGWEN_4_we;
  logic LOC_ALERT_REGWEN_4_qs;
  logic LOC_ALERT_REGWEN_4_wd;
  logic LOC_ALERT_REGWEN_5_we;
  logic LOC_ALERT_REGWEN_5_qs;
  logic LOC_ALERT_REGWEN_5_wd;
  logic LOC_ALERT_REGWEN_6_we;
  logic LOC_ALERT_REGWEN_6_qs;
  logic LOC_ALERT_REGWEN_6_wd;
  logic LOC_ALERT_EN_SHADOWED_0_re;
  logic LOC_ALERT_EN_SHADOWED_0_we;
  logic LOC_ALERT_EN_SHADOWED_0_qs;
  logic LOC_ALERT_EN_SHADOWED_0_wd;
  logic LOC_ALERT_EN_SHADOWED_0_storage_err;
  logic LOC_ALERT_EN_SHADOWED_0_update_err;
  logic LOC_ALERT_EN_SHADOWED_1_re;
  logic LOC_ALERT_EN_SHADOWED_1_we;
  logic LOC_ALERT_EN_SHADOWED_1_qs;
  logic LOC_ALERT_EN_SHADOWED_1_wd;
  logic LOC_ALERT_EN_SHADOWED_1_storage_err;
  logic LOC_ALERT_EN_SHADOWED_1_update_err;
  logic LOC_ALERT_EN_SHADOWED_2_re;
  logic LOC_ALERT_EN_SHADOWED_2_we;
  logic LOC_ALERT_EN_SHADOWED_2_qs;
  logic LOC_ALERT_EN_SHADOWED_2_wd;
  logic LOC_ALERT_EN_SHADOWED_2_storage_err;
  logic LOC_ALERT_EN_SHADOWED_2_update_err;
  logic LOC_ALERT_EN_SHADOWED_3_re;
  logic LOC_ALERT_EN_SHADOWED_3_we;
  logic LOC_ALERT_EN_SHADOWED_3_qs;
  logic LOC_ALERT_EN_SHADOWED_3_wd;
  logic LOC_ALERT_EN_SHADOWED_3_storage_err;
  logic LOC_ALERT_EN_SHADOWED_3_update_err;
  logic LOC_ALERT_EN_SHADOWED_4_re;
  logic LOC_ALERT_EN_SHADOWED_4_we;
  logic LOC_ALERT_EN_SHADOWED_4_qs;
  logic LOC_ALERT_EN_SHADOWED_4_wd;
  logic LOC_ALERT_EN_SHADOWED_4_storage_err;
  logic LOC_ALERT_EN_SHADOWED_4_update_err;
  logic LOC_ALERT_EN_SHADOWED_5_re;
  logic LOC_ALERT_EN_SHADOWED_5_we;
  logic LOC_ALERT_EN_SHADOWED_5_qs;
  logic LOC_ALERT_EN_SHADOWED_5_wd;
  logic LOC_ALERT_EN_SHADOWED_5_storage_err;
  logic LOC_ALERT_EN_SHADOWED_5_update_err;
  logic LOC_ALERT_EN_SHADOWED_6_re;
  logic LOC_ALERT_EN_SHADOWED_6_we;
  logic LOC_ALERT_EN_SHADOWED_6_qs;
  logic LOC_ALERT_EN_SHADOWED_6_wd;
  logic LOC_ALERT_EN_SHADOWED_6_storage_err;
  logic LOC_ALERT_EN_SHADOWED_6_update_err;
  logic LOC_ALERT_CLASS_SHADOWED_0_re;
  logic LOC_ALERT_CLASS_SHADOWED_0_we;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_0_qs;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_0_wd;
  logic LOC_ALERT_CLASS_SHADOWED_0_storage_err;
  logic LOC_ALERT_CLASS_SHADOWED_0_update_err;
  logic LOC_ALERT_CLASS_SHADOWED_1_re;
  logic LOC_ALERT_CLASS_SHADOWED_1_we;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_1_qs;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_1_wd;
  logic LOC_ALERT_CLASS_SHADOWED_1_storage_err;
  logic LOC_ALERT_CLASS_SHADOWED_1_update_err;
  logic LOC_ALERT_CLASS_SHADOWED_2_re;
  logic LOC_ALERT_CLASS_SHADOWED_2_we;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_2_qs;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_2_wd;
  logic LOC_ALERT_CLASS_SHADOWED_2_storage_err;
  logic LOC_ALERT_CLASS_SHADOWED_2_update_err;
  logic LOC_ALERT_CLASS_SHADOWED_3_re;
  logic LOC_ALERT_CLASS_SHADOWED_3_we;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_3_qs;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_3_wd;
  logic LOC_ALERT_CLASS_SHADOWED_3_storage_err;
  logic LOC_ALERT_CLASS_SHADOWED_3_update_err;
  logic LOC_ALERT_CLASS_SHADOWED_4_re;
  logic LOC_ALERT_CLASS_SHADOWED_4_we;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_4_qs;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_4_wd;
  logic LOC_ALERT_CLASS_SHADOWED_4_storage_err;
  logic LOC_ALERT_CLASS_SHADOWED_4_update_err;
  logic LOC_ALERT_CLASS_SHADOWED_5_re;
  logic LOC_ALERT_CLASS_SHADOWED_5_we;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_5_qs;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_5_wd;
  logic LOC_ALERT_CLASS_SHADOWED_5_storage_err;
  logic LOC_ALERT_CLASS_SHADOWED_5_update_err;
  logic LOC_ALERT_CLASS_SHADOWED_6_re;
  logic LOC_ALERT_CLASS_SHADOWED_6_we;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_6_qs;
  logic [1:0] LOC_ALERT_CLASS_SHADOWED_6_wd;
  logic LOC_ALERT_CLASS_SHADOWED_6_storage_err;
  logic LOC_ALERT_CLASS_SHADOWED_6_update_err;
  logic LOC_ALERT_CAUSE_0_we;
  logic LOC_ALERT_CAUSE_0_qs;
  logic LOC_ALERT_CAUSE_0_wd;
  logic LOC_ALERT_CAUSE_1_we;
  logic LOC_ALERT_CAUSE_1_qs;
  logic LOC_ALERT_CAUSE_1_wd;
  logic LOC_ALERT_CAUSE_2_we;
  logic LOC_ALERT_CAUSE_2_qs;
  logic LOC_ALERT_CAUSE_2_wd;
  logic LOC_ALERT_CAUSE_3_we;
  logic LOC_ALERT_CAUSE_3_qs;
  logic LOC_ALERT_CAUSE_3_wd;
  logic LOC_ALERT_CAUSE_4_we;
  logic LOC_ALERT_CAUSE_4_qs;
  logic LOC_ALERT_CAUSE_4_wd;
  logic LOC_ALERT_CAUSE_5_we;
  logic LOC_ALERT_CAUSE_5_qs;
  logic LOC_ALERT_CAUSE_5_wd;
  logic LOC_ALERT_CAUSE_6_we;
  logic LOC_ALERT_CAUSE_6_qs;
  logic LOC_ALERT_CAUSE_6_wd;
  logic CLASSA_REGWEN_we;
  logic CLASSA_REGWEN_qs;
  logic CLASSA_REGWEN_wd;
  logic CLASSA_CTRL_SHADOWED_re;
  logic CLASSA_CTRL_SHADOWED_we;
  logic CLASSA_CTRL_SHADOWED_EN_qs;
  logic CLASSA_CTRL_SHADOWED_EN_wd;
  logic CLASSA_CTRL_SHADOWED_EN_storage_err;
  logic CLASSA_CTRL_SHADOWED_EN_update_err;
  logic CLASSA_CTRL_SHADOWED_LOCK_qs;
  logic CLASSA_CTRL_SHADOWED_LOCK_wd;
  logic CLASSA_CTRL_SHADOWED_LOCK_storage_err;
  logic CLASSA_CTRL_SHADOWED_LOCK_update_err;
  logic CLASSA_CTRL_SHADOWED_EN_E0_qs;
  logic CLASSA_CTRL_SHADOWED_EN_E0_wd;
  logic CLASSA_CTRL_SHADOWED_EN_E0_storage_err;
  logic CLASSA_CTRL_SHADOWED_EN_E0_update_err;
  logic CLASSA_CTRL_SHADOWED_EN_E1_qs;
  logic CLASSA_CTRL_SHADOWED_EN_E1_wd;
  logic CLASSA_CTRL_SHADOWED_EN_E1_storage_err;
  logic CLASSA_CTRL_SHADOWED_EN_E1_update_err;
  logic CLASSA_CTRL_SHADOWED_EN_E2_qs;
  logic CLASSA_CTRL_SHADOWED_EN_E2_wd;
  logic CLASSA_CTRL_SHADOWED_EN_E2_storage_err;
  logic CLASSA_CTRL_SHADOWED_EN_E2_update_err;
  logic CLASSA_CTRL_SHADOWED_EN_E3_qs;
  logic CLASSA_CTRL_SHADOWED_EN_E3_wd;
  logic CLASSA_CTRL_SHADOWED_EN_E3_storage_err;
  logic CLASSA_CTRL_SHADOWED_EN_E3_update_err;
  logic [1:0] CLASSA_CTRL_SHADOWED_MAP_E0_qs;
  logic [1:0] CLASSA_CTRL_SHADOWED_MAP_E0_wd;
  logic CLASSA_CTRL_SHADOWED_MAP_E0_storage_err;
  logic CLASSA_CTRL_SHADOWED_MAP_E0_update_err;
  logic [1:0] CLASSA_CTRL_SHADOWED_MAP_E1_qs;
  logic [1:0] CLASSA_CTRL_SHADOWED_MAP_E1_wd;
  logic CLASSA_CTRL_SHADOWED_MAP_E1_storage_err;
  logic CLASSA_CTRL_SHADOWED_MAP_E1_update_err;
  logic [1:0] CLASSA_CTRL_SHADOWED_MAP_E2_qs;
  logic [1:0] CLASSA_CTRL_SHADOWED_MAP_E2_wd;
  logic CLASSA_CTRL_SHADOWED_MAP_E2_storage_err;
  logic CLASSA_CTRL_SHADOWED_MAP_E2_update_err;
  logic [1:0] CLASSA_CTRL_SHADOWED_MAP_E3_qs;
  logic [1:0] CLASSA_CTRL_SHADOWED_MAP_E3_wd;
  logic CLASSA_CTRL_SHADOWED_MAP_E3_storage_err;
  logic CLASSA_CTRL_SHADOWED_MAP_E3_update_err;
  logic CLASSA_CLR_REGWEN_we;
  logic CLASSA_CLR_REGWEN_qs;
  logic CLASSA_CLR_REGWEN_wd;
  logic CLASSA_CLR_SHADOWED_re;
  logic CLASSA_CLR_SHADOWED_we;
  logic CLASSA_CLR_SHADOWED_qs;
  logic CLASSA_CLR_SHADOWED_wd;
  logic CLASSA_CLR_SHADOWED_storage_err;
  logic CLASSA_CLR_SHADOWED_update_err;
  logic CLASSA_ACCUM_CNT_re;
  logic [15:0] CLASSA_ACCUM_CNT_qs;
  logic CLASSA_ACCUM_THRESH_SHADOWED_re;
  logic CLASSA_ACCUM_THRESH_SHADOWED_we;
  logic [15:0] CLASSA_ACCUM_THRESH_SHADOWED_qs;
  logic [15:0] CLASSA_ACCUM_THRESH_SHADOWED_wd;
  logic CLASSA_ACCUM_THRESH_SHADOWED_storage_err;
  logic CLASSA_ACCUM_THRESH_SHADOWED_update_err;
  logic CLASSA_TIMEOUT_CYC_SHADOWED_re;
  logic CLASSA_TIMEOUT_CYC_SHADOWED_we;
  logic [31:0] CLASSA_TIMEOUT_CYC_SHADOWED_qs;
  logic [31:0] CLASSA_TIMEOUT_CYC_SHADOWED_wd;
  logic CLASSA_TIMEOUT_CYC_SHADOWED_storage_err;
  logic CLASSA_TIMEOUT_CYC_SHADOWED_update_err;
  logic CLASSA_CRASHDUMP_TRIGGER_SHADOWED_re;
  logic CLASSA_CRASHDUMP_TRIGGER_SHADOWED_we;
  logic [1:0] CLASSA_CRASHDUMP_TRIGGER_SHADOWED_qs;
  logic [1:0] CLASSA_CRASHDUMP_TRIGGER_SHADOWED_wd;
  logic CLASSA_CRASHDUMP_TRIGGER_SHADOWED_storage_err;
  logic CLASSA_CRASHDUMP_TRIGGER_SHADOWED_update_err;
  logic CLASSA_PHASE0_CYC_SHADOWED_re;
  logic CLASSA_PHASE0_CYC_SHADOWED_we;
  logic [31:0] CLASSA_PHASE0_CYC_SHADOWED_qs;
  logic [31:0] CLASSA_PHASE0_CYC_SHADOWED_wd;
  logic CLASSA_PHASE0_CYC_SHADOWED_storage_err;
  logic CLASSA_PHASE0_CYC_SHADOWED_update_err;
  logic CLASSA_PHASE1_CYC_SHADOWED_re;
  logic CLASSA_PHASE1_CYC_SHADOWED_we;
  logic [31:0] CLASSA_PHASE1_CYC_SHADOWED_qs;
  logic [31:0] CLASSA_PHASE1_CYC_SHADOWED_wd;
  logic CLASSA_PHASE1_CYC_SHADOWED_storage_err;
  logic CLASSA_PHASE1_CYC_SHADOWED_update_err;
  logic CLASSA_PHASE2_CYC_SHADOWED_re;
  logic CLASSA_PHASE2_CYC_SHADOWED_we;
  logic [31:0] CLASSA_PHASE2_CYC_SHADOWED_qs;
  logic [31:0] CLASSA_PHASE2_CYC_SHADOWED_wd;
  logic CLASSA_PHASE2_CYC_SHADOWED_storage_err;
  logic CLASSA_PHASE2_CYC_SHADOWED_update_err;
  logic CLASSA_PHASE3_CYC_SHADOWED_re;
  logic CLASSA_PHASE3_CYC_SHADOWED_we;
  logic [31:0] CLASSA_PHASE3_CYC_SHADOWED_qs;
  logic [31:0] CLASSA_PHASE3_CYC_SHADOWED_wd;
  logic CLASSA_PHASE3_CYC_SHADOWED_storage_err;
  logic CLASSA_PHASE3_CYC_SHADOWED_update_err;
  logic CLASSA_ESC_CNT_re;
  logic [31:0] CLASSA_ESC_CNT_qs;
  logic CLASSA_STATE_re;
  logic [2:0] CLASSA_STATE_qs;
  logic CLASSB_REGWEN_we;
  logic CLASSB_REGWEN_qs;
  logic CLASSB_REGWEN_wd;
  logic CLASSB_CTRL_SHADOWED_re;
  logic CLASSB_CTRL_SHADOWED_we;
  logic CLASSB_CTRL_SHADOWED_EN_qs;
  logic CLASSB_CTRL_SHADOWED_EN_wd;
  logic CLASSB_CTRL_SHADOWED_EN_storage_err;
  logic CLASSB_CTRL_SHADOWED_EN_update_err;
  logic CLASSB_CTRL_SHADOWED_LOCK_qs;
  logic CLASSB_CTRL_SHADOWED_LOCK_wd;
  logic CLASSB_CTRL_SHADOWED_LOCK_storage_err;
  logic CLASSB_CTRL_SHADOWED_LOCK_update_err;
  logic CLASSB_CTRL_SHADOWED_EN_E0_qs;
  logic CLASSB_CTRL_SHADOWED_EN_E0_wd;
  logic CLASSB_CTRL_SHADOWED_EN_E0_storage_err;
  logic CLASSB_CTRL_SHADOWED_EN_E0_update_err;
  logic CLASSB_CTRL_SHADOWED_EN_E1_qs;
  logic CLASSB_CTRL_SHADOWED_EN_E1_wd;
  logic CLASSB_CTRL_SHADOWED_EN_E1_storage_err;
  logic CLASSB_CTRL_SHADOWED_EN_E1_update_err;
  logic CLASSB_CTRL_SHADOWED_EN_E2_qs;
  logic CLASSB_CTRL_SHADOWED_EN_E2_wd;
  logic CLASSB_CTRL_SHADOWED_EN_E2_storage_err;
  logic CLASSB_CTRL_SHADOWED_EN_E2_update_err;
  logic CLASSB_CTRL_SHADOWED_EN_E3_qs;
  logic CLASSB_CTRL_SHADOWED_EN_E3_wd;
  logic CLASSB_CTRL_SHADOWED_EN_E3_storage_err;
  logic CLASSB_CTRL_SHADOWED_EN_E3_update_err;
  logic [1:0] CLASSB_CTRL_SHADOWED_MAP_E0_qs;
  logic [1:0] CLASSB_CTRL_SHADOWED_MAP_E0_wd;
  logic CLASSB_CTRL_SHADOWED_MAP_E0_storage_err;
  logic CLASSB_CTRL_SHADOWED_MAP_E0_update_err;
  logic [1:0] CLASSB_CTRL_SHADOWED_MAP_E1_qs;
  logic [1:0] CLASSB_CTRL_SHADOWED_MAP_E1_wd;
  logic CLASSB_CTRL_SHADOWED_MAP_E1_storage_err;
  logic CLASSB_CTRL_SHADOWED_MAP_E1_update_err;
  logic [1:0] CLASSB_CTRL_SHADOWED_MAP_E2_qs;
  logic [1:0] CLASSB_CTRL_SHADOWED_MAP_E2_wd;
  logic CLASSB_CTRL_SHADOWED_MAP_E2_storage_err;
  logic CLASSB_CTRL_SHADOWED_MAP_E2_update_err;
  logic [1:0] CLASSB_CTRL_SHADOWED_MAP_E3_qs;
  logic [1:0] CLASSB_CTRL_SHADOWED_MAP_E3_wd;
  logic CLASSB_CTRL_SHADOWED_MAP_E3_storage_err;
  logic CLASSB_CTRL_SHADOWED_MAP_E3_update_err;
  logic CLASSB_CLR_REGWEN_we;
  logic CLASSB_CLR_REGWEN_qs;
  logic CLASSB_CLR_REGWEN_wd;
  logic CLASSB_CLR_SHADOWED_re;
  logic CLASSB_CLR_SHADOWED_we;
  logic CLASSB_CLR_SHADOWED_qs;
  logic CLASSB_CLR_SHADOWED_wd;
  logic CLASSB_CLR_SHADOWED_storage_err;
  logic CLASSB_CLR_SHADOWED_update_err;
  logic CLASSB_ACCUM_CNT_re;
  logic [15:0] CLASSB_ACCUM_CNT_qs;
  logic CLASSB_ACCUM_THRESH_SHADOWED_re;
  logic CLASSB_ACCUM_THRESH_SHADOWED_we;
  logic [15:0] CLASSB_ACCUM_THRESH_SHADOWED_qs;
  logic [15:0] CLASSB_ACCUM_THRESH_SHADOWED_wd;
  logic CLASSB_ACCUM_THRESH_SHADOWED_storage_err;
  logic CLASSB_ACCUM_THRESH_SHADOWED_update_err;
  logic CLASSB_TIMEOUT_CYC_SHADOWED_re;
  logic CLASSB_TIMEOUT_CYC_SHADOWED_we;
  logic [31:0] CLASSB_TIMEOUT_CYC_SHADOWED_qs;
  logic [31:0] CLASSB_TIMEOUT_CYC_SHADOWED_wd;
  logic CLASSB_TIMEOUT_CYC_SHADOWED_storage_err;
  logic CLASSB_TIMEOUT_CYC_SHADOWED_update_err;
  logic CLASSB_CRASHDUMP_TRIGGER_SHADOWED_re;
  logic CLASSB_CRASHDUMP_TRIGGER_SHADOWED_we;
  logic [1:0] CLASSB_CRASHDUMP_TRIGGER_SHADOWED_qs;
  logic [1:0] CLASSB_CRASHDUMP_TRIGGER_SHADOWED_wd;
  logic CLASSB_CRASHDUMP_TRIGGER_SHADOWED_storage_err;
  logic CLASSB_CRASHDUMP_TRIGGER_SHADOWED_update_err;
  logic CLASSB_PHASE0_CYC_SHADOWED_re;
  logic CLASSB_PHASE0_CYC_SHADOWED_we;
  logic [31:0] CLASSB_PHASE0_CYC_SHADOWED_qs;
  logic [31:0] CLASSB_PHASE0_CYC_SHADOWED_wd;
  logic CLASSB_PHASE0_CYC_SHADOWED_storage_err;
  logic CLASSB_PHASE0_CYC_SHADOWED_update_err;
  logic CLASSB_PHASE1_CYC_SHADOWED_re;
  logic CLASSB_PHASE1_CYC_SHADOWED_we;
  logic [31:0] CLASSB_PHASE1_CYC_SHADOWED_qs;
  logic [31:0] CLASSB_PHASE1_CYC_SHADOWED_wd;
  logic CLASSB_PHASE1_CYC_SHADOWED_storage_err;
  logic CLASSB_PHASE1_CYC_SHADOWED_update_err;
  logic CLASSB_PHASE2_CYC_SHADOWED_re;
  logic CLASSB_PHASE2_CYC_SHADOWED_we;
  logic [31:0] CLASSB_PHASE2_CYC_SHADOWED_qs;
  logic [31:0] CLASSB_PHASE2_CYC_SHADOWED_wd;
  logic CLASSB_PHASE2_CYC_SHADOWED_storage_err;
  logic CLASSB_PHASE2_CYC_SHADOWED_update_err;
  logic CLASSB_PHASE3_CYC_SHADOWED_re;
  logic CLASSB_PHASE3_CYC_SHADOWED_we;
  logic [31:0] CLASSB_PHASE3_CYC_SHADOWED_qs;
  logic [31:0] CLASSB_PHASE3_CYC_SHADOWED_wd;
  logic CLASSB_PHASE3_CYC_SHADOWED_storage_err;
  logic CLASSB_PHASE3_CYC_SHADOWED_update_err;
  logic CLASSB_ESC_CNT_re;
  logic [31:0] CLASSB_ESC_CNT_qs;
  logic CLASSB_STATE_re;
  logic [2:0] CLASSB_STATE_qs;
  logic CLASSC_REGWEN_we;
  logic CLASSC_REGWEN_qs;
  logic CLASSC_REGWEN_wd;
  logic CLASSC_CTRL_SHADOWED_re;
  logic CLASSC_CTRL_SHADOWED_we;
  logic CLASSC_CTRL_SHADOWED_EN_qs;
  logic CLASSC_CTRL_SHADOWED_EN_wd;
  logic CLASSC_CTRL_SHADOWED_EN_storage_err;
  logic CLASSC_CTRL_SHADOWED_EN_update_err;
  logic CLASSC_CTRL_SHADOWED_LOCK_qs;
  logic CLASSC_CTRL_SHADOWED_LOCK_wd;
  logic CLASSC_CTRL_SHADOWED_LOCK_storage_err;
  logic CLASSC_CTRL_SHADOWED_LOCK_update_err;
  logic CLASSC_CTRL_SHADOWED_EN_E0_qs;
  logic CLASSC_CTRL_SHADOWED_EN_E0_wd;
  logic CLASSC_CTRL_SHADOWED_EN_E0_storage_err;
  logic CLASSC_CTRL_SHADOWED_EN_E0_update_err;
  logic CLASSC_CTRL_SHADOWED_EN_E1_qs;
  logic CLASSC_CTRL_SHADOWED_EN_E1_wd;
  logic CLASSC_CTRL_SHADOWED_EN_E1_storage_err;
  logic CLASSC_CTRL_SHADOWED_EN_E1_update_err;
  logic CLASSC_CTRL_SHADOWED_EN_E2_qs;
  logic CLASSC_CTRL_SHADOWED_EN_E2_wd;
  logic CLASSC_CTRL_SHADOWED_EN_E2_storage_err;
  logic CLASSC_CTRL_SHADOWED_EN_E2_update_err;
  logic CLASSC_CTRL_SHADOWED_EN_E3_qs;
  logic CLASSC_CTRL_SHADOWED_EN_E3_wd;
  logic CLASSC_CTRL_SHADOWED_EN_E3_storage_err;
  logic CLASSC_CTRL_SHADOWED_EN_E3_update_err;
  logic [1:0] CLASSC_CTRL_SHADOWED_MAP_E0_qs;
  logic [1:0] CLASSC_CTRL_SHADOWED_MAP_E0_wd;
  logic CLASSC_CTRL_SHADOWED_MAP_E0_storage_err;
  logic CLASSC_CTRL_SHADOWED_MAP_E0_update_err;
  logic [1:0] CLASSC_CTRL_SHADOWED_MAP_E1_qs;
  logic [1:0] CLASSC_CTRL_SHADOWED_MAP_E1_wd;
  logic CLASSC_CTRL_SHADOWED_MAP_E1_storage_err;
  logic CLASSC_CTRL_SHADOWED_MAP_E1_update_err;
  logic [1:0] CLASSC_CTRL_SHADOWED_MAP_E2_qs;
  logic [1:0] CLASSC_CTRL_SHADOWED_MAP_E2_wd;
  logic CLASSC_CTRL_SHADOWED_MAP_E2_storage_err;
  logic CLASSC_CTRL_SHADOWED_MAP_E2_update_err;
  logic [1:0] CLASSC_CTRL_SHADOWED_MAP_E3_qs;
  logic [1:0] CLASSC_CTRL_SHADOWED_MAP_E3_wd;
  logic CLASSC_CTRL_SHADOWED_MAP_E3_storage_err;
  logic CLASSC_CTRL_SHADOWED_MAP_E3_update_err;
  logic CLASSC_CLR_REGWEN_we;
  logic CLASSC_CLR_REGWEN_qs;
  logic CLASSC_CLR_REGWEN_wd;
  logic CLASSC_CLR_SHADOWED_re;
  logic CLASSC_CLR_SHADOWED_we;
  logic CLASSC_CLR_SHADOWED_qs;
  logic CLASSC_CLR_SHADOWED_wd;
  logic CLASSC_CLR_SHADOWED_storage_err;
  logic CLASSC_CLR_SHADOWED_update_err;
  logic CLASSC_ACCUM_CNT_re;
  logic [15:0] CLASSC_ACCUM_CNT_qs;
  logic CLASSC_ACCUM_THRESH_SHADOWED_re;
  logic CLASSC_ACCUM_THRESH_SHADOWED_we;
  logic [15:0] CLASSC_ACCUM_THRESH_SHADOWED_qs;
  logic [15:0] CLASSC_ACCUM_THRESH_SHADOWED_wd;
  logic CLASSC_ACCUM_THRESH_SHADOWED_storage_err;
  logic CLASSC_ACCUM_THRESH_SHADOWED_update_err;
  logic CLASSC_TIMEOUT_CYC_SHADOWED_re;
  logic CLASSC_TIMEOUT_CYC_SHADOWED_we;
  logic [31:0] CLASSC_TIMEOUT_CYC_SHADOWED_qs;
  logic [31:0] CLASSC_TIMEOUT_CYC_SHADOWED_wd;
  logic CLASSC_TIMEOUT_CYC_SHADOWED_storage_err;
  logic CLASSC_TIMEOUT_CYC_SHADOWED_update_err;
  logic CLASSC_CRASHDUMP_TRIGGER_SHADOWED_re;
  logic CLASSC_CRASHDUMP_TRIGGER_SHADOWED_we;
  logic [1:0] CLASSC_CRASHDUMP_TRIGGER_SHADOWED_qs;
  logic [1:0] CLASSC_CRASHDUMP_TRIGGER_SHADOWED_wd;
  logic CLASSC_CRASHDUMP_TRIGGER_SHADOWED_storage_err;
  logic CLASSC_CRASHDUMP_TRIGGER_SHADOWED_update_err;
  logic CLASSC_PHASE0_CYC_SHADOWED_re;
  logic CLASSC_PHASE0_CYC_SHADOWED_we;
  logic [31:0] CLASSC_PHASE0_CYC_SHADOWED_qs;
  logic [31:0] CLASSC_PHASE0_CYC_SHADOWED_wd;
  logic CLASSC_PHASE0_CYC_SHADOWED_storage_err;
  logic CLASSC_PHASE0_CYC_SHADOWED_update_err;
  logic CLASSC_PHASE1_CYC_SHADOWED_re;
  logic CLASSC_PHASE1_CYC_SHADOWED_we;
  logic [31:0] CLASSC_PHASE1_CYC_SHADOWED_qs;
  logic [31:0] CLASSC_PHASE1_CYC_SHADOWED_wd;
  logic CLASSC_PHASE1_CYC_SHADOWED_storage_err;
  logic CLASSC_PHASE1_CYC_SHADOWED_update_err;
  logic CLASSC_PHASE2_CYC_SHADOWED_re;
  logic CLASSC_PHASE2_CYC_SHADOWED_we;
  logic [31:0] CLASSC_PHASE2_CYC_SHADOWED_qs;
  logic [31:0] CLASSC_PHASE2_CYC_SHADOWED_wd;
  logic CLASSC_PHASE2_CYC_SHADOWED_storage_err;
  logic CLASSC_PHASE2_CYC_SHADOWED_update_err;
  logic CLASSC_PHASE3_CYC_SHADOWED_re;
  logic CLASSC_PHASE3_CYC_SHADOWED_we;
  logic [31:0] CLASSC_PHASE3_CYC_SHADOWED_qs;
  logic [31:0] CLASSC_PHASE3_CYC_SHADOWED_wd;
  logic CLASSC_PHASE3_CYC_SHADOWED_storage_err;
  logic CLASSC_PHASE3_CYC_SHADOWED_update_err;
  logic CLASSC_ESC_CNT_re;
  logic [31:0] CLASSC_ESC_CNT_qs;
  logic CLASSC_STATE_re;
  logic [2:0] CLASSC_STATE_qs;
  logic CLASSD_REGWEN_we;
  logic CLASSD_REGWEN_qs;
  logic CLASSD_REGWEN_wd;
  logic CLASSD_CTRL_SHADOWED_re;
  logic CLASSD_CTRL_SHADOWED_we;
  logic CLASSD_CTRL_SHADOWED_EN_qs;
  logic CLASSD_CTRL_SHADOWED_EN_wd;
  logic CLASSD_CTRL_SHADOWED_EN_storage_err;
  logic CLASSD_CTRL_SHADOWED_EN_update_err;
  logic CLASSD_CTRL_SHADOWED_LOCK_qs;
  logic CLASSD_CTRL_SHADOWED_LOCK_wd;
  logic CLASSD_CTRL_SHADOWED_LOCK_storage_err;
  logic CLASSD_CTRL_SHADOWED_LOCK_update_err;
  logic CLASSD_CTRL_SHADOWED_EN_E0_qs;
  logic CLASSD_CTRL_SHADOWED_EN_E0_wd;
  logic CLASSD_CTRL_SHADOWED_EN_E0_storage_err;
  logic CLASSD_CTRL_SHADOWED_EN_E0_update_err;
  logic CLASSD_CTRL_SHADOWED_EN_E1_qs;
  logic CLASSD_CTRL_SHADOWED_EN_E1_wd;
  logic CLASSD_CTRL_SHADOWED_EN_E1_storage_err;
  logic CLASSD_CTRL_SHADOWED_EN_E1_update_err;
  logic CLASSD_CTRL_SHADOWED_EN_E2_qs;
  logic CLASSD_CTRL_SHADOWED_EN_E2_wd;
  logic CLASSD_CTRL_SHADOWED_EN_E2_storage_err;
  logic CLASSD_CTRL_SHADOWED_EN_E2_update_err;
  logic CLASSD_CTRL_SHADOWED_EN_E3_qs;
  logic CLASSD_CTRL_SHADOWED_EN_E3_wd;
  logic CLASSD_CTRL_SHADOWED_EN_E3_storage_err;
  logic CLASSD_CTRL_SHADOWED_EN_E3_update_err;
  logic [1:0] CLASSD_CTRL_SHADOWED_MAP_E0_qs;
  logic [1:0] CLASSD_CTRL_SHADOWED_MAP_E0_wd;
  logic CLASSD_CTRL_SHADOWED_MAP_E0_storage_err;
  logic CLASSD_CTRL_SHADOWED_MAP_E0_update_err;
  logic [1:0] CLASSD_CTRL_SHADOWED_MAP_E1_qs;
  logic [1:0] CLASSD_CTRL_SHADOWED_MAP_E1_wd;
  logic CLASSD_CTRL_SHADOWED_MAP_E1_storage_err;
  logic CLASSD_CTRL_SHADOWED_MAP_E1_update_err;
  logic [1:0] CLASSD_CTRL_SHADOWED_MAP_E2_qs;
  logic [1:0] CLASSD_CTRL_SHADOWED_MAP_E2_wd;
  logic CLASSD_CTRL_SHADOWED_MAP_E2_storage_err;
  logic CLASSD_CTRL_SHADOWED_MAP_E2_update_err;
  logic [1:0] CLASSD_CTRL_SHADOWED_MAP_E3_qs;
  logic [1:0] CLASSD_CTRL_SHADOWED_MAP_E3_wd;
  logic CLASSD_CTRL_SHADOWED_MAP_E3_storage_err;
  logic CLASSD_CTRL_SHADOWED_MAP_E3_update_err;
  logic CLASSD_CLR_REGWEN_we;
  logic CLASSD_CLR_REGWEN_qs;
  logic CLASSD_CLR_REGWEN_wd;
  logic CLASSD_CLR_SHADOWED_re;
  logic CLASSD_CLR_SHADOWED_we;
  logic CLASSD_CLR_SHADOWED_qs;
  logic CLASSD_CLR_SHADOWED_wd;
  logic CLASSD_CLR_SHADOWED_storage_err;
  logic CLASSD_CLR_SHADOWED_update_err;
  logic CLASSD_ACCUM_CNT_re;
  logic [15:0] CLASSD_ACCUM_CNT_qs;
  logic CLASSD_ACCUM_THRESH_SHADOWED_re;
  logic CLASSD_ACCUM_THRESH_SHADOWED_we;
  logic [15:0] CLASSD_ACCUM_THRESH_SHADOWED_qs;
  logic [15:0] CLASSD_ACCUM_THRESH_SHADOWED_wd;
  logic CLASSD_ACCUM_THRESH_SHADOWED_storage_err;
  logic CLASSD_ACCUM_THRESH_SHADOWED_update_err;
  logic CLASSD_TIMEOUT_CYC_SHADOWED_re;
  logic CLASSD_TIMEOUT_CYC_SHADOWED_we;
  logic [31:0] CLASSD_TIMEOUT_CYC_SHADOWED_qs;
  logic [31:0] CLASSD_TIMEOUT_CYC_SHADOWED_wd;
  logic CLASSD_TIMEOUT_CYC_SHADOWED_storage_err;
  logic CLASSD_TIMEOUT_CYC_SHADOWED_update_err;
  logic CLASSD_CRASHDUMP_TRIGGER_SHADOWED_re;
  logic CLASSD_CRASHDUMP_TRIGGER_SHADOWED_we;
  logic [1:0] CLASSD_CRASHDUMP_TRIGGER_SHADOWED_qs;
  logic [1:0] CLASSD_CRASHDUMP_TRIGGER_SHADOWED_wd;
  logic CLASSD_CRASHDUMP_TRIGGER_SHADOWED_storage_err;
  logic CLASSD_CRASHDUMP_TRIGGER_SHADOWED_update_err;
  logic CLASSD_PHASE0_CYC_SHADOWED_re;
  logic CLASSD_PHASE0_CYC_SHADOWED_we;
  logic [31:0] CLASSD_PHASE0_CYC_SHADOWED_qs;
  logic [31:0] CLASSD_PHASE0_CYC_SHADOWED_wd;
  logic CLASSD_PHASE0_CYC_SHADOWED_storage_err;
  logic CLASSD_PHASE0_CYC_SHADOWED_update_err;
  logic CLASSD_PHASE1_CYC_SHADOWED_re;
  logic CLASSD_PHASE1_CYC_SHADOWED_we;
  logic [31:0] CLASSD_PHASE1_CYC_SHADOWED_qs;
  logic [31:0] CLASSD_PHASE1_CYC_SHADOWED_wd;
  logic CLASSD_PHASE1_CYC_SHADOWED_storage_err;
  logic CLASSD_PHASE1_CYC_SHADOWED_update_err;
  logic CLASSD_PHASE2_CYC_SHADOWED_re;
  logic CLASSD_PHASE2_CYC_SHADOWED_we;
  logic [31:0] CLASSD_PHASE2_CYC_SHADOWED_qs;
  logic [31:0] CLASSD_PHASE2_CYC_SHADOWED_wd;
  logic CLASSD_PHASE2_CYC_SHADOWED_storage_err;
  logic CLASSD_PHASE2_CYC_SHADOWED_update_err;
  logic CLASSD_PHASE3_CYC_SHADOWED_re;
  logic CLASSD_PHASE3_CYC_SHADOWED_we;
  logic [31:0] CLASSD_PHASE3_CYC_SHADOWED_qs;
  logic [31:0] CLASSD_PHASE3_CYC_SHADOWED_wd;
  logic CLASSD_PHASE3_CYC_SHADOWED_storage_err;
  logic CLASSD_PHASE3_CYC_SHADOWED_update_err;
  logic CLASSD_ESC_CNT_re;
  logic [31:0] CLASSD_ESC_CNT_qs;
  logic CLASSD_STATE_re;
  logic [2:0] CLASSD_STATE_qs;

  // Register instances
  // R[INTR_STATE]: V(False)
  //   F[classa]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_INTR_STATE_classa (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_STATE_we),
    .wd     (INTR_STATE_classa_wd),

    // from internal hardware
    .de     (hw2reg.INTR_STATE.classa.de),
    .d      (hw2reg.INTR_STATE.classa.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_STATE.classa.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_STATE_classa_qs)
  );

  //   F[classb]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_INTR_STATE_classb (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_STATE_we),
    .wd     (INTR_STATE_classb_wd),

    // from internal hardware
    .de     (hw2reg.INTR_STATE.classb.de),
    .d      (hw2reg.INTR_STATE.classb.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_STATE.classb.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_STATE_classb_qs)
  );

  //   F[classc]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_INTR_STATE_classc (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_STATE_we),
    .wd     (INTR_STATE_classc_wd),

    // from internal hardware
    .de     (hw2reg.INTR_STATE.classc.de),
    .d      (hw2reg.INTR_STATE.classc.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_STATE.classc.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_STATE_classc_qs)
  );

  //   F[classd]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_INTR_STATE_classd (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_STATE_we),
    .wd     (INTR_STATE_classd_wd),

    // from internal hardware
    .de     (hw2reg.INTR_STATE.classd.de),
    .d      (hw2reg.INTR_STATE.classd.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_STATE.classd.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_STATE_classd_qs)
  );


  // R[INTR_ENABLE]: V(False)
  //   F[classa]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_INTR_ENABLE_classa (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_ENABLE_we),
    .wd     (INTR_ENABLE_classa_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_ENABLE.classa.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_ENABLE_classa_qs)
  );

  //   F[classb]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_INTR_ENABLE_classb (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_ENABLE_we),
    .wd     (INTR_ENABLE_classb_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_ENABLE.classb.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_ENABLE_classb_qs)
  );

  //   F[classc]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_INTR_ENABLE_classc (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_ENABLE_we),
    .wd     (INTR_ENABLE_classc_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_ENABLE.classc.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_ENABLE_classc_qs)
  );

  //   F[classd]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_INTR_ENABLE_classd (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (INTR_ENABLE_we),
    .wd     (INTR_ENABLE_classd_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.INTR_ENABLE.classd.q),
    .ds     (),

    // to register interface (read)
    .qs     (INTR_ENABLE_classd_qs)
  );


  // R[INTR_TEST]: V(True)
  logic INTR_TEST_qe;
  logic [3:0] INTR_TEST_flds_we;
  assign INTR_TEST_qe = |INTR_TEST_flds_we; //  Rivos: &*_we --> |*_we
  //   F[classa]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_INTR_TEST_classa (
    .re     (1'b0),
    .we     (INTR_TEST_we),
    .wd     (INTR_TEST_classa_wd),
    .d      ('0),
    .qre    (),
    .qe     (INTR_TEST_flds_we[0]),
    .q      (reg2hw.INTR_TEST.classa.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.INTR_TEST.classa.qe = INTR_TEST_qe;

  //   F[classb]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_INTR_TEST_classb (
    .re     (1'b0),
    .we     (INTR_TEST_we),
    .wd     (INTR_TEST_classb_wd),
    .d      ('0),
    .qre    (),
    .qe     (INTR_TEST_flds_we[1]),
    .q      (reg2hw.INTR_TEST.classb.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.INTR_TEST.classb.qe = INTR_TEST_qe;

  //   F[classc]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_INTR_TEST_classc (
    .re     (1'b0),
    .we     (INTR_TEST_we),
    .wd     (INTR_TEST_classc_wd),
    .d      ('0),
    .qre    (),
    .qe     (INTR_TEST_flds_we[2]),
    .q      (reg2hw.INTR_TEST.classc.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.INTR_TEST.classc.qe = INTR_TEST_qe;

  //   F[classd]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_INTR_TEST_classd (
    .re     (1'b0),
    .we     (INTR_TEST_we),
    .wd     (INTR_TEST_classd_wd),
    .d      ('0),
    .qre    (),
    .qe     (INTR_TEST_flds_we[3]),
    .q      (reg2hw.INTR_TEST.classd.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.INTR_TEST.classd.qe = INTR_TEST_qe;


  // R[PING_TIMER_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_PING_TIMER_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (PING_TIMER_REGWEN_we),
    .wd     (PING_TIMER_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (PING_TIMER_REGWEN_qs)
  );


  // R[PING_TIMEOUT_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic PING_TIMEOUT_CYC_SHADOWED_gated_we;
  assign PING_TIMEOUT_CYC_SHADOWED_gated_we = PING_TIMEOUT_CYC_SHADOWED_we & PING_TIMER_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h100)
  ) u_PING_TIMEOUT_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (PING_TIMEOUT_CYC_SHADOWED_re),
    .we     (PING_TIMEOUT_CYC_SHADOWED_gated_we),
    .wd     (PING_TIMEOUT_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.PING_TIMEOUT_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (PING_TIMEOUT_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (PING_TIMEOUT_CYC_SHADOWED_update_err),
    .err_storage (PING_TIMEOUT_CYC_SHADOWED_storage_err)
  );


  // R[PING_TIMER_EN_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic PING_TIMER_EN_SHADOWED_gated_we;
  assign PING_TIMER_EN_SHADOWED_gated_we = PING_TIMER_EN_SHADOWED_we & PING_TIMER_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1S),
    .RESVAL  (1'h0)
  ) u_PING_TIMER_EN_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (PING_TIMER_EN_SHADOWED_re),
    .we     (PING_TIMER_EN_SHADOWED_gated_we),
    .wd     (PING_TIMER_EN_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.PING_TIMER_EN_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (PING_TIMER_EN_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (PING_TIMER_EN_SHADOWED_update_err),
    .err_storage (PING_TIMER_EN_SHADOWED_storage_err)
  );


  // Subregister 0 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_0_we),
    .wd     (ALERT_REGWEN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_0_qs)
  );


  // Subregister 1 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_1_we),
    .wd     (ALERT_REGWEN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_1_qs)
  );


  // Subregister 2 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_2]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_2_we),
    .wd     (ALERT_REGWEN_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_2_qs)
  );


  // Subregister 3 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_3]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_3_we),
    .wd     (ALERT_REGWEN_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_3_qs)
  );


  // Subregister 4 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_4]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_4_we),
    .wd     (ALERT_REGWEN_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_4_qs)
  );


  // Subregister 5 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_5]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_5_we),
    .wd     (ALERT_REGWEN_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_5_qs)
  );


  // Subregister 6 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_6]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_6_we),
    .wd     (ALERT_REGWEN_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_6_qs)
  );


  // Subregister 7 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_7]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_7_we),
    .wd     (ALERT_REGWEN_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_7_qs)
  );


  // Subregister 8 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_8]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_8_we),
    .wd     (ALERT_REGWEN_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_8_qs)
  );


  // Subregister 9 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_9]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_9 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_9_we),
    .wd     (ALERT_REGWEN_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_9_qs)
  );


  // Subregister 10 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_10]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_10 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_10_we),
    .wd     (ALERT_REGWEN_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_10_qs)
  );


  // Subregister 11 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_11]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_11 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_11_we),
    .wd     (ALERT_REGWEN_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_11_qs)
  );


  // Subregister 12 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_12]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_12 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_12_we),
    .wd     (ALERT_REGWEN_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_12_qs)
  );


  // Subregister 13 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_13]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_13 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_13_we),
    .wd     (ALERT_REGWEN_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_13_qs)
  );


  // Subregister 14 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_14]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_14 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_14_we),
    .wd     (ALERT_REGWEN_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_14_qs)
  );


  // Subregister 15 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_15]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_15 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_15_we),
    .wd     (ALERT_REGWEN_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_15_qs)
  );


  // Subregister 16 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_16]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_16 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_16_we),
    .wd     (ALERT_REGWEN_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_16_qs)
  );


  // Subregister 17 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_17]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_17 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_17_we),
    .wd     (ALERT_REGWEN_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_17_qs)
  );


  // Subregister 18 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_18]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_18 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_18_we),
    .wd     (ALERT_REGWEN_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_18_qs)
  );


  // Subregister 19 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_19]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_19 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_19_we),
    .wd     (ALERT_REGWEN_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_19_qs)
  );


  // Subregister 20 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_20]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_20 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_20_we),
    .wd     (ALERT_REGWEN_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_20_qs)
  );


  // Subregister 21 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_21]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_21 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_21_we),
    .wd     (ALERT_REGWEN_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_21_qs)
  );


  // Subregister 22 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_22]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_22 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_22_we),
    .wd     (ALERT_REGWEN_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_22_qs)
  );


  // Subregister 23 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_23]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_23 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_23_we),
    .wd     (ALERT_REGWEN_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_23_qs)
  );


  // Subregister 24 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_24]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_24 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_24_we),
    .wd     (ALERT_REGWEN_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_24_qs)
  );


  // Subregister 25 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_25]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_25 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_25_we),
    .wd     (ALERT_REGWEN_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_25_qs)
  );


  // Subregister 26 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_26]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_26 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_26_we),
    .wd     (ALERT_REGWEN_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_26_qs)
  );


  // Subregister 27 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_27]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_27 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_27_we),
    .wd     (ALERT_REGWEN_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_27_qs)
  );


  // Subregister 28 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_28]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_28 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_28_we),
    .wd     (ALERT_REGWEN_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_28_qs)
  );


  // Subregister 29 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_29]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_29 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_29_we),
    .wd     (ALERT_REGWEN_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_29_qs)
  );


  // Subregister 30 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_30]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_30 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_30_we),
    .wd     (ALERT_REGWEN_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_30_qs)
  );


  // Subregister 31 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_31]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_31 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_31_we),
    .wd     (ALERT_REGWEN_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_31_qs)
  );


  // Subregister 32 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_32]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_32 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_32_we),
    .wd     (ALERT_REGWEN_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[32].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_32_qs)
  );


  // Subregister 33 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_33]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_33 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_33_we),
    .wd     (ALERT_REGWEN_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[33].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_33_qs)
  );


  // Subregister 34 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_34]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_34 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_34_we),
    .wd     (ALERT_REGWEN_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[34].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_34_qs)
  );


  // Subregister 35 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_35]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_35 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_35_we),
    .wd     (ALERT_REGWEN_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[35].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_35_qs)
  );


  // Subregister 36 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_36]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_36 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_36_we),
    .wd     (ALERT_REGWEN_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[36].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_36_qs)
  );


  // Subregister 37 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_37]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_37 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_37_we),
    .wd     (ALERT_REGWEN_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[37].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_37_qs)
  );


  // Subregister 38 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_38]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_38 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_38_we),
    .wd     (ALERT_REGWEN_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[38].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_38_qs)
  );


  // Subregister 39 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_39]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_39 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_39_we),
    .wd     (ALERT_REGWEN_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[39].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_39_qs)
  );


  // Subregister 40 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_40]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_40 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_40_we),
    .wd     (ALERT_REGWEN_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[40].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_40_qs)
  );


  // Subregister 41 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_41]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_41 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_41_we),
    .wd     (ALERT_REGWEN_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[41].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_41_qs)
  );


  // Subregister 42 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_42]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_42 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_42_we),
    .wd     (ALERT_REGWEN_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[42].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_42_qs)
  );


  // Subregister 43 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_43]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_43 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_43_we),
    .wd     (ALERT_REGWEN_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[43].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_43_qs)
  );


  // Subregister 44 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_44]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_44 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_44_we),
    .wd     (ALERT_REGWEN_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[44].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_44_qs)
  );


  // Subregister 45 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_45]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_45 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_45_we),
    .wd     (ALERT_REGWEN_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[45].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_45_qs)
  );


  // Subregister 46 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_46]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_46 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_46_we),
    .wd     (ALERT_REGWEN_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[46].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_46_qs)
  );


  // Subregister 47 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_47]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_47 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_47_we),
    .wd     (ALERT_REGWEN_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[47].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_47_qs)
  );


  // Subregister 48 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_48]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_48 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_48_we),
    .wd     (ALERT_REGWEN_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[48].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_48_qs)
  );


  // Subregister 49 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_49]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_49 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_49_we),
    .wd     (ALERT_REGWEN_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[49].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_49_qs)
  );


  // Subregister 50 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_50]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_50 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_50_we),
    .wd     (ALERT_REGWEN_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[50].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_50_qs)
  );


  // Subregister 51 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_51]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_51 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_51_we),
    .wd     (ALERT_REGWEN_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[51].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_51_qs)
  );


  // Subregister 52 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_52]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_52 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_52_we),
    .wd     (ALERT_REGWEN_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[52].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_52_qs)
  );


  // Subregister 53 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_53]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_53 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_53_we),
    .wd     (ALERT_REGWEN_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[53].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_53_qs)
  );


  // Subregister 54 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_54]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_54 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_54_we),
    .wd     (ALERT_REGWEN_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[54].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_54_qs)
  );


  // Subregister 55 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_55]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_55 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_55_we),
    .wd     (ALERT_REGWEN_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[55].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_55_qs)
  );


  // Subregister 56 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_56]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_56 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_56_we),
    .wd     (ALERT_REGWEN_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[56].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_56_qs)
  );


  // Subregister 57 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_57]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_57 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_57_we),
    .wd     (ALERT_REGWEN_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[57].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_57_qs)
  );


  // Subregister 58 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_58]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_58 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_58_we),
    .wd     (ALERT_REGWEN_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[58].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_58_qs)
  );


  // Subregister 59 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_59]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_59 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_59_we),
    .wd     (ALERT_REGWEN_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[59].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_59_qs)
  );


  // Subregister 60 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_60]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_60 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_60_we),
    .wd     (ALERT_REGWEN_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[60].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_60_qs)
  );


  // Subregister 61 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_61]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_61 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_61_we),
    .wd     (ALERT_REGWEN_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[61].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_61_qs)
  );


  // Subregister 62 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_62]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_62 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_62_we),
    .wd     (ALERT_REGWEN_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[62].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_62_qs)
  );


  // Subregister 63 of Multireg ALERT_REGWEN
  // R[ALERT_REGWEN_63]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_ALERT_REGWEN_63 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_REGWEN_63_we),
    .wd     (ALERT_REGWEN_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_REGWEN[63].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_REGWEN_63_qs)
  );


  // Subregister 0 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_0]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_0_gated_we;
  assign ALERT_EN_SHADOWED_0_gated_we = ALERT_EN_SHADOWED_0_we & ALERT_REGWEN_0_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_0_re),
    .we     (ALERT_EN_SHADOWED_0_gated_we),
    .wd     (ALERT_EN_SHADOWED_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_0_update_err),
    .err_storage (ALERT_EN_SHADOWED_0_storage_err)
  );


  // Subregister 1 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_1]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_1_gated_we;
  assign ALERT_EN_SHADOWED_1_gated_we = ALERT_EN_SHADOWED_1_we & ALERT_REGWEN_1_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_1_re),
    .we     (ALERT_EN_SHADOWED_1_gated_we),
    .wd     (ALERT_EN_SHADOWED_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_1_update_err),
    .err_storage (ALERT_EN_SHADOWED_1_storage_err)
  );


  // Subregister 2 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_2]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_2_gated_we;
  assign ALERT_EN_SHADOWED_2_gated_we = ALERT_EN_SHADOWED_2_we & ALERT_REGWEN_2_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_2_re),
    .we     (ALERT_EN_SHADOWED_2_gated_we),
    .wd     (ALERT_EN_SHADOWED_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_2_update_err),
    .err_storage (ALERT_EN_SHADOWED_2_storage_err)
  );


  // Subregister 3 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_3]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_3_gated_we;
  assign ALERT_EN_SHADOWED_3_gated_we = ALERT_EN_SHADOWED_3_we & ALERT_REGWEN_3_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_3_re),
    .we     (ALERT_EN_SHADOWED_3_gated_we),
    .wd     (ALERT_EN_SHADOWED_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_3_update_err),
    .err_storage (ALERT_EN_SHADOWED_3_storage_err)
  );


  // Subregister 4 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_4]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_4_gated_we;
  assign ALERT_EN_SHADOWED_4_gated_we = ALERT_EN_SHADOWED_4_we & ALERT_REGWEN_4_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_4_re),
    .we     (ALERT_EN_SHADOWED_4_gated_we),
    .wd     (ALERT_EN_SHADOWED_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_4_update_err),
    .err_storage (ALERT_EN_SHADOWED_4_storage_err)
  );


  // Subregister 5 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_5]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_5_gated_we;
  assign ALERT_EN_SHADOWED_5_gated_we = ALERT_EN_SHADOWED_5_we & ALERT_REGWEN_5_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_5_re),
    .we     (ALERT_EN_SHADOWED_5_gated_we),
    .wd     (ALERT_EN_SHADOWED_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_5_update_err),
    .err_storage (ALERT_EN_SHADOWED_5_storage_err)
  );


  // Subregister 6 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_6]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_6_gated_we;
  assign ALERT_EN_SHADOWED_6_gated_we = ALERT_EN_SHADOWED_6_we & ALERT_REGWEN_6_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_6_re),
    .we     (ALERT_EN_SHADOWED_6_gated_we),
    .wd     (ALERT_EN_SHADOWED_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_6_update_err),
    .err_storage (ALERT_EN_SHADOWED_6_storage_err)
  );


  // Subregister 7 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_7]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_7_gated_we;
  assign ALERT_EN_SHADOWED_7_gated_we = ALERT_EN_SHADOWED_7_we & ALERT_REGWEN_7_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_7_re),
    .we     (ALERT_EN_SHADOWED_7_gated_we),
    .wd     (ALERT_EN_SHADOWED_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_7_update_err),
    .err_storage (ALERT_EN_SHADOWED_7_storage_err)
  );


  // Subregister 8 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_8]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_8_gated_we;
  assign ALERT_EN_SHADOWED_8_gated_we = ALERT_EN_SHADOWED_8_we & ALERT_REGWEN_8_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_8_re),
    .we     (ALERT_EN_SHADOWED_8_gated_we),
    .wd     (ALERT_EN_SHADOWED_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_8_update_err),
    .err_storage (ALERT_EN_SHADOWED_8_storage_err)
  );


  // Subregister 9 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_9]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_9_gated_we;
  assign ALERT_EN_SHADOWED_9_gated_we = ALERT_EN_SHADOWED_9_we & ALERT_REGWEN_9_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_9 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_9_re),
    .we     (ALERT_EN_SHADOWED_9_gated_we),
    .wd     (ALERT_EN_SHADOWED_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_9_update_err),
    .err_storage (ALERT_EN_SHADOWED_9_storage_err)
  );


  // Subregister 10 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_10]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_10_gated_we;
  assign ALERT_EN_SHADOWED_10_gated_we = ALERT_EN_SHADOWED_10_we & ALERT_REGWEN_10_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_10 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_10_re),
    .we     (ALERT_EN_SHADOWED_10_gated_we),
    .wd     (ALERT_EN_SHADOWED_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_10_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_10_update_err),
    .err_storage (ALERT_EN_SHADOWED_10_storage_err)
  );


  // Subregister 11 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_11]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_11_gated_we;
  assign ALERT_EN_SHADOWED_11_gated_we = ALERT_EN_SHADOWED_11_we & ALERT_REGWEN_11_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_11 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_11_re),
    .we     (ALERT_EN_SHADOWED_11_gated_we),
    .wd     (ALERT_EN_SHADOWED_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_11_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_11_update_err),
    .err_storage (ALERT_EN_SHADOWED_11_storage_err)
  );


  // Subregister 12 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_12]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_12_gated_we;
  assign ALERT_EN_SHADOWED_12_gated_we = ALERT_EN_SHADOWED_12_we & ALERT_REGWEN_12_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_12 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_12_re),
    .we     (ALERT_EN_SHADOWED_12_gated_we),
    .wd     (ALERT_EN_SHADOWED_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_12_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_12_update_err),
    .err_storage (ALERT_EN_SHADOWED_12_storage_err)
  );


  // Subregister 13 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_13]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_13_gated_we;
  assign ALERT_EN_SHADOWED_13_gated_we = ALERT_EN_SHADOWED_13_we & ALERT_REGWEN_13_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_13 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_13_re),
    .we     (ALERT_EN_SHADOWED_13_gated_we),
    .wd     (ALERT_EN_SHADOWED_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_13_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_13_update_err),
    .err_storage (ALERT_EN_SHADOWED_13_storage_err)
  );


  // Subregister 14 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_14]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_14_gated_we;
  assign ALERT_EN_SHADOWED_14_gated_we = ALERT_EN_SHADOWED_14_we & ALERT_REGWEN_14_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_14 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_14_re),
    .we     (ALERT_EN_SHADOWED_14_gated_we),
    .wd     (ALERT_EN_SHADOWED_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_14_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_14_update_err),
    .err_storage (ALERT_EN_SHADOWED_14_storage_err)
  );


  // Subregister 15 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_15]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_15_gated_we;
  assign ALERT_EN_SHADOWED_15_gated_we = ALERT_EN_SHADOWED_15_we & ALERT_REGWEN_15_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_15 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_15_re),
    .we     (ALERT_EN_SHADOWED_15_gated_we),
    .wd     (ALERT_EN_SHADOWED_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_15_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_15_update_err),
    .err_storage (ALERT_EN_SHADOWED_15_storage_err)
  );


  // Subregister 16 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_16]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_16_gated_we;
  assign ALERT_EN_SHADOWED_16_gated_we = ALERT_EN_SHADOWED_16_we & ALERT_REGWEN_16_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_16 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_16_re),
    .we     (ALERT_EN_SHADOWED_16_gated_we),
    .wd     (ALERT_EN_SHADOWED_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_16_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_16_update_err),
    .err_storage (ALERT_EN_SHADOWED_16_storage_err)
  );


  // Subregister 17 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_17]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_17_gated_we;
  assign ALERT_EN_SHADOWED_17_gated_we = ALERT_EN_SHADOWED_17_we & ALERT_REGWEN_17_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_17 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_17_re),
    .we     (ALERT_EN_SHADOWED_17_gated_we),
    .wd     (ALERT_EN_SHADOWED_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_17_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_17_update_err),
    .err_storage (ALERT_EN_SHADOWED_17_storage_err)
  );


  // Subregister 18 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_18]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_18_gated_we;
  assign ALERT_EN_SHADOWED_18_gated_we = ALERT_EN_SHADOWED_18_we & ALERT_REGWEN_18_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_18 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_18_re),
    .we     (ALERT_EN_SHADOWED_18_gated_we),
    .wd     (ALERT_EN_SHADOWED_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_18_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_18_update_err),
    .err_storage (ALERT_EN_SHADOWED_18_storage_err)
  );


  // Subregister 19 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_19]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_19_gated_we;
  assign ALERT_EN_SHADOWED_19_gated_we = ALERT_EN_SHADOWED_19_we & ALERT_REGWEN_19_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_19 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_19_re),
    .we     (ALERT_EN_SHADOWED_19_gated_we),
    .wd     (ALERT_EN_SHADOWED_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_19_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_19_update_err),
    .err_storage (ALERT_EN_SHADOWED_19_storage_err)
  );


  // Subregister 20 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_20]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_20_gated_we;
  assign ALERT_EN_SHADOWED_20_gated_we = ALERT_EN_SHADOWED_20_we & ALERT_REGWEN_20_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_20 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_20_re),
    .we     (ALERT_EN_SHADOWED_20_gated_we),
    .wd     (ALERT_EN_SHADOWED_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_20_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_20_update_err),
    .err_storage (ALERT_EN_SHADOWED_20_storage_err)
  );


  // Subregister 21 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_21]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_21_gated_we;
  assign ALERT_EN_SHADOWED_21_gated_we = ALERT_EN_SHADOWED_21_we & ALERT_REGWEN_21_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_21 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_21_re),
    .we     (ALERT_EN_SHADOWED_21_gated_we),
    .wd     (ALERT_EN_SHADOWED_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_21_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_21_update_err),
    .err_storage (ALERT_EN_SHADOWED_21_storage_err)
  );


  // Subregister 22 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_22]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_22_gated_we;
  assign ALERT_EN_SHADOWED_22_gated_we = ALERT_EN_SHADOWED_22_we & ALERT_REGWEN_22_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_22 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_22_re),
    .we     (ALERT_EN_SHADOWED_22_gated_we),
    .wd     (ALERT_EN_SHADOWED_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_22_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_22_update_err),
    .err_storage (ALERT_EN_SHADOWED_22_storage_err)
  );


  // Subregister 23 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_23]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_23_gated_we;
  assign ALERT_EN_SHADOWED_23_gated_we = ALERT_EN_SHADOWED_23_we & ALERT_REGWEN_23_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_23 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_23_re),
    .we     (ALERT_EN_SHADOWED_23_gated_we),
    .wd     (ALERT_EN_SHADOWED_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_23_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_23_update_err),
    .err_storage (ALERT_EN_SHADOWED_23_storage_err)
  );


  // Subregister 24 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_24]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_24_gated_we;
  assign ALERT_EN_SHADOWED_24_gated_we = ALERT_EN_SHADOWED_24_we & ALERT_REGWEN_24_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_24 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_24_re),
    .we     (ALERT_EN_SHADOWED_24_gated_we),
    .wd     (ALERT_EN_SHADOWED_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_24_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_24_update_err),
    .err_storage (ALERT_EN_SHADOWED_24_storage_err)
  );


  // Subregister 25 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_25]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_25_gated_we;
  assign ALERT_EN_SHADOWED_25_gated_we = ALERT_EN_SHADOWED_25_we & ALERT_REGWEN_25_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_25 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_25_re),
    .we     (ALERT_EN_SHADOWED_25_gated_we),
    .wd     (ALERT_EN_SHADOWED_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_25_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_25_update_err),
    .err_storage (ALERT_EN_SHADOWED_25_storage_err)
  );


  // Subregister 26 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_26]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_26_gated_we;
  assign ALERT_EN_SHADOWED_26_gated_we = ALERT_EN_SHADOWED_26_we & ALERT_REGWEN_26_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_26 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_26_re),
    .we     (ALERT_EN_SHADOWED_26_gated_we),
    .wd     (ALERT_EN_SHADOWED_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_26_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_26_update_err),
    .err_storage (ALERT_EN_SHADOWED_26_storage_err)
  );


  // Subregister 27 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_27]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_27_gated_we;
  assign ALERT_EN_SHADOWED_27_gated_we = ALERT_EN_SHADOWED_27_we & ALERT_REGWEN_27_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_27 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_27_re),
    .we     (ALERT_EN_SHADOWED_27_gated_we),
    .wd     (ALERT_EN_SHADOWED_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_27_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_27_update_err),
    .err_storage (ALERT_EN_SHADOWED_27_storage_err)
  );


  // Subregister 28 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_28]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_28_gated_we;
  assign ALERT_EN_SHADOWED_28_gated_we = ALERT_EN_SHADOWED_28_we & ALERT_REGWEN_28_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_28 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_28_re),
    .we     (ALERT_EN_SHADOWED_28_gated_we),
    .wd     (ALERT_EN_SHADOWED_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_28_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_28_update_err),
    .err_storage (ALERT_EN_SHADOWED_28_storage_err)
  );


  // Subregister 29 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_29]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_29_gated_we;
  assign ALERT_EN_SHADOWED_29_gated_we = ALERT_EN_SHADOWED_29_we & ALERT_REGWEN_29_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_29 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_29_re),
    .we     (ALERT_EN_SHADOWED_29_gated_we),
    .wd     (ALERT_EN_SHADOWED_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_29_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_29_update_err),
    .err_storage (ALERT_EN_SHADOWED_29_storage_err)
  );


  // Subregister 30 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_30]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_30_gated_we;
  assign ALERT_EN_SHADOWED_30_gated_we = ALERT_EN_SHADOWED_30_we & ALERT_REGWEN_30_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_30 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_30_re),
    .we     (ALERT_EN_SHADOWED_30_gated_we),
    .wd     (ALERT_EN_SHADOWED_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_30_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_30_update_err),
    .err_storage (ALERT_EN_SHADOWED_30_storage_err)
  );


  // Subregister 31 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_31]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_31_gated_we;
  assign ALERT_EN_SHADOWED_31_gated_we = ALERT_EN_SHADOWED_31_we & ALERT_REGWEN_31_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_31 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_31_re),
    .we     (ALERT_EN_SHADOWED_31_gated_we),
    .wd     (ALERT_EN_SHADOWED_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_31_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_31_update_err),
    .err_storage (ALERT_EN_SHADOWED_31_storage_err)
  );


  // Subregister 32 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_32]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_32_gated_we;
  assign ALERT_EN_SHADOWED_32_gated_we = ALERT_EN_SHADOWED_32_we & ALERT_REGWEN_32_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_32 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_32_re),
    .we     (ALERT_EN_SHADOWED_32_gated_we),
    .wd     (ALERT_EN_SHADOWED_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[32].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_32_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_32_update_err),
    .err_storage (ALERT_EN_SHADOWED_32_storage_err)
  );


  // Subregister 33 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_33]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_33_gated_we;
  assign ALERT_EN_SHADOWED_33_gated_we = ALERT_EN_SHADOWED_33_we & ALERT_REGWEN_33_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_33 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_33_re),
    .we     (ALERT_EN_SHADOWED_33_gated_we),
    .wd     (ALERT_EN_SHADOWED_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[33].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_33_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_33_update_err),
    .err_storage (ALERT_EN_SHADOWED_33_storage_err)
  );


  // Subregister 34 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_34]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_34_gated_we;
  assign ALERT_EN_SHADOWED_34_gated_we = ALERT_EN_SHADOWED_34_we & ALERT_REGWEN_34_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_34 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_34_re),
    .we     (ALERT_EN_SHADOWED_34_gated_we),
    .wd     (ALERT_EN_SHADOWED_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[34].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_34_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_34_update_err),
    .err_storage (ALERT_EN_SHADOWED_34_storage_err)
  );


  // Subregister 35 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_35]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_35_gated_we;
  assign ALERT_EN_SHADOWED_35_gated_we = ALERT_EN_SHADOWED_35_we & ALERT_REGWEN_35_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_35 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_35_re),
    .we     (ALERT_EN_SHADOWED_35_gated_we),
    .wd     (ALERT_EN_SHADOWED_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[35].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_35_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_35_update_err),
    .err_storage (ALERT_EN_SHADOWED_35_storage_err)
  );


  // Subregister 36 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_36]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_36_gated_we;
  assign ALERT_EN_SHADOWED_36_gated_we = ALERT_EN_SHADOWED_36_we & ALERT_REGWEN_36_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_36 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_36_re),
    .we     (ALERT_EN_SHADOWED_36_gated_we),
    .wd     (ALERT_EN_SHADOWED_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[36].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_36_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_36_update_err),
    .err_storage (ALERT_EN_SHADOWED_36_storage_err)
  );


  // Subregister 37 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_37]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_37_gated_we;
  assign ALERT_EN_SHADOWED_37_gated_we = ALERT_EN_SHADOWED_37_we & ALERT_REGWEN_37_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_37 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_37_re),
    .we     (ALERT_EN_SHADOWED_37_gated_we),
    .wd     (ALERT_EN_SHADOWED_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[37].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_37_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_37_update_err),
    .err_storage (ALERT_EN_SHADOWED_37_storage_err)
  );


  // Subregister 38 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_38]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_38_gated_we;
  assign ALERT_EN_SHADOWED_38_gated_we = ALERT_EN_SHADOWED_38_we & ALERT_REGWEN_38_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_38 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_38_re),
    .we     (ALERT_EN_SHADOWED_38_gated_we),
    .wd     (ALERT_EN_SHADOWED_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[38].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_38_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_38_update_err),
    .err_storage (ALERT_EN_SHADOWED_38_storage_err)
  );


  // Subregister 39 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_39]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_39_gated_we;
  assign ALERT_EN_SHADOWED_39_gated_we = ALERT_EN_SHADOWED_39_we & ALERT_REGWEN_39_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_39 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_39_re),
    .we     (ALERT_EN_SHADOWED_39_gated_we),
    .wd     (ALERT_EN_SHADOWED_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[39].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_39_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_39_update_err),
    .err_storage (ALERT_EN_SHADOWED_39_storage_err)
  );


  // Subregister 40 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_40]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_40_gated_we;
  assign ALERT_EN_SHADOWED_40_gated_we = ALERT_EN_SHADOWED_40_we & ALERT_REGWEN_40_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_40 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_40_re),
    .we     (ALERT_EN_SHADOWED_40_gated_we),
    .wd     (ALERT_EN_SHADOWED_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[40].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_40_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_40_update_err),
    .err_storage (ALERT_EN_SHADOWED_40_storage_err)
  );


  // Subregister 41 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_41]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_41_gated_we;
  assign ALERT_EN_SHADOWED_41_gated_we = ALERT_EN_SHADOWED_41_we & ALERT_REGWEN_41_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_41 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_41_re),
    .we     (ALERT_EN_SHADOWED_41_gated_we),
    .wd     (ALERT_EN_SHADOWED_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[41].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_41_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_41_update_err),
    .err_storage (ALERT_EN_SHADOWED_41_storage_err)
  );


  // Subregister 42 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_42]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_42_gated_we;
  assign ALERT_EN_SHADOWED_42_gated_we = ALERT_EN_SHADOWED_42_we & ALERT_REGWEN_42_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_42 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_42_re),
    .we     (ALERT_EN_SHADOWED_42_gated_we),
    .wd     (ALERT_EN_SHADOWED_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[42].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_42_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_42_update_err),
    .err_storage (ALERT_EN_SHADOWED_42_storage_err)
  );


  // Subregister 43 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_43]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_43_gated_we;
  assign ALERT_EN_SHADOWED_43_gated_we = ALERT_EN_SHADOWED_43_we & ALERT_REGWEN_43_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_43 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_43_re),
    .we     (ALERT_EN_SHADOWED_43_gated_we),
    .wd     (ALERT_EN_SHADOWED_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[43].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_43_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_43_update_err),
    .err_storage (ALERT_EN_SHADOWED_43_storage_err)
  );


  // Subregister 44 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_44]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_44_gated_we;
  assign ALERT_EN_SHADOWED_44_gated_we = ALERT_EN_SHADOWED_44_we & ALERT_REGWEN_44_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_44 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_44_re),
    .we     (ALERT_EN_SHADOWED_44_gated_we),
    .wd     (ALERT_EN_SHADOWED_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[44].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_44_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_44_update_err),
    .err_storage (ALERT_EN_SHADOWED_44_storage_err)
  );


  // Subregister 45 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_45]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_45_gated_we;
  assign ALERT_EN_SHADOWED_45_gated_we = ALERT_EN_SHADOWED_45_we & ALERT_REGWEN_45_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_45 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_45_re),
    .we     (ALERT_EN_SHADOWED_45_gated_we),
    .wd     (ALERT_EN_SHADOWED_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[45].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_45_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_45_update_err),
    .err_storage (ALERT_EN_SHADOWED_45_storage_err)
  );


  // Subregister 46 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_46]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_46_gated_we;
  assign ALERT_EN_SHADOWED_46_gated_we = ALERT_EN_SHADOWED_46_we & ALERT_REGWEN_46_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_46 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_46_re),
    .we     (ALERT_EN_SHADOWED_46_gated_we),
    .wd     (ALERT_EN_SHADOWED_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[46].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_46_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_46_update_err),
    .err_storage (ALERT_EN_SHADOWED_46_storage_err)
  );


  // Subregister 47 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_47]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_47_gated_we;
  assign ALERT_EN_SHADOWED_47_gated_we = ALERT_EN_SHADOWED_47_we & ALERT_REGWEN_47_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_47 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_47_re),
    .we     (ALERT_EN_SHADOWED_47_gated_we),
    .wd     (ALERT_EN_SHADOWED_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[47].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_47_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_47_update_err),
    .err_storage (ALERT_EN_SHADOWED_47_storage_err)
  );


  // Subregister 48 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_48]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_48_gated_we;
  assign ALERT_EN_SHADOWED_48_gated_we = ALERT_EN_SHADOWED_48_we & ALERT_REGWEN_48_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_48 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_48_re),
    .we     (ALERT_EN_SHADOWED_48_gated_we),
    .wd     (ALERT_EN_SHADOWED_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[48].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_48_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_48_update_err),
    .err_storage (ALERT_EN_SHADOWED_48_storage_err)
  );


  // Subregister 49 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_49]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_49_gated_we;
  assign ALERT_EN_SHADOWED_49_gated_we = ALERT_EN_SHADOWED_49_we & ALERT_REGWEN_49_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_49 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_49_re),
    .we     (ALERT_EN_SHADOWED_49_gated_we),
    .wd     (ALERT_EN_SHADOWED_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[49].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_49_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_49_update_err),
    .err_storage (ALERT_EN_SHADOWED_49_storage_err)
  );


  // Subregister 50 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_50]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_50_gated_we;
  assign ALERT_EN_SHADOWED_50_gated_we = ALERT_EN_SHADOWED_50_we & ALERT_REGWEN_50_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_50 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_50_re),
    .we     (ALERT_EN_SHADOWED_50_gated_we),
    .wd     (ALERT_EN_SHADOWED_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[50].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_50_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_50_update_err),
    .err_storage (ALERT_EN_SHADOWED_50_storage_err)
  );


  // Subregister 51 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_51]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_51_gated_we;
  assign ALERT_EN_SHADOWED_51_gated_we = ALERT_EN_SHADOWED_51_we & ALERT_REGWEN_51_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_51 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_51_re),
    .we     (ALERT_EN_SHADOWED_51_gated_we),
    .wd     (ALERT_EN_SHADOWED_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[51].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_51_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_51_update_err),
    .err_storage (ALERT_EN_SHADOWED_51_storage_err)
  );


  // Subregister 52 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_52]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_52_gated_we;
  assign ALERT_EN_SHADOWED_52_gated_we = ALERT_EN_SHADOWED_52_we & ALERT_REGWEN_52_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_52 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_52_re),
    .we     (ALERT_EN_SHADOWED_52_gated_we),
    .wd     (ALERT_EN_SHADOWED_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[52].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_52_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_52_update_err),
    .err_storage (ALERT_EN_SHADOWED_52_storage_err)
  );


  // Subregister 53 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_53]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_53_gated_we;
  assign ALERT_EN_SHADOWED_53_gated_we = ALERT_EN_SHADOWED_53_we & ALERT_REGWEN_53_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_53 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_53_re),
    .we     (ALERT_EN_SHADOWED_53_gated_we),
    .wd     (ALERT_EN_SHADOWED_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[53].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_53_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_53_update_err),
    .err_storage (ALERT_EN_SHADOWED_53_storage_err)
  );


  // Subregister 54 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_54]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_54_gated_we;
  assign ALERT_EN_SHADOWED_54_gated_we = ALERT_EN_SHADOWED_54_we & ALERT_REGWEN_54_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_54 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_54_re),
    .we     (ALERT_EN_SHADOWED_54_gated_we),
    .wd     (ALERT_EN_SHADOWED_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[54].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_54_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_54_update_err),
    .err_storage (ALERT_EN_SHADOWED_54_storage_err)
  );


  // Subregister 55 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_55]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_55_gated_we;
  assign ALERT_EN_SHADOWED_55_gated_we = ALERT_EN_SHADOWED_55_we & ALERT_REGWEN_55_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_55 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_55_re),
    .we     (ALERT_EN_SHADOWED_55_gated_we),
    .wd     (ALERT_EN_SHADOWED_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[55].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_55_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_55_update_err),
    .err_storage (ALERT_EN_SHADOWED_55_storage_err)
  );


  // Subregister 56 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_56]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_56_gated_we;
  assign ALERT_EN_SHADOWED_56_gated_we = ALERT_EN_SHADOWED_56_we & ALERT_REGWEN_56_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_56 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_56_re),
    .we     (ALERT_EN_SHADOWED_56_gated_we),
    .wd     (ALERT_EN_SHADOWED_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[56].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_56_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_56_update_err),
    .err_storage (ALERT_EN_SHADOWED_56_storage_err)
  );


  // Subregister 57 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_57]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_57_gated_we;
  assign ALERT_EN_SHADOWED_57_gated_we = ALERT_EN_SHADOWED_57_we & ALERT_REGWEN_57_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_57 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_57_re),
    .we     (ALERT_EN_SHADOWED_57_gated_we),
    .wd     (ALERT_EN_SHADOWED_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[57].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_57_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_57_update_err),
    .err_storage (ALERT_EN_SHADOWED_57_storage_err)
  );


  // Subregister 58 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_58]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_58_gated_we;
  assign ALERT_EN_SHADOWED_58_gated_we = ALERT_EN_SHADOWED_58_we & ALERT_REGWEN_58_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_58 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_58_re),
    .we     (ALERT_EN_SHADOWED_58_gated_we),
    .wd     (ALERT_EN_SHADOWED_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[58].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_58_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_58_update_err),
    .err_storage (ALERT_EN_SHADOWED_58_storage_err)
  );


  // Subregister 59 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_59]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_59_gated_we;
  assign ALERT_EN_SHADOWED_59_gated_we = ALERT_EN_SHADOWED_59_we & ALERT_REGWEN_59_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_59 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_59_re),
    .we     (ALERT_EN_SHADOWED_59_gated_we),
    .wd     (ALERT_EN_SHADOWED_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[59].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_59_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_59_update_err),
    .err_storage (ALERT_EN_SHADOWED_59_storage_err)
  );


  // Subregister 60 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_60]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_60_gated_we;
  assign ALERT_EN_SHADOWED_60_gated_we = ALERT_EN_SHADOWED_60_we & ALERT_REGWEN_60_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_60 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_60_re),
    .we     (ALERT_EN_SHADOWED_60_gated_we),
    .wd     (ALERT_EN_SHADOWED_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[60].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_60_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_60_update_err),
    .err_storage (ALERT_EN_SHADOWED_60_storage_err)
  );


  // Subregister 61 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_61]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_61_gated_we;
  assign ALERT_EN_SHADOWED_61_gated_we = ALERT_EN_SHADOWED_61_we & ALERT_REGWEN_61_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_61 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_61_re),
    .we     (ALERT_EN_SHADOWED_61_gated_we),
    .wd     (ALERT_EN_SHADOWED_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[61].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_61_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_61_update_err),
    .err_storage (ALERT_EN_SHADOWED_61_storage_err)
  );


  // Subregister 62 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_62]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_62_gated_we;
  assign ALERT_EN_SHADOWED_62_gated_we = ALERT_EN_SHADOWED_62_we & ALERT_REGWEN_62_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_62 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_62_re),
    .we     (ALERT_EN_SHADOWED_62_gated_we),
    .wd     (ALERT_EN_SHADOWED_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[62].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_62_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_62_update_err),
    .err_storage (ALERT_EN_SHADOWED_62_storage_err)
  );


  // Subregister 63 of Multireg ALERT_EN_SHADOWED
  // R[ALERT_EN_SHADOWED_63]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_EN_SHADOWED_63_gated_we;
  assign ALERT_EN_SHADOWED_63_gated_we = ALERT_EN_SHADOWED_63_we & ALERT_REGWEN_63_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ALERT_EN_SHADOWED_63 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_EN_SHADOWED_63_re),
    .we     (ALERT_EN_SHADOWED_63_gated_we),
    .wd     (ALERT_EN_SHADOWED_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_EN_SHADOWED[63].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_EN_SHADOWED_63_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_EN_SHADOWED_63_update_err),
    .err_storage (ALERT_EN_SHADOWED_63_storage_err)
  );


  // Subregister 0 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_0]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_0_gated_we;
  assign ALERT_CLASS_SHADOWED_0_gated_we = ALERT_CLASS_SHADOWED_0_we & ALERT_REGWEN_0_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_0_re),
    .we     (ALERT_CLASS_SHADOWED_0_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_0_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_0_storage_err)
  );


  // Subregister 1 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_1]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_1_gated_we;
  assign ALERT_CLASS_SHADOWED_1_gated_we = ALERT_CLASS_SHADOWED_1_we & ALERT_REGWEN_1_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_1_re),
    .we     (ALERT_CLASS_SHADOWED_1_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_1_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_1_storage_err)
  );


  // Subregister 2 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_2]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_2_gated_we;
  assign ALERT_CLASS_SHADOWED_2_gated_we = ALERT_CLASS_SHADOWED_2_we & ALERT_REGWEN_2_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_2_re),
    .we     (ALERT_CLASS_SHADOWED_2_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_2_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_2_storage_err)
  );


  // Subregister 3 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_3]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_3_gated_we;
  assign ALERT_CLASS_SHADOWED_3_gated_we = ALERT_CLASS_SHADOWED_3_we & ALERT_REGWEN_3_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_3_re),
    .we     (ALERT_CLASS_SHADOWED_3_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_3_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_3_storage_err)
  );


  // Subregister 4 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_4]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_4_gated_we;
  assign ALERT_CLASS_SHADOWED_4_gated_we = ALERT_CLASS_SHADOWED_4_we & ALERT_REGWEN_4_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_4_re),
    .we     (ALERT_CLASS_SHADOWED_4_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_4_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_4_storage_err)
  );


  // Subregister 5 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_5]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_5_gated_we;
  assign ALERT_CLASS_SHADOWED_5_gated_we = ALERT_CLASS_SHADOWED_5_we & ALERT_REGWEN_5_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_5_re),
    .we     (ALERT_CLASS_SHADOWED_5_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_5_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_5_storage_err)
  );


  // Subregister 6 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_6]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_6_gated_we;
  assign ALERT_CLASS_SHADOWED_6_gated_we = ALERT_CLASS_SHADOWED_6_we & ALERT_REGWEN_6_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_6_re),
    .we     (ALERT_CLASS_SHADOWED_6_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_6_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_6_storage_err)
  );


  // Subregister 7 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_7]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_7_gated_we;
  assign ALERT_CLASS_SHADOWED_7_gated_we = ALERT_CLASS_SHADOWED_7_we & ALERT_REGWEN_7_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_7_re),
    .we     (ALERT_CLASS_SHADOWED_7_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_7_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_7_storage_err)
  );


  // Subregister 8 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_8]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_8_gated_we;
  assign ALERT_CLASS_SHADOWED_8_gated_we = ALERT_CLASS_SHADOWED_8_we & ALERT_REGWEN_8_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_8_re),
    .we     (ALERT_CLASS_SHADOWED_8_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_8_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_8_storage_err)
  );


  // Subregister 9 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_9]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_9_gated_we;
  assign ALERT_CLASS_SHADOWED_9_gated_we = ALERT_CLASS_SHADOWED_9_we & ALERT_REGWEN_9_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_9 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_9_re),
    .we     (ALERT_CLASS_SHADOWED_9_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_9_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_9_storage_err)
  );


  // Subregister 10 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_10]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_10_gated_we;
  assign ALERT_CLASS_SHADOWED_10_gated_we = ALERT_CLASS_SHADOWED_10_we & ALERT_REGWEN_10_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_10 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_10_re),
    .we     (ALERT_CLASS_SHADOWED_10_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_10_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_10_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_10_storage_err)
  );


  // Subregister 11 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_11]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_11_gated_we;
  assign ALERT_CLASS_SHADOWED_11_gated_we = ALERT_CLASS_SHADOWED_11_we & ALERT_REGWEN_11_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_11 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_11_re),
    .we     (ALERT_CLASS_SHADOWED_11_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_11_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_11_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_11_storage_err)
  );


  // Subregister 12 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_12]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_12_gated_we;
  assign ALERT_CLASS_SHADOWED_12_gated_we = ALERT_CLASS_SHADOWED_12_we & ALERT_REGWEN_12_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_12 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_12_re),
    .we     (ALERT_CLASS_SHADOWED_12_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_12_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_12_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_12_storage_err)
  );


  // Subregister 13 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_13]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_13_gated_we;
  assign ALERT_CLASS_SHADOWED_13_gated_we = ALERT_CLASS_SHADOWED_13_we & ALERT_REGWEN_13_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_13 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_13_re),
    .we     (ALERT_CLASS_SHADOWED_13_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_13_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_13_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_13_storage_err)
  );


  // Subregister 14 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_14]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_14_gated_we;
  assign ALERT_CLASS_SHADOWED_14_gated_we = ALERT_CLASS_SHADOWED_14_we & ALERT_REGWEN_14_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_14 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_14_re),
    .we     (ALERT_CLASS_SHADOWED_14_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_14_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_14_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_14_storage_err)
  );


  // Subregister 15 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_15]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_15_gated_we;
  assign ALERT_CLASS_SHADOWED_15_gated_we = ALERT_CLASS_SHADOWED_15_we & ALERT_REGWEN_15_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_15 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_15_re),
    .we     (ALERT_CLASS_SHADOWED_15_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_15_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_15_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_15_storage_err)
  );


  // Subregister 16 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_16]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_16_gated_we;
  assign ALERT_CLASS_SHADOWED_16_gated_we = ALERT_CLASS_SHADOWED_16_we & ALERT_REGWEN_16_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_16 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_16_re),
    .we     (ALERT_CLASS_SHADOWED_16_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_16_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_16_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_16_storage_err)
  );


  // Subregister 17 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_17]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_17_gated_we;
  assign ALERT_CLASS_SHADOWED_17_gated_we = ALERT_CLASS_SHADOWED_17_we & ALERT_REGWEN_17_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_17 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_17_re),
    .we     (ALERT_CLASS_SHADOWED_17_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_17_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_17_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_17_storage_err)
  );


  // Subregister 18 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_18]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_18_gated_we;
  assign ALERT_CLASS_SHADOWED_18_gated_we = ALERT_CLASS_SHADOWED_18_we & ALERT_REGWEN_18_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_18 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_18_re),
    .we     (ALERT_CLASS_SHADOWED_18_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_18_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_18_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_18_storage_err)
  );


  // Subregister 19 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_19]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_19_gated_we;
  assign ALERT_CLASS_SHADOWED_19_gated_we = ALERT_CLASS_SHADOWED_19_we & ALERT_REGWEN_19_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_19 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_19_re),
    .we     (ALERT_CLASS_SHADOWED_19_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_19_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_19_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_19_storage_err)
  );


  // Subregister 20 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_20]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_20_gated_we;
  assign ALERT_CLASS_SHADOWED_20_gated_we = ALERT_CLASS_SHADOWED_20_we & ALERT_REGWEN_20_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_20 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_20_re),
    .we     (ALERT_CLASS_SHADOWED_20_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_20_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_20_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_20_storage_err)
  );


  // Subregister 21 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_21]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_21_gated_we;
  assign ALERT_CLASS_SHADOWED_21_gated_we = ALERT_CLASS_SHADOWED_21_we & ALERT_REGWEN_21_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_21 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_21_re),
    .we     (ALERT_CLASS_SHADOWED_21_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_21_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_21_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_21_storage_err)
  );


  // Subregister 22 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_22]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_22_gated_we;
  assign ALERT_CLASS_SHADOWED_22_gated_we = ALERT_CLASS_SHADOWED_22_we & ALERT_REGWEN_22_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_22 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_22_re),
    .we     (ALERT_CLASS_SHADOWED_22_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_22_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_22_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_22_storage_err)
  );


  // Subregister 23 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_23]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_23_gated_we;
  assign ALERT_CLASS_SHADOWED_23_gated_we = ALERT_CLASS_SHADOWED_23_we & ALERT_REGWEN_23_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_23 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_23_re),
    .we     (ALERT_CLASS_SHADOWED_23_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_23_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_23_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_23_storage_err)
  );


  // Subregister 24 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_24]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_24_gated_we;
  assign ALERT_CLASS_SHADOWED_24_gated_we = ALERT_CLASS_SHADOWED_24_we & ALERT_REGWEN_24_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_24 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_24_re),
    .we     (ALERT_CLASS_SHADOWED_24_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_24_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_24_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_24_storage_err)
  );


  // Subregister 25 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_25]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_25_gated_we;
  assign ALERT_CLASS_SHADOWED_25_gated_we = ALERT_CLASS_SHADOWED_25_we & ALERT_REGWEN_25_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_25 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_25_re),
    .we     (ALERT_CLASS_SHADOWED_25_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_25_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_25_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_25_storage_err)
  );


  // Subregister 26 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_26]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_26_gated_we;
  assign ALERT_CLASS_SHADOWED_26_gated_we = ALERT_CLASS_SHADOWED_26_we & ALERT_REGWEN_26_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_26 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_26_re),
    .we     (ALERT_CLASS_SHADOWED_26_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_26_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_26_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_26_storage_err)
  );


  // Subregister 27 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_27]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_27_gated_we;
  assign ALERT_CLASS_SHADOWED_27_gated_we = ALERT_CLASS_SHADOWED_27_we & ALERT_REGWEN_27_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_27 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_27_re),
    .we     (ALERT_CLASS_SHADOWED_27_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_27_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_27_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_27_storage_err)
  );


  // Subregister 28 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_28]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_28_gated_we;
  assign ALERT_CLASS_SHADOWED_28_gated_we = ALERT_CLASS_SHADOWED_28_we & ALERT_REGWEN_28_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_28 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_28_re),
    .we     (ALERT_CLASS_SHADOWED_28_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_28_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_28_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_28_storage_err)
  );


  // Subregister 29 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_29]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_29_gated_we;
  assign ALERT_CLASS_SHADOWED_29_gated_we = ALERT_CLASS_SHADOWED_29_we & ALERT_REGWEN_29_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_29 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_29_re),
    .we     (ALERT_CLASS_SHADOWED_29_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_29_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_29_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_29_storage_err)
  );


  // Subregister 30 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_30]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_30_gated_we;
  assign ALERT_CLASS_SHADOWED_30_gated_we = ALERT_CLASS_SHADOWED_30_we & ALERT_REGWEN_30_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_30 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_30_re),
    .we     (ALERT_CLASS_SHADOWED_30_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_30_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_30_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_30_storage_err)
  );


  // Subregister 31 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_31]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_31_gated_we;
  assign ALERT_CLASS_SHADOWED_31_gated_we = ALERT_CLASS_SHADOWED_31_we & ALERT_REGWEN_31_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_31 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_31_re),
    .we     (ALERT_CLASS_SHADOWED_31_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_31_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_31_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_31_storage_err)
  );


  // Subregister 32 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_32]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_32_gated_we;
  assign ALERT_CLASS_SHADOWED_32_gated_we = ALERT_CLASS_SHADOWED_32_we & ALERT_REGWEN_32_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_32 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_32_re),
    .we     (ALERT_CLASS_SHADOWED_32_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[32].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_32_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_32_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_32_storage_err)
  );


  // Subregister 33 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_33]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_33_gated_we;
  assign ALERT_CLASS_SHADOWED_33_gated_we = ALERT_CLASS_SHADOWED_33_we & ALERT_REGWEN_33_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_33 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_33_re),
    .we     (ALERT_CLASS_SHADOWED_33_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[33].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_33_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_33_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_33_storage_err)
  );


  // Subregister 34 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_34]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_34_gated_we;
  assign ALERT_CLASS_SHADOWED_34_gated_we = ALERT_CLASS_SHADOWED_34_we & ALERT_REGWEN_34_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_34 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_34_re),
    .we     (ALERT_CLASS_SHADOWED_34_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[34].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_34_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_34_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_34_storage_err)
  );


  // Subregister 35 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_35]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_35_gated_we;
  assign ALERT_CLASS_SHADOWED_35_gated_we = ALERT_CLASS_SHADOWED_35_we & ALERT_REGWEN_35_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_35 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_35_re),
    .we     (ALERT_CLASS_SHADOWED_35_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[35].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_35_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_35_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_35_storage_err)
  );


  // Subregister 36 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_36]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_36_gated_we;
  assign ALERT_CLASS_SHADOWED_36_gated_we = ALERT_CLASS_SHADOWED_36_we & ALERT_REGWEN_36_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_36 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_36_re),
    .we     (ALERT_CLASS_SHADOWED_36_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[36].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_36_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_36_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_36_storage_err)
  );


  // Subregister 37 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_37]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_37_gated_we;
  assign ALERT_CLASS_SHADOWED_37_gated_we = ALERT_CLASS_SHADOWED_37_we & ALERT_REGWEN_37_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_37 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_37_re),
    .we     (ALERT_CLASS_SHADOWED_37_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[37].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_37_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_37_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_37_storage_err)
  );


  // Subregister 38 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_38]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_38_gated_we;
  assign ALERT_CLASS_SHADOWED_38_gated_we = ALERT_CLASS_SHADOWED_38_we & ALERT_REGWEN_38_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_38 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_38_re),
    .we     (ALERT_CLASS_SHADOWED_38_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[38].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_38_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_38_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_38_storage_err)
  );


  // Subregister 39 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_39]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_39_gated_we;
  assign ALERT_CLASS_SHADOWED_39_gated_we = ALERT_CLASS_SHADOWED_39_we & ALERT_REGWEN_39_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_39 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_39_re),
    .we     (ALERT_CLASS_SHADOWED_39_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[39].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_39_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_39_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_39_storage_err)
  );


  // Subregister 40 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_40]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_40_gated_we;
  assign ALERT_CLASS_SHADOWED_40_gated_we = ALERT_CLASS_SHADOWED_40_we & ALERT_REGWEN_40_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_40 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_40_re),
    .we     (ALERT_CLASS_SHADOWED_40_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[40].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_40_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_40_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_40_storage_err)
  );


  // Subregister 41 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_41]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_41_gated_we;
  assign ALERT_CLASS_SHADOWED_41_gated_we = ALERT_CLASS_SHADOWED_41_we & ALERT_REGWEN_41_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_41 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_41_re),
    .we     (ALERT_CLASS_SHADOWED_41_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[41].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_41_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_41_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_41_storage_err)
  );


  // Subregister 42 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_42]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_42_gated_we;
  assign ALERT_CLASS_SHADOWED_42_gated_we = ALERT_CLASS_SHADOWED_42_we & ALERT_REGWEN_42_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_42 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_42_re),
    .we     (ALERT_CLASS_SHADOWED_42_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[42].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_42_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_42_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_42_storage_err)
  );


  // Subregister 43 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_43]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_43_gated_we;
  assign ALERT_CLASS_SHADOWED_43_gated_we = ALERT_CLASS_SHADOWED_43_we & ALERT_REGWEN_43_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_43 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_43_re),
    .we     (ALERT_CLASS_SHADOWED_43_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[43].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_43_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_43_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_43_storage_err)
  );


  // Subregister 44 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_44]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_44_gated_we;
  assign ALERT_CLASS_SHADOWED_44_gated_we = ALERT_CLASS_SHADOWED_44_we & ALERT_REGWEN_44_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_44 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_44_re),
    .we     (ALERT_CLASS_SHADOWED_44_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[44].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_44_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_44_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_44_storage_err)
  );


  // Subregister 45 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_45]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_45_gated_we;
  assign ALERT_CLASS_SHADOWED_45_gated_we = ALERT_CLASS_SHADOWED_45_we & ALERT_REGWEN_45_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_45 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_45_re),
    .we     (ALERT_CLASS_SHADOWED_45_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[45].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_45_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_45_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_45_storage_err)
  );


  // Subregister 46 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_46]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_46_gated_we;
  assign ALERT_CLASS_SHADOWED_46_gated_we = ALERT_CLASS_SHADOWED_46_we & ALERT_REGWEN_46_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_46 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_46_re),
    .we     (ALERT_CLASS_SHADOWED_46_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[46].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_46_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_46_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_46_storage_err)
  );


  // Subregister 47 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_47]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_47_gated_we;
  assign ALERT_CLASS_SHADOWED_47_gated_we = ALERT_CLASS_SHADOWED_47_we & ALERT_REGWEN_47_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_47 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_47_re),
    .we     (ALERT_CLASS_SHADOWED_47_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[47].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_47_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_47_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_47_storage_err)
  );


  // Subregister 48 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_48]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_48_gated_we;
  assign ALERT_CLASS_SHADOWED_48_gated_we = ALERT_CLASS_SHADOWED_48_we & ALERT_REGWEN_48_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_48 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_48_re),
    .we     (ALERT_CLASS_SHADOWED_48_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[48].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_48_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_48_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_48_storage_err)
  );


  // Subregister 49 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_49]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_49_gated_we;
  assign ALERT_CLASS_SHADOWED_49_gated_we = ALERT_CLASS_SHADOWED_49_we & ALERT_REGWEN_49_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_49 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_49_re),
    .we     (ALERT_CLASS_SHADOWED_49_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[49].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_49_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_49_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_49_storage_err)
  );


  // Subregister 50 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_50]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_50_gated_we;
  assign ALERT_CLASS_SHADOWED_50_gated_we = ALERT_CLASS_SHADOWED_50_we & ALERT_REGWEN_50_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_50 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_50_re),
    .we     (ALERT_CLASS_SHADOWED_50_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[50].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_50_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_50_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_50_storage_err)
  );


  // Subregister 51 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_51]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_51_gated_we;
  assign ALERT_CLASS_SHADOWED_51_gated_we = ALERT_CLASS_SHADOWED_51_we & ALERT_REGWEN_51_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_51 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_51_re),
    .we     (ALERT_CLASS_SHADOWED_51_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[51].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_51_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_51_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_51_storage_err)
  );


  // Subregister 52 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_52]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_52_gated_we;
  assign ALERT_CLASS_SHADOWED_52_gated_we = ALERT_CLASS_SHADOWED_52_we & ALERT_REGWEN_52_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_52 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_52_re),
    .we     (ALERT_CLASS_SHADOWED_52_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[52].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_52_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_52_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_52_storage_err)
  );


  // Subregister 53 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_53]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_53_gated_we;
  assign ALERT_CLASS_SHADOWED_53_gated_we = ALERT_CLASS_SHADOWED_53_we & ALERT_REGWEN_53_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_53 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_53_re),
    .we     (ALERT_CLASS_SHADOWED_53_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[53].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_53_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_53_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_53_storage_err)
  );


  // Subregister 54 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_54]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_54_gated_we;
  assign ALERT_CLASS_SHADOWED_54_gated_we = ALERT_CLASS_SHADOWED_54_we & ALERT_REGWEN_54_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_54 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_54_re),
    .we     (ALERT_CLASS_SHADOWED_54_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[54].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_54_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_54_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_54_storage_err)
  );


  // Subregister 55 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_55]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_55_gated_we;
  assign ALERT_CLASS_SHADOWED_55_gated_we = ALERT_CLASS_SHADOWED_55_we & ALERT_REGWEN_55_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_55 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_55_re),
    .we     (ALERT_CLASS_SHADOWED_55_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[55].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_55_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_55_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_55_storage_err)
  );


  // Subregister 56 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_56]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_56_gated_we;
  assign ALERT_CLASS_SHADOWED_56_gated_we = ALERT_CLASS_SHADOWED_56_we & ALERT_REGWEN_56_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_56 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_56_re),
    .we     (ALERT_CLASS_SHADOWED_56_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[56].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_56_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_56_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_56_storage_err)
  );


  // Subregister 57 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_57]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_57_gated_we;
  assign ALERT_CLASS_SHADOWED_57_gated_we = ALERT_CLASS_SHADOWED_57_we & ALERT_REGWEN_57_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_57 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_57_re),
    .we     (ALERT_CLASS_SHADOWED_57_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[57].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_57_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_57_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_57_storage_err)
  );


  // Subregister 58 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_58]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_58_gated_we;
  assign ALERT_CLASS_SHADOWED_58_gated_we = ALERT_CLASS_SHADOWED_58_we & ALERT_REGWEN_58_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_58 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_58_re),
    .we     (ALERT_CLASS_SHADOWED_58_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[58].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_58_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_58_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_58_storage_err)
  );


  // Subregister 59 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_59]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_59_gated_we;
  assign ALERT_CLASS_SHADOWED_59_gated_we = ALERT_CLASS_SHADOWED_59_we & ALERT_REGWEN_59_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_59 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_59_re),
    .we     (ALERT_CLASS_SHADOWED_59_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[59].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_59_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_59_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_59_storage_err)
  );


  // Subregister 60 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_60]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_60_gated_we;
  assign ALERT_CLASS_SHADOWED_60_gated_we = ALERT_CLASS_SHADOWED_60_we & ALERT_REGWEN_60_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_60 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_60_re),
    .we     (ALERT_CLASS_SHADOWED_60_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[60].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_60_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_60_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_60_storage_err)
  );


  // Subregister 61 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_61]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_61_gated_we;
  assign ALERT_CLASS_SHADOWED_61_gated_we = ALERT_CLASS_SHADOWED_61_we & ALERT_REGWEN_61_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_61 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_61_re),
    .we     (ALERT_CLASS_SHADOWED_61_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[61].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_61_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_61_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_61_storage_err)
  );


  // Subregister 62 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_62]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_62_gated_we;
  assign ALERT_CLASS_SHADOWED_62_gated_we = ALERT_CLASS_SHADOWED_62_we & ALERT_REGWEN_62_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_62 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_62_re),
    .we     (ALERT_CLASS_SHADOWED_62_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[62].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_62_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_62_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_62_storage_err)
  );


  // Subregister 63 of Multireg ALERT_CLASS_SHADOWED
  // R[ALERT_CLASS_SHADOWED_63]: V(False)
  // Create REGWEN-gated WE signal
  logic ALERT_CLASS_SHADOWED_63_gated_we;
  assign ALERT_CLASS_SHADOWED_63_gated_we = ALERT_CLASS_SHADOWED_63_we & ALERT_REGWEN_63_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ALERT_CLASS_SHADOWED_63 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ALERT_CLASS_SHADOWED_63_re),
    .we     (ALERT_CLASS_SHADOWED_63_gated_we),
    .wd     (ALERT_CLASS_SHADOWED_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CLASS_SHADOWED[63].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CLASS_SHADOWED_63_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ALERT_CLASS_SHADOWED_63_update_err),
    .err_storage (ALERT_CLASS_SHADOWED_63_storage_err)
  );


  // Subregister 0 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_0 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_0_we),
    .wd     (ALERT_CAUSE_0_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[0].de),
    .d      (hw2reg.ALERT_CAUSE[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_0_qs)
  );


  // Subregister 1 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_1 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_1_we),
    .wd     (ALERT_CAUSE_1_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[1].de),
    .d      (hw2reg.ALERT_CAUSE[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_1_qs)
  );


  // Subregister 2 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_2]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_2 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_2_we),
    .wd     (ALERT_CAUSE_2_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[2].de),
    .d      (hw2reg.ALERT_CAUSE[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_2_qs)
  );


  // Subregister 3 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_3]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_3 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_3_we),
    .wd     (ALERT_CAUSE_3_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[3].de),
    .d      (hw2reg.ALERT_CAUSE[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_3_qs)
  );


  // Subregister 4 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_4]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_4 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_4_we),
    .wd     (ALERT_CAUSE_4_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[4].de),
    .d      (hw2reg.ALERT_CAUSE[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_4_qs)
  );


  // Subregister 5 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_5]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_5 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_5_we),
    .wd     (ALERT_CAUSE_5_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[5].de),
    .d      (hw2reg.ALERT_CAUSE[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_5_qs)
  );


  // Subregister 6 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_6]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_6 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_6_we),
    .wd     (ALERT_CAUSE_6_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[6].de),
    .d      (hw2reg.ALERT_CAUSE[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_6_qs)
  );


  // Subregister 7 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_7]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_7 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_7_we),
    .wd     (ALERT_CAUSE_7_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[7].de),
    .d      (hw2reg.ALERT_CAUSE[7].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_7_qs)
  );


  // Subregister 8 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_8]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_8 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_8_we),
    .wd     (ALERT_CAUSE_8_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[8].de),
    .d      (hw2reg.ALERT_CAUSE[8].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_8_qs)
  );


  // Subregister 9 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_9]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_9 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_9_we),
    .wd     (ALERT_CAUSE_9_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[9].de),
    .d      (hw2reg.ALERT_CAUSE[9].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_9_qs)
  );


  // Subregister 10 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_10]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_10 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_10_we),
    .wd     (ALERT_CAUSE_10_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[10].de),
    .d      (hw2reg.ALERT_CAUSE[10].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_10_qs)
  );


  // Subregister 11 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_11]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_11 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_11_we),
    .wd     (ALERT_CAUSE_11_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[11].de),
    .d      (hw2reg.ALERT_CAUSE[11].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_11_qs)
  );


  // Subregister 12 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_12]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_12 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_12_we),
    .wd     (ALERT_CAUSE_12_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[12].de),
    .d      (hw2reg.ALERT_CAUSE[12].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_12_qs)
  );


  // Subregister 13 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_13]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_13 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_13_we),
    .wd     (ALERT_CAUSE_13_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[13].de),
    .d      (hw2reg.ALERT_CAUSE[13].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_13_qs)
  );


  // Subregister 14 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_14]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_14 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_14_we),
    .wd     (ALERT_CAUSE_14_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[14].de),
    .d      (hw2reg.ALERT_CAUSE[14].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_14_qs)
  );


  // Subregister 15 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_15]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_15 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_15_we),
    .wd     (ALERT_CAUSE_15_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[15].de),
    .d      (hw2reg.ALERT_CAUSE[15].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_15_qs)
  );


  // Subregister 16 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_16]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_16 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_16_we),
    .wd     (ALERT_CAUSE_16_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[16].de),
    .d      (hw2reg.ALERT_CAUSE[16].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_16_qs)
  );


  // Subregister 17 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_17]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_17 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_17_we),
    .wd     (ALERT_CAUSE_17_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[17].de),
    .d      (hw2reg.ALERT_CAUSE[17].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_17_qs)
  );


  // Subregister 18 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_18]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_18 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_18_we),
    .wd     (ALERT_CAUSE_18_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[18].de),
    .d      (hw2reg.ALERT_CAUSE[18].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_18_qs)
  );


  // Subregister 19 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_19]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_19 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_19_we),
    .wd     (ALERT_CAUSE_19_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[19].de),
    .d      (hw2reg.ALERT_CAUSE[19].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_19_qs)
  );


  // Subregister 20 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_20]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_20 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_20_we),
    .wd     (ALERT_CAUSE_20_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[20].de),
    .d      (hw2reg.ALERT_CAUSE[20].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_20_qs)
  );


  // Subregister 21 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_21]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_21 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_21_we),
    .wd     (ALERT_CAUSE_21_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[21].de),
    .d      (hw2reg.ALERT_CAUSE[21].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_21_qs)
  );


  // Subregister 22 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_22]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_22 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_22_we),
    .wd     (ALERT_CAUSE_22_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[22].de),
    .d      (hw2reg.ALERT_CAUSE[22].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_22_qs)
  );


  // Subregister 23 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_23]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_23 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_23_we),
    .wd     (ALERT_CAUSE_23_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[23].de),
    .d      (hw2reg.ALERT_CAUSE[23].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_23_qs)
  );


  // Subregister 24 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_24]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_24 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_24_we),
    .wd     (ALERT_CAUSE_24_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[24].de),
    .d      (hw2reg.ALERT_CAUSE[24].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_24_qs)
  );


  // Subregister 25 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_25]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_25 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_25_we),
    .wd     (ALERT_CAUSE_25_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[25].de),
    .d      (hw2reg.ALERT_CAUSE[25].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_25_qs)
  );


  // Subregister 26 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_26]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_26 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_26_we),
    .wd     (ALERT_CAUSE_26_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[26].de),
    .d      (hw2reg.ALERT_CAUSE[26].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_26_qs)
  );


  // Subregister 27 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_27]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_27 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_27_we),
    .wd     (ALERT_CAUSE_27_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[27].de),
    .d      (hw2reg.ALERT_CAUSE[27].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_27_qs)
  );


  // Subregister 28 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_28]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_28 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_28_we),
    .wd     (ALERT_CAUSE_28_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[28].de),
    .d      (hw2reg.ALERT_CAUSE[28].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_28_qs)
  );


  // Subregister 29 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_29]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_29 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_29_we),
    .wd     (ALERT_CAUSE_29_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[29].de),
    .d      (hw2reg.ALERT_CAUSE[29].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_29_qs)
  );


  // Subregister 30 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_30]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_30 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_30_we),
    .wd     (ALERT_CAUSE_30_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[30].de),
    .d      (hw2reg.ALERT_CAUSE[30].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_30_qs)
  );


  // Subregister 31 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_31]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_31 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_31_we),
    .wd     (ALERT_CAUSE_31_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[31].de),
    .d      (hw2reg.ALERT_CAUSE[31].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_31_qs)
  );


  // Subregister 32 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_32]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_32 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_32_we),
    .wd     (ALERT_CAUSE_32_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[32].de),
    .d      (hw2reg.ALERT_CAUSE[32].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[32].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_32_qs)
  );


  // Subregister 33 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_33]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_33 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_33_we),
    .wd     (ALERT_CAUSE_33_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[33].de),
    .d      (hw2reg.ALERT_CAUSE[33].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[33].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_33_qs)
  );


  // Subregister 34 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_34]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_34 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_34_we),
    .wd     (ALERT_CAUSE_34_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[34].de),
    .d      (hw2reg.ALERT_CAUSE[34].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[34].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_34_qs)
  );


  // Subregister 35 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_35]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_35 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_35_we),
    .wd     (ALERT_CAUSE_35_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[35].de),
    .d      (hw2reg.ALERT_CAUSE[35].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[35].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_35_qs)
  );


  // Subregister 36 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_36]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_36 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_36_we),
    .wd     (ALERT_CAUSE_36_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[36].de),
    .d      (hw2reg.ALERT_CAUSE[36].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[36].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_36_qs)
  );


  // Subregister 37 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_37]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_37 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_37_we),
    .wd     (ALERT_CAUSE_37_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[37].de),
    .d      (hw2reg.ALERT_CAUSE[37].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[37].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_37_qs)
  );


  // Subregister 38 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_38]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_38 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_38_we),
    .wd     (ALERT_CAUSE_38_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[38].de),
    .d      (hw2reg.ALERT_CAUSE[38].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[38].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_38_qs)
  );


  // Subregister 39 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_39]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_39 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_39_we),
    .wd     (ALERT_CAUSE_39_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[39].de),
    .d      (hw2reg.ALERT_CAUSE[39].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[39].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_39_qs)
  );


  // Subregister 40 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_40]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_40 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_40_we),
    .wd     (ALERT_CAUSE_40_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[40].de),
    .d      (hw2reg.ALERT_CAUSE[40].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[40].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_40_qs)
  );


  // Subregister 41 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_41]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_41 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_41_we),
    .wd     (ALERT_CAUSE_41_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[41].de),
    .d      (hw2reg.ALERT_CAUSE[41].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[41].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_41_qs)
  );


  // Subregister 42 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_42]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_42 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_42_we),
    .wd     (ALERT_CAUSE_42_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[42].de),
    .d      (hw2reg.ALERT_CAUSE[42].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[42].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_42_qs)
  );


  // Subregister 43 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_43]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_43 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_43_we),
    .wd     (ALERT_CAUSE_43_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[43].de),
    .d      (hw2reg.ALERT_CAUSE[43].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[43].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_43_qs)
  );


  // Subregister 44 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_44]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_44 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_44_we),
    .wd     (ALERT_CAUSE_44_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[44].de),
    .d      (hw2reg.ALERT_CAUSE[44].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[44].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_44_qs)
  );


  // Subregister 45 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_45]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_45 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_45_we),
    .wd     (ALERT_CAUSE_45_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[45].de),
    .d      (hw2reg.ALERT_CAUSE[45].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[45].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_45_qs)
  );


  // Subregister 46 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_46]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_46 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_46_we),
    .wd     (ALERT_CAUSE_46_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[46].de),
    .d      (hw2reg.ALERT_CAUSE[46].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[46].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_46_qs)
  );


  // Subregister 47 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_47]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_47 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_47_we),
    .wd     (ALERT_CAUSE_47_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[47].de),
    .d      (hw2reg.ALERT_CAUSE[47].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[47].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_47_qs)
  );


  // Subregister 48 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_48]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_48 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_48_we),
    .wd     (ALERT_CAUSE_48_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[48].de),
    .d      (hw2reg.ALERT_CAUSE[48].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[48].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_48_qs)
  );


  // Subregister 49 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_49]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_49 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_49_we),
    .wd     (ALERT_CAUSE_49_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[49].de),
    .d      (hw2reg.ALERT_CAUSE[49].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[49].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_49_qs)
  );


  // Subregister 50 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_50]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_50 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_50_we),
    .wd     (ALERT_CAUSE_50_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[50].de),
    .d      (hw2reg.ALERT_CAUSE[50].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[50].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_50_qs)
  );


  // Subregister 51 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_51]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_51 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_51_we),
    .wd     (ALERT_CAUSE_51_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[51].de),
    .d      (hw2reg.ALERT_CAUSE[51].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[51].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_51_qs)
  );


  // Subregister 52 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_52]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_52 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_52_we),
    .wd     (ALERT_CAUSE_52_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[52].de),
    .d      (hw2reg.ALERT_CAUSE[52].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[52].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_52_qs)
  );


  // Subregister 53 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_53]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_53 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_53_we),
    .wd     (ALERT_CAUSE_53_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[53].de),
    .d      (hw2reg.ALERT_CAUSE[53].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[53].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_53_qs)
  );


  // Subregister 54 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_54]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_54 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_54_we),
    .wd     (ALERT_CAUSE_54_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[54].de),
    .d      (hw2reg.ALERT_CAUSE[54].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[54].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_54_qs)
  );


  // Subregister 55 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_55]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_55 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_55_we),
    .wd     (ALERT_CAUSE_55_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[55].de),
    .d      (hw2reg.ALERT_CAUSE[55].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[55].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_55_qs)
  );


  // Subregister 56 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_56]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_56 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_56_we),
    .wd     (ALERT_CAUSE_56_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[56].de),
    .d      (hw2reg.ALERT_CAUSE[56].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[56].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_56_qs)
  );


  // Subregister 57 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_57]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_57 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_57_we),
    .wd     (ALERT_CAUSE_57_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[57].de),
    .d      (hw2reg.ALERT_CAUSE[57].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[57].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_57_qs)
  );


  // Subregister 58 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_58]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_58 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_58_we),
    .wd     (ALERT_CAUSE_58_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[58].de),
    .d      (hw2reg.ALERT_CAUSE[58].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[58].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_58_qs)
  );


  // Subregister 59 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_59]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_59 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_59_we),
    .wd     (ALERT_CAUSE_59_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[59].de),
    .d      (hw2reg.ALERT_CAUSE[59].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[59].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_59_qs)
  );


  // Subregister 60 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_60]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_60 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_60_we),
    .wd     (ALERT_CAUSE_60_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[60].de),
    .d      (hw2reg.ALERT_CAUSE[60].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[60].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_60_qs)
  );


  // Subregister 61 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_61]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_61 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_61_we),
    .wd     (ALERT_CAUSE_61_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[61].de),
    .d      (hw2reg.ALERT_CAUSE[61].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[61].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_61_qs)
  );


  // Subregister 62 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_62]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_62 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_62_we),
    .wd     (ALERT_CAUSE_62_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[62].de),
    .d      (hw2reg.ALERT_CAUSE[62].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[62].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_62_qs)
  );


  // Subregister 63 of Multireg ALERT_CAUSE
  // R[ALERT_CAUSE_63]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_ALERT_CAUSE_63 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (ALERT_CAUSE_63_we),
    .wd     (ALERT_CAUSE_63_wd),

    // from internal hardware
    .de     (hw2reg.ALERT_CAUSE[63].de),
    .d      (hw2reg.ALERT_CAUSE[63].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ALERT_CAUSE[63].q),
    .ds     (),

    // to register interface (read)
    .qs     (ALERT_CAUSE_63_qs)
  );


  // Subregister 0 of Multireg LOC_ALERT_REGWEN
  // R[LOC_ALERT_REGWEN_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_LOC_ALERT_REGWEN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_REGWEN_0_we),
    .wd     (LOC_ALERT_REGWEN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_REGWEN_0_qs)
  );


  // Subregister 1 of Multireg LOC_ALERT_REGWEN
  // R[LOC_ALERT_REGWEN_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_LOC_ALERT_REGWEN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_REGWEN_1_we),
    .wd     (LOC_ALERT_REGWEN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_REGWEN_1_qs)
  );


  // Subregister 2 of Multireg LOC_ALERT_REGWEN
  // R[LOC_ALERT_REGWEN_2]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_LOC_ALERT_REGWEN_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_REGWEN_2_we),
    .wd     (LOC_ALERT_REGWEN_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_REGWEN_2_qs)
  );


  // Subregister 3 of Multireg LOC_ALERT_REGWEN
  // R[LOC_ALERT_REGWEN_3]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_LOC_ALERT_REGWEN_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_REGWEN_3_we),
    .wd     (LOC_ALERT_REGWEN_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_REGWEN_3_qs)
  );


  // Subregister 4 of Multireg LOC_ALERT_REGWEN
  // R[LOC_ALERT_REGWEN_4]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_LOC_ALERT_REGWEN_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_REGWEN_4_we),
    .wd     (LOC_ALERT_REGWEN_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_REGWEN_4_qs)
  );


  // Subregister 5 of Multireg LOC_ALERT_REGWEN
  // R[LOC_ALERT_REGWEN_5]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_LOC_ALERT_REGWEN_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_REGWEN_5_we),
    .wd     (LOC_ALERT_REGWEN_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_REGWEN_5_qs)
  );


  // Subregister 6 of Multireg LOC_ALERT_REGWEN
  // R[LOC_ALERT_REGWEN_6]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_LOC_ALERT_REGWEN_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_REGWEN_6_we),
    .wd     (LOC_ALERT_REGWEN_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_REGWEN_6_qs)
  );


  // Subregister 0 of Multireg LOC_ALERT_EN_SHADOWED
  // R[LOC_ALERT_EN_SHADOWED_0]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_EN_SHADOWED_0_gated_we;
  assign LOC_ALERT_EN_SHADOWED_0_gated_we = LOC_ALERT_EN_SHADOWED_0_we & LOC_ALERT_REGWEN_0_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_EN_SHADOWED_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_EN_SHADOWED_0_re),
    .we     (LOC_ALERT_EN_SHADOWED_0_gated_we),
    .wd     (LOC_ALERT_EN_SHADOWED_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_EN_SHADOWED[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_EN_SHADOWED_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_EN_SHADOWED_0_update_err),
    .err_storage (LOC_ALERT_EN_SHADOWED_0_storage_err)
  );


  // Subregister 1 of Multireg LOC_ALERT_EN_SHADOWED
  // R[LOC_ALERT_EN_SHADOWED_1]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_EN_SHADOWED_1_gated_we;
  assign LOC_ALERT_EN_SHADOWED_1_gated_we = LOC_ALERT_EN_SHADOWED_1_we & LOC_ALERT_REGWEN_1_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_EN_SHADOWED_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_EN_SHADOWED_1_re),
    .we     (LOC_ALERT_EN_SHADOWED_1_gated_we),
    .wd     (LOC_ALERT_EN_SHADOWED_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_EN_SHADOWED[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_EN_SHADOWED_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_EN_SHADOWED_1_update_err),
    .err_storage (LOC_ALERT_EN_SHADOWED_1_storage_err)
  );


  // Subregister 2 of Multireg LOC_ALERT_EN_SHADOWED
  // R[LOC_ALERT_EN_SHADOWED_2]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_EN_SHADOWED_2_gated_we;
  assign LOC_ALERT_EN_SHADOWED_2_gated_we = LOC_ALERT_EN_SHADOWED_2_we & LOC_ALERT_REGWEN_2_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_EN_SHADOWED_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_EN_SHADOWED_2_re),
    .we     (LOC_ALERT_EN_SHADOWED_2_gated_we),
    .wd     (LOC_ALERT_EN_SHADOWED_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_EN_SHADOWED[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_EN_SHADOWED_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_EN_SHADOWED_2_update_err),
    .err_storage (LOC_ALERT_EN_SHADOWED_2_storage_err)
  );


  // Subregister 3 of Multireg LOC_ALERT_EN_SHADOWED
  // R[LOC_ALERT_EN_SHADOWED_3]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_EN_SHADOWED_3_gated_we;
  assign LOC_ALERT_EN_SHADOWED_3_gated_we = LOC_ALERT_EN_SHADOWED_3_we & LOC_ALERT_REGWEN_3_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_EN_SHADOWED_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_EN_SHADOWED_3_re),
    .we     (LOC_ALERT_EN_SHADOWED_3_gated_we),
    .wd     (LOC_ALERT_EN_SHADOWED_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_EN_SHADOWED[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_EN_SHADOWED_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_EN_SHADOWED_3_update_err),
    .err_storage (LOC_ALERT_EN_SHADOWED_3_storage_err)
  );


  // Subregister 4 of Multireg LOC_ALERT_EN_SHADOWED
  // R[LOC_ALERT_EN_SHADOWED_4]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_EN_SHADOWED_4_gated_we;
  assign LOC_ALERT_EN_SHADOWED_4_gated_we = LOC_ALERT_EN_SHADOWED_4_we & LOC_ALERT_REGWEN_4_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_EN_SHADOWED_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_EN_SHADOWED_4_re),
    .we     (LOC_ALERT_EN_SHADOWED_4_gated_we),
    .wd     (LOC_ALERT_EN_SHADOWED_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_EN_SHADOWED[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_EN_SHADOWED_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_EN_SHADOWED_4_update_err),
    .err_storage (LOC_ALERT_EN_SHADOWED_4_storage_err)
  );


  // Subregister 5 of Multireg LOC_ALERT_EN_SHADOWED
  // R[LOC_ALERT_EN_SHADOWED_5]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_EN_SHADOWED_5_gated_we;
  assign LOC_ALERT_EN_SHADOWED_5_gated_we = LOC_ALERT_EN_SHADOWED_5_we & LOC_ALERT_REGWEN_5_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_EN_SHADOWED_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_EN_SHADOWED_5_re),
    .we     (LOC_ALERT_EN_SHADOWED_5_gated_we),
    .wd     (LOC_ALERT_EN_SHADOWED_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_EN_SHADOWED[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_EN_SHADOWED_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_EN_SHADOWED_5_update_err),
    .err_storage (LOC_ALERT_EN_SHADOWED_5_storage_err)
  );


  // Subregister 6 of Multireg LOC_ALERT_EN_SHADOWED
  // R[LOC_ALERT_EN_SHADOWED_6]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_EN_SHADOWED_6_gated_we;
  assign LOC_ALERT_EN_SHADOWED_6_gated_we = LOC_ALERT_EN_SHADOWED_6_we & LOC_ALERT_REGWEN_6_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_EN_SHADOWED_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_EN_SHADOWED_6_re),
    .we     (LOC_ALERT_EN_SHADOWED_6_gated_we),
    .wd     (LOC_ALERT_EN_SHADOWED_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_EN_SHADOWED[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_EN_SHADOWED_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_EN_SHADOWED_6_update_err),
    .err_storage (LOC_ALERT_EN_SHADOWED_6_storage_err)
  );


  // Subregister 0 of Multireg LOC_ALERT_CLASS_SHADOWED
  // R[LOC_ALERT_CLASS_SHADOWED_0]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_CLASS_SHADOWED_0_gated_we;
  assign LOC_ALERT_CLASS_SHADOWED_0_gated_we =
    LOC_ALERT_CLASS_SHADOWED_0_we & LOC_ALERT_REGWEN_0_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_LOC_ALERT_CLASS_SHADOWED_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_CLASS_SHADOWED_0_re),
    .we     (LOC_ALERT_CLASS_SHADOWED_0_gated_we),
    .wd     (LOC_ALERT_CLASS_SHADOWED_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CLASS_SHADOWED[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CLASS_SHADOWED_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_CLASS_SHADOWED_0_update_err),
    .err_storage (LOC_ALERT_CLASS_SHADOWED_0_storage_err)
  );


  // Subregister 1 of Multireg LOC_ALERT_CLASS_SHADOWED
  // R[LOC_ALERT_CLASS_SHADOWED_1]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_CLASS_SHADOWED_1_gated_we;
  assign LOC_ALERT_CLASS_SHADOWED_1_gated_we =
    LOC_ALERT_CLASS_SHADOWED_1_we & LOC_ALERT_REGWEN_1_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_LOC_ALERT_CLASS_SHADOWED_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_CLASS_SHADOWED_1_re),
    .we     (LOC_ALERT_CLASS_SHADOWED_1_gated_we),
    .wd     (LOC_ALERT_CLASS_SHADOWED_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CLASS_SHADOWED[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CLASS_SHADOWED_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_CLASS_SHADOWED_1_update_err),
    .err_storage (LOC_ALERT_CLASS_SHADOWED_1_storage_err)
  );


  // Subregister 2 of Multireg LOC_ALERT_CLASS_SHADOWED
  // R[LOC_ALERT_CLASS_SHADOWED_2]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_CLASS_SHADOWED_2_gated_we;
  assign LOC_ALERT_CLASS_SHADOWED_2_gated_we =
    LOC_ALERT_CLASS_SHADOWED_2_we & LOC_ALERT_REGWEN_2_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_LOC_ALERT_CLASS_SHADOWED_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_CLASS_SHADOWED_2_re),
    .we     (LOC_ALERT_CLASS_SHADOWED_2_gated_we),
    .wd     (LOC_ALERT_CLASS_SHADOWED_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CLASS_SHADOWED[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CLASS_SHADOWED_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_CLASS_SHADOWED_2_update_err),
    .err_storage (LOC_ALERT_CLASS_SHADOWED_2_storage_err)
  );


  // Subregister 3 of Multireg LOC_ALERT_CLASS_SHADOWED
  // R[LOC_ALERT_CLASS_SHADOWED_3]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_CLASS_SHADOWED_3_gated_we;
  assign LOC_ALERT_CLASS_SHADOWED_3_gated_we =
    LOC_ALERT_CLASS_SHADOWED_3_we & LOC_ALERT_REGWEN_3_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_LOC_ALERT_CLASS_SHADOWED_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_CLASS_SHADOWED_3_re),
    .we     (LOC_ALERT_CLASS_SHADOWED_3_gated_we),
    .wd     (LOC_ALERT_CLASS_SHADOWED_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CLASS_SHADOWED[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CLASS_SHADOWED_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_CLASS_SHADOWED_3_update_err),
    .err_storage (LOC_ALERT_CLASS_SHADOWED_3_storage_err)
  );


  // Subregister 4 of Multireg LOC_ALERT_CLASS_SHADOWED
  // R[LOC_ALERT_CLASS_SHADOWED_4]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_CLASS_SHADOWED_4_gated_we;
  assign LOC_ALERT_CLASS_SHADOWED_4_gated_we =
    LOC_ALERT_CLASS_SHADOWED_4_we & LOC_ALERT_REGWEN_4_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_LOC_ALERT_CLASS_SHADOWED_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_CLASS_SHADOWED_4_re),
    .we     (LOC_ALERT_CLASS_SHADOWED_4_gated_we),
    .wd     (LOC_ALERT_CLASS_SHADOWED_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CLASS_SHADOWED[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CLASS_SHADOWED_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_CLASS_SHADOWED_4_update_err),
    .err_storage (LOC_ALERT_CLASS_SHADOWED_4_storage_err)
  );


  // Subregister 5 of Multireg LOC_ALERT_CLASS_SHADOWED
  // R[LOC_ALERT_CLASS_SHADOWED_5]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_CLASS_SHADOWED_5_gated_we;
  assign LOC_ALERT_CLASS_SHADOWED_5_gated_we =
    LOC_ALERT_CLASS_SHADOWED_5_we & LOC_ALERT_REGWEN_5_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_LOC_ALERT_CLASS_SHADOWED_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_CLASS_SHADOWED_5_re),
    .we     (LOC_ALERT_CLASS_SHADOWED_5_gated_we),
    .wd     (LOC_ALERT_CLASS_SHADOWED_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CLASS_SHADOWED[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CLASS_SHADOWED_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_CLASS_SHADOWED_5_update_err),
    .err_storage (LOC_ALERT_CLASS_SHADOWED_5_storage_err)
  );


  // Subregister 6 of Multireg LOC_ALERT_CLASS_SHADOWED
  // R[LOC_ALERT_CLASS_SHADOWED_6]: V(False)
  // Create REGWEN-gated WE signal
  logic LOC_ALERT_CLASS_SHADOWED_6_gated_we;
  assign LOC_ALERT_CLASS_SHADOWED_6_gated_we =
    LOC_ALERT_CLASS_SHADOWED_6_we & LOC_ALERT_REGWEN_6_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_LOC_ALERT_CLASS_SHADOWED_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (LOC_ALERT_CLASS_SHADOWED_6_re),
    .we     (LOC_ALERT_CLASS_SHADOWED_6_gated_we),
    .wd     (LOC_ALERT_CLASS_SHADOWED_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CLASS_SHADOWED[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CLASS_SHADOWED_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (LOC_ALERT_CLASS_SHADOWED_6_update_err),
    .err_storage (LOC_ALERT_CLASS_SHADOWED_6_storage_err)
  );


  // Subregister 0 of Multireg LOC_ALERT_CAUSE
  // R[LOC_ALERT_CAUSE_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_CAUSE_0 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_CAUSE_0_we),
    .wd     (LOC_ALERT_CAUSE_0_wd),

    // from internal hardware
    .de     (hw2reg.LOC_ALERT_CAUSE[0].de),
    .d      (hw2reg.LOC_ALERT_CAUSE[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CAUSE[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CAUSE_0_qs)
  );


  // Subregister 1 of Multireg LOC_ALERT_CAUSE
  // R[LOC_ALERT_CAUSE_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_CAUSE_1 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_CAUSE_1_we),
    .wd     (LOC_ALERT_CAUSE_1_wd),

    // from internal hardware
    .de     (hw2reg.LOC_ALERT_CAUSE[1].de),
    .d      (hw2reg.LOC_ALERT_CAUSE[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CAUSE[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CAUSE_1_qs)
  );


  // Subregister 2 of Multireg LOC_ALERT_CAUSE
  // R[LOC_ALERT_CAUSE_2]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_CAUSE_2 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_CAUSE_2_we),
    .wd     (LOC_ALERT_CAUSE_2_wd),

    // from internal hardware
    .de     (hw2reg.LOC_ALERT_CAUSE[2].de),
    .d      (hw2reg.LOC_ALERT_CAUSE[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CAUSE[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CAUSE_2_qs)
  );


  // Subregister 3 of Multireg LOC_ALERT_CAUSE
  // R[LOC_ALERT_CAUSE_3]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_CAUSE_3 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_CAUSE_3_we),
    .wd     (LOC_ALERT_CAUSE_3_wd),

    // from internal hardware
    .de     (hw2reg.LOC_ALERT_CAUSE[3].de),
    .d      (hw2reg.LOC_ALERT_CAUSE[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CAUSE[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CAUSE_3_qs)
  );


  // Subregister 4 of Multireg LOC_ALERT_CAUSE
  // R[LOC_ALERT_CAUSE_4]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_CAUSE_4 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_CAUSE_4_we),
    .wd     (LOC_ALERT_CAUSE_4_wd),

    // from internal hardware
    .de     (hw2reg.LOC_ALERT_CAUSE[4].de),
    .d      (hw2reg.LOC_ALERT_CAUSE[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CAUSE[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CAUSE_4_qs)
  );


  // Subregister 5 of Multireg LOC_ALERT_CAUSE
  // R[LOC_ALERT_CAUSE_5]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_CAUSE_5 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_CAUSE_5_we),
    .wd     (LOC_ALERT_CAUSE_5_wd),

    // from internal hardware
    .de     (hw2reg.LOC_ALERT_CAUSE[5].de),
    .d      (hw2reg.LOC_ALERT_CAUSE[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CAUSE[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CAUSE_5_qs)
  );


  // Subregister 6 of Multireg LOC_ALERT_CAUSE
  // R[LOC_ALERT_CAUSE_6]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_LOC_ALERT_CAUSE_6 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (LOC_ALERT_CAUSE_6_we),
    .wd     (LOC_ALERT_CAUSE_6_wd),

    // from internal hardware
    .de     (hw2reg.LOC_ALERT_CAUSE[6].de),
    .d      (hw2reg.LOC_ALERT_CAUSE[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.LOC_ALERT_CAUSE[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (LOC_ALERT_CAUSE_6_qs)
  );


  // R[CLASSA_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_CLASSA_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLASSA_REGWEN_we),
    .wd     (CLASSA_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_REGWEN_qs)
  );


  // R[CLASSA_CTRL_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSA_CTRL_SHADOWED_gated_we;
  assign CLASSA_CTRL_SHADOWED_gated_we = CLASSA_CTRL_SHADOWED_we & CLASSA_REGWEN_qs;
  //   F[EN]: 0:0


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSA_CTRL_SHADOWED_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_EN_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_EN_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_EN_storage_err)
  );

  //   F[LOCK]: 1:1


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSA_CTRL_SHADOWED_LOCK (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_LOCK_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.LOCK.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_LOCK_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_LOCK_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_LOCK_storage_err)
  );

  //   F[EN_E0]: 2:2


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSA_CTRL_SHADOWED_EN_E0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_EN_E0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.EN_E0.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_EN_E0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_EN_E0_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_EN_E0_storage_err)
  );

  //   F[EN_E1]: 3:3


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSA_CTRL_SHADOWED_EN_E1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_EN_E1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.EN_E1.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_EN_E1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_EN_E1_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_EN_E1_storage_err)
  );

  //   F[EN_E2]: 4:4


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSA_CTRL_SHADOWED_EN_E2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_EN_E2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.EN_E2.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_EN_E2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_EN_E2_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_EN_E2_storage_err)
  );

  //   F[EN_E3]: 5:5


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSA_CTRL_SHADOWED_EN_E3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_EN_E3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.EN_E3.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_EN_E3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_EN_E3_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_EN_E3_storage_err)
  );

  //   F[MAP_E0]: 7:6


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_CLASSA_CTRL_SHADOWED_MAP_E0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_MAP_E0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.MAP_E0.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_MAP_E0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_MAP_E0_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_MAP_E0_storage_err)
  );

  //   F[MAP_E1]: 9:8


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1)
  ) u_CLASSA_CTRL_SHADOWED_MAP_E1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_MAP_E1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.MAP_E1.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_MAP_E1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_MAP_E1_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_MAP_E1_storage_err)
  );

  //   F[MAP_E2]: 11:10


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_CLASSA_CTRL_SHADOWED_MAP_E2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_MAP_E2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.MAP_E2.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_MAP_E2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_MAP_E2_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_MAP_E2_storage_err)
  );

  //   F[MAP_E3]: 13:12


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h3)
  ) u_CLASSA_CTRL_SHADOWED_MAP_E3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CTRL_SHADOWED_re),
    .we     (CLASSA_CTRL_SHADOWED_gated_we),
    .wd     (CLASSA_CTRL_SHADOWED_MAP_E3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CTRL_SHADOWED.MAP_E3.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CTRL_SHADOWED_MAP_E3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CTRL_SHADOWED_MAP_E3_update_err),
    .err_storage (CLASSA_CTRL_SHADOWED_MAP_E3_storage_err)
  );


  // R[CLASSA_CLR_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_CLASSA_CLR_REGWEN (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLASSA_CLR_REGWEN_we),
    .wd     (CLASSA_CLR_REGWEN_wd),

    // from internal hardware
    .de     (hw2reg.CLASSA_CLR_REGWEN.de),
    .d      (hw2reg.CLASSA_CLR_REGWEN.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CLR_REGWEN_qs)
  );


  // R[CLASSA_CLR_SHADOWED]: V(False)
  logic CLASSA_CLR_SHADOWED_qe;
  logic [0:0] CLASSA_CLR_SHADOWED_flds_we;
  // Create REGWEN-gated WE signal
  logic CLASSA_CLR_SHADOWED_gated_we;
  assign CLASSA_CLR_SHADOWED_gated_we = CLASSA_CLR_SHADOWED_we & CLASSA_CLR_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSA_CLR_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CLR_SHADOWED_re),
    .we     (CLASSA_CLR_SHADOWED_gated_we),
    .wd     (CLASSA_CLR_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (CLASSA_CLR_SHADOWED_flds_we[0]),
    .q      (reg2hw.CLASSA_CLR_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CLR_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CLR_SHADOWED_update_err),
    .err_storage (CLASSA_CLR_SHADOWED_storage_err)
  );
  assign reg2hw.CLASSA_CLR_SHADOWED.qe = CLASSA_CLR_SHADOWED_qe;


  // R[CLASSA_ACCUM_CNT]: V(True)
  prim_subreg_ext #(
    .DW    (16)
  ) u_CLASSA_ACCUM_CNT (
    .re     (CLASSA_ACCUM_CNT_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSA_ACCUM_CNT.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSA_ACCUM_CNT_qs)
  );


  // R[CLASSA_ACCUM_THRESH_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSA_ACCUM_THRESH_SHADOWED_gated_we;
  assign CLASSA_ACCUM_THRESH_SHADOWED_gated_we = CLASSA_ACCUM_THRESH_SHADOWED_we & CLASSA_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0)
  ) u_CLASSA_ACCUM_THRESH_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_ACCUM_THRESH_SHADOWED_re),
    .we     (CLASSA_ACCUM_THRESH_SHADOWED_gated_we),
    .wd     (CLASSA_ACCUM_THRESH_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_ACCUM_THRESH_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_ACCUM_THRESH_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_ACCUM_THRESH_SHADOWED_update_err),
    .err_storage (CLASSA_ACCUM_THRESH_SHADOWED_storage_err)
  );


  // R[CLASSA_TIMEOUT_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSA_TIMEOUT_CYC_SHADOWED_gated_we;
  assign CLASSA_TIMEOUT_CYC_SHADOWED_gated_we = CLASSA_TIMEOUT_CYC_SHADOWED_we & CLASSA_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSA_TIMEOUT_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_TIMEOUT_CYC_SHADOWED_re),
    .we     (CLASSA_TIMEOUT_CYC_SHADOWED_gated_we),
    .wd     (CLASSA_TIMEOUT_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_TIMEOUT_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_TIMEOUT_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_TIMEOUT_CYC_SHADOWED_update_err),
    .err_storage (CLASSA_TIMEOUT_CYC_SHADOWED_storage_err)
  );


  // R[CLASSA_CRASHDUMP_TRIGGER_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSA_CRASHDUMP_TRIGGER_SHADOWED_gated_we;
  assign CLASSA_CRASHDUMP_TRIGGER_SHADOWED_gated_we =
    CLASSA_CRASHDUMP_TRIGGER_SHADOWED_we & CLASSA_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_CLASSA_CRASHDUMP_TRIGGER_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_CRASHDUMP_TRIGGER_SHADOWED_re),
    .we     (CLASSA_CRASHDUMP_TRIGGER_SHADOWED_gated_we),
    .wd     (CLASSA_CRASHDUMP_TRIGGER_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_CRASHDUMP_TRIGGER_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_CRASHDUMP_TRIGGER_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_CRASHDUMP_TRIGGER_SHADOWED_update_err),
    .err_storage (CLASSA_CRASHDUMP_TRIGGER_SHADOWED_storage_err)
  );


  // R[CLASSA_PHASE0_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSA_PHASE0_CYC_SHADOWED_gated_we;
  assign CLASSA_PHASE0_CYC_SHADOWED_gated_we = CLASSA_PHASE0_CYC_SHADOWED_we & CLASSA_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSA_PHASE0_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_PHASE0_CYC_SHADOWED_re),
    .we     (CLASSA_PHASE0_CYC_SHADOWED_gated_we),
    .wd     (CLASSA_PHASE0_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_PHASE0_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_PHASE0_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_PHASE0_CYC_SHADOWED_update_err),
    .err_storage (CLASSA_PHASE0_CYC_SHADOWED_storage_err)
  );


  // R[CLASSA_PHASE1_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSA_PHASE1_CYC_SHADOWED_gated_we;
  assign CLASSA_PHASE1_CYC_SHADOWED_gated_we = CLASSA_PHASE1_CYC_SHADOWED_we & CLASSA_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSA_PHASE1_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_PHASE1_CYC_SHADOWED_re),
    .we     (CLASSA_PHASE1_CYC_SHADOWED_gated_we),
    .wd     (CLASSA_PHASE1_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_PHASE1_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_PHASE1_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_PHASE1_CYC_SHADOWED_update_err),
    .err_storage (CLASSA_PHASE1_CYC_SHADOWED_storage_err)
  );


  // R[CLASSA_PHASE2_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSA_PHASE2_CYC_SHADOWED_gated_we;
  assign CLASSA_PHASE2_CYC_SHADOWED_gated_we = CLASSA_PHASE2_CYC_SHADOWED_we & CLASSA_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSA_PHASE2_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_PHASE2_CYC_SHADOWED_re),
    .we     (CLASSA_PHASE2_CYC_SHADOWED_gated_we),
    .wd     (CLASSA_PHASE2_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_PHASE2_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_PHASE2_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_PHASE2_CYC_SHADOWED_update_err),
    .err_storage (CLASSA_PHASE2_CYC_SHADOWED_storage_err)
  );


  // R[CLASSA_PHASE3_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSA_PHASE3_CYC_SHADOWED_gated_we;
  assign CLASSA_PHASE3_CYC_SHADOWED_gated_we = CLASSA_PHASE3_CYC_SHADOWED_we & CLASSA_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSA_PHASE3_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSA_PHASE3_CYC_SHADOWED_re),
    .we     (CLASSA_PHASE3_CYC_SHADOWED_gated_we),
    .wd     (CLASSA_PHASE3_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSA_PHASE3_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSA_PHASE3_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSA_PHASE3_CYC_SHADOWED_update_err),
    .err_storage (CLASSA_PHASE3_CYC_SHADOWED_storage_err)
  );


  // R[CLASSA_ESC_CNT]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_CLASSA_ESC_CNT (
    .re     (CLASSA_ESC_CNT_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSA_ESC_CNT.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSA_ESC_CNT_qs)
  );


  // R[CLASSA_STATE]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_CLASSA_STATE (
    .re     (CLASSA_STATE_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSA_STATE.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSA_STATE_qs)
  );


  // R[CLASSB_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_CLASSB_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLASSB_REGWEN_we),
    .wd     (CLASSB_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_REGWEN_qs)
  );


  // R[CLASSB_CTRL_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSB_CTRL_SHADOWED_gated_we;
  assign CLASSB_CTRL_SHADOWED_gated_we = CLASSB_CTRL_SHADOWED_we & CLASSB_REGWEN_qs;
  //   F[EN]: 0:0


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSB_CTRL_SHADOWED_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_EN_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_EN_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_EN_storage_err)
  );

  //   F[LOCK]: 1:1


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSB_CTRL_SHADOWED_LOCK (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_LOCK_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.LOCK.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_LOCK_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_LOCK_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_LOCK_storage_err)
  );

  //   F[EN_E0]: 2:2


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSB_CTRL_SHADOWED_EN_E0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_EN_E0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.EN_E0.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_EN_E0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_EN_E0_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_EN_E0_storage_err)
  );

  //   F[EN_E1]: 3:3


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSB_CTRL_SHADOWED_EN_E1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_EN_E1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.EN_E1.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_EN_E1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_EN_E1_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_EN_E1_storage_err)
  );

  //   F[EN_E2]: 4:4


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSB_CTRL_SHADOWED_EN_E2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_EN_E2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.EN_E2.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_EN_E2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_EN_E2_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_EN_E2_storage_err)
  );

  //   F[EN_E3]: 5:5


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSB_CTRL_SHADOWED_EN_E3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_EN_E3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.EN_E3.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_EN_E3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_EN_E3_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_EN_E3_storage_err)
  );

  //   F[MAP_E0]: 7:6


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_CLASSB_CTRL_SHADOWED_MAP_E0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_MAP_E0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.MAP_E0.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_MAP_E0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_MAP_E0_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_MAP_E0_storage_err)
  );

  //   F[MAP_E1]: 9:8


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1)
  ) u_CLASSB_CTRL_SHADOWED_MAP_E1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_MAP_E1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.MAP_E1.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_MAP_E1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_MAP_E1_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_MAP_E1_storage_err)
  );

  //   F[MAP_E2]: 11:10


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_CLASSB_CTRL_SHADOWED_MAP_E2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_MAP_E2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.MAP_E2.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_MAP_E2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_MAP_E2_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_MAP_E2_storage_err)
  );

  //   F[MAP_E3]: 13:12


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h3)
  ) u_CLASSB_CTRL_SHADOWED_MAP_E3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CTRL_SHADOWED_re),
    .we     (CLASSB_CTRL_SHADOWED_gated_we),
    .wd     (CLASSB_CTRL_SHADOWED_MAP_E3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CTRL_SHADOWED.MAP_E3.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CTRL_SHADOWED_MAP_E3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CTRL_SHADOWED_MAP_E3_update_err),
    .err_storage (CLASSB_CTRL_SHADOWED_MAP_E3_storage_err)
  );


  // R[CLASSB_CLR_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_CLASSB_CLR_REGWEN (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLASSB_CLR_REGWEN_we),
    .wd     (CLASSB_CLR_REGWEN_wd),

    // from internal hardware
    .de     (hw2reg.CLASSB_CLR_REGWEN.de),
    .d      (hw2reg.CLASSB_CLR_REGWEN.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CLR_REGWEN_qs)
  );


  // R[CLASSB_CLR_SHADOWED]: V(False)
  logic CLASSB_CLR_SHADOWED_qe;
  logic [0:0] CLASSB_CLR_SHADOWED_flds_we;
  // Create REGWEN-gated WE signal
  logic CLASSB_CLR_SHADOWED_gated_we;
  assign CLASSB_CLR_SHADOWED_gated_we = CLASSB_CLR_SHADOWED_we & CLASSB_CLR_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSB_CLR_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CLR_SHADOWED_re),
    .we     (CLASSB_CLR_SHADOWED_gated_we),
    .wd     (CLASSB_CLR_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (CLASSB_CLR_SHADOWED_flds_we[0]),
    .q      (reg2hw.CLASSB_CLR_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CLR_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CLR_SHADOWED_update_err),
    .err_storage (CLASSB_CLR_SHADOWED_storage_err)
  );
  assign reg2hw.CLASSB_CLR_SHADOWED.qe = CLASSB_CLR_SHADOWED_qe;


  // R[CLASSB_ACCUM_CNT]: V(True)
  prim_subreg_ext #(
    .DW    (16)
  ) u_CLASSB_ACCUM_CNT (
    .re     (CLASSB_ACCUM_CNT_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSB_ACCUM_CNT.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSB_ACCUM_CNT_qs)
  );


  // R[CLASSB_ACCUM_THRESH_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSB_ACCUM_THRESH_SHADOWED_gated_we;
  assign CLASSB_ACCUM_THRESH_SHADOWED_gated_we = CLASSB_ACCUM_THRESH_SHADOWED_we & CLASSB_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0)
  ) u_CLASSB_ACCUM_THRESH_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_ACCUM_THRESH_SHADOWED_re),
    .we     (CLASSB_ACCUM_THRESH_SHADOWED_gated_we),
    .wd     (CLASSB_ACCUM_THRESH_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_ACCUM_THRESH_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_ACCUM_THRESH_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_ACCUM_THRESH_SHADOWED_update_err),
    .err_storage (CLASSB_ACCUM_THRESH_SHADOWED_storage_err)
  );


  // R[CLASSB_TIMEOUT_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSB_TIMEOUT_CYC_SHADOWED_gated_we;
  assign CLASSB_TIMEOUT_CYC_SHADOWED_gated_we = CLASSB_TIMEOUT_CYC_SHADOWED_we & CLASSB_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSB_TIMEOUT_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_TIMEOUT_CYC_SHADOWED_re),
    .we     (CLASSB_TIMEOUT_CYC_SHADOWED_gated_we),
    .wd     (CLASSB_TIMEOUT_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_TIMEOUT_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_TIMEOUT_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_TIMEOUT_CYC_SHADOWED_update_err),
    .err_storage (CLASSB_TIMEOUT_CYC_SHADOWED_storage_err)
  );


  // R[CLASSB_CRASHDUMP_TRIGGER_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSB_CRASHDUMP_TRIGGER_SHADOWED_gated_we;
  assign CLASSB_CRASHDUMP_TRIGGER_SHADOWED_gated_we =
    CLASSB_CRASHDUMP_TRIGGER_SHADOWED_we & CLASSB_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_CLASSB_CRASHDUMP_TRIGGER_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_CRASHDUMP_TRIGGER_SHADOWED_re),
    .we     (CLASSB_CRASHDUMP_TRIGGER_SHADOWED_gated_we),
    .wd     (CLASSB_CRASHDUMP_TRIGGER_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_CRASHDUMP_TRIGGER_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_CRASHDUMP_TRIGGER_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_CRASHDUMP_TRIGGER_SHADOWED_update_err),
    .err_storage (CLASSB_CRASHDUMP_TRIGGER_SHADOWED_storage_err)
  );


  // R[CLASSB_PHASE0_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSB_PHASE0_CYC_SHADOWED_gated_we;
  assign CLASSB_PHASE0_CYC_SHADOWED_gated_we = CLASSB_PHASE0_CYC_SHADOWED_we & CLASSB_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSB_PHASE0_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_PHASE0_CYC_SHADOWED_re),
    .we     (CLASSB_PHASE0_CYC_SHADOWED_gated_we),
    .wd     (CLASSB_PHASE0_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_PHASE0_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_PHASE0_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_PHASE0_CYC_SHADOWED_update_err),
    .err_storage (CLASSB_PHASE0_CYC_SHADOWED_storage_err)
  );


  // R[CLASSB_PHASE1_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSB_PHASE1_CYC_SHADOWED_gated_we;
  assign CLASSB_PHASE1_CYC_SHADOWED_gated_we = CLASSB_PHASE1_CYC_SHADOWED_we & CLASSB_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSB_PHASE1_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_PHASE1_CYC_SHADOWED_re),
    .we     (CLASSB_PHASE1_CYC_SHADOWED_gated_we),
    .wd     (CLASSB_PHASE1_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_PHASE1_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_PHASE1_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_PHASE1_CYC_SHADOWED_update_err),
    .err_storage (CLASSB_PHASE1_CYC_SHADOWED_storage_err)
  );


  // R[CLASSB_PHASE2_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSB_PHASE2_CYC_SHADOWED_gated_we;
  assign CLASSB_PHASE2_CYC_SHADOWED_gated_we = CLASSB_PHASE2_CYC_SHADOWED_we & CLASSB_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSB_PHASE2_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_PHASE2_CYC_SHADOWED_re),
    .we     (CLASSB_PHASE2_CYC_SHADOWED_gated_we),
    .wd     (CLASSB_PHASE2_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_PHASE2_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_PHASE2_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_PHASE2_CYC_SHADOWED_update_err),
    .err_storage (CLASSB_PHASE2_CYC_SHADOWED_storage_err)
  );


  // R[CLASSB_PHASE3_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSB_PHASE3_CYC_SHADOWED_gated_we;
  assign CLASSB_PHASE3_CYC_SHADOWED_gated_we = CLASSB_PHASE3_CYC_SHADOWED_we & CLASSB_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSB_PHASE3_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSB_PHASE3_CYC_SHADOWED_re),
    .we     (CLASSB_PHASE3_CYC_SHADOWED_gated_we),
    .wd     (CLASSB_PHASE3_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSB_PHASE3_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSB_PHASE3_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSB_PHASE3_CYC_SHADOWED_update_err),
    .err_storage (CLASSB_PHASE3_CYC_SHADOWED_storage_err)
  );


  // R[CLASSB_ESC_CNT]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_CLASSB_ESC_CNT (
    .re     (CLASSB_ESC_CNT_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSB_ESC_CNT.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSB_ESC_CNT_qs)
  );


  // R[CLASSB_STATE]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_CLASSB_STATE (
    .re     (CLASSB_STATE_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSB_STATE.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSB_STATE_qs)
  );


  // R[CLASSC_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_CLASSC_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLASSC_REGWEN_we),
    .wd     (CLASSC_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_REGWEN_qs)
  );


  // R[CLASSC_CTRL_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSC_CTRL_SHADOWED_gated_we;
  assign CLASSC_CTRL_SHADOWED_gated_we = CLASSC_CTRL_SHADOWED_we & CLASSC_REGWEN_qs;
  //   F[EN]: 0:0


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSC_CTRL_SHADOWED_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_EN_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_EN_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_EN_storage_err)
  );

  //   F[LOCK]: 1:1


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSC_CTRL_SHADOWED_LOCK (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_LOCK_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.LOCK.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_LOCK_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_LOCK_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_LOCK_storage_err)
  );

  //   F[EN_E0]: 2:2


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSC_CTRL_SHADOWED_EN_E0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_EN_E0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.EN_E0.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_EN_E0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_EN_E0_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_EN_E0_storage_err)
  );

  //   F[EN_E1]: 3:3


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSC_CTRL_SHADOWED_EN_E1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_EN_E1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.EN_E1.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_EN_E1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_EN_E1_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_EN_E1_storage_err)
  );

  //   F[EN_E2]: 4:4


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSC_CTRL_SHADOWED_EN_E2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_EN_E2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.EN_E2.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_EN_E2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_EN_E2_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_EN_E2_storage_err)
  );

  //   F[EN_E3]: 5:5


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSC_CTRL_SHADOWED_EN_E3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_EN_E3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.EN_E3.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_EN_E3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_EN_E3_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_EN_E3_storage_err)
  );

  //   F[MAP_E0]: 7:6


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_CLASSC_CTRL_SHADOWED_MAP_E0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_MAP_E0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.MAP_E0.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_MAP_E0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_MAP_E0_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_MAP_E0_storage_err)
  );

  //   F[MAP_E1]: 9:8


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1)
  ) u_CLASSC_CTRL_SHADOWED_MAP_E1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_MAP_E1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.MAP_E1.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_MAP_E1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_MAP_E1_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_MAP_E1_storage_err)
  );

  //   F[MAP_E2]: 11:10


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_CLASSC_CTRL_SHADOWED_MAP_E2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_MAP_E2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.MAP_E2.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_MAP_E2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_MAP_E2_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_MAP_E2_storage_err)
  );

  //   F[MAP_E3]: 13:12


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h3)
  ) u_CLASSC_CTRL_SHADOWED_MAP_E3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CTRL_SHADOWED_re),
    .we     (CLASSC_CTRL_SHADOWED_gated_we),
    .wd     (CLASSC_CTRL_SHADOWED_MAP_E3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CTRL_SHADOWED.MAP_E3.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CTRL_SHADOWED_MAP_E3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CTRL_SHADOWED_MAP_E3_update_err),
    .err_storage (CLASSC_CTRL_SHADOWED_MAP_E3_storage_err)
  );


  // R[CLASSC_CLR_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_CLASSC_CLR_REGWEN (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLASSC_CLR_REGWEN_we),
    .wd     (CLASSC_CLR_REGWEN_wd),

    // from internal hardware
    .de     (hw2reg.CLASSC_CLR_REGWEN.de),
    .d      (hw2reg.CLASSC_CLR_REGWEN.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CLR_REGWEN_qs)
  );


  // R[CLASSC_CLR_SHADOWED]: V(False)
  logic CLASSC_CLR_SHADOWED_qe;
  logic [0:0] CLASSC_CLR_SHADOWED_flds_we;
  // Create REGWEN-gated WE signal
  logic CLASSC_CLR_SHADOWED_gated_we;
  assign CLASSC_CLR_SHADOWED_gated_we = CLASSC_CLR_SHADOWED_we & CLASSC_CLR_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSC_CLR_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CLR_SHADOWED_re),
    .we     (CLASSC_CLR_SHADOWED_gated_we),
    .wd     (CLASSC_CLR_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (CLASSC_CLR_SHADOWED_flds_we[0]),
    .q      (reg2hw.CLASSC_CLR_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CLR_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CLR_SHADOWED_update_err),
    .err_storage (CLASSC_CLR_SHADOWED_storage_err)
  );
  assign reg2hw.CLASSC_CLR_SHADOWED.qe = CLASSC_CLR_SHADOWED_qe;


  // R[CLASSC_ACCUM_CNT]: V(True)
  prim_subreg_ext #(
    .DW    (16)
  ) u_CLASSC_ACCUM_CNT (
    .re     (CLASSC_ACCUM_CNT_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSC_ACCUM_CNT.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSC_ACCUM_CNT_qs)
  );


  // R[CLASSC_ACCUM_THRESH_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSC_ACCUM_THRESH_SHADOWED_gated_we;
  assign CLASSC_ACCUM_THRESH_SHADOWED_gated_we = CLASSC_ACCUM_THRESH_SHADOWED_we & CLASSC_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0)
  ) u_CLASSC_ACCUM_THRESH_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_ACCUM_THRESH_SHADOWED_re),
    .we     (CLASSC_ACCUM_THRESH_SHADOWED_gated_we),
    .wd     (CLASSC_ACCUM_THRESH_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_ACCUM_THRESH_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_ACCUM_THRESH_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_ACCUM_THRESH_SHADOWED_update_err),
    .err_storage (CLASSC_ACCUM_THRESH_SHADOWED_storage_err)
  );


  // R[CLASSC_TIMEOUT_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSC_TIMEOUT_CYC_SHADOWED_gated_we;
  assign CLASSC_TIMEOUT_CYC_SHADOWED_gated_we = CLASSC_TIMEOUT_CYC_SHADOWED_we & CLASSC_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSC_TIMEOUT_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_TIMEOUT_CYC_SHADOWED_re),
    .we     (CLASSC_TIMEOUT_CYC_SHADOWED_gated_we),
    .wd     (CLASSC_TIMEOUT_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_TIMEOUT_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_TIMEOUT_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_TIMEOUT_CYC_SHADOWED_update_err),
    .err_storage (CLASSC_TIMEOUT_CYC_SHADOWED_storage_err)
  );


  // R[CLASSC_CRASHDUMP_TRIGGER_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSC_CRASHDUMP_TRIGGER_SHADOWED_gated_we;
  assign CLASSC_CRASHDUMP_TRIGGER_SHADOWED_gated_we =
    CLASSC_CRASHDUMP_TRIGGER_SHADOWED_we & CLASSC_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_CLASSC_CRASHDUMP_TRIGGER_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_CRASHDUMP_TRIGGER_SHADOWED_re),
    .we     (CLASSC_CRASHDUMP_TRIGGER_SHADOWED_gated_we),
    .wd     (CLASSC_CRASHDUMP_TRIGGER_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_CRASHDUMP_TRIGGER_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_CRASHDUMP_TRIGGER_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_CRASHDUMP_TRIGGER_SHADOWED_update_err),
    .err_storage (CLASSC_CRASHDUMP_TRIGGER_SHADOWED_storage_err)
  );


  // R[CLASSC_PHASE0_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSC_PHASE0_CYC_SHADOWED_gated_we;
  assign CLASSC_PHASE0_CYC_SHADOWED_gated_we = CLASSC_PHASE0_CYC_SHADOWED_we & CLASSC_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSC_PHASE0_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_PHASE0_CYC_SHADOWED_re),
    .we     (CLASSC_PHASE0_CYC_SHADOWED_gated_we),
    .wd     (CLASSC_PHASE0_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_PHASE0_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_PHASE0_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_PHASE0_CYC_SHADOWED_update_err),
    .err_storage (CLASSC_PHASE0_CYC_SHADOWED_storage_err)
  );


  // R[CLASSC_PHASE1_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSC_PHASE1_CYC_SHADOWED_gated_we;
  assign CLASSC_PHASE1_CYC_SHADOWED_gated_we = CLASSC_PHASE1_CYC_SHADOWED_we & CLASSC_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSC_PHASE1_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_PHASE1_CYC_SHADOWED_re),
    .we     (CLASSC_PHASE1_CYC_SHADOWED_gated_we),
    .wd     (CLASSC_PHASE1_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_PHASE1_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_PHASE1_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_PHASE1_CYC_SHADOWED_update_err),
    .err_storage (CLASSC_PHASE1_CYC_SHADOWED_storage_err)
  );


  // R[CLASSC_PHASE2_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSC_PHASE2_CYC_SHADOWED_gated_we;
  assign CLASSC_PHASE2_CYC_SHADOWED_gated_we = CLASSC_PHASE2_CYC_SHADOWED_we & CLASSC_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSC_PHASE2_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_PHASE2_CYC_SHADOWED_re),
    .we     (CLASSC_PHASE2_CYC_SHADOWED_gated_we),
    .wd     (CLASSC_PHASE2_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_PHASE2_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_PHASE2_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_PHASE2_CYC_SHADOWED_update_err),
    .err_storage (CLASSC_PHASE2_CYC_SHADOWED_storage_err)
  );


  // R[CLASSC_PHASE3_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSC_PHASE3_CYC_SHADOWED_gated_we;
  assign CLASSC_PHASE3_CYC_SHADOWED_gated_we = CLASSC_PHASE3_CYC_SHADOWED_we & CLASSC_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSC_PHASE3_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSC_PHASE3_CYC_SHADOWED_re),
    .we     (CLASSC_PHASE3_CYC_SHADOWED_gated_we),
    .wd     (CLASSC_PHASE3_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSC_PHASE3_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSC_PHASE3_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSC_PHASE3_CYC_SHADOWED_update_err),
    .err_storage (CLASSC_PHASE3_CYC_SHADOWED_storage_err)
  );


  // R[CLASSC_ESC_CNT]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_CLASSC_ESC_CNT (
    .re     (CLASSC_ESC_CNT_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSC_ESC_CNT.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSC_ESC_CNT_qs)
  );


  // R[CLASSC_STATE]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_CLASSC_STATE (
    .re     (CLASSC_STATE_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSC_STATE.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSC_STATE_qs)
  );


  // R[CLASSD_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_CLASSD_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLASSD_REGWEN_we),
    .wd     (CLASSD_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_REGWEN_qs)
  );


  // R[CLASSD_CTRL_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSD_CTRL_SHADOWED_gated_we;
  assign CLASSD_CTRL_SHADOWED_gated_we = CLASSD_CTRL_SHADOWED_we & CLASSD_REGWEN_qs;
  //   F[EN]: 0:0


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSD_CTRL_SHADOWED_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.EN.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_EN_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_EN_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_EN_storage_err)
  );

  //   F[LOCK]: 1:1


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSD_CTRL_SHADOWED_LOCK (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_LOCK_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.LOCK.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_LOCK_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_LOCK_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_LOCK_storage_err)
  );

  //   F[EN_E0]: 2:2


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSD_CTRL_SHADOWED_EN_E0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_EN_E0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.EN_E0.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_EN_E0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_EN_E0_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_EN_E0_storage_err)
  );

  //   F[EN_E1]: 3:3


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSD_CTRL_SHADOWED_EN_E1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_EN_E1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.EN_E1.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_EN_E1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_EN_E1_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_EN_E1_storage_err)
  );

  //   F[EN_E2]: 4:4


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSD_CTRL_SHADOWED_EN_E2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_EN_E2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.EN_E2.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_EN_E2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_EN_E2_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_EN_E2_storage_err)
  );

  //   F[EN_E3]: 5:5


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_CLASSD_CTRL_SHADOWED_EN_E3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_EN_E3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.EN_E3.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_EN_E3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_EN_E3_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_EN_E3_storage_err)
  );

  //   F[MAP_E0]: 7:6


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_CLASSD_CTRL_SHADOWED_MAP_E0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_MAP_E0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.MAP_E0.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_MAP_E0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_MAP_E0_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_MAP_E0_storage_err)
  );

  //   F[MAP_E1]: 9:8


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1)
  ) u_CLASSD_CTRL_SHADOWED_MAP_E1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_MAP_E1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.MAP_E1.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_MAP_E1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_MAP_E1_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_MAP_E1_storage_err)
  );

  //   F[MAP_E2]: 11:10


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_CLASSD_CTRL_SHADOWED_MAP_E2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_MAP_E2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.MAP_E2.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_MAP_E2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_MAP_E2_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_MAP_E2_storage_err)
  );

  //   F[MAP_E3]: 13:12


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h3)
  ) u_CLASSD_CTRL_SHADOWED_MAP_E3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CTRL_SHADOWED_re),
    .we     (CLASSD_CTRL_SHADOWED_gated_we),
    .wd     (CLASSD_CTRL_SHADOWED_MAP_E3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CTRL_SHADOWED.MAP_E3.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CTRL_SHADOWED_MAP_E3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CTRL_SHADOWED_MAP_E3_update_err),
    .err_storage (CLASSD_CTRL_SHADOWED_MAP_E3_storage_err)
  );


  // R[CLASSD_CLR_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_CLASSD_CLR_REGWEN (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (CLASSD_CLR_REGWEN_we),
    .wd     (CLASSD_CLR_REGWEN_wd),

    // from internal hardware
    .de     (hw2reg.CLASSD_CLR_REGWEN.de),
    .d      (hw2reg.CLASSD_CLR_REGWEN.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CLR_REGWEN_qs)
  );


  // R[CLASSD_CLR_SHADOWED]: V(False)
  logic CLASSD_CLR_SHADOWED_qe;
  logic [0:0] CLASSD_CLR_SHADOWED_flds_we;
  // Create REGWEN-gated WE signal
  logic CLASSD_CLR_SHADOWED_gated_we;
  assign CLASSD_CLR_SHADOWED_gated_we = CLASSD_CLR_SHADOWED_we & CLASSD_CLR_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_CLASSD_CLR_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CLR_SHADOWED_re),
    .we     (CLASSD_CLR_SHADOWED_gated_we),
    .wd     (CLASSD_CLR_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (CLASSD_CLR_SHADOWED_flds_we[0]),
    .q      (reg2hw.CLASSD_CLR_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CLR_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CLR_SHADOWED_update_err),
    .err_storage (CLASSD_CLR_SHADOWED_storage_err)
  );
  assign reg2hw.CLASSD_CLR_SHADOWED.qe = CLASSD_CLR_SHADOWED_qe;


  // R[CLASSD_ACCUM_CNT]: V(True)
  prim_subreg_ext #(
    .DW    (16)
  ) u_CLASSD_ACCUM_CNT (
    .re     (CLASSD_ACCUM_CNT_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSD_ACCUM_CNT.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSD_ACCUM_CNT_qs)
  );


  // R[CLASSD_ACCUM_THRESH_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSD_ACCUM_THRESH_SHADOWED_gated_we;
  assign CLASSD_ACCUM_THRESH_SHADOWED_gated_we = CLASSD_ACCUM_THRESH_SHADOWED_we & CLASSD_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0)
  ) u_CLASSD_ACCUM_THRESH_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_ACCUM_THRESH_SHADOWED_re),
    .we     (CLASSD_ACCUM_THRESH_SHADOWED_gated_we),
    .wd     (CLASSD_ACCUM_THRESH_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_ACCUM_THRESH_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_ACCUM_THRESH_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_ACCUM_THRESH_SHADOWED_update_err),
    .err_storage (CLASSD_ACCUM_THRESH_SHADOWED_storage_err)
  );


  // R[CLASSD_TIMEOUT_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSD_TIMEOUT_CYC_SHADOWED_gated_we;
  assign CLASSD_TIMEOUT_CYC_SHADOWED_gated_we = CLASSD_TIMEOUT_CYC_SHADOWED_we & CLASSD_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSD_TIMEOUT_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_TIMEOUT_CYC_SHADOWED_re),
    .we     (CLASSD_TIMEOUT_CYC_SHADOWED_gated_we),
    .wd     (CLASSD_TIMEOUT_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_TIMEOUT_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_TIMEOUT_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_TIMEOUT_CYC_SHADOWED_update_err),
    .err_storage (CLASSD_TIMEOUT_CYC_SHADOWED_storage_err)
  );


  // R[CLASSD_CRASHDUMP_TRIGGER_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSD_CRASHDUMP_TRIGGER_SHADOWED_gated_we;
  assign CLASSD_CRASHDUMP_TRIGGER_SHADOWED_gated_we =
    CLASSD_CRASHDUMP_TRIGGER_SHADOWED_we & CLASSD_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_CLASSD_CRASHDUMP_TRIGGER_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_CRASHDUMP_TRIGGER_SHADOWED_re),
    .we     (CLASSD_CRASHDUMP_TRIGGER_SHADOWED_gated_we),
    .wd     (CLASSD_CRASHDUMP_TRIGGER_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_CRASHDUMP_TRIGGER_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_CRASHDUMP_TRIGGER_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_CRASHDUMP_TRIGGER_SHADOWED_update_err),
    .err_storage (CLASSD_CRASHDUMP_TRIGGER_SHADOWED_storage_err)
  );


  // R[CLASSD_PHASE0_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSD_PHASE0_CYC_SHADOWED_gated_we;
  assign CLASSD_PHASE0_CYC_SHADOWED_gated_we = CLASSD_PHASE0_CYC_SHADOWED_we & CLASSD_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSD_PHASE0_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_PHASE0_CYC_SHADOWED_re),
    .we     (CLASSD_PHASE0_CYC_SHADOWED_gated_we),
    .wd     (CLASSD_PHASE0_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_PHASE0_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_PHASE0_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_PHASE0_CYC_SHADOWED_update_err),
    .err_storage (CLASSD_PHASE0_CYC_SHADOWED_storage_err)
  );


  // R[CLASSD_PHASE1_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSD_PHASE1_CYC_SHADOWED_gated_we;
  assign CLASSD_PHASE1_CYC_SHADOWED_gated_we = CLASSD_PHASE1_CYC_SHADOWED_we & CLASSD_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSD_PHASE1_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_PHASE1_CYC_SHADOWED_re),
    .we     (CLASSD_PHASE1_CYC_SHADOWED_gated_we),
    .wd     (CLASSD_PHASE1_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_PHASE1_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_PHASE1_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_PHASE1_CYC_SHADOWED_update_err),
    .err_storage (CLASSD_PHASE1_CYC_SHADOWED_storage_err)
  );


  // R[CLASSD_PHASE2_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSD_PHASE2_CYC_SHADOWED_gated_we;
  assign CLASSD_PHASE2_CYC_SHADOWED_gated_we = CLASSD_PHASE2_CYC_SHADOWED_we & CLASSD_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSD_PHASE2_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_PHASE2_CYC_SHADOWED_re),
    .we     (CLASSD_PHASE2_CYC_SHADOWED_gated_we),
    .wd     (CLASSD_PHASE2_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_PHASE2_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_PHASE2_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_PHASE2_CYC_SHADOWED_update_err),
    .err_storage (CLASSD_PHASE2_CYC_SHADOWED_storage_err)
  );


  // R[CLASSD_PHASE3_CYC_SHADOWED]: V(False)
  // Create REGWEN-gated WE signal
  logic CLASSD_PHASE3_CYC_SHADOWED_gated_we;
  assign CLASSD_PHASE3_CYC_SHADOWED_gated_we = CLASSD_PHASE3_CYC_SHADOWED_we & CLASSD_REGWEN_qs;


  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_CLASSD_PHASE3_CYC_SHADOWED (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (CLASSD_PHASE3_CYC_SHADOWED_re),
    .we     (CLASSD_PHASE3_CYC_SHADOWED_gated_we),
    .wd     (CLASSD_PHASE3_CYC_SHADOWED_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.CLASSD_PHASE3_CYC_SHADOWED.q),
    .ds     (),

    // to register interface (read)
    .qs     (CLASSD_PHASE3_CYC_SHADOWED_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (CLASSD_PHASE3_CYC_SHADOWED_update_err),
    .err_storage (CLASSD_PHASE3_CYC_SHADOWED_storage_err)
  );


  // R[CLASSD_ESC_CNT]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_CLASSD_ESC_CNT (
    .re     (CLASSD_ESC_CNT_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSD_ESC_CNT.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSD_ESC_CNT_qs)
  );


  // R[CLASSD_STATE]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_CLASSD_STATE (
    .re     (CLASSD_STATE_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.CLASSD_STATE.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (CLASSD_STATE_qs)
  );



  logic [15:0]  reqRoleVec;
  RDP_DECODE  #(.ENC_WID(4))
    raclRoleXDEC  (.dec(reqRoleVec),  .enc(tl_i.a_user.rsvd[3:0])); // incoming RACL, assigned in scsctnif.sv

  logic [345:0] addr_hit;
  logic [345:0] addrHitNRdAllowed;
  logic [345:0] addrHitNWrAllowed;
  always_comb begin
    addr_hit   = '0;
    addrHitNRdAllowed = '0;
    addrHitNWrAllowed = '0;

    addr_hit[  0]          = (reg_addr == ALERT_HANDLER_INTR_STATE_OFFSET);  // INTR_STATE
    addrHitNRdAllowed[  0] = (reg_addr == ALERT_HANDLER_INTR_STATE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  0] = (reg_addr == ALERT_HANDLER_INTR_STATE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  1]          = (reg_addr == ALERT_HANDLER_INTR_ENABLE_OFFSET);  // INTR_ENABLE
    addrHitNRdAllowed[  1] = (reg_addr == ALERT_HANDLER_INTR_ENABLE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  1] = (reg_addr == ALERT_HANDLER_INTR_ENABLE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  2]          = (reg_addr == ALERT_HANDLER_INTR_TEST_OFFSET);  // INTR_TEST
    addrHitNRdAllowed[  2] = (reg_addr == ALERT_HANDLER_INTR_TEST_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  2] = (reg_addr == ALERT_HANDLER_INTR_TEST_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  3]          = (reg_addr == ALERT_HANDLER_PING_TIMER_REGWEN_OFFSET);  // PING_TIMER_REGWEN
    addrHitNRdAllowed[  3] = (reg_addr == ALERT_HANDLER_PING_TIMER_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  3] = (reg_addr == ALERT_HANDLER_PING_TIMER_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  4]          = (reg_addr == ALERT_HANDLER_PING_TIMEOUT_CYC_SHADOWED_OFFSET);  // PING_TIMEOUT_CYC_SHADOWED
    addrHitNRdAllowed[  4] = (reg_addr == ALERT_HANDLER_PING_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  4] = (reg_addr == ALERT_HANDLER_PING_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  5]          = (reg_addr == ALERT_HANDLER_PING_TIMER_EN_SHADOWED_OFFSET);  // PING_TIMER_EN_SHADOWED
    addrHitNRdAllowed[  5] = (reg_addr == ALERT_HANDLER_PING_TIMER_EN_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  5] = (reg_addr == ALERT_HANDLER_PING_TIMER_EN_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  6]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_0_OFFSET);  // ALERT_REGWEN_0
    addrHitNRdAllowed[  6] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  6] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  7]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_1_OFFSET);  // ALERT_REGWEN_1
    addrHitNRdAllowed[  7] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  7] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  8]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_2_OFFSET);  // ALERT_REGWEN_2
    addrHitNRdAllowed[  8] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  8] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  9]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_3_OFFSET);  // ALERT_REGWEN_3
    addrHitNRdAllowed[  9] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  9] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 10]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_4_OFFSET);  // ALERT_REGWEN_4
    addrHitNRdAllowed[ 10] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 10] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 11]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_5_OFFSET);  // ALERT_REGWEN_5
    addrHitNRdAllowed[ 11] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 11] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 12]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_6_OFFSET);  // ALERT_REGWEN_6
    addrHitNRdAllowed[ 12] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 12] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 13]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_7_OFFSET);  // ALERT_REGWEN_7
    addrHitNRdAllowed[ 13] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 13] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 14]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_8_OFFSET);  // ALERT_REGWEN_8
    addrHitNRdAllowed[ 14] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 14] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 15]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_9_OFFSET);  // ALERT_REGWEN_9
    addrHitNRdAllowed[ 15] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_9_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 15] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_9_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 16]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_10_OFFSET);  // ALERT_REGWEN_10
    addrHitNRdAllowed[ 16] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_10_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 16] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_10_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 17]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_11_OFFSET);  // ALERT_REGWEN_11
    addrHitNRdAllowed[ 17] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_11_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 17] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_11_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 18]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_12_OFFSET);  // ALERT_REGWEN_12
    addrHitNRdAllowed[ 18] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_12_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 18] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_12_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 19]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_13_OFFSET);  // ALERT_REGWEN_13
    addrHitNRdAllowed[ 19] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_13_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 19] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_13_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 20]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_14_OFFSET);  // ALERT_REGWEN_14
    addrHitNRdAllowed[ 20] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_14_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 20] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_14_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 21]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_15_OFFSET);  // ALERT_REGWEN_15
    addrHitNRdAllowed[ 21] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_15_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 21] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_15_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 22]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_16_OFFSET);  // ALERT_REGWEN_16
    addrHitNRdAllowed[ 22] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_16_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 22] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_16_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 23]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_17_OFFSET);  // ALERT_REGWEN_17
    addrHitNRdAllowed[ 23] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_17_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 23] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_17_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 24]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_18_OFFSET);  // ALERT_REGWEN_18
    addrHitNRdAllowed[ 24] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_18_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 24] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_18_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 25]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_19_OFFSET);  // ALERT_REGWEN_19
    addrHitNRdAllowed[ 25] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_19_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 25] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_19_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 26]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_20_OFFSET);  // ALERT_REGWEN_20
    addrHitNRdAllowed[ 26] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_20_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 26] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_20_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 27]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_21_OFFSET);  // ALERT_REGWEN_21
    addrHitNRdAllowed[ 27] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_21_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 27] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_21_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 28]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_22_OFFSET);  // ALERT_REGWEN_22
    addrHitNRdAllowed[ 28] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_22_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 28] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_22_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 29]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_23_OFFSET);  // ALERT_REGWEN_23
    addrHitNRdAllowed[ 29] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_23_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 29] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_23_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 30]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_24_OFFSET);  // ALERT_REGWEN_24
    addrHitNRdAllowed[ 30] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_24_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 30] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_24_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 31]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_25_OFFSET);  // ALERT_REGWEN_25
    addrHitNRdAllowed[ 31] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_25_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 31] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_25_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 32]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_26_OFFSET);  // ALERT_REGWEN_26
    addrHitNRdAllowed[ 32] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_26_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 32] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_26_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 33]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_27_OFFSET);  // ALERT_REGWEN_27
    addrHitNRdAllowed[ 33] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_27_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 33] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_27_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 34]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_28_OFFSET);  // ALERT_REGWEN_28
    addrHitNRdAllowed[ 34] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_28_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 34] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_28_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 35]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_29_OFFSET);  // ALERT_REGWEN_29
    addrHitNRdAllowed[ 35] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_29_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 35] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_29_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 36]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_30_OFFSET);  // ALERT_REGWEN_30
    addrHitNRdAllowed[ 36] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_30_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 36] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_30_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 37]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_31_OFFSET);  // ALERT_REGWEN_31
    addrHitNRdAllowed[ 37] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_31_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 37] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_31_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 38]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_32_OFFSET);  // ALERT_REGWEN_32
    addrHitNRdAllowed[ 38] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_32_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 38] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_32_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 39]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_33_OFFSET);  // ALERT_REGWEN_33
    addrHitNRdAllowed[ 39] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_33_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 39] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_33_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 40]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_34_OFFSET);  // ALERT_REGWEN_34
    addrHitNRdAllowed[ 40] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_34_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 40] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_34_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 41]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_35_OFFSET);  // ALERT_REGWEN_35
    addrHitNRdAllowed[ 41] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_35_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 41] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_35_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 42]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_36_OFFSET);  // ALERT_REGWEN_36
    addrHitNRdAllowed[ 42] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_36_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 42] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_36_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 43]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_37_OFFSET);  // ALERT_REGWEN_37
    addrHitNRdAllowed[ 43] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_37_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 43] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_37_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 44]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_38_OFFSET);  // ALERT_REGWEN_38
    addrHitNRdAllowed[ 44] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_38_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 44] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_38_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 45]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_39_OFFSET);  // ALERT_REGWEN_39
    addrHitNRdAllowed[ 45] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_39_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 45] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_39_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 46]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_40_OFFSET);  // ALERT_REGWEN_40
    addrHitNRdAllowed[ 46] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_40_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 46] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_40_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 47]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_41_OFFSET);  // ALERT_REGWEN_41
    addrHitNRdAllowed[ 47] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_41_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 47] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_41_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 48]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_42_OFFSET);  // ALERT_REGWEN_42
    addrHitNRdAllowed[ 48] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_42_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 48] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_42_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 49]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_43_OFFSET);  // ALERT_REGWEN_43
    addrHitNRdAllowed[ 49] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_43_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 49] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_43_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 50]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_44_OFFSET);  // ALERT_REGWEN_44
    addrHitNRdAllowed[ 50] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_44_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 50] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_44_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 51]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_45_OFFSET);  // ALERT_REGWEN_45
    addrHitNRdAllowed[ 51] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_45_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 51] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_45_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 52]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_46_OFFSET);  // ALERT_REGWEN_46
    addrHitNRdAllowed[ 52] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_46_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 52] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_46_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 53]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_47_OFFSET);  // ALERT_REGWEN_47
    addrHitNRdAllowed[ 53] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_47_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 53] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_47_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 54]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_48_OFFSET);  // ALERT_REGWEN_48
    addrHitNRdAllowed[ 54] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_48_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 54] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_48_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 55]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_49_OFFSET);  // ALERT_REGWEN_49
    addrHitNRdAllowed[ 55] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_49_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 55] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_49_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 56]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_50_OFFSET);  // ALERT_REGWEN_50
    addrHitNRdAllowed[ 56] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_50_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 56] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_50_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 57]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_51_OFFSET);  // ALERT_REGWEN_51
    addrHitNRdAllowed[ 57] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_51_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 57] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_51_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 58]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_52_OFFSET);  // ALERT_REGWEN_52
    addrHitNRdAllowed[ 58] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_52_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 58] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_52_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 59]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_53_OFFSET);  // ALERT_REGWEN_53
    addrHitNRdAllowed[ 59] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_53_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 59] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_53_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 60]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_54_OFFSET);  // ALERT_REGWEN_54
    addrHitNRdAllowed[ 60] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_54_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 60] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_54_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 61]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_55_OFFSET);  // ALERT_REGWEN_55
    addrHitNRdAllowed[ 61] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_55_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 61] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_55_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 62]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_56_OFFSET);  // ALERT_REGWEN_56
    addrHitNRdAllowed[ 62] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_56_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 62] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_56_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 63]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_57_OFFSET);  // ALERT_REGWEN_57
    addrHitNRdAllowed[ 63] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_57_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 63] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_57_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 64]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_58_OFFSET);  // ALERT_REGWEN_58
    addrHitNRdAllowed[ 64] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_58_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 64] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_58_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 65]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_59_OFFSET);  // ALERT_REGWEN_59
    addrHitNRdAllowed[ 65] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_59_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 65] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_59_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 66]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_60_OFFSET);  // ALERT_REGWEN_60
    addrHitNRdAllowed[ 66] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_60_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 66] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_60_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 67]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_61_OFFSET);  // ALERT_REGWEN_61
    addrHitNRdAllowed[ 67] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_61_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 67] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_61_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 68]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_62_OFFSET);  // ALERT_REGWEN_62
    addrHitNRdAllowed[ 68] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_62_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 68] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_62_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 69]          = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_63_OFFSET);  // ALERT_REGWEN_63
    addrHitNRdAllowed[ 69] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_63_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 69] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_63_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 70]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_0_OFFSET);  // ALERT_EN_SHADOWED_0
    addrHitNRdAllowed[ 70] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 70] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 71]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_1_OFFSET);  // ALERT_EN_SHADOWED_1
    addrHitNRdAllowed[ 71] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 71] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 72]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_2_OFFSET);  // ALERT_EN_SHADOWED_2
    addrHitNRdAllowed[ 72] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 72] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 73]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_3_OFFSET);  // ALERT_EN_SHADOWED_3
    addrHitNRdAllowed[ 73] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 73] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 74]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_4_OFFSET);  // ALERT_EN_SHADOWED_4
    addrHitNRdAllowed[ 74] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 74] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 75]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_5_OFFSET);  // ALERT_EN_SHADOWED_5
    addrHitNRdAllowed[ 75] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 75] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 76]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_6_OFFSET);  // ALERT_EN_SHADOWED_6
    addrHitNRdAllowed[ 76] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 76] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 77]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_7_OFFSET);  // ALERT_EN_SHADOWED_7
    addrHitNRdAllowed[ 77] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 77] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 78]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_8_OFFSET);  // ALERT_EN_SHADOWED_8
    addrHitNRdAllowed[ 78] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 78] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 79]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_9_OFFSET);  // ALERT_EN_SHADOWED_9
    addrHitNRdAllowed[ 79] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_9_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 79] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_9_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 80]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_10_OFFSET);  // ALERT_EN_SHADOWED_10
    addrHitNRdAllowed[ 80] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_10_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 80] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_10_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 81]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_11_OFFSET);  // ALERT_EN_SHADOWED_11
    addrHitNRdAllowed[ 81] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_11_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 81] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_11_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 82]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_12_OFFSET);  // ALERT_EN_SHADOWED_12
    addrHitNRdAllowed[ 82] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_12_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 82] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_12_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 83]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_13_OFFSET);  // ALERT_EN_SHADOWED_13
    addrHitNRdAllowed[ 83] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_13_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 83] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_13_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 84]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_14_OFFSET);  // ALERT_EN_SHADOWED_14
    addrHitNRdAllowed[ 84] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_14_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 84] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_14_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 85]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_15_OFFSET);  // ALERT_EN_SHADOWED_15
    addrHitNRdAllowed[ 85] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_15_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 85] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_15_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 86]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_16_OFFSET);  // ALERT_EN_SHADOWED_16
    addrHitNRdAllowed[ 86] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_16_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 86] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_16_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 87]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_17_OFFSET);  // ALERT_EN_SHADOWED_17
    addrHitNRdAllowed[ 87] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_17_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 87] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_17_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 88]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_18_OFFSET);  // ALERT_EN_SHADOWED_18
    addrHitNRdAllowed[ 88] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_18_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 88] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_18_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 89]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_19_OFFSET);  // ALERT_EN_SHADOWED_19
    addrHitNRdAllowed[ 89] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_19_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 89] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_19_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 90]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_20_OFFSET);  // ALERT_EN_SHADOWED_20
    addrHitNRdAllowed[ 90] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_20_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 90] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_20_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 91]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_21_OFFSET);  // ALERT_EN_SHADOWED_21
    addrHitNRdAllowed[ 91] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_21_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 91] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_21_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 92]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_22_OFFSET);  // ALERT_EN_SHADOWED_22
    addrHitNRdAllowed[ 92] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_22_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 92] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_22_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 93]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_23_OFFSET);  // ALERT_EN_SHADOWED_23
    addrHitNRdAllowed[ 93] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_23_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 93] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_23_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 94]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_24_OFFSET);  // ALERT_EN_SHADOWED_24
    addrHitNRdAllowed[ 94] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_24_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 94] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_24_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 95]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_25_OFFSET);  // ALERT_EN_SHADOWED_25
    addrHitNRdAllowed[ 95] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_25_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 95] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_25_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 96]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_26_OFFSET);  // ALERT_EN_SHADOWED_26
    addrHitNRdAllowed[ 96] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_26_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 96] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_26_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 97]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_27_OFFSET);  // ALERT_EN_SHADOWED_27
    addrHitNRdAllowed[ 97] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_27_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 97] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_27_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 98]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_28_OFFSET);  // ALERT_EN_SHADOWED_28
    addrHitNRdAllowed[ 98] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_28_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 98] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_28_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 99]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_29_OFFSET);  // ALERT_EN_SHADOWED_29
    addrHitNRdAllowed[ 99] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_29_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 99] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_29_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[100]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_30_OFFSET);  // ALERT_EN_SHADOWED_30
    addrHitNRdAllowed[100] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_30_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[100] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_30_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[101]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_31_OFFSET);  // ALERT_EN_SHADOWED_31
    addrHitNRdAllowed[101] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_31_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[101] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_31_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[102]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_32_OFFSET);  // ALERT_EN_SHADOWED_32
    addrHitNRdAllowed[102] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_32_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[102] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_32_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[103]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_33_OFFSET);  // ALERT_EN_SHADOWED_33
    addrHitNRdAllowed[103] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_33_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[103] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_33_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[104]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_34_OFFSET);  // ALERT_EN_SHADOWED_34
    addrHitNRdAllowed[104] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_34_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[104] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_34_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[105]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_35_OFFSET);  // ALERT_EN_SHADOWED_35
    addrHitNRdAllowed[105] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_35_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[105] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_35_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[106]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_36_OFFSET);  // ALERT_EN_SHADOWED_36
    addrHitNRdAllowed[106] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_36_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[106] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_36_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[107]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_37_OFFSET);  // ALERT_EN_SHADOWED_37
    addrHitNRdAllowed[107] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_37_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[107] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_37_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[108]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_38_OFFSET);  // ALERT_EN_SHADOWED_38
    addrHitNRdAllowed[108] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_38_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[108] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_38_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[109]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_39_OFFSET);  // ALERT_EN_SHADOWED_39
    addrHitNRdAllowed[109] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_39_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[109] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_39_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[110]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_40_OFFSET);  // ALERT_EN_SHADOWED_40
    addrHitNRdAllowed[110] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_40_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[110] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_40_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[111]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_41_OFFSET);  // ALERT_EN_SHADOWED_41
    addrHitNRdAllowed[111] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_41_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[111] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_41_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[112]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_42_OFFSET);  // ALERT_EN_SHADOWED_42
    addrHitNRdAllowed[112] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_42_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[112] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_42_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[113]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_43_OFFSET);  // ALERT_EN_SHADOWED_43
    addrHitNRdAllowed[113] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_43_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[113] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_43_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[114]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_44_OFFSET);  // ALERT_EN_SHADOWED_44
    addrHitNRdAllowed[114] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_44_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[114] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_44_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[115]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_45_OFFSET);  // ALERT_EN_SHADOWED_45
    addrHitNRdAllowed[115] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_45_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[115] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_45_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[116]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_46_OFFSET);  // ALERT_EN_SHADOWED_46
    addrHitNRdAllowed[116] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_46_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[116] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_46_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[117]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_47_OFFSET);  // ALERT_EN_SHADOWED_47
    addrHitNRdAllowed[117] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_47_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[117] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_47_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[118]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_48_OFFSET);  // ALERT_EN_SHADOWED_48
    addrHitNRdAllowed[118] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_48_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[118] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_48_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[119]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_49_OFFSET);  // ALERT_EN_SHADOWED_49
    addrHitNRdAllowed[119] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_49_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[119] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_49_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[120]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_50_OFFSET);  // ALERT_EN_SHADOWED_50
    addrHitNRdAllowed[120] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_50_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[120] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_50_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[121]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_51_OFFSET);  // ALERT_EN_SHADOWED_51
    addrHitNRdAllowed[121] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_51_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[121] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_51_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[122]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_52_OFFSET);  // ALERT_EN_SHADOWED_52
    addrHitNRdAllowed[122] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_52_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[122] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_52_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[123]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_53_OFFSET);  // ALERT_EN_SHADOWED_53
    addrHitNRdAllowed[123] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_53_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[123] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_53_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[124]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_54_OFFSET);  // ALERT_EN_SHADOWED_54
    addrHitNRdAllowed[124] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_54_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[124] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_54_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[125]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_55_OFFSET);  // ALERT_EN_SHADOWED_55
    addrHitNRdAllowed[125] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_55_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[125] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_55_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[126]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_56_OFFSET);  // ALERT_EN_SHADOWED_56
    addrHitNRdAllowed[126] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_56_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[126] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_56_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[127]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_57_OFFSET);  // ALERT_EN_SHADOWED_57
    addrHitNRdAllowed[127] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_57_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[127] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_57_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[128]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_58_OFFSET);  // ALERT_EN_SHADOWED_58
    addrHitNRdAllowed[128] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_58_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[128] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_58_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[129]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_59_OFFSET);  // ALERT_EN_SHADOWED_59
    addrHitNRdAllowed[129] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_59_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[129] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_59_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[130]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_60_OFFSET);  // ALERT_EN_SHADOWED_60
    addrHitNRdAllowed[130] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_60_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[130] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_60_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[131]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_61_OFFSET);  // ALERT_EN_SHADOWED_61
    addrHitNRdAllowed[131] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_61_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[131] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_61_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[132]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_62_OFFSET);  // ALERT_EN_SHADOWED_62
    addrHitNRdAllowed[132] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_62_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[132] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_62_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[133]          = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_63_OFFSET);  // ALERT_EN_SHADOWED_63
    addrHitNRdAllowed[133] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_63_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[133] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_63_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[134]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_0_OFFSET);  // ALERT_CLASS_SHADOWED_0
    addrHitNRdAllowed[134] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[134] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[135]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_1_OFFSET);  // ALERT_CLASS_SHADOWED_1
    addrHitNRdAllowed[135] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[135] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[136]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_2_OFFSET);  // ALERT_CLASS_SHADOWED_2
    addrHitNRdAllowed[136] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[136] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[137]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_3_OFFSET);  // ALERT_CLASS_SHADOWED_3
    addrHitNRdAllowed[137] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[137] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[138]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_4_OFFSET);  // ALERT_CLASS_SHADOWED_4
    addrHitNRdAllowed[138] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[138] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[139]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_5_OFFSET);  // ALERT_CLASS_SHADOWED_5
    addrHitNRdAllowed[139] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[139] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[140]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_6_OFFSET);  // ALERT_CLASS_SHADOWED_6
    addrHitNRdAllowed[140] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[140] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[141]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_7_OFFSET);  // ALERT_CLASS_SHADOWED_7
    addrHitNRdAllowed[141] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[141] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[142]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_8_OFFSET);  // ALERT_CLASS_SHADOWED_8
    addrHitNRdAllowed[142] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[142] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[143]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_9_OFFSET);  // ALERT_CLASS_SHADOWED_9
    addrHitNRdAllowed[143] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_9_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[143] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_9_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[144]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_10_OFFSET);  // ALERT_CLASS_SHADOWED_10
    addrHitNRdAllowed[144] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_10_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[144] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_10_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[145]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_11_OFFSET);  // ALERT_CLASS_SHADOWED_11
    addrHitNRdAllowed[145] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_11_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[145] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_11_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[146]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_12_OFFSET);  // ALERT_CLASS_SHADOWED_12
    addrHitNRdAllowed[146] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_12_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[146] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_12_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[147]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_13_OFFSET);  // ALERT_CLASS_SHADOWED_13
    addrHitNRdAllowed[147] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_13_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[147] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_13_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[148]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_14_OFFSET);  // ALERT_CLASS_SHADOWED_14
    addrHitNRdAllowed[148] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_14_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[148] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_14_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[149]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_15_OFFSET);  // ALERT_CLASS_SHADOWED_15
    addrHitNRdAllowed[149] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_15_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[149] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_15_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[150]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_16_OFFSET);  // ALERT_CLASS_SHADOWED_16
    addrHitNRdAllowed[150] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_16_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[150] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_16_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[151]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_17_OFFSET);  // ALERT_CLASS_SHADOWED_17
    addrHitNRdAllowed[151] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_17_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[151] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_17_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[152]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_18_OFFSET);  // ALERT_CLASS_SHADOWED_18
    addrHitNRdAllowed[152] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_18_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[152] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_18_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[153]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_19_OFFSET);  // ALERT_CLASS_SHADOWED_19
    addrHitNRdAllowed[153] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_19_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[153] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_19_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[154]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_20_OFFSET);  // ALERT_CLASS_SHADOWED_20
    addrHitNRdAllowed[154] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_20_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[154] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_20_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[155]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_21_OFFSET);  // ALERT_CLASS_SHADOWED_21
    addrHitNRdAllowed[155] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_21_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[155] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_21_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[156]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_22_OFFSET);  // ALERT_CLASS_SHADOWED_22
    addrHitNRdAllowed[156] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_22_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[156] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_22_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[157]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_23_OFFSET);  // ALERT_CLASS_SHADOWED_23
    addrHitNRdAllowed[157] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_23_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[157] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_23_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[158]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_24_OFFSET);  // ALERT_CLASS_SHADOWED_24
    addrHitNRdAllowed[158] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_24_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[158] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_24_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[159]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_25_OFFSET);  // ALERT_CLASS_SHADOWED_25
    addrHitNRdAllowed[159] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_25_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[159] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_25_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[160]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_26_OFFSET);  // ALERT_CLASS_SHADOWED_26
    addrHitNRdAllowed[160] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_26_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[160] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_26_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[161]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_27_OFFSET);  // ALERT_CLASS_SHADOWED_27
    addrHitNRdAllowed[161] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_27_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[161] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_27_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[162]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_28_OFFSET);  // ALERT_CLASS_SHADOWED_28
    addrHitNRdAllowed[162] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_28_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[162] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_28_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[163]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_29_OFFSET);  // ALERT_CLASS_SHADOWED_29
    addrHitNRdAllowed[163] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_29_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[163] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_29_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[164]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_30_OFFSET);  // ALERT_CLASS_SHADOWED_30
    addrHitNRdAllowed[164] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_30_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[164] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_30_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[165]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_31_OFFSET);  // ALERT_CLASS_SHADOWED_31
    addrHitNRdAllowed[165] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_31_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[165] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_31_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[166]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_32_OFFSET);  // ALERT_CLASS_SHADOWED_32
    addrHitNRdAllowed[166] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_32_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[166] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_32_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[167]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_33_OFFSET);  // ALERT_CLASS_SHADOWED_33
    addrHitNRdAllowed[167] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_33_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[167] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_33_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[168]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_34_OFFSET);  // ALERT_CLASS_SHADOWED_34
    addrHitNRdAllowed[168] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_34_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[168] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_34_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[169]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_35_OFFSET);  // ALERT_CLASS_SHADOWED_35
    addrHitNRdAllowed[169] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_35_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[169] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_35_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[170]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_36_OFFSET);  // ALERT_CLASS_SHADOWED_36
    addrHitNRdAllowed[170] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_36_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[170] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_36_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[171]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_37_OFFSET);  // ALERT_CLASS_SHADOWED_37
    addrHitNRdAllowed[171] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_37_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[171] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_37_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[172]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_38_OFFSET);  // ALERT_CLASS_SHADOWED_38
    addrHitNRdAllowed[172] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_38_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[172] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_38_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[173]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_39_OFFSET);  // ALERT_CLASS_SHADOWED_39
    addrHitNRdAllowed[173] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_39_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[173] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_39_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[174]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_40_OFFSET);  // ALERT_CLASS_SHADOWED_40
    addrHitNRdAllowed[174] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_40_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[174] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_40_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[175]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_41_OFFSET);  // ALERT_CLASS_SHADOWED_41
    addrHitNRdAllowed[175] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_41_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[175] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_41_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[176]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_42_OFFSET);  // ALERT_CLASS_SHADOWED_42
    addrHitNRdAllowed[176] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_42_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[176] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_42_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[177]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_43_OFFSET);  // ALERT_CLASS_SHADOWED_43
    addrHitNRdAllowed[177] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_43_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[177] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_43_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[178]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_44_OFFSET);  // ALERT_CLASS_SHADOWED_44
    addrHitNRdAllowed[178] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_44_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[178] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_44_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[179]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_45_OFFSET);  // ALERT_CLASS_SHADOWED_45
    addrHitNRdAllowed[179] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_45_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[179] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_45_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[180]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_46_OFFSET);  // ALERT_CLASS_SHADOWED_46
    addrHitNRdAllowed[180] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_46_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[180] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_46_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[181]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_47_OFFSET);  // ALERT_CLASS_SHADOWED_47
    addrHitNRdAllowed[181] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_47_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[181] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_47_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[182]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_48_OFFSET);  // ALERT_CLASS_SHADOWED_48
    addrHitNRdAllowed[182] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_48_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[182] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_48_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[183]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_49_OFFSET);  // ALERT_CLASS_SHADOWED_49
    addrHitNRdAllowed[183] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_49_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[183] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_49_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[184]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_50_OFFSET);  // ALERT_CLASS_SHADOWED_50
    addrHitNRdAllowed[184] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_50_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[184] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_50_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[185]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_51_OFFSET);  // ALERT_CLASS_SHADOWED_51
    addrHitNRdAllowed[185] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_51_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[185] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_51_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[186]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_52_OFFSET);  // ALERT_CLASS_SHADOWED_52
    addrHitNRdAllowed[186] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_52_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[186] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_52_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[187]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_53_OFFSET);  // ALERT_CLASS_SHADOWED_53
    addrHitNRdAllowed[187] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_53_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[187] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_53_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[188]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_54_OFFSET);  // ALERT_CLASS_SHADOWED_54
    addrHitNRdAllowed[188] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_54_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[188] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_54_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[189]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_55_OFFSET);  // ALERT_CLASS_SHADOWED_55
    addrHitNRdAllowed[189] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_55_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[189] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_55_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[190]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_56_OFFSET);  // ALERT_CLASS_SHADOWED_56
    addrHitNRdAllowed[190] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_56_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[190] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_56_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[191]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_57_OFFSET);  // ALERT_CLASS_SHADOWED_57
    addrHitNRdAllowed[191] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_57_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[191] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_57_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[192]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_58_OFFSET);  // ALERT_CLASS_SHADOWED_58
    addrHitNRdAllowed[192] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_58_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[192] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_58_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[193]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_59_OFFSET);  // ALERT_CLASS_SHADOWED_59
    addrHitNRdAllowed[193] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_59_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[193] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_59_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[194]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_60_OFFSET);  // ALERT_CLASS_SHADOWED_60
    addrHitNRdAllowed[194] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_60_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[194] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_60_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[195]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_61_OFFSET);  // ALERT_CLASS_SHADOWED_61
    addrHitNRdAllowed[195] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_61_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[195] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_61_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[196]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_62_OFFSET);  // ALERT_CLASS_SHADOWED_62
    addrHitNRdAllowed[196] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_62_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[196] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_62_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[197]          = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_63_OFFSET);  // ALERT_CLASS_SHADOWED_63
    addrHitNRdAllowed[197] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_63_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[197] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_63_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[198]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_0_OFFSET);  // ALERT_CAUSE_0
    addrHitNRdAllowed[198] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[198] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[199]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_1_OFFSET);  // ALERT_CAUSE_1
    addrHitNRdAllowed[199] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[199] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[200]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_2_OFFSET);  // ALERT_CAUSE_2
    addrHitNRdAllowed[200] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[200] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[201]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_3_OFFSET);  // ALERT_CAUSE_3
    addrHitNRdAllowed[201] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[201] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[202]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_4_OFFSET);  // ALERT_CAUSE_4
    addrHitNRdAllowed[202] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[202] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[203]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_5_OFFSET);  // ALERT_CAUSE_5
    addrHitNRdAllowed[203] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[203] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[204]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_6_OFFSET);  // ALERT_CAUSE_6
    addrHitNRdAllowed[204] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[204] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[205]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_7_OFFSET);  // ALERT_CAUSE_7
    addrHitNRdAllowed[205] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[205] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[206]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_8_OFFSET);  // ALERT_CAUSE_8
    addrHitNRdAllowed[206] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[206] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[207]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_9_OFFSET);  // ALERT_CAUSE_9
    addrHitNRdAllowed[207] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_9_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[207] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_9_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[208]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_10_OFFSET);  // ALERT_CAUSE_10
    addrHitNRdAllowed[208] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_10_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[208] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_10_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[209]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_11_OFFSET);  // ALERT_CAUSE_11
    addrHitNRdAllowed[209] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_11_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[209] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_11_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[210]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_12_OFFSET);  // ALERT_CAUSE_12
    addrHitNRdAllowed[210] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_12_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[210] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_12_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[211]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_13_OFFSET);  // ALERT_CAUSE_13
    addrHitNRdAllowed[211] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_13_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[211] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_13_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[212]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_14_OFFSET);  // ALERT_CAUSE_14
    addrHitNRdAllowed[212] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_14_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[212] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_14_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[213]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_15_OFFSET);  // ALERT_CAUSE_15
    addrHitNRdAllowed[213] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_15_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[213] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_15_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[214]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_16_OFFSET);  // ALERT_CAUSE_16
    addrHitNRdAllowed[214] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_16_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[214] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_16_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[215]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_17_OFFSET);  // ALERT_CAUSE_17
    addrHitNRdAllowed[215] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_17_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[215] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_17_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[216]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_18_OFFSET);  // ALERT_CAUSE_18
    addrHitNRdAllowed[216] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_18_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[216] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_18_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[217]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_19_OFFSET);  // ALERT_CAUSE_19
    addrHitNRdAllowed[217] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_19_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[217] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_19_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[218]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_20_OFFSET);  // ALERT_CAUSE_20
    addrHitNRdAllowed[218] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_20_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[218] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_20_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[219]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_21_OFFSET);  // ALERT_CAUSE_21
    addrHitNRdAllowed[219] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_21_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[219] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_21_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[220]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_22_OFFSET);  // ALERT_CAUSE_22
    addrHitNRdAllowed[220] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_22_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[220] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_22_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[221]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_23_OFFSET);  // ALERT_CAUSE_23
    addrHitNRdAllowed[221] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_23_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[221] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_23_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[222]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_24_OFFSET);  // ALERT_CAUSE_24
    addrHitNRdAllowed[222] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_24_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[222] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_24_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[223]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_25_OFFSET);  // ALERT_CAUSE_25
    addrHitNRdAllowed[223] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_25_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[223] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_25_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[224]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_26_OFFSET);  // ALERT_CAUSE_26
    addrHitNRdAllowed[224] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_26_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[224] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_26_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[225]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_27_OFFSET);  // ALERT_CAUSE_27
    addrHitNRdAllowed[225] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_27_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[225] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_27_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[226]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_28_OFFSET);  // ALERT_CAUSE_28
    addrHitNRdAllowed[226] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_28_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[226] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_28_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[227]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_29_OFFSET);  // ALERT_CAUSE_29
    addrHitNRdAllowed[227] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_29_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[227] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_29_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[228]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_30_OFFSET);  // ALERT_CAUSE_30
    addrHitNRdAllowed[228] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_30_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[228] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_30_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[229]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_31_OFFSET);  // ALERT_CAUSE_31
    addrHitNRdAllowed[229] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_31_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[229] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_31_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[230]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_32_OFFSET);  // ALERT_CAUSE_32
    addrHitNRdAllowed[230] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_32_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[230] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_32_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[231]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_33_OFFSET);  // ALERT_CAUSE_33
    addrHitNRdAllowed[231] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_33_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[231] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_33_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[232]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_34_OFFSET);  // ALERT_CAUSE_34
    addrHitNRdAllowed[232] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_34_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[232] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_34_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[233]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_35_OFFSET);  // ALERT_CAUSE_35
    addrHitNRdAllowed[233] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_35_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[233] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_35_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[234]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_36_OFFSET);  // ALERT_CAUSE_36
    addrHitNRdAllowed[234] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_36_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[234] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_36_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[235]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_37_OFFSET);  // ALERT_CAUSE_37
    addrHitNRdAllowed[235] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_37_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[235] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_37_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[236]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_38_OFFSET);  // ALERT_CAUSE_38
    addrHitNRdAllowed[236] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_38_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[236] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_38_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[237]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_39_OFFSET);  // ALERT_CAUSE_39
    addrHitNRdAllowed[237] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_39_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[237] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_39_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[238]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_40_OFFSET);  // ALERT_CAUSE_40
    addrHitNRdAllowed[238] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_40_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[238] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_40_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[239]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_41_OFFSET);  // ALERT_CAUSE_41
    addrHitNRdAllowed[239] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_41_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[239] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_41_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[240]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_42_OFFSET);  // ALERT_CAUSE_42
    addrHitNRdAllowed[240] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_42_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[240] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_42_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[241]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_43_OFFSET);  // ALERT_CAUSE_43
    addrHitNRdAllowed[241] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_43_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[241] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_43_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[242]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_44_OFFSET);  // ALERT_CAUSE_44
    addrHitNRdAllowed[242] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_44_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[242] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_44_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[243]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_45_OFFSET);  // ALERT_CAUSE_45
    addrHitNRdAllowed[243] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_45_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[243] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_45_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[244]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_46_OFFSET);  // ALERT_CAUSE_46
    addrHitNRdAllowed[244] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_46_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[244] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_46_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[245]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_47_OFFSET);  // ALERT_CAUSE_47
    addrHitNRdAllowed[245] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_47_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[245] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_47_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[246]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_48_OFFSET);  // ALERT_CAUSE_48
    addrHitNRdAllowed[246] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_48_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[246] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_48_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[247]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_49_OFFSET);  // ALERT_CAUSE_49
    addrHitNRdAllowed[247] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_49_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[247] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_49_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[248]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_50_OFFSET);  // ALERT_CAUSE_50
    addrHitNRdAllowed[248] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_50_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[248] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_50_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[249]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_51_OFFSET);  // ALERT_CAUSE_51
    addrHitNRdAllowed[249] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_51_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[249] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_51_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[250]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_52_OFFSET);  // ALERT_CAUSE_52
    addrHitNRdAllowed[250] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_52_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[250] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_52_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[251]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_53_OFFSET);  // ALERT_CAUSE_53
    addrHitNRdAllowed[251] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_53_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[251] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_53_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[252]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_54_OFFSET);  // ALERT_CAUSE_54
    addrHitNRdAllowed[252] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_54_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[252] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_54_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[253]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_55_OFFSET);  // ALERT_CAUSE_55
    addrHitNRdAllowed[253] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_55_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[253] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_55_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[254]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_56_OFFSET);  // ALERT_CAUSE_56
    addrHitNRdAllowed[254] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_56_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[254] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_56_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[255]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_57_OFFSET);  // ALERT_CAUSE_57
    addrHitNRdAllowed[255] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_57_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[255] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_57_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[256]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_58_OFFSET);  // ALERT_CAUSE_58
    addrHitNRdAllowed[256] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_58_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[256] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_58_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[257]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_59_OFFSET);  // ALERT_CAUSE_59
    addrHitNRdAllowed[257] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_59_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[257] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_59_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[258]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_60_OFFSET);  // ALERT_CAUSE_60
    addrHitNRdAllowed[258] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_60_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[258] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_60_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[259]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_61_OFFSET);  // ALERT_CAUSE_61
    addrHitNRdAllowed[259] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_61_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[259] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_61_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[260]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_62_OFFSET);  // ALERT_CAUSE_62
    addrHitNRdAllowed[260] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_62_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[260] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_62_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[261]          = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_63_OFFSET);  // ALERT_CAUSE_63
    addrHitNRdAllowed[261] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_63_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[261] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_63_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[262]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_0_OFFSET);  // LOC_ALERT_REGWEN_0
    addrHitNRdAllowed[262] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[262] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[263]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_1_OFFSET);  // LOC_ALERT_REGWEN_1
    addrHitNRdAllowed[263] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[263] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[264]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_2_OFFSET);  // LOC_ALERT_REGWEN_2
    addrHitNRdAllowed[264] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[264] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[265]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_3_OFFSET);  // LOC_ALERT_REGWEN_3
    addrHitNRdAllowed[265] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[265] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[266]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_4_OFFSET);  // LOC_ALERT_REGWEN_4
    addrHitNRdAllowed[266] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[266] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[267]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_5_OFFSET);  // LOC_ALERT_REGWEN_5
    addrHitNRdAllowed[267] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[267] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[268]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_6_OFFSET);  // LOC_ALERT_REGWEN_6
    addrHitNRdAllowed[268] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[268] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[269]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_0_OFFSET);  // LOC_ALERT_EN_SHADOWED_0
    addrHitNRdAllowed[269] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[269] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[270]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_1_OFFSET);  // LOC_ALERT_EN_SHADOWED_1
    addrHitNRdAllowed[270] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[270] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[271]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_2_OFFSET);  // LOC_ALERT_EN_SHADOWED_2
    addrHitNRdAllowed[271] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[271] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[272]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_3_OFFSET);  // LOC_ALERT_EN_SHADOWED_3
    addrHitNRdAllowed[272] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[272] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[273]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_4_OFFSET);  // LOC_ALERT_EN_SHADOWED_4
    addrHitNRdAllowed[273] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[273] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[274]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_5_OFFSET);  // LOC_ALERT_EN_SHADOWED_5
    addrHitNRdAllowed[274] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[274] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[275]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_6_OFFSET);  // LOC_ALERT_EN_SHADOWED_6
    addrHitNRdAllowed[275] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[275] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[276]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_0_OFFSET);  // LOC_ALERT_CLASS_SHADOWED_0
    addrHitNRdAllowed[276] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[276] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[277]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_1_OFFSET);  // LOC_ALERT_CLASS_SHADOWED_1
    addrHitNRdAllowed[277] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[277] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[278]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_2_OFFSET);  // LOC_ALERT_CLASS_SHADOWED_2
    addrHitNRdAllowed[278] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[278] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[279]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_3_OFFSET);  // LOC_ALERT_CLASS_SHADOWED_3
    addrHitNRdAllowed[279] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[279] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[280]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_4_OFFSET);  // LOC_ALERT_CLASS_SHADOWED_4
    addrHitNRdAllowed[280] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[280] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[281]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_5_OFFSET);  // LOC_ALERT_CLASS_SHADOWED_5
    addrHitNRdAllowed[281] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[281] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[282]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_6_OFFSET);  // LOC_ALERT_CLASS_SHADOWED_6
    addrHitNRdAllowed[282] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[282] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[283]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_0_OFFSET);  // LOC_ALERT_CAUSE_0
    addrHitNRdAllowed[283] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[283] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[284]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_1_OFFSET);  // LOC_ALERT_CAUSE_1
    addrHitNRdAllowed[284] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[284] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[285]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_2_OFFSET);  // LOC_ALERT_CAUSE_2
    addrHitNRdAllowed[285] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[285] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[286]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_3_OFFSET);  // LOC_ALERT_CAUSE_3
    addrHitNRdAllowed[286] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[286] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[287]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_4_OFFSET);  // LOC_ALERT_CAUSE_4
    addrHitNRdAllowed[287] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[287] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[288]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_5_OFFSET);  // LOC_ALERT_CAUSE_5
    addrHitNRdAllowed[288] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[288] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[289]          = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_6_OFFSET);  // LOC_ALERT_CAUSE_6
    addrHitNRdAllowed[289] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[289] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[290]          = (reg_addr == ALERT_HANDLER_CLASSA_REGWEN_OFFSET);  // CLASSA_REGWEN
    addrHitNRdAllowed[290] = (reg_addr == ALERT_HANDLER_CLASSA_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[290] = (reg_addr == ALERT_HANDLER_CLASSA_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[291]          = (reg_addr == ALERT_HANDLER_CLASSA_CTRL_SHADOWED_OFFSET);  // CLASSA_CTRL_SHADOWED
    addrHitNRdAllowed[291] = (reg_addr == ALERT_HANDLER_CLASSA_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[291] = (reg_addr == ALERT_HANDLER_CLASSA_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[292]          = (reg_addr == ALERT_HANDLER_CLASSA_CLR_REGWEN_OFFSET);  // CLASSA_CLR_REGWEN
    addrHitNRdAllowed[292] = (reg_addr == ALERT_HANDLER_CLASSA_CLR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[292] = (reg_addr == ALERT_HANDLER_CLASSA_CLR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[293]          = (reg_addr == ALERT_HANDLER_CLASSA_CLR_SHADOWED_OFFSET);  // CLASSA_CLR_SHADOWED
    addrHitNRdAllowed[293] = (reg_addr == ALERT_HANDLER_CLASSA_CLR_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[293] = (reg_addr == ALERT_HANDLER_CLASSA_CLR_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[294]          = (reg_addr == ALERT_HANDLER_CLASSA_ACCUM_CNT_OFFSET);  // CLASSA_ACCUM_CNT
    addrHitNRdAllowed[294] = (reg_addr == ALERT_HANDLER_CLASSA_ACCUM_CNT_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[294] = (reg_addr == ALERT_HANDLER_CLASSA_ACCUM_CNT_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[295]          = (reg_addr == ALERT_HANDLER_CLASSA_ACCUM_THRESH_SHADOWED_OFFSET);  // CLASSA_ACCUM_THRESH_SHADOWED
    addrHitNRdAllowed[295] = (reg_addr == ALERT_HANDLER_CLASSA_ACCUM_THRESH_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[295] = (reg_addr == ALERT_HANDLER_CLASSA_ACCUM_THRESH_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[296]          = (reg_addr == ALERT_HANDLER_CLASSA_TIMEOUT_CYC_SHADOWED_OFFSET);  // CLASSA_TIMEOUT_CYC_SHADOWED
    addrHitNRdAllowed[296] = (reg_addr == ALERT_HANDLER_CLASSA_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[296] = (reg_addr == ALERT_HANDLER_CLASSA_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[297]          = (reg_addr == ALERT_HANDLER_CLASSA_CRASHDUMP_TRIGGER_SHADOWED_OFFSET);  // CLASSA_CRASHDUMP_TRIGGER_SHADOWED
    addrHitNRdAllowed[297] = (reg_addr == ALERT_HANDLER_CLASSA_CRASHDUMP_TRIGGER_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[297] = (reg_addr == ALERT_HANDLER_CLASSA_CRASHDUMP_TRIGGER_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[298]          = (reg_addr == ALERT_HANDLER_CLASSA_PHASE0_CYC_SHADOWED_OFFSET);  // CLASSA_PHASE0_CYC_SHADOWED
    addrHitNRdAllowed[298] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE0_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[298] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE0_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[299]          = (reg_addr == ALERT_HANDLER_CLASSA_PHASE1_CYC_SHADOWED_OFFSET);  // CLASSA_PHASE1_CYC_SHADOWED
    addrHitNRdAllowed[299] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE1_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[299] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE1_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[300]          = (reg_addr == ALERT_HANDLER_CLASSA_PHASE2_CYC_SHADOWED_OFFSET);  // CLASSA_PHASE2_CYC_SHADOWED
    addrHitNRdAllowed[300] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE2_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[300] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE2_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[301]          = (reg_addr == ALERT_HANDLER_CLASSA_PHASE3_CYC_SHADOWED_OFFSET);  // CLASSA_PHASE3_CYC_SHADOWED
    addrHitNRdAllowed[301] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE3_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[301] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE3_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[302]          = (reg_addr == ALERT_HANDLER_CLASSA_ESC_CNT_OFFSET);  // CLASSA_ESC_CNT
    addrHitNRdAllowed[302] = (reg_addr == ALERT_HANDLER_CLASSA_ESC_CNT_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[302] = (reg_addr == ALERT_HANDLER_CLASSA_ESC_CNT_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[303]          = (reg_addr == ALERT_HANDLER_CLASSA_STATE_OFFSET);  // CLASSA_STATE
    addrHitNRdAllowed[303] = (reg_addr == ALERT_HANDLER_CLASSA_STATE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[303] = (reg_addr == ALERT_HANDLER_CLASSA_STATE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[304]          = (reg_addr == ALERT_HANDLER_CLASSB_REGWEN_OFFSET);  // CLASSB_REGWEN
    addrHitNRdAllowed[304] = (reg_addr == ALERT_HANDLER_CLASSB_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[304] = (reg_addr == ALERT_HANDLER_CLASSB_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[305]          = (reg_addr == ALERT_HANDLER_CLASSB_CTRL_SHADOWED_OFFSET);  // CLASSB_CTRL_SHADOWED
    addrHitNRdAllowed[305] = (reg_addr == ALERT_HANDLER_CLASSB_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[305] = (reg_addr == ALERT_HANDLER_CLASSB_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[306]          = (reg_addr == ALERT_HANDLER_CLASSB_CLR_REGWEN_OFFSET);  // CLASSB_CLR_REGWEN
    addrHitNRdAllowed[306] = (reg_addr == ALERT_HANDLER_CLASSB_CLR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[306] = (reg_addr == ALERT_HANDLER_CLASSB_CLR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[307]          = (reg_addr == ALERT_HANDLER_CLASSB_CLR_SHADOWED_OFFSET);  // CLASSB_CLR_SHADOWED
    addrHitNRdAllowed[307] = (reg_addr == ALERT_HANDLER_CLASSB_CLR_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[307] = (reg_addr == ALERT_HANDLER_CLASSB_CLR_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[308]          = (reg_addr == ALERT_HANDLER_CLASSB_ACCUM_CNT_OFFSET);  // CLASSB_ACCUM_CNT
    addrHitNRdAllowed[308] = (reg_addr == ALERT_HANDLER_CLASSB_ACCUM_CNT_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[308] = (reg_addr == ALERT_HANDLER_CLASSB_ACCUM_CNT_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[309]          = (reg_addr == ALERT_HANDLER_CLASSB_ACCUM_THRESH_SHADOWED_OFFSET);  // CLASSB_ACCUM_THRESH_SHADOWED
    addrHitNRdAllowed[309] = (reg_addr == ALERT_HANDLER_CLASSB_ACCUM_THRESH_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[309] = (reg_addr == ALERT_HANDLER_CLASSB_ACCUM_THRESH_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[310]          = (reg_addr == ALERT_HANDLER_CLASSB_TIMEOUT_CYC_SHADOWED_OFFSET);  // CLASSB_TIMEOUT_CYC_SHADOWED
    addrHitNRdAllowed[310] = (reg_addr == ALERT_HANDLER_CLASSB_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[310] = (reg_addr == ALERT_HANDLER_CLASSB_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[311]          = (reg_addr == ALERT_HANDLER_CLASSB_CRASHDUMP_TRIGGER_SHADOWED_OFFSET);  // CLASSB_CRASHDUMP_TRIGGER_SHADOWED
    addrHitNRdAllowed[311] = (reg_addr == ALERT_HANDLER_CLASSB_CRASHDUMP_TRIGGER_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[311] = (reg_addr == ALERT_HANDLER_CLASSB_CRASHDUMP_TRIGGER_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[312]          = (reg_addr == ALERT_HANDLER_CLASSB_PHASE0_CYC_SHADOWED_OFFSET);  // CLASSB_PHASE0_CYC_SHADOWED
    addrHitNRdAllowed[312] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE0_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[312] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE0_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[313]          = (reg_addr == ALERT_HANDLER_CLASSB_PHASE1_CYC_SHADOWED_OFFSET);  // CLASSB_PHASE1_CYC_SHADOWED
    addrHitNRdAllowed[313] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE1_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[313] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE1_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[314]          = (reg_addr == ALERT_HANDLER_CLASSB_PHASE2_CYC_SHADOWED_OFFSET);  // CLASSB_PHASE2_CYC_SHADOWED
    addrHitNRdAllowed[314] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE2_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[314] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE2_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[315]          = (reg_addr == ALERT_HANDLER_CLASSB_PHASE3_CYC_SHADOWED_OFFSET);  // CLASSB_PHASE3_CYC_SHADOWED
    addrHitNRdAllowed[315] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE3_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[315] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE3_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[316]          = (reg_addr == ALERT_HANDLER_CLASSB_ESC_CNT_OFFSET);  // CLASSB_ESC_CNT
    addrHitNRdAllowed[316] = (reg_addr == ALERT_HANDLER_CLASSB_ESC_CNT_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[316] = (reg_addr == ALERT_HANDLER_CLASSB_ESC_CNT_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[317]          = (reg_addr == ALERT_HANDLER_CLASSB_STATE_OFFSET);  // CLASSB_STATE
    addrHitNRdAllowed[317] = (reg_addr == ALERT_HANDLER_CLASSB_STATE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[317] = (reg_addr == ALERT_HANDLER_CLASSB_STATE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[318]          = (reg_addr == ALERT_HANDLER_CLASSC_REGWEN_OFFSET);  // CLASSC_REGWEN
    addrHitNRdAllowed[318] = (reg_addr == ALERT_HANDLER_CLASSC_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[318] = (reg_addr == ALERT_HANDLER_CLASSC_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[319]          = (reg_addr == ALERT_HANDLER_CLASSC_CTRL_SHADOWED_OFFSET);  // CLASSC_CTRL_SHADOWED
    addrHitNRdAllowed[319] = (reg_addr == ALERT_HANDLER_CLASSC_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[319] = (reg_addr == ALERT_HANDLER_CLASSC_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[320]          = (reg_addr == ALERT_HANDLER_CLASSC_CLR_REGWEN_OFFSET);  // CLASSC_CLR_REGWEN
    addrHitNRdAllowed[320] = (reg_addr == ALERT_HANDLER_CLASSC_CLR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[320] = (reg_addr == ALERT_HANDLER_CLASSC_CLR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[321]          = (reg_addr == ALERT_HANDLER_CLASSC_CLR_SHADOWED_OFFSET);  // CLASSC_CLR_SHADOWED
    addrHitNRdAllowed[321] = (reg_addr == ALERT_HANDLER_CLASSC_CLR_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[321] = (reg_addr == ALERT_HANDLER_CLASSC_CLR_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[322]          = (reg_addr == ALERT_HANDLER_CLASSC_ACCUM_CNT_OFFSET);  // CLASSC_ACCUM_CNT
    addrHitNRdAllowed[322] = (reg_addr == ALERT_HANDLER_CLASSC_ACCUM_CNT_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[322] = (reg_addr == ALERT_HANDLER_CLASSC_ACCUM_CNT_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[323]          = (reg_addr == ALERT_HANDLER_CLASSC_ACCUM_THRESH_SHADOWED_OFFSET);  // CLASSC_ACCUM_THRESH_SHADOWED
    addrHitNRdAllowed[323] = (reg_addr == ALERT_HANDLER_CLASSC_ACCUM_THRESH_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[323] = (reg_addr == ALERT_HANDLER_CLASSC_ACCUM_THRESH_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[324]          = (reg_addr == ALERT_HANDLER_CLASSC_TIMEOUT_CYC_SHADOWED_OFFSET);  // CLASSC_TIMEOUT_CYC_SHADOWED
    addrHitNRdAllowed[324] = (reg_addr == ALERT_HANDLER_CLASSC_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[324] = (reg_addr == ALERT_HANDLER_CLASSC_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[325]          = (reg_addr == ALERT_HANDLER_CLASSC_CRASHDUMP_TRIGGER_SHADOWED_OFFSET);  // CLASSC_CRASHDUMP_TRIGGER_SHADOWED
    addrHitNRdAllowed[325] = (reg_addr == ALERT_HANDLER_CLASSC_CRASHDUMP_TRIGGER_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[325] = (reg_addr == ALERT_HANDLER_CLASSC_CRASHDUMP_TRIGGER_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[326]          = (reg_addr == ALERT_HANDLER_CLASSC_PHASE0_CYC_SHADOWED_OFFSET);  // CLASSC_PHASE0_CYC_SHADOWED
    addrHitNRdAllowed[326] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE0_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[326] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE0_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[327]          = (reg_addr == ALERT_HANDLER_CLASSC_PHASE1_CYC_SHADOWED_OFFSET);  // CLASSC_PHASE1_CYC_SHADOWED
    addrHitNRdAllowed[327] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE1_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[327] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE1_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[328]          = (reg_addr == ALERT_HANDLER_CLASSC_PHASE2_CYC_SHADOWED_OFFSET);  // CLASSC_PHASE2_CYC_SHADOWED
    addrHitNRdAllowed[328] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE2_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[328] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE2_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[329]          = (reg_addr == ALERT_HANDLER_CLASSC_PHASE3_CYC_SHADOWED_OFFSET);  // CLASSC_PHASE3_CYC_SHADOWED
    addrHitNRdAllowed[329] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE3_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[329] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE3_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[330]          = (reg_addr == ALERT_HANDLER_CLASSC_ESC_CNT_OFFSET);  // CLASSC_ESC_CNT
    addrHitNRdAllowed[330] = (reg_addr == ALERT_HANDLER_CLASSC_ESC_CNT_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[330] = (reg_addr == ALERT_HANDLER_CLASSC_ESC_CNT_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[331]          = (reg_addr == ALERT_HANDLER_CLASSC_STATE_OFFSET);  // CLASSC_STATE
    addrHitNRdAllowed[331] = (reg_addr == ALERT_HANDLER_CLASSC_STATE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[331] = (reg_addr == ALERT_HANDLER_CLASSC_STATE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[332]          = (reg_addr == ALERT_HANDLER_CLASSD_REGWEN_OFFSET);  // CLASSD_REGWEN
    addrHitNRdAllowed[332] = (reg_addr == ALERT_HANDLER_CLASSD_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[332] = (reg_addr == ALERT_HANDLER_CLASSD_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[333]          = (reg_addr == ALERT_HANDLER_CLASSD_CTRL_SHADOWED_OFFSET);  // CLASSD_CTRL_SHADOWED
    addrHitNRdAllowed[333] = (reg_addr == ALERT_HANDLER_CLASSD_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[333] = (reg_addr == ALERT_HANDLER_CLASSD_CTRL_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[334]          = (reg_addr == ALERT_HANDLER_CLASSD_CLR_REGWEN_OFFSET);  // CLASSD_CLR_REGWEN
    addrHitNRdAllowed[334] = (reg_addr == ALERT_HANDLER_CLASSD_CLR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[334] = (reg_addr == ALERT_HANDLER_CLASSD_CLR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[335]          = (reg_addr == ALERT_HANDLER_CLASSD_CLR_SHADOWED_OFFSET);  // CLASSD_CLR_SHADOWED
    addrHitNRdAllowed[335] = (reg_addr == ALERT_HANDLER_CLASSD_CLR_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[335] = (reg_addr == ALERT_HANDLER_CLASSD_CLR_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[336]          = (reg_addr == ALERT_HANDLER_CLASSD_ACCUM_CNT_OFFSET);  // CLASSD_ACCUM_CNT
    addrHitNRdAllowed[336] = (reg_addr == ALERT_HANDLER_CLASSD_ACCUM_CNT_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[336] = (reg_addr == ALERT_HANDLER_CLASSD_ACCUM_CNT_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[337]          = (reg_addr == ALERT_HANDLER_CLASSD_ACCUM_THRESH_SHADOWED_OFFSET);  // CLASSD_ACCUM_THRESH_SHADOWED
    addrHitNRdAllowed[337] = (reg_addr == ALERT_HANDLER_CLASSD_ACCUM_THRESH_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[337] = (reg_addr == ALERT_HANDLER_CLASSD_ACCUM_THRESH_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[338]          = (reg_addr == ALERT_HANDLER_CLASSD_TIMEOUT_CYC_SHADOWED_OFFSET);  // CLASSD_TIMEOUT_CYC_SHADOWED
    addrHitNRdAllowed[338] = (reg_addr == ALERT_HANDLER_CLASSD_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[338] = (reg_addr == ALERT_HANDLER_CLASSD_TIMEOUT_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[339]          = (reg_addr == ALERT_HANDLER_CLASSD_CRASHDUMP_TRIGGER_SHADOWED_OFFSET);  // CLASSD_CRASHDUMP_TRIGGER_SHADOWED
    addrHitNRdAllowed[339] = (reg_addr == ALERT_HANDLER_CLASSD_CRASHDUMP_TRIGGER_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[339] = (reg_addr == ALERT_HANDLER_CLASSD_CRASHDUMP_TRIGGER_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[340]          = (reg_addr == ALERT_HANDLER_CLASSD_PHASE0_CYC_SHADOWED_OFFSET);  // CLASSD_PHASE0_CYC_SHADOWED
    addrHitNRdAllowed[340] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE0_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[340] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE0_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[341]          = (reg_addr == ALERT_HANDLER_CLASSD_PHASE1_CYC_SHADOWED_OFFSET);  // CLASSD_PHASE1_CYC_SHADOWED
    addrHitNRdAllowed[341] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE1_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[341] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE1_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[342]          = (reg_addr == ALERT_HANDLER_CLASSD_PHASE2_CYC_SHADOWED_OFFSET);  // CLASSD_PHASE2_CYC_SHADOWED
    addrHitNRdAllowed[342] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE2_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[342] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE2_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[343]          = (reg_addr == ALERT_HANDLER_CLASSD_PHASE3_CYC_SHADOWED_OFFSET);  // CLASSD_PHASE3_CYC_SHADOWED
    addrHitNRdAllowed[343] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE3_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[343] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE3_CYC_SHADOWED_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[344]          = (reg_addr == ALERT_HANDLER_CLASSD_ESC_CNT_OFFSET);  // CLASSD_ESC_CNT
    addrHitNRdAllowed[344] = (reg_addr == ALERT_HANDLER_CLASSD_ESC_CNT_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[344] = (reg_addr == ALERT_HANDLER_CLASSD_ESC_CNT_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[345]          = (reg_addr == ALERT_HANDLER_CLASSD_STATE_OFFSET);  // CLASSD_STATE
    addrHitNRdAllowed[345] = (reg_addr == ALERT_HANDLER_CLASSD_STATE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[345] = (reg_addr == ALERT_HANDLER_CLASSD_STATE_OFFSET) & (|(16'hffff & reqRoleVec));

  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
  assign raclViol = (|addr_hit) & ~(|(addr_hit & (addrHitNRdAllowed | addrHitNWrAllowed))); // address hit but failed the RACL check

  // Check sub-word write is permitted
  always_comb begin
    wr_err = reg_we &
              (( addrHitNWrAllowed[  0] & (|(ALERT_HANDLER_PERMIT[  0] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  1] & (|(ALERT_HANDLER_PERMIT[  1] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  2] & (|(ALERT_HANDLER_PERMIT[  2] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  3] & (|(ALERT_HANDLER_PERMIT[  3] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  4] & (|(ALERT_HANDLER_PERMIT[  4] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  5] & (|(ALERT_HANDLER_PERMIT[  5] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  6] & (|(ALERT_HANDLER_PERMIT[  6] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  7] & (|(ALERT_HANDLER_PERMIT[  7] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  8] & (|(ALERT_HANDLER_PERMIT[  8] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  9] & (|(ALERT_HANDLER_PERMIT[  9] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 10] & (|(ALERT_HANDLER_PERMIT[ 10] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 11] & (|(ALERT_HANDLER_PERMIT[ 11] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 12] & (|(ALERT_HANDLER_PERMIT[ 12] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 13] & (|(ALERT_HANDLER_PERMIT[ 13] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 14] & (|(ALERT_HANDLER_PERMIT[ 14] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 15] & (|(ALERT_HANDLER_PERMIT[ 15] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 16] & (|(ALERT_HANDLER_PERMIT[ 16] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 17] & (|(ALERT_HANDLER_PERMIT[ 17] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 18] & (|(ALERT_HANDLER_PERMIT[ 18] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 19] & (|(ALERT_HANDLER_PERMIT[ 19] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 20] & (|(ALERT_HANDLER_PERMIT[ 20] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 21] & (|(ALERT_HANDLER_PERMIT[ 21] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 22] & (|(ALERT_HANDLER_PERMIT[ 22] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 23] & (|(ALERT_HANDLER_PERMIT[ 23] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 24] & (|(ALERT_HANDLER_PERMIT[ 24] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 25] & (|(ALERT_HANDLER_PERMIT[ 25] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 26] & (|(ALERT_HANDLER_PERMIT[ 26] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 27] & (|(ALERT_HANDLER_PERMIT[ 27] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 28] & (|(ALERT_HANDLER_PERMIT[ 28] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 29] & (|(ALERT_HANDLER_PERMIT[ 29] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 30] & (|(ALERT_HANDLER_PERMIT[ 30] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 31] & (|(ALERT_HANDLER_PERMIT[ 31] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 32] & (|(ALERT_HANDLER_PERMIT[ 32] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 33] & (|(ALERT_HANDLER_PERMIT[ 33] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 34] & (|(ALERT_HANDLER_PERMIT[ 34] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 35] & (|(ALERT_HANDLER_PERMIT[ 35] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 36] & (|(ALERT_HANDLER_PERMIT[ 36] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 37] & (|(ALERT_HANDLER_PERMIT[ 37] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 38] & (|(ALERT_HANDLER_PERMIT[ 38] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 39] & (|(ALERT_HANDLER_PERMIT[ 39] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 40] & (|(ALERT_HANDLER_PERMIT[ 40] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 41] & (|(ALERT_HANDLER_PERMIT[ 41] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 42] & (|(ALERT_HANDLER_PERMIT[ 42] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 43] & (|(ALERT_HANDLER_PERMIT[ 43] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 44] & (|(ALERT_HANDLER_PERMIT[ 44] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 45] & (|(ALERT_HANDLER_PERMIT[ 45] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 46] & (|(ALERT_HANDLER_PERMIT[ 46] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 47] & (|(ALERT_HANDLER_PERMIT[ 47] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 48] & (|(ALERT_HANDLER_PERMIT[ 48] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 49] & (|(ALERT_HANDLER_PERMIT[ 49] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 50] & (|(ALERT_HANDLER_PERMIT[ 50] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 51] & (|(ALERT_HANDLER_PERMIT[ 51] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 52] & (|(ALERT_HANDLER_PERMIT[ 52] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 53] & (|(ALERT_HANDLER_PERMIT[ 53] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 54] & (|(ALERT_HANDLER_PERMIT[ 54] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 55] & (|(ALERT_HANDLER_PERMIT[ 55] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 56] & (|(ALERT_HANDLER_PERMIT[ 56] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 57] & (|(ALERT_HANDLER_PERMIT[ 57] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 58] & (|(ALERT_HANDLER_PERMIT[ 58] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 59] & (|(ALERT_HANDLER_PERMIT[ 59] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 60] & (|(ALERT_HANDLER_PERMIT[ 60] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 61] & (|(ALERT_HANDLER_PERMIT[ 61] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 62] & (|(ALERT_HANDLER_PERMIT[ 62] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 63] & (|(ALERT_HANDLER_PERMIT[ 63] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 64] & (|(ALERT_HANDLER_PERMIT[ 64] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 65] & (|(ALERT_HANDLER_PERMIT[ 65] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 66] & (|(ALERT_HANDLER_PERMIT[ 66] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 67] & (|(ALERT_HANDLER_PERMIT[ 67] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 68] & (|(ALERT_HANDLER_PERMIT[ 68] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 69] & (|(ALERT_HANDLER_PERMIT[ 69] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 70] & (|(ALERT_HANDLER_PERMIT[ 70] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 71] & (|(ALERT_HANDLER_PERMIT[ 71] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 72] & (|(ALERT_HANDLER_PERMIT[ 72] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 73] & (|(ALERT_HANDLER_PERMIT[ 73] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 74] & (|(ALERT_HANDLER_PERMIT[ 74] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 75] & (|(ALERT_HANDLER_PERMIT[ 75] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 76] & (|(ALERT_HANDLER_PERMIT[ 76] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 77] & (|(ALERT_HANDLER_PERMIT[ 77] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 78] & (|(ALERT_HANDLER_PERMIT[ 78] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 79] & (|(ALERT_HANDLER_PERMIT[ 79] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 80] & (|(ALERT_HANDLER_PERMIT[ 80] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 81] & (|(ALERT_HANDLER_PERMIT[ 81] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 82] & (|(ALERT_HANDLER_PERMIT[ 82] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 83] & (|(ALERT_HANDLER_PERMIT[ 83] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 84] & (|(ALERT_HANDLER_PERMIT[ 84] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 85] & (|(ALERT_HANDLER_PERMIT[ 85] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 86] & (|(ALERT_HANDLER_PERMIT[ 86] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 87] & (|(ALERT_HANDLER_PERMIT[ 87] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 88] & (|(ALERT_HANDLER_PERMIT[ 88] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 89] & (|(ALERT_HANDLER_PERMIT[ 89] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 90] & (|(ALERT_HANDLER_PERMIT[ 90] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 91] & (|(ALERT_HANDLER_PERMIT[ 91] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 92] & (|(ALERT_HANDLER_PERMIT[ 92] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 93] & (|(ALERT_HANDLER_PERMIT[ 93] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 94] & (|(ALERT_HANDLER_PERMIT[ 94] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 95] & (|(ALERT_HANDLER_PERMIT[ 95] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 96] & (|(ALERT_HANDLER_PERMIT[ 96] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 97] & (|(ALERT_HANDLER_PERMIT[ 97] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 98] & (|(ALERT_HANDLER_PERMIT[ 98] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 99] & (|(ALERT_HANDLER_PERMIT[ 99] & ~reg_be)) ) |
               ( addrHitNWrAllowed[100] & (|(ALERT_HANDLER_PERMIT[100] & ~reg_be)) ) |
               ( addrHitNWrAllowed[101] & (|(ALERT_HANDLER_PERMIT[101] & ~reg_be)) ) |
               ( addrHitNWrAllowed[102] & (|(ALERT_HANDLER_PERMIT[102] & ~reg_be)) ) |
               ( addrHitNWrAllowed[103] & (|(ALERT_HANDLER_PERMIT[103] & ~reg_be)) ) |
               ( addrHitNWrAllowed[104] & (|(ALERT_HANDLER_PERMIT[104] & ~reg_be)) ) |
               ( addrHitNWrAllowed[105] & (|(ALERT_HANDLER_PERMIT[105] & ~reg_be)) ) |
               ( addrHitNWrAllowed[106] & (|(ALERT_HANDLER_PERMIT[106] & ~reg_be)) ) |
               ( addrHitNWrAllowed[107] & (|(ALERT_HANDLER_PERMIT[107] & ~reg_be)) ) |
               ( addrHitNWrAllowed[108] & (|(ALERT_HANDLER_PERMIT[108] & ~reg_be)) ) |
               ( addrHitNWrAllowed[109] & (|(ALERT_HANDLER_PERMIT[109] & ~reg_be)) ) |
               ( addrHitNWrAllowed[110] & (|(ALERT_HANDLER_PERMIT[110] & ~reg_be)) ) |
               ( addrHitNWrAllowed[111] & (|(ALERT_HANDLER_PERMIT[111] & ~reg_be)) ) |
               ( addrHitNWrAllowed[112] & (|(ALERT_HANDLER_PERMIT[112] & ~reg_be)) ) |
               ( addrHitNWrAllowed[113] & (|(ALERT_HANDLER_PERMIT[113] & ~reg_be)) ) |
               ( addrHitNWrAllowed[114] & (|(ALERT_HANDLER_PERMIT[114] & ~reg_be)) ) |
               ( addrHitNWrAllowed[115] & (|(ALERT_HANDLER_PERMIT[115] & ~reg_be)) ) |
               ( addrHitNWrAllowed[116] & (|(ALERT_HANDLER_PERMIT[116] & ~reg_be)) ) |
               ( addrHitNWrAllowed[117] & (|(ALERT_HANDLER_PERMIT[117] & ~reg_be)) ) |
               ( addrHitNWrAllowed[118] & (|(ALERT_HANDLER_PERMIT[118] & ~reg_be)) ) |
               ( addrHitNWrAllowed[119] & (|(ALERT_HANDLER_PERMIT[119] & ~reg_be)) ) |
               ( addrHitNWrAllowed[120] & (|(ALERT_HANDLER_PERMIT[120] & ~reg_be)) ) |
               ( addrHitNWrAllowed[121] & (|(ALERT_HANDLER_PERMIT[121] & ~reg_be)) ) |
               ( addrHitNWrAllowed[122] & (|(ALERT_HANDLER_PERMIT[122] & ~reg_be)) ) |
               ( addrHitNWrAllowed[123] & (|(ALERT_HANDLER_PERMIT[123] & ~reg_be)) ) |
               ( addrHitNWrAllowed[124] & (|(ALERT_HANDLER_PERMIT[124] & ~reg_be)) ) |
               ( addrHitNWrAllowed[125] & (|(ALERT_HANDLER_PERMIT[125] & ~reg_be)) ) |
               ( addrHitNWrAllowed[126] & (|(ALERT_HANDLER_PERMIT[126] & ~reg_be)) ) |
               ( addrHitNWrAllowed[127] & (|(ALERT_HANDLER_PERMIT[127] & ~reg_be)) ) |
               ( addrHitNWrAllowed[128] & (|(ALERT_HANDLER_PERMIT[128] & ~reg_be)) ) |
               ( addrHitNWrAllowed[129] & (|(ALERT_HANDLER_PERMIT[129] & ~reg_be)) ) |
               ( addrHitNWrAllowed[130] & (|(ALERT_HANDLER_PERMIT[130] & ~reg_be)) ) |
               ( addrHitNWrAllowed[131] & (|(ALERT_HANDLER_PERMIT[131] & ~reg_be)) ) |
               ( addrHitNWrAllowed[132] & (|(ALERT_HANDLER_PERMIT[132] & ~reg_be)) ) |
               ( addrHitNWrAllowed[133] & (|(ALERT_HANDLER_PERMIT[133] & ~reg_be)) ) |
               ( addrHitNWrAllowed[134] & (|(ALERT_HANDLER_PERMIT[134] & ~reg_be)) ) |
               ( addrHitNWrAllowed[135] & (|(ALERT_HANDLER_PERMIT[135] & ~reg_be)) ) |
               ( addrHitNWrAllowed[136] & (|(ALERT_HANDLER_PERMIT[136] & ~reg_be)) ) |
               ( addrHitNWrAllowed[137] & (|(ALERT_HANDLER_PERMIT[137] & ~reg_be)) ) |
               ( addrHitNWrAllowed[138] & (|(ALERT_HANDLER_PERMIT[138] & ~reg_be)) ) |
               ( addrHitNWrAllowed[139] & (|(ALERT_HANDLER_PERMIT[139] & ~reg_be)) ) |
               ( addrHitNWrAllowed[140] & (|(ALERT_HANDLER_PERMIT[140] & ~reg_be)) ) |
               ( addrHitNWrAllowed[141] & (|(ALERT_HANDLER_PERMIT[141] & ~reg_be)) ) |
               ( addrHitNWrAllowed[142] & (|(ALERT_HANDLER_PERMIT[142] & ~reg_be)) ) |
               ( addrHitNWrAllowed[143] & (|(ALERT_HANDLER_PERMIT[143] & ~reg_be)) ) |
               ( addrHitNWrAllowed[144] & (|(ALERT_HANDLER_PERMIT[144] & ~reg_be)) ) |
               ( addrHitNWrAllowed[145] & (|(ALERT_HANDLER_PERMIT[145] & ~reg_be)) ) |
               ( addrHitNWrAllowed[146] & (|(ALERT_HANDLER_PERMIT[146] & ~reg_be)) ) |
               ( addrHitNWrAllowed[147] & (|(ALERT_HANDLER_PERMIT[147] & ~reg_be)) ) |
               ( addrHitNWrAllowed[148] & (|(ALERT_HANDLER_PERMIT[148] & ~reg_be)) ) |
               ( addrHitNWrAllowed[149] & (|(ALERT_HANDLER_PERMIT[149] & ~reg_be)) ) |
               ( addrHitNWrAllowed[150] & (|(ALERT_HANDLER_PERMIT[150] & ~reg_be)) ) |
               ( addrHitNWrAllowed[151] & (|(ALERT_HANDLER_PERMIT[151] & ~reg_be)) ) |
               ( addrHitNWrAllowed[152] & (|(ALERT_HANDLER_PERMIT[152] & ~reg_be)) ) |
               ( addrHitNWrAllowed[153] & (|(ALERT_HANDLER_PERMIT[153] & ~reg_be)) ) |
               ( addrHitNWrAllowed[154] & (|(ALERT_HANDLER_PERMIT[154] & ~reg_be)) ) |
               ( addrHitNWrAllowed[155] & (|(ALERT_HANDLER_PERMIT[155] & ~reg_be)) ) |
               ( addrHitNWrAllowed[156] & (|(ALERT_HANDLER_PERMIT[156] & ~reg_be)) ) |
               ( addrHitNWrAllowed[157] & (|(ALERT_HANDLER_PERMIT[157] & ~reg_be)) ) |
               ( addrHitNWrAllowed[158] & (|(ALERT_HANDLER_PERMIT[158] & ~reg_be)) ) |
               ( addrHitNWrAllowed[159] & (|(ALERT_HANDLER_PERMIT[159] & ~reg_be)) ) |
               ( addrHitNWrAllowed[160] & (|(ALERT_HANDLER_PERMIT[160] & ~reg_be)) ) |
               ( addrHitNWrAllowed[161] & (|(ALERT_HANDLER_PERMIT[161] & ~reg_be)) ) |
               ( addrHitNWrAllowed[162] & (|(ALERT_HANDLER_PERMIT[162] & ~reg_be)) ) |
               ( addrHitNWrAllowed[163] & (|(ALERT_HANDLER_PERMIT[163] & ~reg_be)) ) |
               ( addrHitNWrAllowed[164] & (|(ALERT_HANDLER_PERMIT[164] & ~reg_be)) ) |
               ( addrHitNWrAllowed[165] & (|(ALERT_HANDLER_PERMIT[165] & ~reg_be)) ) |
               ( addrHitNWrAllowed[166] & (|(ALERT_HANDLER_PERMIT[166] & ~reg_be)) ) |
               ( addrHitNWrAllowed[167] & (|(ALERT_HANDLER_PERMIT[167] & ~reg_be)) ) |
               ( addrHitNWrAllowed[168] & (|(ALERT_HANDLER_PERMIT[168] & ~reg_be)) ) |
               ( addrHitNWrAllowed[169] & (|(ALERT_HANDLER_PERMIT[169] & ~reg_be)) ) |
               ( addrHitNWrAllowed[170] & (|(ALERT_HANDLER_PERMIT[170] & ~reg_be)) ) |
               ( addrHitNWrAllowed[171] & (|(ALERT_HANDLER_PERMIT[171] & ~reg_be)) ) |
               ( addrHitNWrAllowed[172] & (|(ALERT_HANDLER_PERMIT[172] & ~reg_be)) ) |
               ( addrHitNWrAllowed[173] & (|(ALERT_HANDLER_PERMIT[173] & ~reg_be)) ) |
               ( addrHitNWrAllowed[174] & (|(ALERT_HANDLER_PERMIT[174] & ~reg_be)) ) |
               ( addrHitNWrAllowed[175] & (|(ALERT_HANDLER_PERMIT[175] & ~reg_be)) ) |
               ( addrHitNWrAllowed[176] & (|(ALERT_HANDLER_PERMIT[176] & ~reg_be)) ) |
               ( addrHitNWrAllowed[177] & (|(ALERT_HANDLER_PERMIT[177] & ~reg_be)) ) |
               ( addrHitNWrAllowed[178] & (|(ALERT_HANDLER_PERMIT[178] & ~reg_be)) ) |
               ( addrHitNWrAllowed[179] & (|(ALERT_HANDLER_PERMIT[179] & ~reg_be)) ) |
               ( addrHitNWrAllowed[180] & (|(ALERT_HANDLER_PERMIT[180] & ~reg_be)) ) |
               ( addrHitNWrAllowed[181] & (|(ALERT_HANDLER_PERMIT[181] & ~reg_be)) ) |
               ( addrHitNWrAllowed[182] & (|(ALERT_HANDLER_PERMIT[182] & ~reg_be)) ) |
               ( addrHitNWrAllowed[183] & (|(ALERT_HANDLER_PERMIT[183] & ~reg_be)) ) |
               ( addrHitNWrAllowed[184] & (|(ALERT_HANDLER_PERMIT[184] & ~reg_be)) ) |
               ( addrHitNWrAllowed[185] & (|(ALERT_HANDLER_PERMIT[185] & ~reg_be)) ) |
               ( addrHitNWrAllowed[186] & (|(ALERT_HANDLER_PERMIT[186] & ~reg_be)) ) |
               ( addrHitNWrAllowed[187] & (|(ALERT_HANDLER_PERMIT[187] & ~reg_be)) ) |
               ( addrHitNWrAllowed[188] & (|(ALERT_HANDLER_PERMIT[188] & ~reg_be)) ) |
               ( addrHitNWrAllowed[189] & (|(ALERT_HANDLER_PERMIT[189] & ~reg_be)) ) |
               ( addrHitNWrAllowed[190] & (|(ALERT_HANDLER_PERMIT[190] & ~reg_be)) ) |
               ( addrHitNWrAllowed[191] & (|(ALERT_HANDLER_PERMIT[191] & ~reg_be)) ) |
               ( addrHitNWrAllowed[192] & (|(ALERT_HANDLER_PERMIT[192] & ~reg_be)) ) |
               ( addrHitNWrAllowed[193] & (|(ALERT_HANDLER_PERMIT[193] & ~reg_be)) ) |
               ( addrHitNWrAllowed[194] & (|(ALERT_HANDLER_PERMIT[194] & ~reg_be)) ) |
               ( addrHitNWrAllowed[195] & (|(ALERT_HANDLER_PERMIT[195] & ~reg_be)) ) |
               ( addrHitNWrAllowed[196] & (|(ALERT_HANDLER_PERMIT[196] & ~reg_be)) ) |
               ( addrHitNWrAllowed[197] & (|(ALERT_HANDLER_PERMIT[197] & ~reg_be)) ) |
               ( addrHitNWrAllowed[198] & (|(ALERT_HANDLER_PERMIT[198] & ~reg_be)) ) |
               ( addrHitNWrAllowed[199] & (|(ALERT_HANDLER_PERMIT[199] & ~reg_be)) ) |
               ( addrHitNWrAllowed[200] & (|(ALERT_HANDLER_PERMIT[200] & ~reg_be)) ) |
               ( addrHitNWrAllowed[201] & (|(ALERT_HANDLER_PERMIT[201] & ~reg_be)) ) |
               ( addrHitNWrAllowed[202] & (|(ALERT_HANDLER_PERMIT[202] & ~reg_be)) ) |
               ( addrHitNWrAllowed[203] & (|(ALERT_HANDLER_PERMIT[203] & ~reg_be)) ) |
               ( addrHitNWrAllowed[204] & (|(ALERT_HANDLER_PERMIT[204] & ~reg_be)) ) |
               ( addrHitNWrAllowed[205] & (|(ALERT_HANDLER_PERMIT[205] & ~reg_be)) ) |
               ( addrHitNWrAllowed[206] & (|(ALERT_HANDLER_PERMIT[206] & ~reg_be)) ) |
               ( addrHitNWrAllowed[207] & (|(ALERT_HANDLER_PERMIT[207] & ~reg_be)) ) |
               ( addrHitNWrAllowed[208] & (|(ALERT_HANDLER_PERMIT[208] & ~reg_be)) ) |
               ( addrHitNWrAllowed[209] & (|(ALERT_HANDLER_PERMIT[209] & ~reg_be)) ) |
               ( addrHitNWrAllowed[210] & (|(ALERT_HANDLER_PERMIT[210] & ~reg_be)) ) |
               ( addrHitNWrAllowed[211] & (|(ALERT_HANDLER_PERMIT[211] & ~reg_be)) ) |
               ( addrHitNWrAllowed[212] & (|(ALERT_HANDLER_PERMIT[212] & ~reg_be)) ) |
               ( addrHitNWrAllowed[213] & (|(ALERT_HANDLER_PERMIT[213] & ~reg_be)) ) |
               ( addrHitNWrAllowed[214] & (|(ALERT_HANDLER_PERMIT[214] & ~reg_be)) ) |
               ( addrHitNWrAllowed[215] & (|(ALERT_HANDLER_PERMIT[215] & ~reg_be)) ) |
               ( addrHitNWrAllowed[216] & (|(ALERT_HANDLER_PERMIT[216] & ~reg_be)) ) |
               ( addrHitNWrAllowed[217] & (|(ALERT_HANDLER_PERMIT[217] & ~reg_be)) ) |
               ( addrHitNWrAllowed[218] & (|(ALERT_HANDLER_PERMIT[218] & ~reg_be)) ) |
               ( addrHitNWrAllowed[219] & (|(ALERT_HANDLER_PERMIT[219] & ~reg_be)) ) |
               ( addrHitNWrAllowed[220] & (|(ALERT_HANDLER_PERMIT[220] & ~reg_be)) ) |
               ( addrHitNWrAllowed[221] & (|(ALERT_HANDLER_PERMIT[221] & ~reg_be)) ) |
               ( addrHitNWrAllowed[222] & (|(ALERT_HANDLER_PERMIT[222] & ~reg_be)) ) |
               ( addrHitNWrAllowed[223] & (|(ALERT_HANDLER_PERMIT[223] & ~reg_be)) ) |
               ( addrHitNWrAllowed[224] & (|(ALERT_HANDLER_PERMIT[224] & ~reg_be)) ) |
               ( addrHitNWrAllowed[225] & (|(ALERT_HANDLER_PERMIT[225] & ~reg_be)) ) |
               ( addrHitNWrAllowed[226] & (|(ALERT_HANDLER_PERMIT[226] & ~reg_be)) ) |
               ( addrHitNWrAllowed[227] & (|(ALERT_HANDLER_PERMIT[227] & ~reg_be)) ) |
               ( addrHitNWrAllowed[228] & (|(ALERT_HANDLER_PERMIT[228] & ~reg_be)) ) |
               ( addrHitNWrAllowed[229] & (|(ALERT_HANDLER_PERMIT[229] & ~reg_be)) ) |
               ( addrHitNWrAllowed[230] & (|(ALERT_HANDLER_PERMIT[230] & ~reg_be)) ) |
               ( addrHitNWrAllowed[231] & (|(ALERT_HANDLER_PERMIT[231] & ~reg_be)) ) |
               ( addrHitNWrAllowed[232] & (|(ALERT_HANDLER_PERMIT[232] & ~reg_be)) ) |
               ( addrHitNWrAllowed[233] & (|(ALERT_HANDLER_PERMIT[233] & ~reg_be)) ) |
               ( addrHitNWrAllowed[234] & (|(ALERT_HANDLER_PERMIT[234] & ~reg_be)) ) |
               ( addrHitNWrAllowed[235] & (|(ALERT_HANDLER_PERMIT[235] & ~reg_be)) ) |
               ( addrHitNWrAllowed[236] & (|(ALERT_HANDLER_PERMIT[236] & ~reg_be)) ) |
               ( addrHitNWrAllowed[237] & (|(ALERT_HANDLER_PERMIT[237] & ~reg_be)) ) |
               ( addrHitNWrAllowed[238] & (|(ALERT_HANDLER_PERMIT[238] & ~reg_be)) ) |
               ( addrHitNWrAllowed[239] & (|(ALERT_HANDLER_PERMIT[239] & ~reg_be)) ) |
               ( addrHitNWrAllowed[240] & (|(ALERT_HANDLER_PERMIT[240] & ~reg_be)) ) |
               ( addrHitNWrAllowed[241] & (|(ALERT_HANDLER_PERMIT[241] & ~reg_be)) ) |
               ( addrHitNWrAllowed[242] & (|(ALERT_HANDLER_PERMIT[242] & ~reg_be)) ) |
               ( addrHitNWrAllowed[243] & (|(ALERT_HANDLER_PERMIT[243] & ~reg_be)) ) |
               ( addrHitNWrAllowed[244] & (|(ALERT_HANDLER_PERMIT[244] & ~reg_be)) ) |
               ( addrHitNWrAllowed[245] & (|(ALERT_HANDLER_PERMIT[245] & ~reg_be)) ) |
               ( addrHitNWrAllowed[246] & (|(ALERT_HANDLER_PERMIT[246] & ~reg_be)) ) |
               ( addrHitNWrAllowed[247] & (|(ALERT_HANDLER_PERMIT[247] & ~reg_be)) ) |
               ( addrHitNWrAllowed[248] & (|(ALERT_HANDLER_PERMIT[248] & ~reg_be)) ) |
               ( addrHitNWrAllowed[249] & (|(ALERT_HANDLER_PERMIT[249] & ~reg_be)) ) |
               ( addrHitNWrAllowed[250] & (|(ALERT_HANDLER_PERMIT[250] & ~reg_be)) ) |
               ( addrHitNWrAllowed[251] & (|(ALERT_HANDLER_PERMIT[251] & ~reg_be)) ) |
               ( addrHitNWrAllowed[252] & (|(ALERT_HANDLER_PERMIT[252] & ~reg_be)) ) |
               ( addrHitNWrAllowed[253] & (|(ALERT_HANDLER_PERMIT[253] & ~reg_be)) ) |
               ( addrHitNWrAllowed[254] & (|(ALERT_HANDLER_PERMIT[254] & ~reg_be)) ) |
               ( addrHitNWrAllowed[255] & (|(ALERT_HANDLER_PERMIT[255] & ~reg_be)) ) |
               ( addrHitNWrAllowed[256] & (|(ALERT_HANDLER_PERMIT[256] & ~reg_be)) ) |
               ( addrHitNWrAllowed[257] & (|(ALERT_HANDLER_PERMIT[257] & ~reg_be)) ) |
               ( addrHitNWrAllowed[258] & (|(ALERT_HANDLER_PERMIT[258] & ~reg_be)) ) |
               ( addrHitNWrAllowed[259] & (|(ALERT_HANDLER_PERMIT[259] & ~reg_be)) ) |
               ( addrHitNWrAllowed[260] & (|(ALERT_HANDLER_PERMIT[260] & ~reg_be)) ) |
               ( addrHitNWrAllowed[261] & (|(ALERT_HANDLER_PERMIT[261] & ~reg_be)) ) |
               ( addrHitNWrAllowed[262] & (|(ALERT_HANDLER_PERMIT[262] & ~reg_be)) ) |
               ( addrHitNWrAllowed[263] & (|(ALERT_HANDLER_PERMIT[263] & ~reg_be)) ) |
               ( addrHitNWrAllowed[264] & (|(ALERT_HANDLER_PERMIT[264] & ~reg_be)) ) |
               ( addrHitNWrAllowed[265] & (|(ALERT_HANDLER_PERMIT[265] & ~reg_be)) ) |
               ( addrHitNWrAllowed[266] & (|(ALERT_HANDLER_PERMIT[266] & ~reg_be)) ) |
               ( addrHitNWrAllowed[267] & (|(ALERT_HANDLER_PERMIT[267] & ~reg_be)) ) |
               ( addrHitNWrAllowed[268] & (|(ALERT_HANDLER_PERMIT[268] & ~reg_be)) ) |
               ( addrHitNWrAllowed[269] & (|(ALERT_HANDLER_PERMIT[269] & ~reg_be)) ) |
               ( addrHitNWrAllowed[270] & (|(ALERT_HANDLER_PERMIT[270] & ~reg_be)) ) |
               ( addrHitNWrAllowed[271] & (|(ALERT_HANDLER_PERMIT[271] & ~reg_be)) ) |
               ( addrHitNWrAllowed[272] & (|(ALERT_HANDLER_PERMIT[272] & ~reg_be)) ) |
               ( addrHitNWrAllowed[273] & (|(ALERT_HANDLER_PERMIT[273] & ~reg_be)) ) |
               ( addrHitNWrAllowed[274] & (|(ALERT_HANDLER_PERMIT[274] & ~reg_be)) ) |
               ( addrHitNWrAllowed[275] & (|(ALERT_HANDLER_PERMIT[275] & ~reg_be)) ) |
               ( addrHitNWrAllowed[276] & (|(ALERT_HANDLER_PERMIT[276] & ~reg_be)) ) |
               ( addrHitNWrAllowed[277] & (|(ALERT_HANDLER_PERMIT[277] & ~reg_be)) ) |
               ( addrHitNWrAllowed[278] & (|(ALERT_HANDLER_PERMIT[278] & ~reg_be)) ) |
               ( addrHitNWrAllowed[279] & (|(ALERT_HANDLER_PERMIT[279] & ~reg_be)) ) |
               ( addrHitNWrAllowed[280] & (|(ALERT_HANDLER_PERMIT[280] & ~reg_be)) ) |
               ( addrHitNWrAllowed[281] & (|(ALERT_HANDLER_PERMIT[281] & ~reg_be)) ) |
               ( addrHitNWrAllowed[282] & (|(ALERT_HANDLER_PERMIT[282] & ~reg_be)) ) |
               ( addrHitNWrAllowed[283] & (|(ALERT_HANDLER_PERMIT[283] & ~reg_be)) ) |
               ( addrHitNWrAllowed[284] & (|(ALERT_HANDLER_PERMIT[284] & ~reg_be)) ) |
               ( addrHitNWrAllowed[285] & (|(ALERT_HANDLER_PERMIT[285] & ~reg_be)) ) |
               ( addrHitNWrAllowed[286] & (|(ALERT_HANDLER_PERMIT[286] & ~reg_be)) ) |
               ( addrHitNWrAllowed[287] & (|(ALERT_HANDLER_PERMIT[287] & ~reg_be)) ) |
               ( addrHitNWrAllowed[288] & (|(ALERT_HANDLER_PERMIT[288] & ~reg_be)) ) |
               ( addrHitNWrAllowed[289] & (|(ALERT_HANDLER_PERMIT[289] & ~reg_be)) ) |
               ( addrHitNWrAllowed[290] & (|(ALERT_HANDLER_PERMIT[290] & ~reg_be)) ) |
               ( addrHitNWrAllowed[291] & (|(ALERT_HANDLER_PERMIT[291] & ~reg_be)) ) |
               ( addrHitNWrAllowed[292] & (|(ALERT_HANDLER_PERMIT[292] & ~reg_be)) ) |
               ( addrHitNWrAllowed[293] & (|(ALERT_HANDLER_PERMIT[293] & ~reg_be)) ) |
               ( addrHitNWrAllowed[294] & (|(ALERT_HANDLER_PERMIT[294] & ~reg_be)) ) |
               ( addrHitNWrAllowed[295] & (|(ALERT_HANDLER_PERMIT[295] & ~reg_be)) ) |
               ( addrHitNWrAllowed[296] & (|(ALERT_HANDLER_PERMIT[296] & ~reg_be)) ) |
               ( addrHitNWrAllowed[297] & (|(ALERT_HANDLER_PERMIT[297] & ~reg_be)) ) |
               ( addrHitNWrAllowed[298] & (|(ALERT_HANDLER_PERMIT[298] & ~reg_be)) ) |
               ( addrHitNWrAllowed[299] & (|(ALERT_HANDLER_PERMIT[299] & ~reg_be)) ) |
               ( addrHitNWrAllowed[300] & (|(ALERT_HANDLER_PERMIT[300] & ~reg_be)) ) |
               ( addrHitNWrAllowed[301] & (|(ALERT_HANDLER_PERMIT[301] & ~reg_be)) ) |
               ( addrHitNWrAllowed[302] & (|(ALERT_HANDLER_PERMIT[302] & ~reg_be)) ) |
               ( addrHitNWrAllowed[303] & (|(ALERT_HANDLER_PERMIT[303] & ~reg_be)) ) |
               ( addrHitNWrAllowed[304] & (|(ALERT_HANDLER_PERMIT[304] & ~reg_be)) ) |
               ( addrHitNWrAllowed[305] & (|(ALERT_HANDLER_PERMIT[305] & ~reg_be)) ) |
               ( addrHitNWrAllowed[306] & (|(ALERT_HANDLER_PERMIT[306] & ~reg_be)) ) |
               ( addrHitNWrAllowed[307] & (|(ALERT_HANDLER_PERMIT[307] & ~reg_be)) ) |
               ( addrHitNWrAllowed[308] & (|(ALERT_HANDLER_PERMIT[308] & ~reg_be)) ) |
               ( addrHitNWrAllowed[309] & (|(ALERT_HANDLER_PERMIT[309] & ~reg_be)) ) |
               ( addrHitNWrAllowed[310] & (|(ALERT_HANDLER_PERMIT[310] & ~reg_be)) ) |
               ( addrHitNWrAllowed[311] & (|(ALERT_HANDLER_PERMIT[311] & ~reg_be)) ) |
               ( addrHitNWrAllowed[312] & (|(ALERT_HANDLER_PERMIT[312] & ~reg_be)) ) |
               ( addrHitNWrAllowed[313] & (|(ALERT_HANDLER_PERMIT[313] & ~reg_be)) ) |
               ( addrHitNWrAllowed[314] & (|(ALERT_HANDLER_PERMIT[314] & ~reg_be)) ) |
               ( addrHitNWrAllowed[315] & (|(ALERT_HANDLER_PERMIT[315] & ~reg_be)) ) |
               ( addrHitNWrAllowed[316] & (|(ALERT_HANDLER_PERMIT[316] & ~reg_be)) ) |
               ( addrHitNWrAllowed[317] & (|(ALERT_HANDLER_PERMIT[317] & ~reg_be)) ) |
               ( addrHitNWrAllowed[318] & (|(ALERT_HANDLER_PERMIT[318] & ~reg_be)) ) |
               ( addrHitNWrAllowed[319] & (|(ALERT_HANDLER_PERMIT[319] & ~reg_be)) ) |
               ( addrHitNWrAllowed[320] & (|(ALERT_HANDLER_PERMIT[320] & ~reg_be)) ) |
               ( addrHitNWrAllowed[321] & (|(ALERT_HANDLER_PERMIT[321] & ~reg_be)) ) |
               ( addrHitNWrAllowed[322] & (|(ALERT_HANDLER_PERMIT[322] & ~reg_be)) ) |
               ( addrHitNWrAllowed[323] & (|(ALERT_HANDLER_PERMIT[323] & ~reg_be)) ) |
               ( addrHitNWrAllowed[324] & (|(ALERT_HANDLER_PERMIT[324] & ~reg_be)) ) |
               ( addrHitNWrAllowed[325] & (|(ALERT_HANDLER_PERMIT[325] & ~reg_be)) ) |
               ( addrHitNWrAllowed[326] & (|(ALERT_HANDLER_PERMIT[326] & ~reg_be)) ) |
               ( addrHitNWrAllowed[327] & (|(ALERT_HANDLER_PERMIT[327] & ~reg_be)) ) |
               ( addrHitNWrAllowed[328] & (|(ALERT_HANDLER_PERMIT[328] & ~reg_be)) ) |
               ( addrHitNWrAllowed[329] & (|(ALERT_HANDLER_PERMIT[329] & ~reg_be)) ) |
               ( addrHitNWrAllowed[330] & (|(ALERT_HANDLER_PERMIT[330] & ~reg_be)) ) |
               ( addrHitNWrAllowed[331] & (|(ALERT_HANDLER_PERMIT[331] & ~reg_be)) ) |
               ( addrHitNWrAllowed[332] & (|(ALERT_HANDLER_PERMIT[332] & ~reg_be)) ) |
               ( addrHitNWrAllowed[333] & (|(ALERT_HANDLER_PERMIT[333] & ~reg_be)) ) |
               ( addrHitNWrAllowed[334] & (|(ALERT_HANDLER_PERMIT[334] & ~reg_be)) ) |
               ( addrHitNWrAllowed[335] & (|(ALERT_HANDLER_PERMIT[335] & ~reg_be)) ) |
               ( addrHitNWrAllowed[336] & (|(ALERT_HANDLER_PERMIT[336] & ~reg_be)) ) |
               ( addrHitNWrAllowed[337] & (|(ALERT_HANDLER_PERMIT[337] & ~reg_be)) ) |
               ( addrHitNWrAllowed[338] & (|(ALERT_HANDLER_PERMIT[338] & ~reg_be)) ) |
               ( addrHitNWrAllowed[339] & (|(ALERT_HANDLER_PERMIT[339] & ~reg_be)) ) |
               ( addrHitNWrAllowed[340] & (|(ALERT_HANDLER_PERMIT[340] & ~reg_be)) ) |
               ( addrHitNWrAllowed[341] & (|(ALERT_HANDLER_PERMIT[341] & ~reg_be)) ) |
               ( addrHitNWrAllowed[342] & (|(ALERT_HANDLER_PERMIT[342] & ~reg_be)) ) |
               ( addrHitNWrAllowed[343] & (|(ALERT_HANDLER_PERMIT[343] & ~reg_be)) ) |
               ( addrHitNWrAllowed[344] & (|(ALERT_HANDLER_PERMIT[344] & ~reg_be)) ) |
               ( addrHitNWrAllowed[345] & (|(ALERT_HANDLER_PERMIT[345] & ~reg_be)) ) );
  end

  // Generate write-enables
  assign INTR_STATE_we = addrHitNWrAllowed[0] & reg_we & !reg_error;
  assign INTR_STATE_classa_wd = reg_wdata[0];

  assign INTR_STATE_classb_wd = reg_wdata[1];

  assign INTR_STATE_classc_wd = reg_wdata[2];

  assign INTR_STATE_classd_wd = reg_wdata[3];

  assign INTR_ENABLE_we = addrHitNWrAllowed[1] & reg_we & !reg_error;
  assign INTR_ENABLE_classa_wd = reg_wdata[0];

  assign INTR_ENABLE_classb_wd = reg_wdata[1];

  assign INTR_ENABLE_classc_wd = reg_wdata[2];

  assign INTR_ENABLE_classd_wd = reg_wdata[3];

  assign INTR_TEST_we = addrHitNWrAllowed[2] & reg_we & !reg_error;
  assign INTR_TEST_classa_wd = reg_wdata[0];

  assign INTR_TEST_classb_wd = reg_wdata[1];

  assign INTR_TEST_classc_wd = reg_wdata[2];

  assign INTR_TEST_classd_wd = reg_wdata[3];

  assign PING_TIMER_REGWEN_we = addrHitNWrAllowed[3] & reg_we & !reg_error;
  assign PING_TIMER_REGWEN_wd = reg_wdata[0];

  assign PING_TIMEOUT_CYC_SHADOWED_re = addrHitNRdAllowed[4] & reg_re & !reg_error;
  assign PING_TIMEOUT_CYC_SHADOWED_we = addrHitNWrAllowed[4] & reg_we & !reg_error;
  assign PING_TIMEOUT_CYC_SHADOWED_wd = reg_wdata[15:0];

  assign PING_TIMER_EN_SHADOWED_re = addrHitNRdAllowed[5] & reg_re & !reg_error;
  assign PING_TIMER_EN_SHADOWED_we = addrHitNWrAllowed[5] & reg_we & !reg_error;
  assign PING_TIMER_EN_SHADOWED_wd = reg_wdata[0];

  assign ALERT_REGWEN_0_we = addrHitNWrAllowed[6] & reg_we & !reg_error;
  assign ALERT_REGWEN_0_wd = reg_wdata[0];

  assign ALERT_REGWEN_1_we = addrHitNWrAllowed[7] & reg_we & !reg_error;
  assign ALERT_REGWEN_1_wd = reg_wdata[0];

  assign ALERT_REGWEN_2_we = addrHitNWrAllowed[8] & reg_we & !reg_error;
  assign ALERT_REGWEN_2_wd = reg_wdata[0];

  assign ALERT_REGWEN_3_we = addrHitNWrAllowed[9] & reg_we & !reg_error;
  assign ALERT_REGWEN_3_wd = reg_wdata[0];

  assign ALERT_REGWEN_4_we = addrHitNWrAllowed[10] & reg_we & !reg_error;
  assign ALERT_REGWEN_4_wd = reg_wdata[0];

  assign ALERT_REGWEN_5_we = addrHitNWrAllowed[11] & reg_we & !reg_error;
  assign ALERT_REGWEN_5_wd = reg_wdata[0];

  assign ALERT_REGWEN_6_we = addrHitNWrAllowed[12] & reg_we & !reg_error;
  assign ALERT_REGWEN_6_wd = reg_wdata[0];

  assign ALERT_REGWEN_7_we = addrHitNWrAllowed[13] & reg_we & !reg_error;
  assign ALERT_REGWEN_7_wd = reg_wdata[0];

  assign ALERT_REGWEN_8_we = addrHitNWrAllowed[14] & reg_we & !reg_error;
  assign ALERT_REGWEN_8_wd = reg_wdata[0];

  assign ALERT_REGWEN_9_we = addrHitNWrAllowed[15] & reg_we & !reg_error;
  assign ALERT_REGWEN_9_wd = reg_wdata[0];

  assign ALERT_REGWEN_10_we = addrHitNWrAllowed[16] & reg_we & !reg_error;
  assign ALERT_REGWEN_10_wd = reg_wdata[0];

  assign ALERT_REGWEN_11_we = addrHitNWrAllowed[17] & reg_we & !reg_error;
  assign ALERT_REGWEN_11_wd = reg_wdata[0];

  assign ALERT_REGWEN_12_we = addrHitNWrAllowed[18] & reg_we & !reg_error;
  assign ALERT_REGWEN_12_wd = reg_wdata[0];

  assign ALERT_REGWEN_13_we = addrHitNWrAllowed[19] & reg_we & !reg_error;
  assign ALERT_REGWEN_13_wd = reg_wdata[0];

  assign ALERT_REGWEN_14_we = addrHitNWrAllowed[20] & reg_we & !reg_error;
  assign ALERT_REGWEN_14_wd = reg_wdata[0];

  assign ALERT_REGWEN_15_we = addrHitNWrAllowed[21] & reg_we & !reg_error;
  assign ALERT_REGWEN_15_wd = reg_wdata[0];

  assign ALERT_REGWEN_16_we = addrHitNWrAllowed[22] & reg_we & !reg_error;
  assign ALERT_REGWEN_16_wd = reg_wdata[0];

  assign ALERT_REGWEN_17_we = addrHitNWrAllowed[23] & reg_we & !reg_error;
  assign ALERT_REGWEN_17_wd = reg_wdata[0];

  assign ALERT_REGWEN_18_we = addrHitNWrAllowed[24] & reg_we & !reg_error;
  assign ALERT_REGWEN_18_wd = reg_wdata[0];

  assign ALERT_REGWEN_19_we = addrHitNWrAllowed[25] & reg_we & !reg_error;
  assign ALERT_REGWEN_19_wd = reg_wdata[0];

  assign ALERT_REGWEN_20_we = addrHitNWrAllowed[26] & reg_we & !reg_error;
  assign ALERT_REGWEN_20_wd = reg_wdata[0];

  assign ALERT_REGWEN_21_we = addrHitNWrAllowed[27] & reg_we & !reg_error;
  assign ALERT_REGWEN_21_wd = reg_wdata[0];

  assign ALERT_REGWEN_22_we = addrHitNWrAllowed[28] & reg_we & !reg_error;
  assign ALERT_REGWEN_22_wd = reg_wdata[0];

  assign ALERT_REGWEN_23_we = addrHitNWrAllowed[29] & reg_we & !reg_error;
  assign ALERT_REGWEN_23_wd = reg_wdata[0];

  assign ALERT_REGWEN_24_we = addrHitNWrAllowed[30] & reg_we & !reg_error;
  assign ALERT_REGWEN_24_wd = reg_wdata[0];

  assign ALERT_REGWEN_25_we = addrHitNWrAllowed[31] & reg_we & !reg_error;
  assign ALERT_REGWEN_25_wd = reg_wdata[0];

  assign ALERT_REGWEN_26_we = addrHitNWrAllowed[32] & reg_we & !reg_error;
  assign ALERT_REGWEN_26_wd = reg_wdata[0];

  assign ALERT_REGWEN_27_we = addrHitNWrAllowed[33] & reg_we & !reg_error;
  assign ALERT_REGWEN_27_wd = reg_wdata[0];

  assign ALERT_REGWEN_28_we = addrHitNWrAllowed[34] & reg_we & !reg_error;
  assign ALERT_REGWEN_28_wd = reg_wdata[0];

  assign ALERT_REGWEN_29_we = addrHitNWrAllowed[35] & reg_we & !reg_error;
  assign ALERT_REGWEN_29_wd = reg_wdata[0];

  assign ALERT_REGWEN_30_we = addrHitNWrAllowed[36] & reg_we & !reg_error;
  assign ALERT_REGWEN_30_wd = reg_wdata[0];

  assign ALERT_REGWEN_31_we = addrHitNWrAllowed[37] & reg_we & !reg_error;
  assign ALERT_REGWEN_31_wd = reg_wdata[0];

  assign ALERT_REGWEN_32_we = addrHitNWrAllowed[38] & reg_we & !reg_error;
  assign ALERT_REGWEN_32_wd = reg_wdata[0];

  assign ALERT_REGWEN_33_we = addrHitNWrAllowed[39] & reg_we & !reg_error;
  assign ALERT_REGWEN_33_wd = reg_wdata[0];

  assign ALERT_REGWEN_34_we = addrHitNWrAllowed[40] & reg_we & !reg_error;
  assign ALERT_REGWEN_34_wd = reg_wdata[0];

  assign ALERT_REGWEN_35_we = addrHitNWrAllowed[41] & reg_we & !reg_error;
  assign ALERT_REGWEN_35_wd = reg_wdata[0];

  assign ALERT_REGWEN_36_we = addrHitNWrAllowed[42] & reg_we & !reg_error;
  assign ALERT_REGWEN_36_wd = reg_wdata[0];

  assign ALERT_REGWEN_37_we = addrHitNWrAllowed[43] & reg_we & !reg_error;
  assign ALERT_REGWEN_37_wd = reg_wdata[0];

  assign ALERT_REGWEN_38_we = addrHitNWrAllowed[44] & reg_we & !reg_error;
  assign ALERT_REGWEN_38_wd = reg_wdata[0];

  assign ALERT_REGWEN_39_we = addrHitNWrAllowed[45] & reg_we & !reg_error;
  assign ALERT_REGWEN_39_wd = reg_wdata[0];

  assign ALERT_REGWEN_40_we = addrHitNWrAllowed[46] & reg_we & !reg_error;
  assign ALERT_REGWEN_40_wd = reg_wdata[0];

  assign ALERT_REGWEN_41_we = addrHitNWrAllowed[47] & reg_we & !reg_error;
  assign ALERT_REGWEN_41_wd = reg_wdata[0];

  assign ALERT_REGWEN_42_we = addrHitNWrAllowed[48] & reg_we & !reg_error;
  assign ALERT_REGWEN_42_wd = reg_wdata[0];

  assign ALERT_REGWEN_43_we = addrHitNWrAllowed[49] & reg_we & !reg_error;
  assign ALERT_REGWEN_43_wd = reg_wdata[0];

  assign ALERT_REGWEN_44_we = addrHitNWrAllowed[50] & reg_we & !reg_error;
  assign ALERT_REGWEN_44_wd = reg_wdata[0];

  assign ALERT_REGWEN_45_we = addrHitNWrAllowed[51] & reg_we & !reg_error;
  assign ALERT_REGWEN_45_wd = reg_wdata[0];

  assign ALERT_REGWEN_46_we = addrHitNWrAllowed[52] & reg_we & !reg_error;
  assign ALERT_REGWEN_46_wd = reg_wdata[0];

  assign ALERT_REGWEN_47_we = addrHitNWrAllowed[53] & reg_we & !reg_error;
  assign ALERT_REGWEN_47_wd = reg_wdata[0];

  assign ALERT_REGWEN_48_we = addrHitNWrAllowed[54] & reg_we & !reg_error;
  assign ALERT_REGWEN_48_wd = reg_wdata[0];

  assign ALERT_REGWEN_49_we = addrHitNWrAllowed[55] & reg_we & !reg_error;
  assign ALERT_REGWEN_49_wd = reg_wdata[0];

  assign ALERT_REGWEN_50_we = addrHitNWrAllowed[56] & reg_we & !reg_error;
  assign ALERT_REGWEN_50_wd = reg_wdata[0];

  assign ALERT_REGWEN_51_we = addrHitNWrAllowed[57] & reg_we & !reg_error;
  assign ALERT_REGWEN_51_wd = reg_wdata[0];

  assign ALERT_REGWEN_52_we = addrHitNWrAllowed[58] & reg_we & !reg_error;
  assign ALERT_REGWEN_52_wd = reg_wdata[0];

  assign ALERT_REGWEN_53_we = addrHitNWrAllowed[59] & reg_we & !reg_error;
  assign ALERT_REGWEN_53_wd = reg_wdata[0];

  assign ALERT_REGWEN_54_we = addrHitNWrAllowed[60] & reg_we & !reg_error;
  assign ALERT_REGWEN_54_wd = reg_wdata[0];

  assign ALERT_REGWEN_55_we = addrHitNWrAllowed[61] & reg_we & !reg_error;
  assign ALERT_REGWEN_55_wd = reg_wdata[0];

  assign ALERT_REGWEN_56_we = addrHitNWrAllowed[62] & reg_we & !reg_error;
  assign ALERT_REGWEN_56_wd = reg_wdata[0];

  assign ALERT_REGWEN_57_we = addrHitNWrAllowed[63] & reg_we & !reg_error;
  assign ALERT_REGWEN_57_wd = reg_wdata[0];

  assign ALERT_REGWEN_58_we = addrHitNWrAllowed[64] & reg_we & !reg_error;
  assign ALERT_REGWEN_58_wd = reg_wdata[0];

  assign ALERT_REGWEN_59_we = addrHitNWrAllowed[65] & reg_we & !reg_error;
  assign ALERT_REGWEN_59_wd = reg_wdata[0];

  assign ALERT_REGWEN_60_we = addrHitNWrAllowed[66] & reg_we & !reg_error;
  assign ALERT_REGWEN_60_wd = reg_wdata[0];

  assign ALERT_REGWEN_61_we = addrHitNWrAllowed[67] & reg_we & !reg_error;
  assign ALERT_REGWEN_61_wd = reg_wdata[0];

  assign ALERT_REGWEN_62_we = addrHitNWrAllowed[68] & reg_we & !reg_error;
  assign ALERT_REGWEN_62_wd = reg_wdata[0];

  assign ALERT_REGWEN_63_we = addrHitNWrAllowed[69] & reg_we & !reg_error;
  assign ALERT_REGWEN_63_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_0_re = addrHitNRdAllowed[70] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_0_we = addrHitNWrAllowed[70] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_0_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_1_re = addrHitNRdAllowed[71] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_1_we = addrHitNWrAllowed[71] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_1_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_2_re = addrHitNRdAllowed[72] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_2_we = addrHitNWrAllowed[72] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_2_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_3_re = addrHitNRdAllowed[73] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_3_we = addrHitNWrAllowed[73] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_3_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_4_re = addrHitNRdAllowed[74] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_4_we = addrHitNWrAllowed[74] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_4_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_5_re = addrHitNRdAllowed[75] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_5_we = addrHitNWrAllowed[75] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_5_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_6_re = addrHitNRdAllowed[76] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_6_we = addrHitNWrAllowed[76] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_6_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_7_re = addrHitNRdAllowed[77] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_7_we = addrHitNWrAllowed[77] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_7_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_8_re = addrHitNRdAllowed[78] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_8_we = addrHitNWrAllowed[78] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_8_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_9_re = addrHitNRdAllowed[79] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_9_we = addrHitNWrAllowed[79] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_9_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_10_re = addrHitNRdAllowed[80] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_10_we = addrHitNWrAllowed[80] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_10_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_11_re = addrHitNRdAllowed[81] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_11_we = addrHitNWrAllowed[81] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_11_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_12_re = addrHitNRdAllowed[82] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_12_we = addrHitNWrAllowed[82] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_12_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_13_re = addrHitNRdAllowed[83] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_13_we = addrHitNWrAllowed[83] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_13_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_14_re = addrHitNRdAllowed[84] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_14_we = addrHitNWrAllowed[84] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_14_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_15_re = addrHitNRdAllowed[85] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_15_we = addrHitNWrAllowed[85] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_15_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_16_re = addrHitNRdAllowed[86] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_16_we = addrHitNWrAllowed[86] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_16_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_17_re = addrHitNRdAllowed[87] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_17_we = addrHitNWrAllowed[87] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_17_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_18_re = addrHitNRdAllowed[88] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_18_we = addrHitNWrAllowed[88] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_18_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_19_re = addrHitNRdAllowed[89] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_19_we = addrHitNWrAllowed[89] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_19_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_20_re = addrHitNRdAllowed[90] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_20_we = addrHitNWrAllowed[90] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_20_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_21_re = addrHitNRdAllowed[91] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_21_we = addrHitNWrAllowed[91] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_21_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_22_re = addrHitNRdAllowed[92] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_22_we = addrHitNWrAllowed[92] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_22_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_23_re = addrHitNRdAllowed[93] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_23_we = addrHitNWrAllowed[93] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_23_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_24_re = addrHitNRdAllowed[94] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_24_we = addrHitNWrAllowed[94] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_24_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_25_re = addrHitNRdAllowed[95] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_25_we = addrHitNWrAllowed[95] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_25_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_26_re = addrHitNRdAllowed[96] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_26_we = addrHitNWrAllowed[96] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_26_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_27_re = addrHitNRdAllowed[97] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_27_we = addrHitNWrAllowed[97] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_27_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_28_re = addrHitNRdAllowed[98] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_28_we = addrHitNWrAllowed[98] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_28_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_29_re = addrHitNRdAllowed[99] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_29_we = addrHitNWrAllowed[99] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_29_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_30_re = addrHitNRdAllowed[100] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_30_we = addrHitNWrAllowed[100] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_30_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_31_re = addrHitNRdAllowed[101] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_31_we = addrHitNWrAllowed[101] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_31_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_32_re = addrHitNRdAllowed[102] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_32_we = addrHitNWrAllowed[102] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_32_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_33_re = addrHitNRdAllowed[103] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_33_we = addrHitNWrAllowed[103] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_33_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_34_re = addrHitNRdAllowed[104] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_34_we = addrHitNWrAllowed[104] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_34_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_35_re = addrHitNRdAllowed[105] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_35_we = addrHitNWrAllowed[105] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_35_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_36_re = addrHitNRdAllowed[106] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_36_we = addrHitNWrAllowed[106] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_36_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_37_re = addrHitNRdAllowed[107] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_37_we = addrHitNWrAllowed[107] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_37_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_38_re = addrHitNRdAllowed[108] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_38_we = addrHitNWrAllowed[108] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_38_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_39_re = addrHitNRdAllowed[109] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_39_we = addrHitNWrAllowed[109] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_39_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_40_re = addrHitNRdAllowed[110] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_40_we = addrHitNWrAllowed[110] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_40_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_41_re = addrHitNRdAllowed[111] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_41_we = addrHitNWrAllowed[111] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_41_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_42_re = addrHitNRdAllowed[112] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_42_we = addrHitNWrAllowed[112] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_42_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_43_re = addrHitNRdAllowed[113] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_43_we = addrHitNWrAllowed[113] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_43_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_44_re = addrHitNRdAllowed[114] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_44_we = addrHitNWrAllowed[114] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_44_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_45_re = addrHitNRdAllowed[115] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_45_we = addrHitNWrAllowed[115] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_45_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_46_re = addrHitNRdAllowed[116] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_46_we = addrHitNWrAllowed[116] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_46_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_47_re = addrHitNRdAllowed[117] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_47_we = addrHitNWrAllowed[117] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_47_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_48_re = addrHitNRdAllowed[118] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_48_we = addrHitNWrAllowed[118] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_48_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_49_re = addrHitNRdAllowed[119] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_49_we = addrHitNWrAllowed[119] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_49_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_50_re = addrHitNRdAllowed[120] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_50_we = addrHitNWrAllowed[120] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_50_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_51_re = addrHitNRdAllowed[121] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_51_we = addrHitNWrAllowed[121] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_51_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_52_re = addrHitNRdAllowed[122] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_52_we = addrHitNWrAllowed[122] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_52_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_53_re = addrHitNRdAllowed[123] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_53_we = addrHitNWrAllowed[123] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_53_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_54_re = addrHitNRdAllowed[124] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_54_we = addrHitNWrAllowed[124] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_54_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_55_re = addrHitNRdAllowed[125] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_55_we = addrHitNWrAllowed[125] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_55_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_56_re = addrHitNRdAllowed[126] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_56_we = addrHitNWrAllowed[126] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_56_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_57_re = addrHitNRdAllowed[127] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_57_we = addrHitNWrAllowed[127] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_57_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_58_re = addrHitNRdAllowed[128] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_58_we = addrHitNWrAllowed[128] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_58_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_59_re = addrHitNRdAllowed[129] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_59_we = addrHitNWrAllowed[129] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_59_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_60_re = addrHitNRdAllowed[130] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_60_we = addrHitNWrAllowed[130] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_60_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_61_re = addrHitNRdAllowed[131] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_61_we = addrHitNWrAllowed[131] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_61_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_62_re = addrHitNRdAllowed[132] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_62_we = addrHitNWrAllowed[132] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_62_wd = reg_wdata[0];

  assign ALERT_EN_SHADOWED_63_re = addrHitNRdAllowed[133] & reg_re & !reg_error;
  assign ALERT_EN_SHADOWED_63_we = addrHitNWrAllowed[133] & reg_we & !reg_error;
  assign ALERT_EN_SHADOWED_63_wd = reg_wdata[0];

  assign ALERT_CLASS_SHADOWED_0_re = addrHitNRdAllowed[134] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_0_we = addrHitNWrAllowed[134] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_0_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_1_re = addrHitNRdAllowed[135] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_1_we = addrHitNWrAllowed[135] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_1_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_2_re = addrHitNRdAllowed[136] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_2_we = addrHitNWrAllowed[136] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_2_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_3_re = addrHitNRdAllowed[137] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_3_we = addrHitNWrAllowed[137] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_3_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_4_re = addrHitNRdAllowed[138] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_4_we = addrHitNWrAllowed[138] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_4_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_5_re = addrHitNRdAllowed[139] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_5_we = addrHitNWrAllowed[139] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_5_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_6_re = addrHitNRdAllowed[140] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_6_we = addrHitNWrAllowed[140] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_6_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_7_re = addrHitNRdAllowed[141] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_7_we = addrHitNWrAllowed[141] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_7_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_8_re = addrHitNRdAllowed[142] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_8_we = addrHitNWrAllowed[142] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_8_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_9_re = addrHitNRdAllowed[143] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_9_we = addrHitNWrAllowed[143] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_9_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_10_re = addrHitNRdAllowed[144] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_10_we = addrHitNWrAllowed[144] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_10_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_11_re = addrHitNRdAllowed[145] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_11_we = addrHitNWrAllowed[145] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_11_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_12_re = addrHitNRdAllowed[146] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_12_we = addrHitNWrAllowed[146] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_12_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_13_re = addrHitNRdAllowed[147] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_13_we = addrHitNWrAllowed[147] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_13_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_14_re = addrHitNRdAllowed[148] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_14_we = addrHitNWrAllowed[148] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_14_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_15_re = addrHitNRdAllowed[149] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_15_we = addrHitNWrAllowed[149] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_15_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_16_re = addrHitNRdAllowed[150] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_16_we = addrHitNWrAllowed[150] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_16_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_17_re = addrHitNRdAllowed[151] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_17_we = addrHitNWrAllowed[151] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_17_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_18_re = addrHitNRdAllowed[152] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_18_we = addrHitNWrAllowed[152] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_18_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_19_re = addrHitNRdAllowed[153] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_19_we = addrHitNWrAllowed[153] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_19_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_20_re = addrHitNRdAllowed[154] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_20_we = addrHitNWrAllowed[154] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_20_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_21_re = addrHitNRdAllowed[155] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_21_we = addrHitNWrAllowed[155] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_21_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_22_re = addrHitNRdAllowed[156] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_22_we = addrHitNWrAllowed[156] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_22_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_23_re = addrHitNRdAllowed[157] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_23_we = addrHitNWrAllowed[157] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_23_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_24_re = addrHitNRdAllowed[158] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_24_we = addrHitNWrAllowed[158] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_24_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_25_re = addrHitNRdAllowed[159] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_25_we = addrHitNWrAllowed[159] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_25_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_26_re = addrHitNRdAllowed[160] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_26_we = addrHitNWrAllowed[160] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_26_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_27_re = addrHitNRdAllowed[161] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_27_we = addrHitNWrAllowed[161] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_27_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_28_re = addrHitNRdAllowed[162] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_28_we = addrHitNWrAllowed[162] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_28_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_29_re = addrHitNRdAllowed[163] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_29_we = addrHitNWrAllowed[163] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_29_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_30_re = addrHitNRdAllowed[164] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_30_we = addrHitNWrAllowed[164] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_30_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_31_re = addrHitNRdAllowed[165] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_31_we = addrHitNWrAllowed[165] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_31_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_32_re = addrHitNRdAllowed[166] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_32_we = addrHitNWrAllowed[166] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_32_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_33_re = addrHitNRdAllowed[167] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_33_we = addrHitNWrAllowed[167] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_33_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_34_re = addrHitNRdAllowed[168] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_34_we = addrHitNWrAllowed[168] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_34_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_35_re = addrHitNRdAllowed[169] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_35_we = addrHitNWrAllowed[169] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_35_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_36_re = addrHitNRdAllowed[170] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_36_we = addrHitNWrAllowed[170] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_36_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_37_re = addrHitNRdAllowed[171] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_37_we = addrHitNWrAllowed[171] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_37_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_38_re = addrHitNRdAllowed[172] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_38_we = addrHitNWrAllowed[172] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_38_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_39_re = addrHitNRdAllowed[173] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_39_we = addrHitNWrAllowed[173] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_39_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_40_re = addrHitNRdAllowed[174] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_40_we = addrHitNWrAllowed[174] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_40_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_41_re = addrHitNRdAllowed[175] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_41_we = addrHitNWrAllowed[175] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_41_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_42_re = addrHitNRdAllowed[176] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_42_we = addrHitNWrAllowed[176] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_42_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_43_re = addrHitNRdAllowed[177] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_43_we = addrHitNWrAllowed[177] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_43_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_44_re = addrHitNRdAllowed[178] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_44_we = addrHitNWrAllowed[178] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_44_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_45_re = addrHitNRdAllowed[179] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_45_we = addrHitNWrAllowed[179] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_45_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_46_re = addrHitNRdAllowed[180] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_46_we = addrHitNWrAllowed[180] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_46_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_47_re = addrHitNRdAllowed[181] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_47_we = addrHitNWrAllowed[181] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_47_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_48_re = addrHitNRdAllowed[182] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_48_we = addrHitNWrAllowed[182] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_48_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_49_re = addrHitNRdAllowed[183] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_49_we = addrHitNWrAllowed[183] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_49_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_50_re = addrHitNRdAllowed[184] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_50_we = addrHitNWrAllowed[184] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_50_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_51_re = addrHitNRdAllowed[185] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_51_we = addrHitNWrAllowed[185] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_51_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_52_re = addrHitNRdAllowed[186] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_52_we = addrHitNWrAllowed[186] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_52_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_53_re = addrHitNRdAllowed[187] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_53_we = addrHitNWrAllowed[187] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_53_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_54_re = addrHitNRdAllowed[188] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_54_we = addrHitNWrAllowed[188] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_54_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_55_re = addrHitNRdAllowed[189] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_55_we = addrHitNWrAllowed[189] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_55_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_56_re = addrHitNRdAllowed[190] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_56_we = addrHitNWrAllowed[190] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_56_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_57_re = addrHitNRdAllowed[191] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_57_we = addrHitNWrAllowed[191] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_57_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_58_re = addrHitNRdAllowed[192] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_58_we = addrHitNWrAllowed[192] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_58_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_59_re = addrHitNRdAllowed[193] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_59_we = addrHitNWrAllowed[193] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_59_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_60_re = addrHitNRdAllowed[194] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_60_we = addrHitNWrAllowed[194] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_60_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_61_re = addrHitNRdAllowed[195] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_61_we = addrHitNWrAllowed[195] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_61_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_62_re = addrHitNRdAllowed[196] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_62_we = addrHitNWrAllowed[196] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_62_wd = reg_wdata[1:0];

  assign ALERT_CLASS_SHADOWED_63_re = addrHitNRdAllowed[197] & reg_re & !reg_error;
  assign ALERT_CLASS_SHADOWED_63_we = addrHitNWrAllowed[197] & reg_we & !reg_error;
  assign ALERT_CLASS_SHADOWED_63_wd = reg_wdata[1:0];

  assign ALERT_CAUSE_0_we = addrHitNWrAllowed[198] & reg_we & !reg_error;
  assign ALERT_CAUSE_0_wd = reg_wdata[0];

  assign ALERT_CAUSE_1_we = addrHitNWrAllowed[199] & reg_we & !reg_error;
  assign ALERT_CAUSE_1_wd = reg_wdata[0];

  assign ALERT_CAUSE_2_we = addrHitNWrAllowed[200] & reg_we & !reg_error;
  assign ALERT_CAUSE_2_wd = reg_wdata[0];

  assign ALERT_CAUSE_3_we = addrHitNWrAllowed[201] & reg_we & !reg_error;
  assign ALERT_CAUSE_3_wd = reg_wdata[0];

  assign ALERT_CAUSE_4_we = addrHitNWrAllowed[202] & reg_we & !reg_error;
  assign ALERT_CAUSE_4_wd = reg_wdata[0];

  assign ALERT_CAUSE_5_we = addrHitNWrAllowed[203] & reg_we & !reg_error;
  assign ALERT_CAUSE_5_wd = reg_wdata[0];

  assign ALERT_CAUSE_6_we = addrHitNWrAllowed[204] & reg_we & !reg_error;
  assign ALERT_CAUSE_6_wd = reg_wdata[0];

  assign ALERT_CAUSE_7_we = addrHitNWrAllowed[205] & reg_we & !reg_error;
  assign ALERT_CAUSE_7_wd = reg_wdata[0];

  assign ALERT_CAUSE_8_we = addrHitNWrAllowed[206] & reg_we & !reg_error;
  assign ALERT_CAUSE_8_wd = reg_wdata[0];

  assign ALERT_CAUSE_9_we = addrHitNWrAllowed[207] & reg_we & !reg_error;
  assign ALERT_CAUSE_9_wd = reg_wdata[0];

  assign ALERT_CAUSE_10_we = addrHitNWrAllowed[208] & reg_we & !reg_error;
  assign ALERT_CAUSE_10_wd = reg_wdata[0];

  assign ALERT_CAUSE_11_we = addrHitNWrAllowed[209] & reg_we & !reg_error;
  assign ALERT_CAUSE_11_wd = reg_wdata[0];

  assign ALERT_CAUSE_12_we = addrHitNWrAllowed[210] & reg_we & !reg_error;
  assign ALERT_CAUSE_12_wd = reg_wdata[0];

  assign ALERT_CAUSE_13_we = addrHitNWrAllowed[211] & reg_we & !reg_error;
  assign ALERT_CAUSE_13_wd = reg_wdata[0];

  assign ALERT_CAUSE_14_we = addrHitNWrAllowed[212] & reg_we & !reg_error;
  assign ALERT_CAUSE_14_wd = reg_wdata[0];

  assign ALERT_CAUSE_15_we = addrHitNWrAllowed[213] & reg_we & !reg_error;
  assign ALERT_CAUSE_15_wd = reg_wdata[0];

  assign ALERT_CAUSE_16_we = addrHitNWrAllowed[214] & reg_we & !reg_error;
  assign ALERT_CAUSE_16_wd = reg_wdata[0];

  assign ALERT_CAUSE_17_we = addrHitNWrAllowed[215] & reg_we & !reg_error;
  assign ALERT_CAUSE_17_wd = reg_wdata[0];

  assign ALERT_CAUSE_18_we = addrHitNWrAllowed[216] & reg_we & !reg_error;
  assign ALERT_CAUSE_18_wd = reg_wdata[0];

  assign ALERT_CAUSE_19_we = addrHitNWrAllowed[217] & reg_we & !reg_error;
  assign ALERT_CAUSE_19_wd = reg_wdata[0];

  assign ALERT_CAUSE_20_we = addrHitNWrAllowed[218] & reg_we & !reg_error;
  assign ALERT_CAUSE_20_wd = reg_wdata[0];

  assign ALERT_CAUSE_21_we = addrHitNWrAllowed[219] & reg_we & !reg_error;
  assign ALERT_CAUSE_21_wd = reg_wdata[0];

  assign ALERT_CAUSE_22_we = addrHitNWrAllowed[220] & reg_we & !reg_error;
  assign ALERT_CAUSE_22_wd = reg_wdata[0];

  assign ALERT_CAUSE_23_we = addrHitNWrAllowed[221] & reg_we & !reg_error;
  assign ALERT_CAUSE_23_wd = reg_wdata[0];

  assign ALERT_CAUSE_24_we = addrHitNWrAllowed[222] & reg_we & !reg_error;
  assign ALERT_CAUSE_24_wd = reg_wdata[0];

  assign ALERT_CAUSE_25_we = addrHitNWrAllowed[223] & reg_we & !reg_error;
  assign ALERT_CAUSE_25_wd = reg_wdata[0];

  assign ALERT_CAUSE_26_we = addrHitNWrAllowed[224] & reg_we & !reg_error;
  assign ALERT_CAUSE_26_wd = reg_wdata[0];

  assign ALERT_CAUSE_27_we = addrHitNWrAllowed[225] & reg_we & !reg_error;
  assign ALERT_CAUSE_27_wd = reg_wdata[0];

  assign ALERT_CAUSE_28_we = addrHitNWrAllowed[226] & reg_we & !reg_error;
  assign ALERT_CAUSE_28_wd = reg_wdata[0];

  assign ALERT_CAUSE_29_we = addrHitNWrAllowed[227] & reg_we & !reg_error;
  assign ALERT_CAUSE_29_wd = reg_wdata[0];

  assign ALERT_CAUSE_30_we = addrHitNWrAllowed[228] & reg_we & !reg_error;
  assign ALERT_CAUSE_30_wd = reg_wdata[0];

  assign ALERT_CAUSE_31_we = addrHitNWrAllowed[229] & reg_we & !reg_error;
  assign ALERT_CAUSE_31_wd = reg_wdata[0];

  assign ALERT_CAUSE_32_we = addrHitNWrAllowed[230] & reg_we & !reg_error;
  assign ALERT_CAUSE_32_wd = reg_wdata[0];

  assign ALERT_CAUSE_33_we = addrHitNWrAllowed[231] & reg_we & !reg_error;
  assign ALERT_CAUSE_33_wd = reg_wdata[0];

  assign ALERT_CAUSE_34_we = addrHitNWrAllowed[232] & reg_we & !reg_error;
  assign ALERT_CAUSE_34_wd = reg_wdata[0];

  assign ALERT_CAUSE_35_we = addrHitNWrAllowed[233] & reg_we & !reg_error;
  assign ALERT_CAUSE_35_wd = reg_wdata[0];

  assign ALERT_CAUSE_36_we = addrHitNWrAllowed[234] & reg_we & !reg_error;
  assign ALERT_CAUSE_36_wd = reg_wdata[0];

  assign ALERT_CAUSE_37_we = addrHitNWrAllowed[235] & reg_we & !reg_error;
  assign ALERT_CAUSE_37_wd = reg_wdata[0];

  assign ALERT_CAUSE_38_we = addrHitNWrAllowed[236] & reg_we & !reg_error;
  assign ALERT_CAUSE_38_wd = reg_wdata[0];

  assign ALERT_CAUSE_39_we = addrHitNWrAllowed[237] & reg_we & !reg_error;
  assign ALERT_CAUSE_39_wd = reg_wdata[0];

  assign ALERT_CAUSE_40_we = addrHitNWrAllowed[238] & reg_we & !reg_error;
  assign ALERT_CAUSE_40_wd = reg_wdata[0];

  assign ALERT_CAUSE_41_we = addrHitNWrAllowed[239] & reg_we & !reg_error;
  assign ALERT_CAUSE_41_wd = reg_wdata[0];

  assign ALERT_CAUSE_42_we = addrHitNWrAllowed[240] & reg_we & !reg_error;
  assign ALERT_CAUSE_42_wd = reg_wdata[0];

  assign ALERT_CAUSE_43_we = addrHitNWrAllowed[241] & reg_we & !reg_error;
  assign ALERT_CAUSE_43_wd = reg_wdata[0];

  assign ALERT_CAUSE_44_we = addrHitNWrAllowed[242] & reg_we & !reg_error;
  assign ALERT_CAUSE_44_wd = reg_wdata[0];

  assign ALERT_CAUSE_45_we = addrHitNWrAllowed[243] & reg_we & !reg_error;
  assign ALERT_CAUSE_45_wd = reg_wdata[0];

  assign ALERT_CAUSE_46_we = addrHitNWrAllowed[244] & reg_we & !reg_error;
  assign ALERT_CAUSE_46_wd = reg_wdata[0];

  assign ALERT_CAUSE_47_we = addrHitNWrAllowed[245] & reg_we & !reg_error;
  assign ALERT_CAUSE_47_wd = reg_wdata[0];

  assign ALERT_CAUSE_48_we = addrHitNWrAllowed[246] & reg_we & !reg_error;
  assign ALERT_CAUSE_48_wd = reg_wdata[0];

  assign ALERT_CAUSE_49_we = addrHitNWrAllowed[247] & reg_we & !reg_error;
  assign ALERT_CAUSE_49_wd = reg_wdata[0];

  assign ALERT_CAUSE_50_we = addrHitNWrAllowed[248] & reg_we & !reg_error;
  assign ALERT_CAUSE_50_wd = reg_wdata[0];

  assign ALERT_CAUSE_51_we = addrHitNWrAllowed[249] & reg_we & !reg_error;
  assign ALERT_CAUSE_51_wd = reg_wdata[0];

  assign ALERT_CAUSE_52_we = addrHitNWrAllowed[250] & reg_we & !reg_error;
  assign ALERT_CAUSE_52_wd = reg_wdata[0];

  assign ALERT_CAUSE_53_we = addrHitNWrAllowed[251] & reg_we & !reg_error;
  assign ALERT_CAUSE_53_wd = reg_wdata[0];

  assign ALERT_CAUSE_54_we = addrHitNWrAllowed[252] & reg_we & !reg_error;
  assign ALERT_CAUSE_54_wd = reg_wdata[0];

  assign ALERT_CAUSE_55_we = addrHitNWrAllowed[253] & reg_we & !reg_error;
  assign ALERT_CAUSE_55_wd = reg_wdata[0];

  assign ALERT_CAUSE_56_we = addrHitNWrAllowed[254] & reg_we & !reg_error;
  assign ALERT_CAUSE_56_wd = reg_wdata[0];

  assign ALERT_CAUSE_57_we = addrHitNWrAllowed[255] & reg_we & !reg_error;
  assign ALERT_CAUSE_57_wd = reg_wdata[0];

  assign ALERT_CAUSE_58_we = addrHitNWrAllowed[256] & reg_we & !reg_error;
  assign ALERT_CAUSE_58_wd = reg_wdata[0];

  assign ALERT_CAUSE_59_we = addrHitNWrAllowed[257] & reg_we & !reg_error;
  assign ALERT_CAUSE_59_wd = reg_wdata[0];

  assign ALERT_CAUSE_60_we = addrHitNWrAllowed[258] & reg_we & !reg_error;
  assign ALERT_CAUSE_60_wd = reg_wdata[0];

  assign ALERT_CAUSE_61_we = addrHitNWrAllowed[259] & reg_we & !reg_error;
  assign ALERT_CAUSE_61_wd = reg_wdata[0];

  assign ALERT_CAUSE_62_we = addrHitNWrAllowed[260] & reg_we & !reg_error;
  assign ALERT_CAUSE_62_wd = reg_wdata[0];

  assign ALERT_CAUSE_63_we = addrHitNWrAllowed[261] & reg_we & !reg_error;
  assign ALERT_CAUSE_63_wd = reg_wdata[0];

  assign LOC_ALERT_REGWEN_0_we = addrHitNWrAllowed[262] & reg_we & !reg_error;
  assign LOC_ALERT_REGWEN_0_wd = reg_wdata[0];

  assign LOC_ALERT_REGWEN_1_we = addrHitNWrAllowed[263] & reg_we & !reg_error;
  assign LOC_ALERT_REGWEN_1_wd = reg_wdata[0];

  assign LOC_ALERT_REGWEN_2_we = addrHitNWrAllowed[264] & reg_we & !reg_error;
  assign LOC_ALERT_REGWEN_2_wd = reg_wdata[0];

  assign LOC_ALERT_REGWEN_3_we = addrHitNWrAllowed[265] & reg_we & !reg_error;
  assign LOC_ALERT_REGWEN_3_wd = reg_wdata[0];

  assign LOC_ALERT_REGWEN_4_we = addrHitNWrAllowed[266] & reg_we & !reg_error;
  assign LOC_ALERT_REGWEN_4_wd = reg_wdata[0];

  assign LOC_ALERT_REGWEN_5_we = addrHitNWrAllowed[267] & reg_we & !reg_error;
  assign LOC_ALERT_REGWEN_5_wd = reg_wdata[0];

  assign LOC_ALERT_REGWEN_6_we = addrHitNWrAllowed[268] & reg_we & !reg_error;
  assign LOC_ALERT_REGWEN_6_wd = reg_wdata[0];

  assign LOC_ALERT_EN_SHADOWED_0_re = addrHitNRdAllowed[269] & reg_re & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_0_we = addrHitNWrAllowed[269] & reg_we & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_0_wd = reg_wdata[0];

  assign LOC_ALERT_EN_SHADOWED_1_re = addrHitNRdAllowed[270] & reg_re & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_1_we = addrHitNWrAllowed[270] & reg_we & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_1_wd = reg_wdata[0];

  assign LOC_ALERT_EN_SHADOWED_2_re = addrHitNRdAllowed[271] & reg_re & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_2_we = addrHitNWrAllowed[271] & reg_we & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_2_wd = reg_wdata[0];

  assign LOC_ALERT_EN_SHADOWED_3_re = addrHitNRdAllowed[272] & reg_re & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_3_we = addrHitNWrAllowed[272] & reg_we & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_3_wd = reg_wdata[0];

  assign LOC_ALERT_EN_SHADOWED_4_re = addrHitNRdAllowed[273] & reg_re & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_4_we = addrHitNWrAllowed[273] & reg_we & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_4_wd = reg_wdata[0];

  assign LOC_ALERT_EN_SHADOWED_5_re = addrHitNRdAllowed[274] & reg_re & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_5_we = addrHitNWrAllowed[274] & reg_we & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_5_wd = reg_wdata[0];

  assign LOC_ALERT_EN_SHADOWED_6_re = addrHitNRdAllowed[275] & reg_re & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_6_we = addrHitNWrAllowed[275] & reg_we & !reg_error;
  assign LOC_ALERT_EN_SHADOWED_6_wd = reg_wdata[0];

  assign LOC_ALERT_CLASS_SHADOWED_0_re = addrHitNRdAllowed[276] & reg_re & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_0_we = addrHitNWrAllowed[276] & reg_we & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_0_wd = reg_wdata[1:0];

  assign LOC_ALERT_CLASS_SHADOWED_1_re = addrHitNRdAllowed[277] & reg_re & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_1_we = addrHitNWrAllowed[277] & reg_we & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_1_wd = reg_wdata[1:0];

  assign LOC_ALERT_CLASS_SHADOWED_2_re = addrHitNRdAllowed[278] & reg_re & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_2_we = addrHitNWrAllowed[278] & reg_we & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_2_wd = reg_wdata[1:0];

  assign LOC_ALERT_CLASS_SHADOWED_3_re = addrHitNRdAllowed[279] & reg_re & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_3_we = addrHitNWrAllowed[279] & reg_we & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_3_wd = reg_wdata[1:0];

  assign LOC_ALERT_CLASS_SHADOWED_4_re = addrHitNRdAllowed[280] & reg_re & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_4_we = addrHitNWrAllowed[280] & reg_we & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_4_wd = reg_wdata[1:0];

  assign LOC_ALERT_CLASS_SHADOWED_5_re = addrHitNRdAllowed[281] & reg_re & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_5_we = addrHitNWrAllowed[281] & reg_we & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_5_wd = reg_wdata[1:0];

  assign LOC_ALERT_CLASS_SHADOWED_6_re = addrHitNRdAllowed[282] & reg_re & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_6_we = addrHitNWrAllowed[282] & reg_we & !reg_error;
  assign LOC_ALERT_CLASS_SHADOWED_6_wd = reg_wdata[1:0];

  assign LOC_ALERT_CAUSE_0_we = addrHitNWrAllowed[283] & reg_we & !reg_error;
  assign LOC_ALERT_CAUSE_0_wd = reg_wdata[0];

  assign LOC_ALERT_CAUSE_1_we = addrHitNWrAllowed[284] & reg_we & !reg_error;
  assign LOC_ALERT_CAUSE_1_wd = reg_wdata[0];

  assign LOC_ALERT_CAUSE_2_we = addrHitNWrAllowed[285] & reg_we & !reg_error;
  assign LOC_ALERT_CAUSE_2_wd = reg_wdata[0];

  assign LOC_ALERT_CAUSE_3_we = addrHitNWrAllowed[286] & reg_we & !reg_error;
  assign LOC_ALERT_CAUSE_3_wd = reg_wdata[0];

  assign LOC_ALERT_CAUSE_4_we = addrHitNWrAllowed[287] & reg_we & !reg_error;
  assign LOC_ALERT_CAUSE_4_wd = reg_wdata[0];

  assign LOC_ALERT_CAUSE_5_we = addrHitNWrAllowed[288] & reg_we & !reg_error;
  assign LOC_ALERT_CAUSE_5_wd = reg_wdata[0];

  assign LOC_ALERT_CAUSE_6_we = addrHitNWrAllowed[289] & reg_we & !reg_error;
  assign LOC_ALERT_CAUSE_6_wd = reg_wdata[0];

  assign CLASSA_REGWEN_we = addrHitNWrAllowed[290] & reg_we & !reg_error;
  assign CLASSA_REGWEN_wd = reg_wdata[0];

  assign CLASSA_CTRL_SHADOWED_re = addrHitNRdAllowed[291] & reg_re & !reg_error;
  assign CLASSA_CTRL_SHADOWED_we = addrHitNWrAllowed[291] & reg_we & !reg_error;
  assign CLASSA_CTRL_SHADOWED_EN_wd = reg_wdata[0];

  assign CLASSA_CTRL_SHADOWED_LOCK_wd = reg_wdata[1];

  assign CLASSA_CTRL_SHADOWED_EN_E0_wd = reg_wdata[2];

  assign CLASSA_CTRL_SHADOWED_EN_E1_wd = reg_wdata[3];

  assign CLASSA_CTRL_SHADOWED_EN_E2_wd = reg_wdata[4];

  assign CLASSA_CTRL_SHADOWED_EN_E3_wd = reg_wdata[5];

  assign CLASSA_CTRL_SHADOWED_MAP_E0_wd = reg_wdata[7:6];

  assign CLASSA_CTRL_SHADOWED_MAP_E1_wd = reg_wdata[9:8];

  assign CLASSA_CTRL_SHADOWED_MAP_E2_wd = reg_wdata[11:10];

  assign CLASSA_CTRL_SHADOWED_MAP_E3_wd = reg_wdata[13:12];

  assign CLASSA_CLR_REGWEN_we = addrHitNWrAllowed[292] & reg_we & !reg_error;
  assign CLASSA_CLR_REGWEN_wd = reg_wdata[0];

  assign CLASSA_CLR_SHADOWED_re = addrHitNRdAllowed[293] & reg_re & !reg_error;
  assign CLASSA_CLR_SHADOWED_we = addrHitNWrAllowed[293] & reg_we & !reg_error;
  assign CLASSA_CLR_SHADOWED_wd = reg_wdata[0];

  assign CLASSA_ACCUM_CNT_re = addrHitNRdAllowed[294] & reg_re & !reg_error;
  assign CLASSA_ACCUM_THRESH_SHADOWED_re = addrHitNRdAllowed[295] & reg_re & !reg_error;
  assign CLASSA_ACCUM_THRESH_SHADOWED_we = addrHitNWrAllowed[295] & reg_we & !reg_error;
  assign CLASSA_ACCUM_THRESH_SHADOWED_wd = reg_wdata[15:0];

  assign CLASSA_TIMEOUT_CYC_SHADOWED_re = addrHitNRdAllowed[296] & reg_re & !reg_error;
  assign CLASSA_TIMEOUT_CYC_SHADOWED_we = addrHitNWrAllowed[296] & reg_we & !reg_error;
  assign CLASSA_TIMEOUT_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSA_CRASHDUMP_TRIGGER_SHADOWED_re = addrHitNRdAllowed[297] & reg_re & !reg_error;
  assign CLASSA_CRASHDUMP_TRIGGER_SHADOWED_we = addrHitNWrAllowed[297] & reg_we & !reg_error;
  assign CLASSA_CRASHDUMP_TRIGGER_SHADOWED_wd = reg_wdata[1:0];

  assign CLASSA_PHASE0_CYC_SHADOWED_re = addrHitNRdAllowed[298] & reg_re & !reg_error;
  assign CLASSA_PHASE0_CYC_SHADOWED_we = addrHitNWrAllowed[298] & reg_we & !reg_error;
  assign CLASSA_PHASE0_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSA_PHASE1_CYC_SHADOWED_re = addrHitNRdAllowed[299] & reg_re & !reg_error;
  assign CLASSA_PHASE1_CYC_SHADOWED_we = addrHitNWrAllowed[299] & reg_we & !reg_error;
  assign CLASSA_PHASE1_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSA_PHASE2_CYC_SHADOWED_re = addrHitNRdAllowed[300] & reg_re & !reg_error;
  assign CLASSA_PHASE2_CYC_SHADOWED_we = addrHitNWrAllowed[300] & reg_we & !reg_error;
  assign CLASSA_PHASE2_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSA_PHASE3_CYC_SHADOWED_re = addrHitNRdAllowed[301] & reg_re & !reg_error;
  assign CLASSA_PHASE3_CYC_SHADOWED_we = addrHitNWrAllowed[301] & reg_we & !reg_error;
  assign CLASSA_PHASE3_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSA_ESC_CNT_re = addrHitNRdAllowed[302] & reg_re & !reg_error;
  assign CLASSA_STATE_re = addrHitNRdAllowed[303] & reg_re & !reg_error;
  assign CLASSB_REGWEN_we = addrHitNWrAllowed[304] & reg_we & !reg_error;
  assign CLASSB_REGWEN_wd = reg_wdata[0];

  assign CLASSB_CTRL_SHADOWED_re = addrHitNRdAllowed[305] & reg_re & !reg_error;
  assign CLASSB_CTRL_SHADOWED_we = addrHitNWrAllowed[305] & reg_we & !reg_error;
  assign CLASSB_CTRL_SHADOWED_EN_wd = reg_wdata[0];

  assign CLASSB_CTRL_SHADOWED_LOCK_wd = reg_wdata[1];

  assign CLASSB_CTRL_SHADOWED_EN_E0_wd = reg_wdata[2];

  assign CLASSB_CTRL_SHADOWED_EN_E1_wd = reg_wdata[3];

  assign CLASSB_CTRL_SHADOWED_EN_E2_wd = reg_wdata[4];

  assign CLASSB_CTRL_SHADOWED_EN_E3_wd = reg_wdata[5];

  assign CLASSB_CTRL_SHADOWED_MAP_E0_wd = reg_wdata[7:6];

  assign CLASSB_CTRL_SHADOWED_MAP_E1_wd = reg_wdata[9:8];

  assign CLASSB_CTRL_SHADOWED_MAP_E2_wd = reg_wdata[11:10];

  assign CLASSB_CTRL_SHADOWED_MAP_E3_wd = reg_wdata[13:12];

  assign CLASSB_CLR_REGWEN_we = addrHitNWrAllowed[306] & reg_we & !reg_error;
  assign CLASSB_CLR_REGWEN_wd = reg_wdata[0];

  assign CLASSB_CLR_SHADOWED_re = addrHitNRdAllowed[307] & reg_re & !reg_error;
  assign CLASSB_CLR_SHADOWED_we = addrHitNWrAllowed[307] & reg_we & !reg_error;
  assign CLASSB_CLR_SHADOWED_wd = reg_wdata[0];

  assign CLASSB_ACCUM_CNT_re = addrHitNRdAllowed[308] & reg_re & !reg_error;
  assign CLASSB_ACCUM_THRESH_SHADOWED_re = addrHitNRdAllowed[309] & reg_re & !reg_error;
  assign CLASSB_ACCUM_THRESH_SHADOWED_we = addrHitNWrAllowed[309] & reg_we & !reg_error;
  assign CLASSB_ACCUM_THRESH_SHADOWED_wd = reg_wdata[15:0];

  assign CLASSB_TIMEOUT_CYC_SHADOWED_re = addrHitNRdAllowed[310] & reg_re & !reg_error;
  assign CLASSB_TIMEOUT_CYC_SHADOWED_we = addrHitNWrAllowed[310] & reg_we & !reg_error;
  assign CLASSB_TIMEOUT_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSB_CRASHDUMP_TRIGGER_SHADOWED_re = addrHitNRdAllowed[311] & reg_re & !reg_error;
  assign CLASSB_CRASHDUMP_TRIGGER_SHADOWED_we = addrHitNWrAllowed[311] & reg_we & !reg_error;
  assign CLASSB_CRASHDUMP_TRIGGER_SHADOWED_wd = reg_wdata[1:0];

  assign CLASSB_PHASE0_CYC_SHADOWED_re = addrHitNRdAllowed[312] & reg_re & !reg_error;
  assign CLASSB_PHASE0_CYC_SHADOWED_we = addrHitNWrAllowed[312] & reg_we & !reg_error;
  assign CLASSB_PHASE0_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSB_PHASE1_CYC_SHADOWED_re = addrHitNRdAllowed[313] & reg_re & !reg_error;
  assign CLASSB_PHASE1_CYC_SHADOWED_we = addrHitNWrAllowed[313] & reg_we & !reg_error;
  assign CLASSB_PHASE1_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSB_PHASE2_CYC_SHADOWED_re = addrHitNRdAllowed[314] & reg_re & !reg_error;
  assign CLASSB_PHASE2_CYC_SHADOWED_we = addrHitNWrAllowed[314] & reg_we & !reg_error;
  assign CLASSB_PHASE2_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSB_PHASE3_CYC_SHADOWED_re = addrHitNRdAllowed[315] & reg_re & !reg_error;
  assign CLASSB_PHASE3_CYC_SHADOWED_we = addrHitNWrAllowed[315] & reg_we & !reg_error;
  assign CLASSB_PHASE3_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSB_ESC_CNT_re = addrHitNRdAllowed[316] & reg_re & !reg_error;
  assign CLASSB_STATE_re = addrHitNRdAllowed[317] & reg_re & !reg_error;
  assign CLASSC_REGWEN_we = addrHitNWrAllowed[318] & reg_we & !reg_error;
  assign CLASSC_REGWEN_wd = reg_wdata[0];

  assign CLASSC_CTRL_SHADOWED_re = addrHitNRdAllowed[319] & reg_re & !reg_error;
  assign CLASSC_CTRL_SHADOWED_we = addrHitNWrAllowed[319] & reg_we & !reg_error;
  assign CLASSC_CTRL_SHADOWED_EN_wd = reg_wdata[0];

  assign CLASSC_CTRL_SHADOWED_LOCK_wd = reg_wdata[1];

  assign CLASSC_CTRL_SHADOWED_EN_E0_wd = reg_wdata[2];

  assign CLASSC_CTRL_SHADOWED_EN_E1_wd = reg_wdata[3];

  assign CLASSC_CTRL_SHADOWED_EN_E2_wd = reg_wdata[4];

  assign CLASSC_CTRL_SHADOWED_EN_E3_wd = reg_wdata[5];

  assign CLASSC_CTRL_SHADOWED_MAP_E0_wd = reg_wdata[7:6];

  assign CLASSC_CTRL_SHADOWED_MAP_E1_wd = reg_wdata[9:8];

  assign CLASSC_CTRL_SHADOWED_MAP_E2_wd = reg_wdata[11:10];

  assign CLASSC_CTRL_SHADOWED_MAP_E3_wd = reg_wdata[13:12];

  assign CLASSC_CLR_REGWEN_we = addrHitNWrAllowed[320] & reg_we & !reg_error;
  assign CLASSC_CLR_REGWEN_wd = reg_wdata[0];

  assign CLASSC_CLR_SHADOWED_re = addrHitNRdAllowed[321] & reg_re & !reg_error;
  assign CLASSC_CLR_SHADOWED_we = addrHitNWrAllowed[321] & reg_we & !reg_error;
  assign CLASSC_CLR_SHADOWED_wd = reg_wdata[0];

  assign CLASSC_ACCUM_CNT_re = addrHitNRdAllowed[322] & reg_re & !reg_error;
  assign CLASSC_ACCUM_THRESH_SHADOWED_re = addrHitNRdAllowed[323] & reg_re & !reg_error;
  assign CLASSC_ACCUM_THRESH_SHADOWED_we = addrHitNWrAllowed[323] & reg_we & !reg_error;
  assign CLASSC_ACCUM_THRESH_SHADOWED_wd = reg_wdata[15:0];

  assign CLASSC_TIMEOUT_CYC_SHADOWED_re = addrHitNRdAllowed[324] & reg_re & !reg_error;
  assign CLASSC_TIMEOUT_CYC_SHADOWED_we = addrHitNWrAllowed[324] & reg_we & !reg_error;
  assign CLASSC_TIMEOUT_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSC_CRASHDUMP_TRIGGER_SHADOWED_re = addrHitNRdAllowed[325] & reg_re & !reg_error;
  assign CLASSC_CRASHDUMP_TRIGGER_SHADOWED_we = addrHitNWrAllowed[325] & reg_we & !reg_error;
  assign CLASSC_CRASHDUMP_TRIGGER_SHADOWED_wd = reg_wdata[1:0];

  assign CLASSC_PHASE0_CYC_SHADOWED_re = addrHitNRdAllowed[326] & reg_re & !reg_error;
  assign CLASSC_PHASE0_CYC_SHADOWED_we = addrHitNWrAllowed[326] & reg_we & !reg_error;
  assign CLASSC_PHASE0_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSC_PHASE1_CYC_SHADOWED_re = addrHitNRdAllowed[327] & reg_re & !reg_error;
  assign CLASSC_PHASE1_CYC_SHADOWED_we = addrHitNWrAllowed[327] & reg_we & !reg_error;
  assign CLASSC_PHASE1_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSC_PHASE2_CYC_SHADOWED_re = addrHitNRdAllowed[328] & reg_re & !reg_error;
  assign CLASSC_PHASE2_CYC_SHADOWED_we = addrHitNWrAllowed[328] & reg_we & !reg_error;
  assign CLASSC_PHASE2_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSC_PHASE3_CYC_SHADOWED_re = addrHitNRdAllowed[329] & reg_re & !reg_error;
  assign CLASSC_PHASE3_CYC_SHADOWED_we = addrHitNWrAllowed[329] & reg_we & !reg_error;
  assign CLASSC_PHASE3_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSC_ESC_CNT_re = addrHitNRdAllowed[330] & reg_re & !reg_error;
  assign CLASSC_STATE_re = addrHitNRdAllowed[331] & reg_re & !reg_error;
  assign CLASSD_REGWEN_we = addrHitNWrAllowed[332] & reg_we & !reg_error;
  assign CLASSD_REGWEN_wd = reg_wdata[0];

  assign CLASSD_CTRL_SHADOWED_re = addrHitNRdAllowed[333] & reg_re & !reg_error;
  assign CLASSD_CTRL_SHADOWED_we = addrHitNWrAllowed[333] & reg_we & !reg_error;
  assign CLASSD_CTRL_SHADOWED_EN_wd = reg_wdata[0];

  assign CLASSD_CTRL_SHADOWED_LOCK_wd = reg_wdata[1];

  assign CLASSD_CTRL_SHADOWED_EN_E0_wd = reg_wdata[2];

  assign CLASSD_CTRL_SHADOWED_EN_E1_wd = reg_wdata[3];

  assign CLASSD_CTRL_SHADOWED_EN_E2_wd = reg_wdata[4];

  assign CLASSD_CTRL_SHADOWED_EN_E3_wd = reg_wdata[5];

  assign CLASSD_CTRL_SHADOWED_MAP_E0_wd = reg_wdata[7:6];

  assign CLASSD_CTRL_SHADOWED_MAP_E1_wd = reg_wdata[9:8];

  assign CLASSD_CTRL_SHADOWED_MAP_E2_wd = reg_wdata[11:10];

  assign CLASSD_CTRL_SHADOWED_MAP_E3_wd = reg_wdata[13:12];

  assign CLASSD_CLR_REGWEN_we = addrHitNWrAllowed[334] & reg_we & !reg_error;
  assign CLASSD_CLR_REGWEN_wd = reg_wdata[0];

  assign CLASSD_CLR_SHADOWED_re = addrHitNRdAllowed[335] & reg_re & !reg_error;
  assign CLASSD_CLR_SHADOWED_we = addrHitNWrAllowed[335] & reg_we & !reg_error;
  assign CLASSD_CLR_SHADOWED_wd = reg_wdata[0];

  assign CLASSD_ACCUM_CNT_re = addrHitNRdAllowed[336] & reg_re & !reg_error;
  assign CLASSD_ACCUM_THRESH_SHADOWED_re = addrHitNRdAllowed[337] & reg_re & !reg_error;
  assign CLASSD_ACCUM_THRESH_SHADOWED_we = addrHitNWrAllowed[337] & reg_we & !reg_error;
  assign CLASSD_ACCUM_THRESH_SHADOWED_wd = reg_wdata[15:0];

  assign CLASSD_TIMEOUT_CYC_SHADOWED_re = addrHitNRdAllowed[338] & reg_re & !reg_error;
  assign CLASSD_TIMEOUT_CYC_SHADOWED_we = addrHitNWrAllowed[338] & reg_we & !reg_error;
  assign CLASSD_TIMEOUT_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSD_CRASHDUMP_TRIGGER_SHADOWED_re = addrHitNRdAllowed[339] & reg_re & !reg_error;
  assign CLASSD_CRASHDUMP_TRIGGER_SHADOWED_we = addrHitNWrAllowed[339] & reg_we & !reg_error;
  assign CLASSD_CRASHDUMP_TRIGGER_SHADOWED_wd = reg_wdata[1:0];

  assign CLASSD_PHASE0_CYC_SHADOWED_re = addrHitNRdAllowed[340] & reg_re & !reg_error;
  assign CLASSD_PHASE0_CYC_SHADOWED_we = addrHitNWrAllowed[340] & reg_we & !reg_error;
  assign CLASSD_PHASE0_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSD_PHASE1_CYC_SHADOWED_re = addrHitNRdAllowed[341] & reg_re & !reg_error;
  assign CLASSD_PHASE1_CYC_SHADOWED_we = addrHitNWrAllowed[341] & reg_we & !reg_error;
  assign CLASSD_PHASE1_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSD_PHASE2_CYC_SHADOWED_re = addrHitNRdAllowed[342] & reg_re & !reg_error;
  assign CLASSD_PHASE2_CYC_SHADOWED_we = addrHitNWrAllowed[342] & reg_we & !reg_error;
  assign CLASSD_PHASE2_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSD_PHASE3_CYC_SHADOWED_re = addrHitNRdAllowed[343] & reg_re & !reg_error;
  assign CLASSD_PHASE3_CYC_SHADOWED_we = addrHitNWrAllowed[343] & reg_we & !reg_error;
  assign CLASSD_PHASE3_CYC_SHADOWED_wd = reg_wdata[31:0];

  assign CLASSD_ESC_CNT_re = addrHitNRdAllowed[344] & reg_re & !reg_error;
  assign CLASSD_STATE_re = addrHitNRdAllowed[345] & reg_re & !reg_error;

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = INTR_STATE_we;
    reg_we_check[1] = INTR_ENABLE_we;
    reg_we_check[2] = INTR_TEST_we;
    reg_we_check[3] = PING_TIMER_REGWEN_we;
    reg_we_check[4] = PING_TIMEOUT_CYC_SHADOWED_gated_we;
    reg_we_check[5] = PING_TIMER_EN_SHADOWED_gated_we;
    reg_we_check[6] = ALERT_REGWEN_0_we;
    reg_we_check[7] = ALERT_REGWEN_1_we;
    reg_we_check[8] = ALERT_REGWEN_2_we;
    reg_we_check[9] = ALERT_REGWEN_3_we;
    reg_we_check[10] = ALERT_REGWEN_4_we;
    reg_we_check[11] = ALERT_REGWEN_5_we;
    reg_we_check[12] = ALERT_REGWEN_6_we;
    reg_we_check[13] = ALERT_REGWEN_7_we;
    reg_we_check[14] = ALERT_REGWEN_8_we;
    reg_we_check[15] = ALERT_REGWEN_9_we;
    reg_we_check[16] = ALERT_REGWEN_10_we;
    reg_we_check[17] = ALERT_REGWEN_11_we;
    reg_we_check[18] = ALERT_REGWEN_12_we;
    reg_we_check[19] = ALERT_REGWEN_13_we;
    reg_we_check[20] = ALERT_REGWEN_14_we;
    reg_we_check[21] = ALERT_REGWEN_15_we;
    reg_we_check[22] = ALERT_REGWEN_16_we;
    reg_we_check[23] = ALERT_REGWEN_17_we;
    reg_we_check[24] = ALERT_REGWEN_18_we;
    reg_we_check[25] = ALERT_REGWEN_19_we;
    reg_we_check[26] = ALERT_REGWEN_20_we;
    reg_we_check[27] = ALERT_REGWEN_21_we;
    reg_we_check[28] = ALERT_REGWEN_22_we;
    reg_we_check[29] = ALERT_REGWEN_23_we;
    reg_we_check[30] = ALERT_REGWEN_24_we;
    reg_we_check[31] = ALERT_REGWEN_25_we;
    reg_we_check[32] = ALERT_REGWEN_26_we;
    reg_we_check[33] = ALERT_REGWEN_27_we;
    reg_we_check[34] = ALERT_REGWEN_28_we;
    reg_we_check[35] = ALERT_REGWEN_29_we;
    reg_we_check[36] = ALERT_REGWEN_30_we;
    reg_we_check[37] = ALERT_REGWEN_31_we;
    reg_we_check[38] = ALERT_REGWEN_32_we;
    reg_we_check[39] = ALERT_REGWEN_33_we;
    reg_we_check[40] = ALERT_REGWEN_34_we;
    reg_we_check[41] = ALERT_REGWEN_35_we;
    reg_we_check[42] = ALERT_REGWEN_36_we;
    reg_we_check[43] = ALERT_REGWEN_37_we;
    reg_we_check[44] = ALERT_REGWEN_38_we;
    reg_we_check[45] = ALERT_REGWEN_39_we;
    reg_we_check[46] = ALERT_REGWEN_40_we;
    reg_we_check[47] = ALERT_REGWEN_41_we;
    reg_we_check[48] = ALERT_REGWEN_42_we;
    reg_we_check[49] = ALERT_REGWEN_43_we;
    reg_we_check[50] = ALERT_REGWEN_44_we;
    reg_we_check[51] = ALERT_REGWEN_45_we;
    reg_we_check[52] = ALERT_REGWEN_46_we;
    reg_we_check[53] = ALERT_REGWEN_47_we;
    reg_we_check[54] = ALERT_REGWEN_48_we;
    reg_we_check[55] = ALERT_REGWEN_49_we;
    reg_we_check[56] = ALERT_REGWEN_50_we;
    reg_we_check[57] = ALERT_REGWEN_51_we;
    reg_we_check[58] = ALERT_REGWEN_52_we;
    reg_we_check[59] = ALERT_REGWEN_53_we;
    reg_we_check[60] = ALERT_REGWEN_54_we;
    reg_we_check[61] = ALERT_REGWEN_55_we;
    reg_we_check[62] = ALERT_REGWEN_56_we;
    reg_we_check[63] = ALERT_REGWEN_57_we;
    reg_we_check[64] = ALERT_REGWEN_58_we;
    reg_we_check[65] = ALERT_REGWEN_59_we;
    reg_we_check[66] = ALERT_REGWEN_60_we;
    reg_we_check[67] = ALERT_REGWEN_61_we;
    reg_we_check[68] = ALERT_REGWEN_62_we;
    reg_we_check[69] = ALERT_REGWEN_63_we;
    reg_we_check[70] = ALERT_EN_SHADOWED_0_gated_we;
    reg_we_check[71] = ALERT_EN_SHADOWED_1_gated_we;
    reg_we_check[72] = ALERT_EN_SHADOWED_2_gated_we;
    reg_we_check[73] = ALERT_EN_SHADOWED_3_gated_we;
    reg_we_check[74] = ALERT_EN_SHADOWED_4_gated_we;
    reg_we_check[75] = ALERT_EN_SHADOWED_5_gated_we;
    reg_we_check[76] = ALERT_EN_SHADOWED_6_gated_we;
    reg_we_check[77] = ALERT_EN_SHADOWED_7_gated_we;
    reg_we_check[78] = ALERT_EN_SHADOWED_8_gated_we;
    reg_we_check[79] = ALERT_EN_SHADOWED_9_gated_we;
    reg_we_check[80] = ALERT_EN_SHADOWED_10_gated_we;
    reg_we_check[81] = ALERT_EN_SHADOWED_11_gated_we;
    reg_we_check[82] = ALERT_EN_SHADOWED_12_gated_we;
    reg_we_check[83] = ALERT_EN_SHADOWED_13_gated_we;
    reg_we_check[84] = ALERT_EN_SHADOWED_14_gated_we;
    reg_we_check[85] = ALERT_EN_SHADOWED_15_gated_we;
    reg_we_check[86] = ALERT_EN_SHADOWED_16_gated_we;
    reg_we_check[87] = ALERT_EN_SHADOWED_17_gated_we;
    reg_we_check[88] = ALERT_EN_SHADOWED_18_gated_we;
    reg_we_check[89] = ALERT_EN_SHADOWED_19_gated_we;
    reg_we_check[90] = ALERT_EN_SHADOWED_20_gated_we;
    reg_we_check[91] = ALERT_EN_SHADOWED_21_gated_we;
    reg_we_check[92] = ALERT_EN_SHADOWED_22_gated_we;
    reg_we_check[93] = ALERT_EN_SHADOWED_23_gated_we;
    reg_we_check[94] = ALERT_EN_SHADOWED_24_gated_we;
    reg_we_check[95] = ALERT_EN_SHADOWED_25_gated_we;
    reg_we_check[96] = ALERT_EN_SHADOWED_26_gated_we;
    reg_we_check[97] = ALERT_EN_SHADOWED_27_gated_we;
    reg_we_check[98] = ALERT_EN_SHADOWED_28_gated_we;
    reg_we_check[99] = ALERT_EN_SHADOWED_29_gated_we;
    reg_we_check[100] = ALERT_EN_SHADOWED_30_gated_we;
    reg_we_check[101] = ALERT_EN_SHADOWED_31_gated_we;
    reg_we_check[102] = ALERT_EN_SHADOWED_32_gated_we;
    reg_we_check[103] = ALERT_EN_SHADOWED_33_gated_we;
    reg_we_check[104] = ALERT_EN_SHADOWED_34_gated_we;
    reg_we_check[105] = ALERT_EN_SHADOWED_35_gated_we;
    reg_we_check[106] = ALERT_EN_SHADOWED_36_gated_we;
    reg_we_check[107] = ALERT_EN_SHADOWED_37_gated_we;
    reg_we_check[108] = ALERT_EN_SHADOWED_38_gated_we;
    reg_we_check[109] = ALERT_EN_SHADOWED_39_gated_we;
    reg_we_check[110] = ALERT_EN_SHADOWED_40_gated_we;
    reg_we_check[111] = ALERT_EN_SHADOWED_41_gated_we;
    reg_we_check[112] = ALERT_EN_SHADOWED_42_gated_we;
    reg_we_check[113] = ALERT_EN_SHADOWED_43_gated_we;
    reg_we_check[114] = ALERT_EN_SHADOWED_44_gated_we;
    reg_we_check[115] = ALERT_EN_SHADOWED_45_gated_we;
    reg_we_check[116] = ALERT_EN_SHADOWED_46_gated_we;
    reg_we_check[117] = ALERT_EN_SHADOWED_47_gated_we;
    reg_we_check[118] = ALERT_EN_SHADOWED_48_gated_we;
    reg_we_check[119] = ALERT_EN_SHADOWED_49_gated_we;
    reg_we_check[120] = ALERT_EN_SHADOWED_50_gated_we;
    reg_we_check[121] = ALERT_EN_SHADOWED_51_gated_we;
    reg_we_check[122] = ALERT_EN_SHADOWED_52_gated_we;
    reg_we_check[123] = ALERT_EN_SHADOWED_53_gated_we;
    reg_we_check[124] = ALERT_EN_SHADOWED_54_gated_we;
    reg_we_check[125] = ALERT_EN_SHADOWED_55_gated_we;
    reg_we_check[126] = ALERT_EN_SHADOWED_56_gated_we;
    reg_we_check[127] = ALERT_EN_SHADOWED_57_gated_we;
    reg_we_check[128] = ALERT_EN_SHADOWED_58_gated_we;
    reg_we_check[129] = ALERT_EN_SHADOWED_59_gated_we;
    reg_we_check[130] = ALERT_EN_SHADOWED_60_gated_we;
    reg_we_check[131] = ALERT_EN_SHADOWED_61_gated_we;
    reg_we_check[132] = ALERT_EN_SHADOWED_62_gated_we;
    reg_we_check[133] = ALERT_EN_SHADOWED_63_gated_we;
    reg_we_check[134] = ALERT_CLASS_SHADOWED_0_gated_we;
    reg_we_check[135] = ALERT_CLASS_SHADOWED_1_gated_we;
    reg_we_check[136] = ALERT_CLASS_SHADOWED_2_gated_we;
    reg_we_check[137] = ALERT_CLASS_SHADOWED_3_gated_we;
    reg_we_check[138] = ALERT_CLASS_SHADOWED_4_gated_we;
    reg_we_check[139] = ALERT_CLASS_SHADOWED_5_gated_we;
    reg_we_check[140] = ALERT_CLASS_SHADOWED_6_gated_we;
    reg_we_check[141] = ALERT_CLASS_SHADOWED_7_gated_we;
    reg_we_check[142] = ALERT_CLASS_SHADOWED_8_gated_we;
    reg_we_check[143] = ALERT_CLASS_SHADOWED_9_gated_we;
    reg_we_check[144] = ALERT_CLASS_SHADOWED_10_gated_we;
    reg_we_check[145] = ALERT_CLASS_SHADOWED_11_gated_we;
    reg_we_check[146] = ALERT_CLASS_SHADOWED_12_gated_we;
    reg_we_check[147] = ALERT_CLASS_SHADOWED_13_gated_we;
    reg_we_check[148] = ALERT_CLASS_SHADOWED_14_gated_we;
    reg_we_check[149] = ALERT_CLASS_SHADOWED_15_gated_we;
    reg_we_check[150] = ALERT_CLASS_SHADOWED_16_gated_we;
    reg_we_check[151] = ALERT_CLASS_SHADOWED_17_gated_we;
    reg_we_check[152] = ALERT_CLASS_SHADOWED_18_gated_we;
    reg_we_check[153] = ALERT_CLASS_SHADOWED_19_gated_we;
    reg_we_check[154] = ALERT_CLASS_SHADOWED_20_gated_we;
    reg_we_check[155] = ALERT_CLASS_SHADOWED_21_gated_we;
    reg_we_check[156] = ALERT_CLASS_SHADOWED_22_gated_we;
    reg_we_check[157] = ALERT_CLASS_SHADOWED_23_gated_we;
    reg_we_check[158] = ALERT_CLASS_SHADOWED_24_gated_we;
    reg_we_check[159] = ALERT_CLASS_SHADOWED_25_gated_we;
    reg_we_check[160] = ALERT_CLASS_SHADOWED_26_gated_we;
    reg_we_check[161] = ALERT_CLASS_SHADOWED_27_gated_we;
    reg_we_check[162] = ALERT_CLASS_SHADOWED_28_gated_we;
    reg_we_check[163] = ALERT_CLASS_SHADOWED_29_gated_we;
    reg_we_check[164] = ALERT_CLASS_SHADOWED_30_gated_we;
    reg_we_check[165] = ALERT_CLASS_SHADOWED_31_gated_we;
    reg_we_check[166] = ALERT_CLASS_SHADOWED_32_gated_we;
    reg_we_check[167] = ALERT_CLASS_SHADOWED_33_gated_we;
    reg_we_check[168] = ALERT_CLASS_SHADOWED_34_gated_we;
    reg_we_check[169] = ALERT_CLASS_SHADOWED_35_gated_we;
    reg_we_check[170] = ALERT_CLASS_SHADOWED_36_gated_we;
    reg_we_check[171] = ALERT_CLASS_SHADOWED_37_gated_we;
    reg_we_check[172] = ALERT_CLASS_SHADOWED_38_gated_we;
    reg_we_check[173] = ALERT_CLASS_SHADOWED_39_gated_we;
    reg_we_check[174] = ALERT_CLASS_SHADOWED_40_gated_we;
    reg_we_check[175] = ALERT_CLASS_SHADOWED_41_gated_we;
    reg_we_check[176] = ALERT_CLASS_SHADOWED_42_gated_we;
    reg_we_check[177] = ALERT_CLASS_SHADOWED_43_gated_we;
    reg_we_check[178] = ALERT_CLASS_SHADOWED_44_gated_we;
    reg_we_check[179] = ALERT_CLASS_SHADOWED_45_gated_we;
    reg_we_check[180] = ALERT_CLASS_SHADOWED_46_gated_we;
    reg_we_check[181] = ALERT_CLASS_SHADOWED_47_gated_we;
    reg_we_check[182] = ALERT_CLASS_SHADOWED_48_gated_we;
    reg_we_check[183] = ALERT_CLASS_SHADOWED_49_gated_we;
    reg_we_check[184] = ALERT_CLASS_SHADOWED_50_gated_we;
    reg_we_check[185] = ALERT_CLASS_SHADOWED_51_gated_we;
    reg_we_check[186] = ALERT_CLASS_SHADOWED_52_gated_we;
    reg_we_check[187] = ALERT_CLASS_SHADOWED_53_gated_we;
    reg_we_check[188] = ALERT_CLASS_SHADOWED_54_gated_we;
    reg_we_check[189] = ALERT_CLASS_SHADOWED_55_gated_we;
    reg_we_check[190] = ALERT_CLASS_SHADOWED_56_gated_we;
    reg_we_check[191] = ALERT_CLASS_SHADOWED_57_gated_we;
    reg_we_check[192] = ALERT_CLASS_SHADOWED_58_gated_we;
    reg_we_check[193] = ALERT_CLASS_SHADOWED_59_gated_we;
    reg_we_check[194] = ALERT_CLASS_SHADOWED_60_gated_we;
    reg_we_check[195] = ALERT_CLASS_SHADOWED_61_gated_we;
    reg_we_check[196] = ALERT_CLASS_SHADOWED_62_gated_we;
    reg_we_check[197] = ALERT_CLASS_SHADOWED_63_gated_we;
    reg_we_check[198] = ALERT_CAUSE_0_we;
    reg_we_check[199] = ALERT_CAUSE_1_we;
    reg_we_check[200] = ALERT_CAUSE_2_we;
    reg_we_check[201] = ALERT_CAUSE_3_we;
    reg_we_check[202] = ALERT_CAUSE_4_we;
    reg_we_check[203] = ALERT_CAUSE_5_we;
    reg_we_check[204] = ALERT_CAUSE_6_we;
    reg_we_check[205] = ALERT_CAUSE_7_we;
    reg_we_check[206] = ALERT_CAUSE_8_we;
    reg_we_check[207] = ALERT_CAUSE_9_we;
    reg_we_check[208] = ALERT_CAUSE_10_we;
    reg_we_check[209] = ALERT_CAUSE_11_we;
    reg_we_check[210] = ALERT_CAUSE_12_we;
    reg_we_check[211] = ALERT_CAUSE_13_we;
    reg_we_check[212] = ALERT_CAUSE_14_we;
    reg_we_check[213] = ALERT_CAUSE_15_we;
    reg_we_check[214] = ALERT_CAUSE_16_we;
    reg_we_check[215] = ALERT_CAUSE_17_we;
    reg_we_check[216] = ALERT_CAUSE_18_we;
    reg_we_check[217] = ALERT_CAUSE_19_we;
    reg_we_check[218] = ALERT_CAUSE_20_we;
    reg_we_check[219] = ALERT_CAUSE_21_we;
    reg_we_check[220] = ALERT_CAUSE_22_we;
    reg_we_check[221] = ALERT_CAUSE_23_we;
    reg_we_check[222] = ALERT_CAUSE_24_we;
    reg_we_check[223] = ALERT_CAUSE_25_we;
    reg_we_check[224] = ALERT_CAUSE_26_we;
    reg_we_check[225] = ALERT_CAUSE_27_we;
    reg_we_check[226] = ALERT_CAUSE_28_we;
    reg_we_check[227] = ALERT_CAUSE_29_we;
    reg_we_check[228] = ALERT_CAUSE_30_we;
    reg_we_check[229] = ALERT_CAUSE_31_we;
    reg_we_check[230] = ALERT_CAUSE_32_we;
    reg_we_check[231] = ALERT_CAUSE_33_we;
    reg_we_check[232] = ALERT_CAUSE_34_we;
    reg_we_check[233] = ALERT_CAUSE_35_we;
    reg_we_check[234] = ALERT_CAUSE_36_we;
    reg_we_check[235] = ALERT_CAUSE_37_we;
    reg_we_check[236] = ALERT_CAUSE_38_we;
    reg_we_check[237] = ALERT_CAUSE_39_we;
    reg_we_check[238] = ALERT_CAUSE_40_we;
    reg_we_check[239] = ALERT_CAUSE_41_we;
    reg_we_check[240] = ALERT_CAUSE_42_we;
    reg_we_check[241] = ALERT_CAUSE_43_we;
    reg_we_check[242] = ALERT_CAUSE_44_we;
    reg_we_check[243] = ALERT_CAUSE_45_we;
    reg_we_check[244] = ALERT_CAUSE_46_we;
    reg_we_check[245] = ALERT_CAUSE_47_we;
    reg_we_check[246] = ALERT_CAUSE_48_we;
    reg_we_check[247] = ALERT_CAUSE_49_we;
    reg_we_check[248] = ALERT_CAUSE_50_we;
    reg_we_check[249] = ALERT_CAUSE_51_we;
    reg_we_check[250] = ALERT_CAUSE_52_we;
    reg_we_check[251] = ALERT_CAUSE_53_we;
    reg_we_check[252] = ALERT_CAUSE_54_we;
    reg_we_check[253] = ALERT_CAUSE_55_we;
    reg_we_check[254] = ALERT_CAUSE_56_we;
    reg_we_check[255] = ALERT_CAUSE_57_we;
    reg_we_check[256] = ALERT_CAUSE_58_we;
    reg_we_check[257] = ALERT_CAUSE_59_we;
    reg_we_check[258] = ALERT_CAUSE_60_we;
    reg_we_check[259] = ALERT_CAUSE_61_we;
    reg_we_check[260] = ALERT_CAUSE_62_we;
    reg_we_check[261] = ALERT_CAUSE_63_we;
    reg_we_check[262] = LOC_ALERT_REGWEN_0_we;
    reg_we_check[263] = LOC_ALERT_REGWEN_1_we;
    reg_we_check[264] = LOC_ALERT_REGWEN_2_we;
    reg_we_check[265] = LOC_ALERT_REGWEN_3_we;
    reg_we_check[266] = LOC_ALERT_REGWEN_4_we;
    reg_we_check[267] = LOC_ALERT_REGWEN_5_we;
    reg_we_check[268] = LOC_ALERT_REGWEN_6_we;
    reg_we_check[269] = LOC_ALERT_EN_SHADOWED_0_gated_we;
    reg_we_check[270] = LOC_ALERT_EN_SHADOWED_1_gated_we;
    reg_we_check[271] = LOC_ALERT_EN_SHADOWED_2_gated_we;
    reg_we_check[272] = LOC_ALERT_EN_SHADOWED_3_gated_we;
    reg_we_check[273] = LOC_ALERT_EN_SHADOWED_4_gated_we;
    reg_we_check[274] = LOC_ALERT_EN_SHADOWED_5_gated_we;
    reg_we_check[275] = LOC_ALERT_EN_SHADOWED_6_gated_we;
    reg_we_check[276] = LOC_ALERT_CLASS_SHADOWED_0_gated_we;
    reg_we_check[277] = LOC_ALERT_CLASS_SHADOWED_1_gated_we;
    reg_we_check[278] = LOC_ALERT_CLASS_SHADOWED_2_gated_we;
    reg_we_check[279] = LOC_ALERT_CLASS_SHADOWED_3_gated_we;
    reg_we_check[280] = LOC_ALERT_CLASS_SHADOWED_4_gated_we;
    reg_we_check[281] = LOC_ALERT_CLASS_SHADOWED_5_gated_we;
    reg_we_check[282] = LOC_ALERT_CLASS_SHADOWED_6_gated_we;
    reg_we_check[283] = LOC_ALERT_CAUSE_0_we;
    reg_we_check[284] = LOC_ALERT_CAUSE_1_we;
    reg_we_check[285] = LOC_ALERT_CAUSE_2_we;
    reg_we_check[286] = LOC_ALERT_CAUSE_3_we;
    reg_we_check[287] = LOC_ALERT_CAUSE_4_we;
    reg_we_check[288] = LOC_ALERT_CAUSE_5_we;
    reg_we_check[289] = LOC_ALERT_CAUSE_6_we;
    reg_we_check[290] = CLASSA_REGWEN_we;
    reg_we_check[291] = CLASSA_CTRL_SHADOWED_gated_we;
    reg_we_check[292] = CLASSA_CLR_REGWEN_we;
    reg_we_check[293] = CLASSA_CLR_SHADOWED_gated_we;
    reg_we_check[294] = 1'b0;
    reg_we_check[295] = CLASSA_ACCUM_THRESH_SHADOWED_gated_we;
    reg_we_check[296] = CLASSA_TIMEOUT_CYC_SHADOWED_gated_we;
    reg_we_check[297] = CLASSA_CRASHDUMP_TRIGGER_SHADOWED_gated_we;
    reg_we_check[298] = CLASSA_PHASE0_CYC_SHADOWED_gated_we;
    reg_we_check[299] = CLASSA_PHASE1_CYC_SHADOWED_gated_we;
    reg_we_check[300] = CLASSA_PHASE2_CYC_SHADOWED_gated_we;
    reg_we_check[301] = CLASSA_PHASE3_CYC_SHADOWED_gated_we;
    reg_we_check[302] = 1'b0;
    reg_we_check[303] = 1'b0;
    reg_we_check[304] = CLASSB_REGWEN_we;
    reg_we_check[305] = CLASSB_CTRL_SHADOWED_gated_we;
    reg_we_check[306] = CLASSB_CLR_REGWEN_we;
    reg_we_check[307] = CLASSB_CLR_SHADOWED_gated_we;
    reg_we_check[308] = 1'b0;
    reg_we_check[309] = CLASSB_ACCUM_THRESH_SHADOWED_gated_we;
    reg_we_check[310] = CLASSB_TIMEOUT_CYC_SHADOWED_gated_we;
    reg_we_check[311] = CLASSB_CRASHDUMP_TRIGGER_SHADOWED_gated_we;
    reg_we_check[312] = CLASSB_PHASE0_CYC_SHADOWED_gated_we;
    reg_we_check[313] = CLASSB_PHASE1_CYC_SHADOWED_gated_we;
    reg_we_check[314] = CLASSB_PHASE2_CYC_SHADOWED_gated_we;
    reg_we_check[315] = CLASSB_PHASE3_CYC_SHADOWED_gated_we;
    reg_we_check[316] = 1'b0;
    reg_we_check[317] = 1'b0;
    reg_we_check[318] = CLASSC_REGWEN_we;
    reg_we_check[319] = CLASSC_CTRL_SHADOWED_gated_we;
    reg_we_check[320] = CLASSC_CLR_REGWEN_we;
    reg_we_check[321] = CLASSC_CLR_SHADOWED_gated_we;
    reg_we_check[322] = 1'b0;
    reg_we_check[323] = CLASSC_ACCUM_THRESH_SHADOWED_gated_we;
    reg_we_check[324] = CLASSC_TIMEOUT_CYC_SHADOWED_gated_we;
    reg_we_check[325] = CLASSC_CRASHDUMP_TRIGGER_SHADOWED_gated_we;
    reg_we_check[326] = CLASSC_PHASE0_CYC_SHADOWED_gated_we;
    reg_we_check[327] = CLASSC_PHASE1_CYC_SHADOWED_gated_we;
    reg_we_check[328] = CLASSC_PHASE2_CYC_SHADOWED_gated_we;
    reg_we_check[329] = CLASSC_PHASE3_CYC_SHADOWED_gated_we;
    reg_we_check[330] = 1'b0;
    reg_we_check[331] = 1'b0;
    reg_we_check[332] = CLASSD_REGWEN_we;
    reg_we_check[333] = CLASSD_CTRL_SHADOWED_gated_we;
    reg_we_check[334] = CLASSD_CLR_REGWEN_we;
    reg_we_check[335] = CLASSD_CLR_SHADOWED_gated_we;
    reg_we_check[336] = 1'b0;
    reg_we_check[337] = CLASSD_ACCUM_THRESH_SHADOWED_gated_we;
    reg_we_check[338] = CLASSD_TIMEOUT_CYC_SHADOWED_gated_we;
    reg_we_check[339] = CLASSD_CRASHDUMP_TRIGGER_SHADOWED_gated_we;
    reg_we_check[340] = CLASSD_PHASE0_CYC_SHADOWED_gated_we;
    reg_we_check[341] = CLASSD_PHASE1_CYC_SHADOWED_gated_we;
    reg_we_check[342] = CLASSD_PHASE2_CYC_SHADOWED_gated_we;
    reg_we_check[343] = CLASSD_PHASE3_CYC_SHADOWED_gated_we;
    reg_we_check[344] = 1'b0;
    reg_we_check[345] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addrHitNRdAllowed[0]: begin
        reg_rdata_next[0] = INTR_STATE_classa_qs;
        reg_rdata_next[1] = INTR_STATE_classb_qs;
        reg_rdata_next[2] = INTR_STATE_classc_qs;
        reg_rdata_next[3] = INTR_STATE_classd_qs;
      end

      addrHitNRdAllowed[1]: begin
        reg_rdata_next[0] = INTR_ENABLE_classa_qs;
        reg_rdata_next[1] = INTR_ENABLE_classb_qs;
        reg_rdata_next[2] = INTR_ENABLE_classc_qs;
        reg_rdata_next[3] = INTR_ENABLE_classd_qs;
      end

      addrHitNRdAllowed[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addrHitNRdAllowed[3]: begin
        reg_rdata_next[0] = PING_TIMER_REGWEN_qs;
      end

      addrHitNRdAllowed[4]: begin
        reg_rdata_next[15:0] = PING_TIMEOUT_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[5]: begin
        reg_rdata_next[0] = PING_TIMER_EN_SHADOWED_qs;
      end

      addrHitNRdAllowed[6]: begin
        reg_rdata_next[0] = ALERT_REGWEN_0_qs;
      end

      addrHitNRdAllowed[7]: begin
        reg_rdata_next[0] = ALERT_REGWEN_1_qs;
      end

      addrHitNRdAllowed[8]: begin
        reg_rdata_next[0] = ALERT_REGWEN_2_qs;
      end

      addrHitNRdAllowed[9]: begin
        reg_rdata_next[0] = ALERT_REGWEN_3_qs;
      end

      addrHitNRdAllowed[10]: begin
        reg_rdata_next[0] = ALERT_REGWEN_4_qs;
      end

      addrHitNRdAllowed[11]: begin
        reg_rdata_next[0] = ALERT_REGWEN_5_qs;
      end

      addrHitNRdAllowed[12]: begin
        reg_rdata_next[0] = ALERT_REGWEN_6_qs;
      end

      addrHitNRdAllowed[13]: begin
        reg_rdata_next[0] = ALERT_REGWEN_7_qs;
      end

      addrHitNRdAllowed[14]: begin
        reg_rdata_next[0] = ALERT_REGWEN_8_qs;
      end

      addrHitNRdAllowed[15]: begin
        reg_rdata_next[0] = ALERT_REGWEN_9_qs;
      end

      addrHitNRdAllowed[16]: begin
        reg_rdata_next[0] = ALERT_REGWEN_10_qs;
      end

      addrHitNRdAllowed[17]: begin
        reg_rdata_next[0] = ALERT_REGWEN_11_qs;
      end

      addrHitNRdAllowed[18]: begin
        reg_rdata_next[0] = ALERT_REGWEN_12_qs;
      end

      addrHitNRdAllowed[19]: begin
        reg_rdata_next[0] = ALERT_REGWEN_13_qs;
      end

      addrHitNRdAllowed[20]: begin
        reg_rdata_next[0] = ALERT_REGWEN_14_qs;
      end

      addrHitNRdAllowed[21]: begin
        reg_rdata_next[0] = ALERT_REGWEN_15_qs;
      end

      addrHitNRdAllowed[22]: begin
        reg_rdata_next[0] = ALERT_REGWEN_16_qs;
      end

      addrHitNRdAllowed[23]: begin
        reg_rdata_next[0] = ALERT_REGWEN_17_qs;
      end

      addrHitNRdAllowed[24]: begin
        reg_rdata_next[0] = ALERT_REGWEN_18_qs;
      end

      addrHitNRdAllowed[25]: begin
        reg_rdata_next[0] = ALERT_REGWEN_19_qs;
      end

      addrHitNRdAllowed[26]: begin
        reg_rdata_next[0] = ALERT_REGWEN_20_qs;
      end

      addrHitNRdAllowed[27]: begin
        reg_rdata_next[0] = ALERT_REGWEN_21_qs;
      end

      addrHitNRdAllowed[28]: begin
        reg_rdata_next[0] = ALERT_REGWEN_22_qs;
      end

      addrHitNRdAllowed[29]: begin
        reg_rdata_next[0] = ALERT_REGWEN_23_qs;
      end

      addrHitNRdAllowed[30]: begin
        reg_rdata_next[0] = ALERT_REGWEN_24_qs;
      end

      addrHitNRdAllowed[31]: begin
        reg_rdata_next[0] = ALERT_REGWEN_25_qs;
      end

      addrHitNRdAllowed[32]: begin
        reg_rdata_next[0] = ALERT_REGWEN_26_qs;
      end

      addrHitNRdAllowed[33]: begin
        reg_rdata_next[0] = ALERT_REGWEN_27_qs;
      end

      addrHitNRdAllowed[34]: begin
        reg_rdata_next[0] = ALERT_REGWEN_28_qs;
      end

      addrHitNRdAllowed[35]: begin
        reg_rdata_next[0] = ALERT_REGWEN_29_qs;
      end

      addrHitNRdAllowed[36]: begin
        reg_rdata_next[0] = ALERT_REGWEN_30_qs;
      end

      addrHitNRdAllowed[37]: begin
        reg_rdata_next[0] = ALERT_REGWEN_31_qs;
      end

      addrHitNRdAllowed[38]: begin
        reg_rdata_next[0] = ALERT_REGWEN_32_qs;
      end

      addrHitNRdAllowed[39]: begin
        reg_rdata_next[0] = ALERT_REGWEN_33_qs;
      end

      addrHitNRdAllowed[40]: begin
        reg_rdata_next[0] = ALERT_REGWEN_34_qs;
      end

      addrHitNRdAllowed[41]: begin
        reg_rdata_next[0] = ALERT_REGWEN_35_qs;
      end

      addrHitNRdAllowed[42]: begin
        reg_rdata_next[0] = ALERT_REGWEN_36_qs;
      end

      addrHitNRdAllowed[43]: begin
        reg_rdata_next[0] = ALERT_REGWEN_37_qs;
      end

      addrHitNRdAllowed[44]: begin
        reg_rdata_next[0] = ALERT_REGWEN_38_qs;
      end

      addrHitNRdAllowed[45]: begin
        reg_rdata_next[0] = ALERT_REGWEN_39_qs;
      end

      addrHitNRdAllowed[46]: begin
        reg_rdata_next[0] = ALERT_REGWEN_40_qs;
      end

      addrHitNRdAllowed[47]: begin
        reg_rdata_next[0] = ALERT_REGWEN_41_qs;
      end

      addrHitNRdAllowed[48]: begin
        reg_rdata_next[0] = ALERT_REGWEN_42_qs;
      end

      addrHitNRdAllowed[49]: begin
        reg_rdata_next[0] = ALERT_REGWEN_43_qs;
      end

      addrHitNRdAllowed[50]: begin
        reg_rdata_next[0] = ALERT_REGWEN_44_qs;
      end

      addrHitNRdAllowed[51]: begin
        reg_rdata_next[0] = ALERT_REGWEN_45_qs;
      end

      addrHitNRdAllowed[52]: begin
        reg_rdata_next[0] = ALERT_REGWEN_46_qs;
      end

      addrHitNRdAllowed[53]: begin
        reg_rdata_next[0] = ALERT_REGWEN_47_qs;
      end

      addrHitNRdAllowed[54]: begin
        reg_rdata_next[0] = ALERT_REGWEN_48_qs;
      end

      addrHitNRdAllowed[55]: begin
        reg_rdata_next[0] = ALERT_REGWEN_49_qs;
      end

      addrHitNRdAllowed[56]: begin
        reg_rdata_next[0] = ALERT_REGWEN_50_qs;
      end

      addrHitNRdAllowed[57]: begin
        reg_rdata_next[0] = ALERT_REGWEN_51_qs;
      end

      addrHitNRdAllowed[58]: begin
        reg_rdata_next[0] = ALERT_REGWEN_52_qs;
      end

      addrHitNRdAllowed[59]: begin
        reg_rdata_next[0] = ALERT_REGWEN_53_qs;
      end

      addrHitNRdAllowed[60]: begin
        reg_rdata_next[0] = ALERT_REGWEN_54_qs;
      end

      addrHitNRdAllowed[61]: begin
        reg_rdata_next[0] = ALERT_REGWEN_55_qs;
      end

      addrHitNRdAllowed[62]: begin
        reg_rdata_next[0] = ALERT_REGWEN_56_qs;
      end

      addrHitNRdAllowed[63]: begin
        reg_rdata_next[0] = ALERT_REGWEN_57_qs;
      end

      addrHitNRdAllowed[64]: begin
        reg_rdata_next[0] = ALERT_REGWEN_58_qs;
      end

      addrHitNRdAllowed[65]: begin
        reg_rdata_next[0] = ALERT_REGWEN_59_qs;
      end

      addrHitNRdAllowed[66]: begin
        reg_rdata_next[0] = ALERT_REGWEN_60_qs;
      end

      addrHitNRdAllowed[67]: begin
        reg_rdata_next[0] = ALERT_REGWEN_61_qs;
      end

      addrHitNRdAllowed[68]: begin
        reg_rdata_next[0] = ALERT_REGWEN_62_qs;
      end

      addrHitNRdAllowed[69]: begin
        reg_rdata_next[0] = ALERT_REGWEN_63_qs;
      end

      addrHitNRdAllowed[70]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_0_qs;
      end

      addrHitNRdAllowed[71]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_1_qs;
      end

      addrHitNRdAllowed[72]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_2_qs;
      end

      addrHitNRdAllowed[73]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_3_qs;
      end

      addrHitNRdAllowed[74]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_4_qs;
      end

      addrHitNRdAllowed[75]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_5_qs;
      end

      addrHitNRdAllowed[76]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_6_qs;
      end

      addrHitNRdAllowed[77]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_7_qs;
      end

      addrHitNRdAllowed[78]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_8_qs;
      end

      addrHitNRdAllowed[79]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_9_qs;
      end

      addrHitNRdAllowed[80]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_10_qs;
      end

      addrHitNRdAllowed[81]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_11_qs;
      end

      addrHitNRdAllowed[82]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_12_qs;
      end

      addrHitNRdAllowed[83]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_13_qs;
      end

      addrHitNRdAllowed[84]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_14_qs;
      end

      addrHitNRdAllowed[85]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_15_qs;
      end

      addrHitNRdAllowed[86]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_16_qs;
      end

      addrHitNRdAllowed[87]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_17_qs;
      end

      addrHitNRdAllowed[88]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_18_qs;
      end

      addrHitNRdAllowed[89]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_19_qs;
      end

      addrHitNRdAllowed[90]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_20_qs;
      end

      addrHitNRdAllowed[91]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_21_qs;
      end

      addrHitNRdAllowed[92]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_22_qs;
      end

      addrHitNRdAllowed[93]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_23_qs;
      end

      addrHitNRdAllowed[94]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_24_qs;
      end

      addrHitNRdAllowed[95]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_25_qs;
      end

      addrHitNRdAllowed[96]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_26_qs;
      end

      addrHitNRdAllowed[97]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_27_qs;
      end

      addrHitNRdAllowed[98]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_28_qs;
      end

      addrHitNRdAllowed[99]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_29_qs;
      end

      addrHitNRdAllowed[100]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_30_qs;
      end

      addrHitNRdAllowed[101]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_31_qs;
      end

      addrHitNRdAllowed[102]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_32_qs;
      end

      addrHitNRdAllowed[103]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_33_qs;
      end

      addrHitNRdAllowed[104]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_34_qs;
      end

      addrHitNRdAllowed[105]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_35_qs;
      end

      addrHitNRdAllowed[106]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_36_qs;
      end

      addrHitNRdAllowed[107]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_37_qs;
      end

      addrHitNRdAllowed[108]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_38_qs;
      end

      addrHitNRdAllowed[109]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_39_qs;
      end

      addrHitNRdAllowed[110]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_40_qs;
      end

      addrHitNRdAllowed[111]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_41_qs;
      end

      addrHitNRdAllowed[112]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_42_qs;
      end

      addrHitNRdAllowed[113]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_43_qs;
      end

      addrHitNRdAllowed[114]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_44_qs;
      end

      addrHitNRdAllowed[115]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_45_qs;
      end

      addrHitNRdAllowed[116]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_46_qs;
      end

      addrHitNRdAllowed[117]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_47_qs;
      end

      addrHitNRdAllowed[118]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_48_qs;
      end

      addrHitNRdAllowed[119]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_49_qs;
      end

      addrHitNRdAllowed[120]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_50_qs;
      end

      addrHitNRdAllowed[121]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_51_qs;
      end

      addrHitNRdAllowed[122]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_52_qs;
      end

      addrHitNRdAllowed[123]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_53_qs;
      end

      addrHitNRdAllowed[124]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_54_qs;
      end

      addrHitNRdAllowed[125]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_55_qs;
      end

      addrHitNRdAllowed[126]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_56_qs;
      end

      addrHitNRdAllowed[127]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_57_qs;
      end

      addrHitNRdAllowed[128]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_58_qs;
      end

      addrHitNRdAllowed[129]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_59_qs;
      end

      addrHitNRdAllowed[130]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_60_qs;
      end

      addrHitNRdAllowed[131]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_61_qs;
      end

      addrHitNRdAllowed[132]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_62_qs;
      end

      addrHitNRdAllowed[133]: begin
        reg_rdata_next[0] = ALERT_EN_SHADOWED_63_qs;
      end

      addrHitNRdAllowed[134]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_0_qs;
      end

      addrHitNRdAllowed[135]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_1_qs;
      end

      addrHitNRdAllowed[136]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_2_qs;
      end

      addrHitNRdAllowed[137]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_3_qs;
      end

      addrHitNRdAllowed[138]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_4_qs;
      end

      addrHitNRdAllowed[139]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_5_qs;
      end

      addrHitNRdAllowed[140]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_6_qs;
      end

      addrHitNRdAllowed[141]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_7_qs;
      end

      addrHitNRdAllowed[142]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_8_qs;
      end

      addrHitNRdAllowed[143]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_9_qs;
      end

      addrHitNRdAllowed[144]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_10_qs;
      end

      addrHitNRdAllowed[145]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_11_qs;
      end

      addrHitNRdAllowed[146]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_12_qs;
      end

      addrHitNRdAllowed[147]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_13_qs;
      end

      addrHitNRdAllowed[148]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_14_qs;
      end

      addrHitNRdAllowed[149]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_15_qs;
      end

      addrHitNRdAllowed[150]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_16_qs;
      end

      addrHitNRdAllowed[151]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_17_qs;
      end

      addrHitNRdAllowed[152]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_18_qs;
      end

      addrHitNRdAllowed[153]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_19_qs;
      end

      addrHitNRdAllowed[154]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_20_qs;
      end

      addrHitNRdAllowed[155]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_21_qs;
      end

      addrHitNRdAllowed[156]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_22_qs;
      end

      addrHitNRdAllowed[157]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_23_qs;
      end

      addrHitNRdAllowed[158]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_24_qs;
      end

      addrHitNRdAllowed[159]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_25_qs;
      end

      addrHitNRdAllowed[160]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_26_qs;
      end

      addrHitNRdAllowed[161]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_27_qs;
      end

      addrHitNRdAllowed[162]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_28_qs;
      end

      addrHitNRdAllowed[163]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_29_qs;
      end

      addrHitNRdAllowed[164]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_30_qs;
      end

      addrHitNRdAllowed[165]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_31_qs;
      end

      addrHitNRdAllowed[166]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_32_qs;
      end

      addrHitNRdAllowed[167]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_33_qs;
      end

      addrHitNRdAllowed[168]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_34_qs;
      end

      addrHitNRdAllowed[169]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_35_qs;
      end

      addrHitNRdAllowed[170]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_36_qs;
      end

      addrHitNRdAllowed[171]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_37_qs;
      end

      addrHitNRdAllowed[172]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_38_qs;
      end

      addrHitNRdAllowed[173]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_39_qs;
      end

      addrHitNRdAllowed[174]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_40_qs;
      end

      addrHitNRdAllowed[175]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_41_qs;
      end

      addrHitNRdAllowed[176]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_42_qs;
      end

      addrHitNRdAllowed[177]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_43_qs;
      end

      addrHitNRdAllowed[178]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_44_qs;
      end

      addrHitNRdAllowed[179]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_45_qs;
      end

      addrHitNRdAllowed[180]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_46_qs;
      end

      addrHitNRdAllowed[181]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_47_qs;
      end

      addrHitNRdAllowed[182]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_48_qs;
      end

      addrHitNRdAllowed[183]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_49_qs;
      end

      addrHitNRdAllowed[184]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_50_qs;
      end

      addrHitNRdAllowed[185]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_51_qs;
      end

      addrHitNRdAllowed[186]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_52_qs;
      end

      addrHitNRdAllowed[187]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_53_qs;
      end

      addrHitNRdAllowed[188]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_54_qs;
      end

      addrHitNRdAllowed[189]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_55_qs;
      end

      addrHitNRdAllowed[190]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_56_qs;
      end

      addrHitNRdAllowed[191]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_57_qs;
      end

      addrHitNRdAllowed[192]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_58_qs;
      end

      addrHitNRdAllowed[193]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_59_qs;
      end

      addrHitNRdAllowed[194]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_60_qs;
      end

      addrHitNRdAllowed[195]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_61_qs;
      end

      addrHitNRdAllowed[196]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_62_qs;
      end

      addrHitNRdAllowed[197]: begin
        reg_rdata_next[1:0] = ALERT_CLASS_SHADOWED_63_qs;
      end

      addrHitNRdAllowed[198]: begin
        reg_rdata_next[0] = ALERT_CAUSE_0_qs;
      end

      addrHitNRdAllowed[199]: begin
        reg_rdata_next[0] = ALERT_CAUSE_1_qs;
      end

      addrHitNRdAllowed[200]: begin
        reg_rdata_next[0] = ALERT_CAUSE_2_qs;
      end

      addrHitNRdAllowed[201]: begin
        reg_rdata_next[0] = ALERT_CAUSE_3_qs;
      end

      addrHitNRdAllowed[202]: begin
        reg_rdata_next[0] = ALERT_CAUSE_4_qs;
      end

      addrHitNRdAllowed[203]: begin
        reg_rdata_next[0] = ALERT_CAUSE_5_qs;
      end

      addrHitNRdAllowed[204]: begin
        reg_rdata_next[0] = ALERT_CAUSE_6_qs;
      end

      addrHitNRdAllowed[205]: begin
        reg_rdata_next[0] = ALERT_CAUSE_7_qs;
      end

      addrHitNRdAllowed[206]: begin
        reg_rdata_next[0] = ALERT_CAUSE_8_qs;
      end

      addrHitNRdAllowed[207]: begin
        reg_rdata_next[0] = ALERT_CAUSE_9_qs;
      end

      addrHitNRdAllowed[208]: begin
        reg_rdata_next[0] = ALERT_CAUSE_10_qs;
      end

      addrHitNRdAllowed[209]: begin
        reg_rdata_next[0] = ALERT_CAUSE_11_qs;
      end

      addrHitNRdAllowed[210]: begin
        reg_rdata_next[0] = ALERT_CAUSE_12_qs;
      end

      addrHitNRdAllowed[211]: begin
        reg_rdata_next[0] = ALERT_CAUSE_13_qs;
      end

      addrHitNRdAllowed[212]: begin
        reg_rdata_next[0] = ALERT_CAUSE_14_qs;
      end

      addrHitNRdAllowed[213]: begin
        reg_rdata_next[0] = ALERT_CAUSE_15_qs;
      end

      addrHitNRdAllowed[214]: begin
        reg_rdata_next[0] = ALERT_CAUSE_16_qs;
      end

      addrHitNRdAllowed[215]: begin
        reg_rdata_next[0] = ALERT_CAUSE_17_qs;
      end

      addrHitNRdAllowed[216]: begin
        reg_rdata_next[0] = ALERT_CAUSE_18_qs;
      end

      addrHitNRdAllowed[217]: begin
        reg_rdata_next[0] = ALERT_CAUSE_19_qs;
      end

      addrHitNRdAllowed[218]: begin
        reg_rdata_next[0] = ALERT_CAUSE_20_qs;
      end

      addrHitNRdAllowed[219]: begin
        reg_rdata_next[0] = ALERT_CAUSE_21_qs;
      end

      addrHitNRdAllowed[220]: begin
        reg_rdata_next[0] = ALERT_CAUSE_22_qs;
      end

      addrHitNRdAllowed[221]: begin
        reg_rdata_next[0] = ALERT_CAUSE_23_qs;
      end

      addrHitNRdAllowed[222]: begin
        reg_rdata_next[0] = ALERT_CAUSE_24_qs;
      end

      addrHitNRdAllowed[223]: begin
        reg_rdata_next[0] = ALERT_CAUSE_25_qs;
      end

      addrHitNRdAllowed[224]: begin
        reg_rdata_next[0] = ALERT_CAUSE_26_qs;
      end

      addrHitNRdAllowed[225]: begin
        reg_rdata_next[0] = ALERT_CAUSE_27_qs;
      end

      addrHitNRdAllowed[226]: begin
        reg_rdata_next[0] = ALERT_CAUSE_28_qs;
      end

      addrHitNRdAllowed[227]: begin
        reg_rdata_next[0] = ALERT_CAUSE_29_qs;
      end

      addrHitNRdAllowed[228]: begin
        reg_rdata_next[0] = ALERT_CAUSE_30_qs;
      end

      addrHitNRdAllowed[229]: begin
        reg_rdata_next[0] = ALERT_CAUSE_31_qs;
      end

      addrHitNRdAllowed[230]: begin
        reg_rdata_next[0] = ALERT_CAUSE_32_qs;
      end

      addrHitNRdAllowed[231]: begin
        reg_rdata_next[0] = ALERT_CAUSE_33_qs;
      end

      addrHitNRdAllowed[232]: begin
        reg_rdata_next[0] = ALERT_CAUSE_34_qs;
      end

      addrHitNRdAllowed[233]: begin
        reg_rdata_next[0] = ALERT_CAUSE_35_qs;
      end

      addrHitNRdAllowed[234]: begin
        reg_rdata_next[0] = ALERT_CAUSE_36_qs;
      end

      addrHitNRdAllowed[235]: begin
        reg_rdata_next[0] = ALERT_CAUSE_37_qs;
      end

      addrHitNRdAllowed[236]: begin
        reg_rdata_next[0] = ALERT_CAUSE_38_qs;
      end

      addrHitNRdAllowed[237]: begin
        reg_rdata_next[0] = ALERT_CAUSE_39_qs;
      end

      addrHitNRdAllowed[238]: begin
        reg_rdata_next[0] = ALERT_CAUSE_40_qs;
      end

      addrHitNRdAllowed[239]: begin
        reg_rdata_next[0] = ALERT_CAUSE_41_qs;
      end

      addrHitNRdAllowed[240]: begin
        reg_rdata_next[0] = ALERT_CAUSE_42_qs;
      end

      addrHitNRdAllowed[241]: begin
        reg_rdata_next[0] = ALERT_CAUSE_43_qs;
      end

      addrHitNRdAllowed[242]: begin
        reg_rdata_next[0] = ALERT_CAUSE_44_qs;
      end

      addrHitNRdAllowed[243]: begin
        reg_rdata_next[0] = ALERT_CAUSE_45_qs;
      end

      addrHitNRdAllowed[244]: begin
        reg_rdata_next[0] = ALERT_CAUSE_46_qs;
      end

      addrHitNRdAllowed[245]: begin
        reg_rdata_next[0] = ALERT_CAUSE_47_qs;
      end

      addrHitNRdAllowed[246]: begin
        reg_rdata_next[0] = ALERT_CAUSE_48_qs;
      end

      addrHitNRdAllowed[247]: begin
        reg_rdata_next[0] = ALERT_CAUSE_49_qs;
      end

      addrHitNRdAllowed[248]: begin
        reg_rdata_next[0] = ALERT_CAUSE_50_qs;
      end

      addrHitNRdAllowed[249]: begin
        reg_rdata_next[0] = ALERT_CAUSE_51_qs;
      end

      addrHitNRdAllowed[250]: begin
        reg_rdata_next[0] = ALERT_CAUSE_52_qs;
      end

      addrHitNRdAllowed[251]: begin
        reg_rdata_next[0] = ALERT_CAUSE_53_qs;
      end

      addrHitNRdAllowed[252]: begin
        reg_rdata_next[0] = ALERT_CAUSE_54_qs;
      end

      addrHitNRdAllowed[253]: begin
        reg_rdata_next[0] = ALERT_CAUSE_55_qs;
      end

      addrHitNRdAllowed[254]: begin
        reg_rdata_next[0] = ALERT_CAUSE_56_qs;
      end

      addrHitNRdAllowed[255]: begin
        reg_rdata_next[0] = ALERT_CAUSE_57_qs;
      end

      addrHitNRdAllowed[256]: begin
        reg_rdata_next[0] = ALERT_CAUSE_58_qs;
      end

      addrHitNRdAllowed[257]: begin
        reg_rdata_next[0] = ALERT_CAUSE_59_qs;
      end

      addrHitNRdAllowed[258]: begin
        reg_rdata_next[0] = ALERT_CAUSE_60_qs;
      end

      addrHitNRdAllowed[259]: begin
        reg_rdata_next[0] = ALERT_CAUSE_61_qs;
      end

      addrHitNRdAllowed[260]: begin
        reg_rdata_next[0] = ALERT_CAUSE_62_qs;
      end

      addrHitNRdAllowed[261]: begin
        reg_rdata_next[0] = ALERT_CAUSE_63_qs;
      end

      addrHitNRdAllowed[262]: begin
        reg_rdata_next[0] = LOC_ALERT_REGWEN_0_qs;
      end

      addrHitNRdAllowed[263]: begin
        reg_rdata_next[0] = LOC_ALERT_REGWEN_1_qs;
      end

      addrHitNRdAllowed[264]: begin
        reg_rdata_next[0] = LOC_ALERT_REGWEN_2_qs;
      end

      addrHitNRdAllowed[265]: begin
        reg_rdata_next[0] = LOC_ALERT_REGWEN_3_qs;
      end

      addrHitNRdAllowed[266]: begin
        reg_rdata_next[0] = LOC_ALERT_REGWEN_4_qs;
      end

      addrHitNRdAllowed[267]: begin
        reg_rdata_next[0] = LOC_ALERT_REGWEN_5_qs;
      end

      addrHitNRdAllowed[268]: begin
        reg_rdata_next[0] = LOC_ALERT_REGWEN_6_qs;
      end

      addrHitNRdAllowed[269]: begin
        reg_rdata_next[0] = LOC_ALERT_EN_SHADOWED_0_qs;
      end

      addrHitNRdAllowed[270]: begin
        reg_rdata_next[0] = LOC_ALERT_EN_SHADOWED_1_qs;
      end

      addrHitNRdAllowed[271]: begin
        reg_rdata_next[0] = LOC_ALERT_EN_SHADOWED_2_qs;
      end

      addrHitNRdAllowed[272]: begin
        reg_rdata_next[0] = LOC_ALERT_EN_SHADOWED_3_qs;
      end

      addrHitNRdAllowed[273]: begin
        reg_rdata_next[0] = LOC_ALERT_EN_SHADOWED_4_qs;
      end

      addrHitNRdAllowed[274]: begin
        reg_rdata_next[0] = LOC_ALERT_EN_SHADOWED_5_qs;
      end

      addrHitNRdAllowed[275]: begin
        reg_rdata_next[0] = LOC_ALERT_EN_SHADOWED_6_qs;
      end

      addrHitNRdAllowed[276]: begin
        reg_rdata_next[1:0] = LOC_ALERT_CLASS_SHADOWED_0_qs;
      end

      addrHitNRdAllowed[277]: begin
        reg_rdata_next[1:0] = LOC_ALERT_CLASS_SHADOWED_1_qs;
      end

      addrHitNRdAllowed[278]: begin
        reg_rdata_next[1:0] = LOC_ALERT_CLASS_SHADOWED_2_qs;
      end

      addrHitNRdAllowed[279]: begin
        reg_rdata_next[1:0] = LOC_ALERT_CLASS_SHADOWED_3_qs;
      end

      addrHitNRdAllowed[280]: begin
        reg_rdata_next[1:0] = LOC_ALERT_CLASS_SHADOWED_4_qs;
      end

      addrHitNRdAllowed[281]: begin
        reg_rdata_next[1:0] = LOC_ALERT_CLASS_SHADOWED_5_qs;
      end

      addrHitNRdAllowed[282]: begin
        reg_rdata_next[1:0] = LOC_ALERT_CLASS_SHADOWED_6_qs;
      end

      addrHitNRdAllowed[283]: begin
        reg_rdata_next[0] = LOC_ALERT_CAUSE_0_qs;
      end

      addrHitNRdAllowed[284]: begin
        reg_rdata_next[0] = LOC_ALERT_CAUSE_1_qs;
      end

      addrHitNRdAllowed[285]: begin
        reg_rdata_next[0] = LOC_ALERT_CAUSE_2_qs;
      end

      addrHitNRdAllowed[286]: begin
        reg_rdata_next[0] = LOC_ALERT_CAUSE_3_qs;
      end

      addrHitNRdAllowed[287]: begin
        reg_rdata_next[0] = LOC_ALERT_CAUSE_4_qs;
      end

      addrHitNRdAllowed[288]: begin
        reg_rdata_next[0] = LOC_ALERT_CAUSE_5_qs;
      end

      addrHitNRdAllowed[289]: begin
        reg_rdata_next[0] = LOC_ALERT_CAUSE_6_qs;
      end

      addrHitNRdAllowed[290]: begin
        reg_rdata_next[0] = CLASSA_REGWEN_qs;
      end

      addrHitNRdAllowed[291]: begin
        reg_rdata_next[0] = CLASSA_CTRL_SHADOWED_EN_qs;
        reg_rdata_next[1] = CLASSA_CTRL_SHADOWED_LOCK_qs;
        reg_rdata_next[2] = CLASSA_CTRL_SHADOWED_EN_E0_qs;
        reg_rdata_next[3] = CLASSA_CTRL_SHADOWED_EN_E1_qs;
        reg_rdata_next[4] = CLASSA_CTRL_SHADOWED_EN_E2_qs;
        reg_rdata_next[5] = CLASSA_CTRL_SHADOWED_EN_E3_qs;
        reg_rdata_next[7:6] = CLASSA_CTRL_SHADOWED_MAP_E0_qs;
        reg_rdata_next[9:8] = CLASSA_CTRL_SHADOWED_MAP_E1_qs;
        reg_rdata_next[11:10] = CLASSA_CTRL_SHADOWED_MAP_E2_qs;
        reg_rdata_next[13:12] = CLASSA_CTRL_SHADOWED_MAP_E3_qs;
      end

      addrHitNRdAllowed[292]: begin
        reg_rdata_next[0] = CLASSA_CLR_REGWEN_qs;
      end

      addrHitNRdAllowed[293]: begin
        reg_rdata_next[0] = CLASSA_CLR_SHADOWED_qs;
      end

      addrHitNRdAllowed[294]: begin
        reg_rdata_next[15:0] = CLASSA_ACCUM_CNT_qs;
      end

      addrHitNRdAllowed[295]: begin
        reg_rdata_next[15:0] = CLASSA_ACCUM_THRESH_SHADOWED_qs;
      end

      addrHitNRdAllowed[296]: begin
        reg_rdata_next[31:0] = CLASSA_TIMEOUT_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[297]: begin
        reg_rdata_next[1:0] = CLASSA_CRASHDUMP_TRIGGER_SHADOWED_qs;
      end

      addrHitNRdAllowed[298]: begin
        reg_rdata_next[31:0] = CLASSA_PHASE0_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[299]: begin
        reg_rdata_next[31:0] = CLASSA_PHASE1_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[300]: begin
        reg_rdata_next[31:0] = CLASSA_PHASE2_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[301]: begin
        reg_rdata_next[31:0] = CLASSA_PHASE3_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[302]: begin
        reg_rdata_next[31:0] = CLASSA_ESC_CNT_qs;
      end

      addrHitNRdAllowed[303]: begin
        reg_rdata_next[2:0] = CLASSA_STATE_qs;
      end

      addrHitNRdAllowed[304]: begin
        reg_rdata_next[0] = CLASSB_REGWEN_qs;
      end

      addrHitNRdAllowed[305]: begin
        reg_rdata_next[0] = CLASSB_CTRL_SHADOWED_EN_qs;
        reg_rdata_next[1] = CLASSB_CTRL_SHADOWED_LOCK_qs;
        reg_rdata_next[2] = CLASSB_CTRL_SHADOWED_EN_E0_qs;
        reg_rdata_next[3] = CLASSB_CTRL_SHADOWED_EN_E1_qs;
        reg_rdata_next[4] = CLASSB_CTRL_SHADOWED_EN_E2_qs;
        reg_rdata_next[5] = CLASSB_CTRL_SHADOWED_EN_E3_qs;
        reg_rdata_next[7:6] = CLASSB_CTRL_SHADOWED_MAP_E0_qs;
        reg_rdata_next[9:8] = CLASSB_CTRL_SHADOWED_MAP_E1_qs;
        reg_rdata_next[11:10] = CLASSB_CTRL_SHADOWED_MAP_E2_qs;
        reg_rdata_next[13:12] = CLASSB_CTRL_SHADOWED_MAP_E3_qs;
      end

      addrHitNRdAllowed[306]: begin
        reg_rdata_next[0] = CLASSB_CLR_REGWEN_qs;
      end

      addrHitNRdAllowed[307]: begin
        reg_rdata_next[0] = CLASSB_CLR_SHADOWED_qs;
      end

      addrHitNRdAllowed[308]: begin
        reg_rdata_next[15:0] = CLASSB_ACCUM_CNT_qs;
      end

      addrHitNRdAllowed[309]: begin
        reg_rdata_next[15:0] = CLASSB_ACCUM_THRESH_SHADOWED_qs;
      end

      addrHitNRdAllowed[310]: begin
        reg_rdata_next[31:0] = CLASSB_TIMEOUT_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[311]: begin
        reg_rdata_next[1:0] = CLASSB_CRASHDUMP_TRIGGER_SHADOWED_qs;
      end

      addrHitNRdAllowed[312]: begin
        reg_rdata_next[31:0] = CLASSB_PHASE0_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[313]: begin
        reg_rdata_next[31:0] = CLASSB_PHASE1_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[314]: begin
        reg_rdata_next[31:0] = CLASSB_PHASE2_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[315]: begin
        reg_rdata_next[31:0] = CLASSB_PHASE3_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[316]: begin
        reg_rdata_next[31:0] = CLASSB_ESC_CNT_qs;
      end

      addrHitNRdAllowed[317]: begin
        reg_rdata_next[2:0] = CLASSB_STATE_qs;
      end

      addrHitNRdAllowed[318]: begin
        reg_rdata_next[0] = CLASSC_REGWEN_qs;
      end

      addrHitNRdAllowed[319]: begin
        reg_rdata_next[0] = CLASSC_CTRL_SHADOWED_EN_qs;
        reg_rdata_next[1] = CLASSC_CTRL_SHADOWED_LOCK_qs;
        reg_rdata_next[2] = CLASSC_CTRL_SHADOWED_EN_E0_qs;
        reg_rdata_next[3] = CLASSC_CTRL_SHADOWED_EN_E1_qs;
        reg_rdata_next[4] = CLASSC_CTRL_SHADOWED_EN_E2_qs;
        reg_rdata_next[5] = CLASSC_CTRL_SHADOWED_EN_E3_qs;
        reg_rdata_next[7:6] = CLASSC_CTRL_SHADOWED_MAP_E0_qs;
        reg_rdata_next[9:8] = CLASSC_CTRL_SHADOWED_MAP_E1_qs;
        reg_rdata_next[11:10] = CLASSC_CTRL_SHADOWED_MAP_E2_qs;
        reg_rdata_next[13:12] = CLASSC_CTRL_SHADOWED_MAP_E3_qs;
      end

      addrHitNRdAllowed[320]: begin
        reg_rdata_next[0] = CLASSC_CLR_REGWEN_qs;
      end

      addrHitNRdAllowed[321]: begin
        reg_rdata_next[0] = CLASSC_CLR_SHADOWED_qs;
      end

      addrHitNRdAllowed[322]: begin
        reg_rdata_next[15:0] = CLASSC_ACCUM_CNT_qs;
      end

      addrHitNRdAllowed[323]: begin
        reg_rdata_next[15:0] = CLASSC_ACCUM_THRESH_SHADOWED_qs;
      end

      addrHitNRdAllowed[324]: begin
        reg_rdata_next[31:0] = CLASSC_TIMEOUT_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[325]: begin
        reg_rdata_next[1:0] = CLASSC_CRASHDUMP_TRIGGER_SHADOWED_qs;
      end

      addrHitNRdAllowed[326]: begin
        reg_rdata_next[31:0] = CLASSC_PHASE0_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[327]: begin
        reg_rdata_next[31:0] = CLASSC_PHASE1_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[328]: begin
        reg_rdata_next[31:0] = CLASSC_PHASE2_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[329]: begin
        reg_rdata_next[31:0] = CLASSC_PHASE3_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[330]: begin
        reg_rdata_next[31:0] = CLASSC_ESC_CNT_qs;
      end

      addrHitNRdAllowed[331]: begin
        reg_rdata_next[2:0] = CLASSC_STATE_qs;
      end

      addrHitNRdAllowed[332]: begin
        reg_rdata_next[0] = CLASSD_REGWEN_qs;
      end

      addrHitNRdAllowed[333]: begin
        reg_rdata_next[0] = CLASSD_CTRL_SHADOWED_EN_qs;
        reg_rdata_next[1] = CLASSD_CTRL_SHADOWED_LOCK_qs;
        reg_rdata_next[2] = CLASSD_CTRL_SHADOWED_EN_E0_qs;
        reg_rdata_next[3] = CLASSD_CTRL_SHADOWED_EN_E1_qs;
        reg_rdata_next[4] = CLASSD_CTRL_SHADOWED_EN_E2_qs;
        reg_rdata_next[5] = CLASSD_CTRL_SHADOWED_EN_E3_qs;
        reg_rdata_next[7:6] = CLASSD_CTRL_SHADOWED_MAP_E0_qs;
        reg_rdata_next[9:8] = CLASSD_CTRL_SHADOWED_MAP_E1_qs;
        reg_rdata_next[11:10] = CLASSD_CTRL_SHADOWED_MAP_E2_qs;
        reg_rdata_next[13:12] = CLASSD_CTRL_SHADOWED_MAP_E3_qs;
      end

      addrHitNRdAllowed[334]: begin
        reg_rdata_next[0] = CLASSD_CLR_REGWEN_qs;
      end

      addrHitNRdAllowed[335]: begin
        reg_rdata_next[0] = CLASSD_CLR_SHADOWED_qs;
      end

      addrHitNRdAllowed[336]: begin
        reg_rdata_next[15:0] = CLASSD_ACCUM_CNT_qs;
      end

      addrHitNRdAllowed[337]: begin
        reg_rdata_next[15:0] = CLASSD_ACCUM_THRESH_SHADOWED_qs;
      end

      addrHitNRdAllowed[338]: begin
        reg_rdata_next[31:0] = CLASSD_TIMEOUT_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[339]: begin
        reg_rdata_next[1:0] = CLASSD_CRASHDUMP_TRIGGER_SHADOWED_qs;
      end

      addrHitNRdAllowed[340]: begin
        reg_rdata_next[31:0] = CLASSD_PHASE0_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[341]: begin
        reg_rdata_next[31:0] = CLASSD_PHASE1_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[342]: begin
        reg_rdata_next[31:0] = CLASSD_PHASE2_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[343]: begin
        reg_rdata_next[31:0] = CLASSD_PHASE3_CYC_SHADOWED_qs;
      end

      addrHitNRdAllowed[344]: begin
        reg_rdata_next[31:0] = CLASSD_ESC_CNT_qs;
      end

      addrHitNRdAllowed[345]: begin
        reg_rdata_next[2:0] = CLASSD_STATE_qs;
      end

      default: begin
        reg_rdata_next = '0;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  logic rst_done;
  logic shadow_rst_done;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      rst_done <= '0;
    end else begin
      rst_done <= 1'b1;
    end
  end

  always_ff @(posedge clk_i or negedge rst_shadowed_ni) begin
    if (!rst_shadowed_ni) begin
      shadow_rst_done <= '0;
    end else begin
      shadow_rst_done <= 1'b1;
    end
  end

  // both shadow and normal resets have been released
  assign shadow_busy = ~(rst_done & shadow_rst_done);

  // Collect up storage and update errors
  assign shadowed_storage_err_o = |{
    PING_TIMEOUT_CYC_SHADOWED_storage_err,
    PING_TIMER_EN_SHADOWED_storage_err,
    ALERT_EN_SHADOWED_0_storage_err,
    ALERT_EN_SHADOWED_1_storage_err,
    ALERT_EN_SHADOWED_2_storage_err,
    ALERT_EN_SHADOWED_3_storage_err,
    ALERT_EN_SHADOWED_4_storage_err,
    ALERT_EN_SHADOWED_5_storage_err,
    ALERT_EN_SHADOWED_6_storage_err,
    ALERT_EN_SHADOWED_7_storage_err,
    ALERT_EN_SHADOWED_8_storage_err,
    ALERT_EN_SHADOWED_9_storage_err,
    ALERT_EN_SHADOWED_10_storage_err,
    ALERT_EN_SHADOWED_11_storage_err,
    ALERT_EN_SHADOWED_12_storage_err,
    ALERT_EN_SHADOWED_13_storage_err,
    ALERT_EN_SHADOWED_14_storage_err,
    ALERT_EN_SHADOWED_15_storage_err,
    ALERT_EN_SHADOWED_16_storage_err,
    ALERT_EN_SHADOWED_17_storage_err,
    ALERT_EN_SHADOWED_18_storage_err,
    ALERT_EN_SHADOWED_19_storage_err,
    ALERT_EN_SHADOWED_20_storage_err,
    ALERT_EN_SHADOWED_21_storage_err,
    ALERT_EN_SHADOWED_22_storage_err,
    ALERT_EN_SHADOWED_23_storage_err,
    ALERT_EN_SHADOWED_24_storage_err,
    ALERT_EN_SHADOWED_25_storage_err,
    ALERT_EN_SHADOWED_26_storage_err,
    ALERT_EN_SHADOWED_27_storage_err,
    ALERT_EN_SHADOWED_28_storage_err,
    ALERT_EN_SHADOWED_29_storage_err,
    ALERT_EN_SHADOWED_30_storage_err,
    ALERT_EN_SHADOWED_31_storage_err,
    ALERT_EN_SHADOWED_32_storage_err,
    ALERT_EN_SHADOWED_33_storage_err,
    ALERT_EN_SHADOWED_34_storage_err,
    ALERT_EN_SHADOWED_35_storage_err,
    ALERT_EN_SHADOWED_36_storage_err,
    ALERT_EN_SHADOWED_37_storage_err,
    ALERT_EN_SHADOWED_38_storage_err,
    ALERT_EN_SHADOWED_39_storage_err,
    ALERT_EN_SHADOWED_40_storage_err,
    ALERT_EN_SHADOWED_41_storage_err,
    ALERT_EN_SHADOWED_42_storage_err,
    ALERT_EN_SHADOWED_43_storage_err,
    ALERT_EN_SHADOWED_44_storage_err,
    ALERT_EN_SHADOWED_45_storage_err,
    ALERT_EN_SHADOWED_46_storage_err,
    ALERT_EN_SHADOWED_47_storage_err,
    ALERT_EN_SHADOWED_48_storage_err,
    ALERT_EN_SHADOWED_49_storage_err,
    ALERT_EN_SHADOWED_50_storage_err,
    ALERT_EN_SHADOWED_51_storage_err,
    ALERT_EN_SHADOWED_52_storage_err,
    ALERT_EN_SHADOWED_53_storage_err,
    ALERT_EN_SHADOWED_54_storage_err,
    ALERT_EN_SHADOWED_55_storage_err,
    ALERT_EN_SHADOWED_56_storage_err,
    ALERT_EN_SHADOWED_57_storage_err,
    ALERT_EN_SHADOWED_58_storage_err,
    ALERT_EN_SHADOWED_59_storage_err,
    ALERT_EN_SHADOWED_60_storage_err,
    ALERT_EN_SHADOWED_61_storage_err,
    ALERT_EN_SHADOWED_62_storage_err,
    ALERT_EN_SHADOWED_63_storage_err,
    ALERT_CLASS_SHADOWED_0_storage_err,
    ALERT_CLASS_SHADOWED_1_storage_err,
    ALERT_CLASS_SHADOWED_2_storage_err,
    ALERT_CLASS_SHADOWED_3_storage_err,
    ALERT_CLASS_SHADOWED_4_storage_err,
    ALERT_CLASS_SHADOWED_5_storage_err,
    ALERT_CLASS_SHADOWED_6_storage_err,
    ALERT_CLASS_SHADOWED_7_storage_err,
    ALERT_CLASS_SHADOWED_8_storage_err,
    ALERT_CLASS_SHADOWED_9_storage_err,
    ALERT_CLASS_SHADOWED_10_storage_err,
    ALERT_CLASS_SHADOWED_11_storage_err,
    ALERT_CLASS_SHADOWED_12_storage_err,
    ALERT_CLASS_SHADOWED_13_storage_err,
    ALERT_CLASS_SHADOWED_14_storage_err,
    ALERT_CLASS_SHADOWED_15_storage_err,
    ALERT_CLASS_SHADOWED_16_storage_err,
    ALERT_CLASS_SHADOWED_17_storage_err,
    ALERT_CLASS_SHADOWED_18_storage_err,
    ALERT_CLASS_SHADOWED_19_storage_err,
    ALERT_CLASS_SHADOWED_20_storage_err,
    ALERT_CLASS_SHADOWED_21_storage_err,
    ALERT_CLASS_SHADOWED_22_storage_err,
    ALERT_CLASS_SHADOWED_23_storage_err,
    ALERT_CLASS_SHADOWED_24_storage_err,
    ALERT_CLASS_SHADOWED_25_storage_err,
    ALERT_CLASS_SHADOWED_26_storage_err,
    ALERT_CLASS_SHADOWED_27_storage_err,
    ALERT_CLASS_SHADOWED_28_storage_err,
    ALERT_CLASS_SHADOWED_29_storage_err,
    ALERT_CLASS_SHADOWED_30_storage_err,
    ALERT_CLASS_SHADOWED_31_storage_err,
    ALERT_CLASS_SHADOWED_32_storage_err,
    ALERT_CLASS_SHADOWED_33_storage_err,
    ALERT_CLASS_SHADOWED_34_storage_err,
    ALERT_CLASS_SHADOWED_35_storage_err,
    ALERT_CLASS_SHADOWED_36_storage_err,
    ALERT_CLASS_SHADOWED_37_storage_err,
    ALERT_CLASS_SHADOWED_38_storage_err,
    ALERT_CLASS_SHADOWED_39_storage_err,
    ALERT_CLASS_SHADOWED_40_storage_err,
    ALERT_CLASS_SHADOWED_41_storage_err,
    ALERT_CLASS_SHADOWED_42_storage_err,
    ALERT_CLASS_SHADOWED_43_storage_err,
    ALERT_CLASS_SHADOWED_44_storage_err,
    ALERT_CLASS_SHADOWED_45_storage_err,
    ALERT_CLASS_SHADOWED_46_storage_err,
    ALERT_CLASS_SHADOWED_47_storage_err,
    ALERT_CLASS_SHADOWED_48_storage_err,
    ALERT_CLASS_SHADOWED_49_storage_err,
    ALERT_CLASS_SHADOWED_50_storage_err,
    ALERT_CLASS_SHADOWED_51_storage_err,
    ALERT_CLASS_SHADOWED_52_storage_err,
    ALERT_CLASS_SHADOWED_53_storage_err,
    ALERT_CLASS_SHADOWED_54_storage_err,
    ALERT_CLASS_SHADOWED_55_storage_err,
    ALERT_CLASS_SHADOWED_56_storage_err,
    ALERT_CLASS_SHADOWED_57_storage_err,
    ALERT_CLASS_SHADOWED_58_storage_err,
    ALERT_CLASS_SHADOWED_59_storage_err,
    ALERT_CLASS_SHADOWED_60_storage_err,
    ALERT_CLASS_SHADOWED_61_storage_err,
    ALERT_CLASS_SHADOWED_62_storage_err,
    ALERT_CLASS_SHADOWED_63_storage_err,
    LOC_ALERT_EN_SHADOWED_0_storage_err,
    LOC_ALERT_EN_SHADOWED_1_storage_err,
    LOC_ALERT_EN_SHADOWED_2_storage_err,
    LOC_ALERT_EN_SHADOWED_3_storage_err,
    LOC_ALERT_EN_SHADOWED_4_storage_err,
    LOC_ALERT_EN_SHADOWED_5_storage_err,
    LOC_ALERT_EN_SHADOWED_6_storage_err,
    LOC_ALERT_CLASS_SHADOWED_0_storage_err,
    LOC_ALERT_CLASS_SHADOWED_1_storage_err,
    LOC_ALERT_CLASS_SHADOWED_2_storage_err,
    LOC_ALERT_CLASS_SHADOWED_3_storage_err,
    LOC_ALERT_CLASS_SHADOWED_4_storage_err,
    LOC_ALERT_CLASS_SHADOWED_5_storage_err,
    LOC_ALERT_CLASS_SHADOWED_6_storage_err,
    CLASSA_CTRL_SHADOWED_EN_storage_err,
    CLASSA_CTRL_SHADOWED_LOCK_storage_err,
    CLASSA_CTRL_SHADOWED_EN_E0_storage_err,
    CLASSA_CTRL_SHADOWED_EN_E1_storage_err,
    CLASSA_CTRL_SHADOWED_EN_E2_storage_err,
    CLASSA_CTRL_SHADOWED_EN_E3_storage_err,
    CLASSA_CTRL_SHADOWED_MAP_E0_storage_err,
    CLASSA_CTRL_SHADOWED_MAP_E1_storage_err,
    CLASSA_CTRL_SHADOWED_MAP_E2_storage_err,
    CLASSA_CTRL_SHADOWED_MAP_E3_storage_err,
    CLASSA_CLR_SHADOWED_storage_err,
    CLASSA_ACCUM_THRESH_SHADOWED_storage_err,
    CLASSA_TIMEOUT_CYC_SHADOWED_storage_err,
    CLASSA_CRASHDUMP_TRIGGER_SHADOWED_storage_err,
    CLASSA_PHASE0_CYC_SHADOWED_storage_err,
    CLASSA_PHASE1_CYC_SHADOWED_storage_err,
    CLASSA_PHASE2_CYC_SHADOWED_storage_err,
    CLASSA_PHASE3_CYC_SHADOWED_storage_err,
    CLASSB_CTRL_SHADOWED_EN_storage_err,
    CLASSB_CTRL_SHADOWED_LOCK_storage_err,
    CLASSB_CTRL_SHADOWED_EN_E0_storage_err,
    CLASSB_CTRL_SHADOWED_EN_E1_storage_err,
    CLASSB_CTRL_SHADOWED_EN_E2_storage_err,
    CLASSB_CTRL_SHADOWED_EN_E3_storage_err,
    CLASSB_CTRL_SHADOWED_MAP_E0_storage_err,
    CLASSB_CTRL_SHADOWED_MAP_E1_storage_err,
    CLASSB_CTRL_SHADOWED_MAP_E2_storage_err,
    CLASSB_CTRL_SHADOWED_MAP_E3_storage_err,
    CLASSB_CLR_SHADOWED_storage_err,
    CLASSB_ACCUM_THRESH_SHADOWED_storage_err,
    CLASSB_TIMEOUT_CYC_SHADOWED_storage_err,
    CLASSB_CRASHDUMP_TRIGGER_SHADOWED_storage_err,
    CLASSB_PHASE0_CYC_SHADOWED_storage_err,
    CLASSB_PHASE1_CYC_SHADOWED_storage_err,
    CLASSB_PHASE2_CYC_SHADOWED_storage_err,
    CLASSB_PHASE3_CYC_SHADOWED_storage_err,
    CLASSC_CTRL_SHADOWED_EN_storage_err,
    CLASSC_CTRL_SHADOWED_LOCK_storage_err,
    CLASSC_CTRL_SHADOWED_EN_E0_storage_err,
    CLASSC_CTRL_SHADOWED_EN_E1_storage_err,
    CLASSC_CTRL_SHADOWED_EN_E2_storage_err,
    CLASSC_CTRL_SHADOWED_EN_E3_storage_err,
    CLASSC_CTRL_SHADOWED_MAP_E0_storage_err,
    CLASSC_CTRL_SHADOWED_MAP_E1_storage_err,
    CLASSC_CTRL_SHADOWED_MAP_E2_storage_err,
    CLASSC_CTRL_SHADOWED_MAP_E3_storage_err,
    CLASSC_CLR_SHADOWED_storage_err,
    CLASSC_ACCUM_THRESH_SHADOWED_storage_err,
    CLASSC_TIMEOUT_CYC_SHADOWED_storage_err,
    CLASSC_CRASHDUMP_TRIGGER_SHADOWED_storage_err,
    CLASSC_PHASE0_CYC_SHADOWED_storage_err,
    CLASSC_PHASE1_CYC_SHADOWED_storage_err,
    CLASSC_PHASE2_CYC_SHADOWED_storage_err,
    CLASSC_PHASE3_CYC_SHADOWED_storage_err,
    CLASSD_CTRL_SHADOWED_EN_storage_err,
    CLASSD_CTRL_SHADOWED_LOCK_storage_err,
    CLASSD_CTRL_SHADOWED_EN_E0_storage_err,
    CLASSD_CTRL_SHADOWED_EN_E1_storage_err,
    CLASSD_CTRL_SHADOWED_EN_E2_storage_err,
    CLASSD_CTRL_SHADOWED_EN_E3_storage_err,
    CLASSD_CTRL_SHADOWED_MAP_E0_storage_err,
    CLASSD_CTRL_SHADOWED_MAP_E1_storage_err,
    CLASSD_CTRL_SHADOWED_MAP_E2_storage_err,
    CLASSD_CTRL_SHADOWED_MAP_E3_storage_err,
    CLASSD_CLR_SHADOWED_storage_err,
    CLASSD_ACCUM_THRESH_SHADOWED_storage_err,
    CLASSD_TIMEOUT_CYC_SHADOWED_storage_err,
    CLASSD_CRASHDUMP_TRIGGER_SHADOWED_storage_err,
    CLASSD_PHASE0_CYC_SHADOWED_storage_err,
    CLASSD_PHASE1_CYC_SHADOWED_storage_err,
    CLASSD_PHASE2_CYC_SHADOWED_storage_err,
    CLASSD_PHASE3_CYC_SHADOWED_storage_err
  };
  assign shadowed_update_err_o = |{
    PING_TIMEOUT_CYC_SHADOWED_update_err,
    PING_TIMER_EN_SHADOWED_update_err,
    ALERT_EN_SHADOWED_0_update_err,
    ALERT_EN_SHADOWED_1_update_err,
    ALERT_EN_SHADOWED_2_update_err,
    ALERT_EN_SHADOWED_3_update_err,
    ALERT_EN_SHADOWED_4_update_err,
    ALERT_EN_SHADOWED_5_update_err,
    ALERT_EN_SHADOWED_6_update_err,
    ALERT_EN_SHADOWED_7_update_err,
    ALERT_EN_SHADOWED_8_update_err,
    ALERT_EN_SHADOWED_9_update_err,
    ALERT_EN_SHADOWED_10_update_err,
    ALERT_EN_SHADOWED_11_update_err,
    ALERT_EN_SHADOWED_12_update_err,
    ALERT_EN_SHADOWED_13_update_err,
    ALERT_EN_SHADOWED_14_update_err,
    ALERT_EN_SHADOWED_15_update_err,
    ALERT_EN_SHADOWED_16_update_err,
    ALERT_EN_SHADOWED_17_update_err,
    ALERT_EN_SHADOWED_18_update_err,
    ALERT_EN_SHADOWED_19_update_err,
    ALERT_EN_SHADOWED_20_update_err,
    ALERT_EN_SHADOWED_21_update_err,
    ALERT_EN_SHADOWED_22_update_err,
    ALERT_EN_SHADOWED_23_update_err,
    ALERT_EN_SHADOWED_24_update_err,
    ALERT_EN_SHADOWED_25_update_err,
    ALERT_EN_SHADOWED_26_update_err,
    ALERT_EN_SHADOWED_27_update_err,
    ALERT_EN_SHADOWED_28_update_err,
    ALERT_EN_SHADOWED_29_update_err,
    ALERT_EN_SHADOWED_30_update_err,
    ALERT_EN_SHADOWED_31_update_err,
    ALERT_EN_SHADOWED_32_update_err,
    ALERT_EN_SHADOWED_33_update_err,
    ALERT_EN_SHADOWED_34_update_err,
    ALERT_EN_SHADOWED_35_update_err,
    ALERT_EN_SHADOWED_36_update_err,
    ALERT_EN_SHADOWED_37_update_err,
    ALERT_EN_SHADOWED_38_update_err,
    ALERT_EN_SHADOWED_39_update_err,
    ALERT_EN_SHADOWED_40_update_err,
    ALERT_EN_SHADOWED_41_update_err,
    ALERT_EN_SHADOWED_42_update_err,
    ALERT_EN_SHADOWED_43_update_err,
    ALERT_EN_SHADOWED_44_update_err,
    ALERT_EN_SHADOWED_45_update_err,
    ALERT_EN_SHADOWED_46_update_err,
    ALERT_EN_SHADOWED_47_update_err,
    ALERT_EN_SHADOWED_48_update_err,
    ALERT_EN_SHADOWED_49_update_err,
    ALERT_EN_SHADOWED_50_update_err,
    ALERT_EN_SHADOWED_51_update_err,
    ALERT_EN_SHADOWED_52_update_err,
    ALERT_EN_SHADOWED_53_update_err,
    ALERT_EN_SHADOWED_54_update_err,
    ALERT_EN_SHADOWED_55_update_err,
    ALERT_EN_SHADOWED_56_update_err,
    ALERT_EN_SHADOWED_57_update_err,
    ALERT_EN_SHADOWED_58_update_err,
    ALERT_EN_SHADOWED_59_update_err,
    ALERT_EN_SHADOWED_60_update_err,
    ALERT_EN_SHADOWED_61_update_err,
    ALERT_EN_SHADOWED_62_update_err,
    ALERT_EN_SHADOWED_63_update_err,
    ALERT_CLASS_SHADOWED_0_update_err,
    ALERT_CLASS_SHADOWED_1_update_err,
    ALERT_CLASS_SHADOWED_2_update_err,
    ALERT_CLASS_SHADOWED_3_update_err,
    ALERT_CLASS_SHADOWED_4_update_err,
    ALERT_CLASS_SHADOWED_5_update_err,
    ALERT_CLASS_SHADOWED_6_update_err,
    ALERT_CLASS_SHADOWED_7_update_err,
    ALERT_CLASS_SHADOWED_8_update_err,
    ALERT_CLASS_SHADOWED_9_update_err,
    ALERT_CLASS_SHADOWED_10_update_err,
    ALERT_CLASS_SHADOWED_11_update_err,
    ALERT_CLASS_SHADOWED_12_update_err,
    ALERT_CLASS_SHADOWED_13_update_err,
    ALERT_CLASS_SHADOWED_14_update_err,
    ALERT_CLASS_SHADOWED_15_update_err,
    ALERT_CLASS_SHADOWED_16_update_err,
    ALERT_CLASS_SHADOWED_17_update_err,
    ALERT_CLASS_SHADOWED_18_update_err,
    ALERT_CLASS_SHADOWED_19_update_err,
    ALERT_CLASS_SHADOWED_20_update_err,
    ALERT_CLASS_SHADOWED_21_update_err,
    ALERT_CLASS_SHADOWED_22_update_err,
    ALERT_CLASS_SHADOWED_23_update_err,
    ALERT_CLASS_SHADOWED_24_update_err,
    ALERT_CLASS_SHADOWED_25_update_err,
    ALERT_CLASS_SHADOWED_26_update_err,
    ALERT_CLASS_SHADOWED_27_update_err,
    ALERT_CLASS_SHADOWED_28_update_err,
    ALERT_CLASS_SHADOWED_29_update_err,
    ALERT_CLASS_SHADOWED_30_update_err,
    ALERT_CLASS_SHADOWED_31_update_err,
    ALERT_CLASS_SHADOWED_32_update_err,
    ALERT_CLASS_SHADOWED_33_update_err,
    ALERT_CLASS_SHADOWED_34_update_err,
    ALERT_CLASS_SHADOWED_35_update_err,
    ALERT_CLASS_SHADOWED_36_update_err,
    ALERT_CLASS_SHADOWED_37_update_err,
    ALERT_CLASS_SHADOWED_38_update_err,
    ALERT_CLASS_SHADOWED_39_update_err,
    ALERT_CLASS_SHADOWED_40_update_err,
    ALERT_CLASS_SHADOWED_41_update_err,
    ALERT_CLASS_SHADOWED_42_update_err,
    ALERT_CLASS_SHADOWED_43_update_err,
    ALERT_CLASS_SHADOWED_44_update_err,
    ALERT_CLASS_SHADOWED_45_update_err,
    ALERT_CLASS_SHADOWED_46_update_err,
    ALERT_CLASS_SHADOWED_47_update_err,
    ALERT_CLASS_SHADOWED_48_update_err,
    ALERT_CLASS_SHADOWED_49_update_err,
    ALERT_CLASS_SHADOWED_50_update_err,
    ALERT_CLASS_SHADOWED_51_update_err,
    ALERT_CLASS_SHADOWED_52_update_err,
    ALERT_CLASS_SHADOWED_53_update_err,
    ALERT_CLASS_SHADOWED_54_update_err,
    ALERT_CLASS_SHADOWED_55_update_err,
    ALERT_CLASS_SHADOWED_56_update_err,
    ALERT_CLASS_SHADOWED_57_update_err,
    ALERT_CLASS_SHADOWED_58_update_err,
    ALERT_CLASS_SHADOWED_59_update_err,
    ALERT_CLASS_SHADOWED_60_update_err,
    ALERT_CLASS_SHADOWED_61_update_err,
    ALERT_CLASS_SHADOWED_62_update_err,
    ALERT_CLASS_SHADOWED_63_update_err,
    LOC_ALERT_EN_SHADOWED_0_update_err,
    LOC_ALERT_EN_SHADOWED_1_update_err,
    LOC_ALERT_EN_SHADOWED_2_update_err,
    LOC_ALERT_EN_SHADOWED_3_update_err,
    LOC_ALERT_EN_SHADOWED_4_update_err,
    LOC_ALERT_EN_SHADOWED_5_update_err,
    LOC_ALERT_EN_SHADOWED_6_update_err,
    LOC_ALERT_CLASS_SHADOWED_0_update_err,
    LOC_ALERT_CLASS_SHADOWED_1_update_err,
    LOC_ALERT_CLASS_SHADOWED_2_update_err,
    LOC_ALERT_CLASS_SHADOWED_3_update_err,
    LOC_ALERT_CLASS_SHADOWED_4_update_err,
    LOC_ALERT_CLASS_SHADOWED_5_update_err,
    LOC_ALERT_CLASS_SHADOWED_6_update_err,
    CLASSA_CTRL_SHADOWED_EN_update_err,
    CLASSA_CTRL_SHADOWED_LOCK_update_err,
    CLASSA_CTRL_SHADOWED_EN_E0_update_err,
    CLASSA_CTRL_SHADOWED_EN_E1_update_err,
    CLASSA_CTRL_SHADOWED_EN_E2_update_err,
    CLASSA_CTRL_SHADOWED_EN_E3_update_err,
    CLASSA_CTRL_SHADOWED_MAP_E0_update_err,
    CLASSA_CTRL_SHADOWED_MAP_E1_update_err,
    CLASSA_CTRL_SHADOWED_MAP_E2_update_err,
    CLASSA_CTRL_SHADOWED_MAP_E3_update_err,
    CLASSA_CLR_SHADOWED_update_err,
    CLASSA_ACCUM_THRESH_SHADOWED_update_err,
    CLASSA_TIMEOUT_CYC_SHADOWED_update_err,
    CLASSA_CRASHDUMP_TRIGGER_SHADOWED_update_err,
    CLASSA_PHASE0_CYC_SHADOWED_update_err,
    CLASSA_PHASE1_CYC_SHADOWED_update_err,
    CLASSA_PHASE2_CYC_SHADOWED_update_err,
    CLASSA_PHASE3_CYC_SHADOWED_update_err,
    CLASSB_CTRL_SHADOWED_EN_update_err,
    CLASSB_CTRL_SHADOWED_LOCK_update_err,
    CLASSB_CTRL_SHADOWED_EN_E0_update_err,
    CLASSB_CTRL_SHADOWED_EN_E1_update_err,
    CLASSB_CTRL_SHADOWED_EN_E2_update_err,
    CLASSB_CTRL_SHADOWED_EN_E3_update_err,
    CLASSB_CTRL_SHADOWED_MAP_E0_update_err,
    CLASSB_CTRL_SHADOWED_MAP_E1_update_err,
    CLASSB_CTRL_SHADOWED_MAP_E2_update_err,
    CLASSB_CTRL_SHADOWED_MAP_E3_update_err,
    CLASSB_CLR_SHADOWED_update_err,
    CLASSB_ACCUM_THRESH_SHADOWED_update_err,
    CLASSB_TIMEOUT_CYC_SHADOWED_update_err,
    CLASSB_CRASHDUMP_TRIGGER_SHADOWED_update_err,
    CLASSB_PHASE0_CYC_SHADOWED_update_err,
    CLASSB_PHASE1_CYC_SHADOWED_update_err,
    CLASSB_PHASE2_CYC_SHADOWED_update_err,
    CLASSB_PHASE3_CYC_SHADOWED_update_err,
    CLASSC_CTRL_SHADOWED_EN_update_err,
    CLASSC_CTRL_SHADOWED_LOCK_update_err,
    CLASSC_CTRL_SHADOWED_EN_E0_update_err,
    CLASSC_CTRL_SHADOWED_EN_E1_update_err,
    CLASSC_CTRL_SHADOWED_EN_E2_update_err,
    CLASSC_CTRL_SHADOWED_EN_E3_update_err,
    CLASSC_CTRL_SHADOWED_MAP_E0_update_err,
    CLASSC_CTRL_SHADOWED_MAP_E1_update_err,
    CLASSC_CTRL_SHADOWED_MAP_E2_update_err,
    CLASSC_CTRL_SHADOWED_MAP_E3_update_err,
    CLASSC_CLR_SHADOWED_update_err,
    CLASSC_ACCUM_THRESH_SHADOWED_update_err,
    CLASSC_TIMEOUT_CYC_SHADOWED_update_err,
    CLASSC_CRASHDUMP_TRIGGER_SHADOWED_update_err,
    CLASSC_PHASE0_CYC_SHADOWED_update_err,
    CLASSC_PHASE1_CYC_SHADOWED_update_err,
    CLASSC_PHASE2_CYC_SHADOWED_update_err,
    CLASSC_PHASE3_CYC_SHADOWED_update_err,
    CLASSD_CTRL_SHADOWED_EN_update_err,
    CLASSD_CTRL_SHADOWED_LOCK_update_err,
    CLASSD_CTRL_SHADOWED_EN_E0_update_err,
    CLASSD_CTRL_SHADOWED_EN_E1_update_err,
    CLASSD_CTRL_SHADOWED_EN_E2_update_err,
    CLASSD_CTRL_SHADOWED_EN_E3_update_err,
    CLASSD_CTRL_SHADOWED_MAP_E0_update_err,
    CLASSD_CTRL_SHADOWED_MAP_E1_update_err,
    CLASSD_CTRL_SHADOWED_MAP_E2_update_err,
    CLASSD_CTRL_SHADOWED_MAP_E3_update_err,
    CLASSD_CLR_SHADOWED_update_err,
    CLASSD_ACCUM_THRESH_SHADOWED_update_err,
    CLASSD_TIMEOUT_CYC_SHADOWED_update_err,
    CLASSD_CRASHDUMP_TRIGGER_SHADOWED_update_err,
    CLASSD_PHASE0_CYC_SHADOWED_update_err,
    CLASSD_PHASE1_CYC_SHADOWED_update_err,
    CLASSD_PHASE2_CYC_SHADOWED_update_err,
    CLASSD_PHASE3_CYC_SHADOWED_update_err
  };

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
// Local Variables:
// fill-column:1
// verilog-auto-arg-sort:t
// verilog-typedef-regexp: "_[etu]$"
// verilog-library-directories:(".")
// End:
