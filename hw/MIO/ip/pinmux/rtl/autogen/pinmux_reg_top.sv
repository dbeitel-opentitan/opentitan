// SPDX-FileCopyrightText: Copyright (c) 2022 by Rivos Inc.
// Confidential and proprietary, see LICENSE for details.
// SPDX-License-Identifier: LicenseRef-Rivos-Internal-Only

// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module pinmux_reg_top (
  input clk_i,
  input swWenClk,
  input hwUpdClk,
  input rst_ni,
  input deepReset_L,
  input lightReset_L,
  input clk_aon_i,
  input rst_aon_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output pinmux_reg_pkg::pinmux_reg2hw_t reg2hw, // Write
  input  pinmux_reg_pkg::pinmux_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output raclViol,
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import pinmux_reg_pkg::* ;

  localparam int AW = 10;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [170:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(171)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .en_ifetch_i    (prim_mubi_pkg::MuBi4False),
    .intg_error_o   (),

    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)

  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ALERT_TEST_we;
  logic ALERT_TEST_wd;
  logic MIO_PERIPH_INSEL_REGWEN_0_we;
  logic MIO_PERIPH_INSEL_REGWEN_0_qs;
  logic MIO_PERIPH_INSEL_REGWEN_0_wd;
  logic MIO_PERIPH_INSEL_REGWEN_1_we;
  logic MIO_PERIPH_INSEL_REGWEN_1_qs;
  logic MIO_PERIPH_INSEL_REGWEN_1_wd;
  logic MIO_PERIPH_INSEL_REGWEN_2_we;
  logic MIO_PERIPH_INSEL_REGWEN_2_qs;
  logic MIO_PERIPH_INSEL_REGWEN_2_wd;
  logic MIO_PERIPH_INSEL_REGWEN_3_we;
  logic MIO_PERIPH_INSEL_REGWEN_3_qs;
  logic MIO_PERIPH_INSEL_REGWEN_3_wd;
  logic MIO_PERIPH_INSEL_REGWEN_4_we;
  logic MIO_PERIPH_INSEL_REGWEN_4_qs;
  logic MIO_PERIPH_INSEL_REGWEN_4_wd;
  logic MIO_PERIPH_INSEL_REGWEN_5_we;
  logic MIO_PERIPH_INSEL_REGWEN_5_qs;
  logic MIO_PERIPH_INSEL_REGWEN_5_wd;
  logic MIO_PERIPH_INSEL_REGWEN_6_we;
  logic MIO_PERIPH_INSEL_REGWEN_6_qs;
  logic MIO_PERIPH_INSEL_REGWEN_6_wd;
  logic MIO_PERIPH_INSEL_REGWEN_7_we;
  logic MIO_PERIPH_INSEL_REGWEN_7_qs;
  logic MIO_PERIPH_INSEL_REGWEN_7_wd;
  logic MIO_PERIPH_INSEL_REGWEN_8_we;
  logic MIO_PERIPH_INSEL_REGWEN_8_qs;
  logic MIO_PERIPH_INSEL_REGWEN_8_wd;
  logic MIO_PERIPH_INSEL_REGWEN_9_we;
  logic MIO_PERIPH_INSEL_REGWEN_9_qs;
  logic MIO_PERIPH_INSEL_REGWEN_9_wd;
  logic MIO_PERIPH_INSEL_REGWEN_10_we;
  logic MIO_PERIPH_INSEL_REGWEN_10_qs;
  logic MIO_PERIPH_INSEL_REGWEN_10_wd;
  logic MIO_PERIPH_INSEL_REGWEN_11_we;
  logic MIO_PERIPH_INSEL_REGWEN_11_qs;
  logic MIO_PERIPH_INSEL_REGWEN_11_wd;
  logic MIO_PERIPH_INSEL_REGWEN_12_we;
  logic MIO_PERIPH_INSEL_REGWEN_12_qs;
  logic MIO_PERIPH_INSEL_REGWEN_12_wd;
  logic MIO_PERIPH_INSEL_REGWEN_13_we;
  logic MIO_PERIPH_INSEL_REGWEN_13_qs;
  logic MIO_PERIPH_INSEL_REGWEN_13_wd;
  logic MIO_PERIPH_INSEL_REGWEN_14_we;
  logic MIO_PERIPH_INSEL_REGWEN_14_qs;
  logic MIO_PERIPH_INSEL_REGWEN_14_wd;
  logic MIO_PERIPH_INSEL_REGWEN_15_we;
  logic MIO_PERIPH_INSEL_REGWEN_15_qs;
  logic MIO_PERIPH_INSEL_REGWEN_15_wd;
  logic MIO_PERIPH_INSEL_REGWEN_16_we;
  logic MIO_PERIPH_INSEL_REGWEN_16_qs;
  logic MIO_PERIPH_INSEL_REGWEN_16_wd;
  logic MIO_PERIPH_INSEL_REGWEN_17_we;
  logic MIO_PERIPH_INSEL_REGWEN_17_qs;
  logic MIO_PERIPH_INSEL_REGWEN_17_wd;
  logic MIO_PERIPH_INSEL_REGWEN_18_we;
  logic MIO_PERIPH_INSEL_REGWEN_18_qs;
  logic MIO_PERIPH_INSEL_REGWEN_18_wd;
  logic MIO_PERIPH_INSEL_REGWEN_19_we;
  logic MIO_PERIPH_INSEL_REGWEN_19_qs;
  logic MIO_PERIPH_INSEL_REGWEN_19_wd;
  logic MIO_PERIPH_INSEL_REGWEN_20_we;
  logic MIO_PERIPH_INSEL_REGWEN_20_qs;
  logic MIO_PERIPH_INSEL_REGWEN_20_wd;
  logic MIO_PERIPH_INSEL_REGWEN_21_we;
  logic MIO_PERIPH_INSEL_REGWEN_21_qs;
  logic MIO_PERIPH_INSEL_REGWEN_21_wd;
  logic MIO_PERIPH_INSEL_REGWEN_22_we;
  logic MIO_PERIPH_INSEL_REGWEN_22_qs;
  logic MIO_PERIPH_INSEL_REGWEN_22_wd;
  logic MIO_PERIPH_INSEL_REGWEN_23_we;
  logic MIO_PERIPH_INSEL_REGWEN_23_qs;
  logic MIO_PERIPH_INSEL_REGWEN_23_wd;
  logic MIO_PERIPH_INSEL_REGWEN_24_we;
  logic MIO_PERIPH_INSEL_REGWEN_24_qs;
  logic MIO_PERIPH_INSEL_REGWEN_24_wd;
  logic MIO_PERIPH_INSEL_REGWEN_25_we;
  logic MIO_PERIPH_INSEL_REGWEN_25_qs;
  logic MIO_PERIPH_INSEL_REGWEN_25_wd;
  logic MIO_PERIPH_INSEL_REGWEN_26_we;
  logic MIO_PERIPH_INSEL_REGWEN_26_qs;
  logic MIO_PERIPH_INSEL_REGWEN_26_wd;
  logic MIO_PERIPH_INSEL_REGWEN_27_we;
  logic MIO_PERIPH_INSEL_REGWEN_27_qs;
  logic MIO_PERIPH_INSEL_REGWEN_27_wd;
  logic MIO_PERIPH_INSEL_REGWEN_28_we;
  logic MIO_PERIPH_INSEL_REGWEN_28_qs;
  logic MIO_PERIPH_INSEL_REGWEN_28_wd;
  logic MIO_PERIPH_INSEL_REGWEN_29_we;
  logic MIO_PERIPH_INSEL_REGWEN_29_qs;
  logic MIO_PERIPH_INSEL_REGWEN_29_wd;
  logic MIO_PERIPH_INSEL_REGWEN_30_we;
  logic MIO_PERIPH_INSEL_REGWEN_30_qs;
  logic MIO_PERIPH_INSEL_REGWEN_30_wd;
  logic MIO_PERIPH_INSEL_REGWEN_31_we;
  logic MIO_PERIPH_INSEL_REGWEN_31_qs;
  logic MIO_PERIPH_INSEL_REGWEN_31_wd;
  logic MIO_PERIPH_INSEL_0_we;
  logic [1:0] MIO_PERIPH_INSEL_0_qs;
  logic [1:0] MIO_PERIPH_INSEL_0_wd;
  logic MIO_PERIPH_INSEL_1_we;
  logic [1:0] MIO_PERIPH_INSEL_1_qs;
  logic [1:0] MIO_PERIPH_INSEL_1_wd;
  logic MIO_PERIPH_INSEL_2_we;
  logic [1:0] MIO_PERIPH_INSEL_2_qs;
  logic [1:0] MIO_PERIPH_INSEL_2_wd;
  logic MIO_PERIPH_INSEL_3_we;
  logic [1:0] MIO_PERIPH_INSEL_3_qs;
  logic [1:0] MIO_PERIPH_INSEL_3_wd;
  logic MIO_PERIPH_INSEL_4_we;
  logic [1:0] MIO_PERIPH_INSEL_4_qs;
  logic [1:0] MIO_PERIPH_INSEL_4_wd;
  logic MIO_PERIPH_INSEL_5_we;
  logic [1:0] MIO_PERIPH_INSEL_5_qs;
  logic [1:0] MIO_PERIPH_INSEL_5_wd;
  logic MIO_PERIPH_INSEL_6_we;
  logic [1:0] MIO_PERIPH_INSEL_6_qs;
  logic [1:0] MIO_PERIPH_INSEL_6_wd;
  logic MIO_PERIPH_INSEL_7_we;
  logic [1:0] MIO_PERIPH_INSEL_7_qs;
  logic [1:0] MIO_PERIPH_INSEL_7_wd;
  logic MIO_PERIPH_INSEL_8_we;
  logic [1:0] MIO_PERIPH_INSEL_8_qs;
  logic [1:0] MIO_PERIPH_INSEL_8_wd;
  logic MIO_PERIPH_INSEL_9_we;
  logic [1:0] MIO_PERIPH_INSEL_9_qs;
  logic [1:0] MIO_PERIPH_INSEL_9_wd;
  logic MIO_PERIPH_INSEL_10_we;
  logic [1:0] MIO_PERIPH_INSEL_10_qs;
  logic [1:0] MIO_PERIPH_INSEL_10_wd;
  logic MIO_PERIPH_INSEL_11_we;
  logic [1:0] MIO_PERIPH_INSEL_11_qs;
  logic [1:0] MIO_PERIPH_INSEL_11_wd;
  logic MIO_PERIPH_INSEL_12_we;
  logic [1:0] MIO_PERIPH_INSEL_12_qs;
  logic [1:0] MIO_PERIPH_INSEL_12_wd;
  logic MIO_PERIPH_INSEL_13_we;
  logic [1:0] MIO_PERIPH_INSEL_13_qs;
  logic [1:0] MIO_PERIPH_INSEL_13_wd;
  logic MIO_PERIPH_INSEL_14_we;
  logic [1:0] MIO_PERIPH_INSEL_14_qs;
  logic [1:0] MIO_PERIPH_INSEL_14_wd;
  logic MIO_PERIPH_INSEL_15_we;
  logic [1:0] MIO_PERIPH_INSEL_15_qs;
  logic [1:0] MIO_PERIPH_INSEL_15_wd;
  logic MIO_PERIPH_INSEL_16_we;
  logic [1:0] MIO_PERIPH_INSEL_16_qs;
  logic [1:0] MIO_PERIPH_INSEL_16_wd;
  logic MIO_PERIPH_INSEL_17_we;
  logic [1:0] MIO_PERIPH_INSEL_17_qs;
  logic [1:0] MIO_PERIPH_INSEL_17_wd;
  logic MIO_PERIPH_INSEL_18_we;
  logic [1:0] MIO_PERIPH_INSEL_18_qs;
  logic [1:0] MIO_PERIPH_INSEL_18_wd;
  logic MIO_PERIPH_INSEL_19_we;
  logic [1:0] MIO_PERIPH_INSEL_19_qs;
  logic [1:0] MIO_PERIPH_INSEL_19_wd;
  logic MIO_PERIPH_INSEL_20_we;
  logic [1:0] MIO_PERIPH_INSEL_20_qs;
  logic [1:0] MIO_PERIPH_INSEL_20_wd;
  logic MIO_PERIPH_INSEL_21_we;
  logic [1:0] MIO_PERIPH_INSEL_21_qs;
  logic [1:0] MIO_PERIPH_INSEL_21_wd;
  logic MIO_PERIPH_INSEL_22_we;
  logic [1:0] MIO_PERIPH_INSEL_22_qs;
  logic [1:0] MIO_PERIPH_INSEL_22_wd;
  logic MIO_PERIPH_INSEL_23_we;
  logic [1:0] MIO_PERIPH_INSEL_23_qs;
  logic [1:0] MIO_PERIPH_INSEL_23_wd;
  logic MIO_PERIPH_INSEL_24_we;
  logic [1:0] MIO_PERIPH_INSEL_24_qs;
  logic [1:0] MIO_PERIPH_INSEL_24_wd;
  logic MIO_PERIPH_INSEL_25_we;
  logic [1:0] MIO_PERIPH_INSEL_25_qs;
  logic [1:0] MIO_PERIPH_INSEL_25_wd;
  logic MIO_PERIPH_INSEL_26_we;
  logic [1:0] MIO_PERIPH_INSEL_26_qs;
  logic [1:0] MIO_PERIPH_INSEL_26_wd;
  logic MIO_PERIPH_INSEL_27_we;
  logic [1:0] MIO_PERIPH_INSEL_27_qs;
  logic [1:0] MIO_PERIPH_INSEL_27_wd;
  logic MIO_PERIPH_INSEL_28_we;
  logic [1:0] MIO_PERIPH_INSEL_28_qs;
  logic [1:0] MIO_PERIPH_INSEL_28_wd;
  logic MIO_PERIPH_INSEL_29_we;
  logic [1:0] MIO_PERIPH_INSEL_29_qs;
  logic [1:0] MIO_PERIPH_INSEL_29_wd;
  logic MIO_PERIPH_INSEL_30_we;
  logic [1:0] MIO_PERIPH_INSEL_30_qs;
  logic [1:0] MIO_PERIPH_INSEL_30_wd;
  logic MIO_PERIPH_INSEL_31_we;
  logic [1:0] MIO_PERIPH_INSEL_31_qs;
  logic [1:0] MIO_PERIPH_INSEL_31_wd;
  logic MIO_OUTSEL_REGWEN_we;
  logic MIO_OUTSEL_REGWEN_qs;
  logic MIO_OUTSEL_REGWEN_wd;
  logic MIO_OUTSEL_we;
  logic [5:0] MIO_OUTSEL_qs;
  logic [5:0] MIO_OUTSEL_wd;
  logic MIO_PAD_ATTR_REGWEN_we;
  logic MIO_PAD_ATTR_REGWEN_qs;
  logic MIO_PAD_ATTR_REGWEN_wd;
  logic MIO_PAD_ATTR_re;
  logic MIO_PAD_ATTR_we;
  logic MIO_PAD_ATTR_PUEN_0_qs;
  logic MIO_PAD_ATTR_PUEN_0_wd;
  logic MIO_PAD_ATTR_PDEN_0_qs;
  logic MIO_PAD_ATTR_PDEN_0_wd;
  logic MIO_PAD_ATTR_SMTEN_0_qs;
  logic MIO_PAD_ATTR_SMTEN_0_wd;
  logic [2:0] MIO_PAD_ATTR_DRV_0_qs;
  logic [2:0] MIO_PAD_ATTR_DRV_0_wd;
  logic DIO_PAD_ATTR_REGWEN_0_we;
  logic DIO_PAD_ATTR_REGWEN_0_qs;
  logic DIO_PAD_ATTR_REGWEN_0_wd;
  logic DIO_PAD_ATTR_REGWEN_1_we;
  logic DIO_PAD_ATTR_REGWEN_1_qs;
  logic DIO_PAD_ATTR_REGWEN_1_wd;
  logic DIO_PAD_ATTR_REGWEN_2_we;
  logic DIO_PAD_ATTR_REGWEN_2_qs;
  logic DIO_PAD_ATTR_REGWEN_2_wd;
  logic DIO_PAD_ATTR_REGWEN_3_we;
  logic DIO_PAD_ATTR_REGWEN_3_qs;
  logic DIO_PAD_ATTR_REGWEN_3_wd;
  logic DIO_PAD_ATTR_REGWEN_4_we;
  logic DIO_PAD_ATTR_REGWEN_4_qs;
  logic DIO_PAD_ATTR_REGWEN_4_wd;
  logic DIO_PAD_ATTR_REGWEN_5_we;
  logic DIO_PAD_ATTR_REGWEN_5_qs;
  logic DIO_PAD_ATTR_REGWEN_5_wd;
  logic DIO_PAD_ATTR_REGWEN_6_we;
  logic DIO_PAD_ATTR_REGWEN_6_qs;
  logic DIO_PAD_ATTR_REGWEN_6_wd;
  logic DIO_PAD_ATTR_REGWEN_7_we;
  logic DIO_PAD_ATTR_REGWEN_7_qs;
  logic DIO_PAD_ATTR_REGWEN_7_wd;
  logic DIO_PAD_ATTR_REGWEN_8_we;
  logic DIO_PAD_ATTR_REGWEN_8_qs;
  logic DIO_PAD_ATTR_REGWEN_8_wd;
  logic DIO_PAD_ATTR_0_re;
  logic DIO_PAD_ATTR_0_we;
  logic DIO_PAD_ATTR_0_PUEN_0_qs;
  logic DIO_PAD_ATTR_0_PUEN_0_wd;
  logic DIO_PAD_ATTR_0_PDEN_0_qs;
  logic DIO_PAD_ATTR_0_PDEN_0_wd;
  logic DIO_PAD_ATTR_0_SMTEN_0_qs;
  logic DIO_PAD_ATTR_0_SMTEN_0_wd;
  logic [2:0] DIO_PAD_ATTR_0_DRV_0_qs;
  logic [2:0] DIO_PAD_ATTR_0_DRV_0_wd;
  logic DIO_PAD_ATTR_1_re;
  logic DIO_PAD_ATTR_1_we;
  logic DIO_PAD_ATTR_1_PUEN_1_qs;
  logic DIO_PAD_ATTR_1_PUEN_1_wd;
  logic DIO_PAD_ATTR_1_PDEN_1_qs;
  logic DIO_PAD_ATTR_1_PDEN_1_wd;
  logic DIO_PAD_ATTR_1_SMTEN_1_qs;
  logic DIO_PAD_ATTR_1_SMTEN_1_wd;
  logic [2:0] DIO_PAD_ATTR_1_DRV_1_qs;
  logic [2:0] DIO_PAD_ATTR_1_DRV_1_wd;
  logic DIO_PAD_ATTR_2_re;
  logic DIO_PAD_ATTR_2_we;
  logic DIO_PAD_ATTR_2_PUEN_2_qs;
  logic DIO_PAD_ATTR_2_PUEN_2_wd;
  logic DIO_PAD_ATTR_2_PDEN_2_qs;
  logic DIO_PAD_ATTR_2_PDEN_2_wd;
  logic DIO_PAD_ATTR_2_SMTEN_2_qs;
  logic DIO_PAD_ATTR_2_SMTEN_2_wd;
  logic [2:0] DIO_PAD_ATTR_2_DRV_2_qs;
  logic [2:0] DIO_PAD_ATTR_2_DRV_2_wd;
  logic DIO_PAD_ATTR_3_re;
  logic DIO_PAD_ATTR_3_we;
  logic DIO_PAD_ATTR_3_PUEN_3_qs;
  logic DIO_PAD_ATTR_3_PUEN_3_wd;
  logic DIO_PAD_ATTR_3_PDEN_3_qs;
  logic DIO_PAD_ATTR_3_PDEN_3_wd;
  logic DIO_PAD_ATTR_3_SMTEN_3_qs;
  logic DIO_PAD_ATTR_3_SMTEN_3_wd;
  logic [2:0] DIO_PAD_ATTR_3_DRV_3_qs;
  logic [2:0] DIO_PAD_ATTR_3_DRV_3_wd;
  logic DIO_PAD_ATTR_4_re;
  logic DIO_PAD_ATTR_4_we;
  logic DIO_PAD_ATTR_4_PUEN_4_qs;
  logic DIO_PAD_ATTR_4_PUEN_4_wd;
  logic DIO_PAD_ATTR_4_PDEN_4_qs;
  logic DIO_PAD_ATTR_4_PDEN_4_wd;
  logic DIO_PAD_ATTR_4_SMTEN_4_qs;
  logic DIO_PAD_ATTR_4_SMTEN_4_wd;
  logic [2:0] DIO_PAD_ATTR_4_DRV_4_qs;
  logic [2:0] DIO_PAD_ATTR_4_DRV_4_wd;
  logic DIO_PAD_ATTR_5_re;
  logic DIO_PAD_ATTR_5_we;
  logic DIO_PAD_ATTR_5_PUEN_5_qs;
  logic DIO_PAD_ATTR_5_PUEN_5_wd;
  logic DIO_PAD_ATTR_5_PDEN_5_qs;
  logic DIO_PAD_ATTR_5_PDEN_5_wd;
  logic DIO_PAD_ATTR_5_SMTEN_5_qs;
  logic DIO_PAD_ATTR_5_SMTEN_5_wd;
  logic [2:0] DIO_PAD_ATTR_5_DRV_5_qs;
  logic [2:0] DIO_PAD_ATTR_5_DRV_5_wd;
  logic DIO_PAD_ATTR_6_re;
  logic DIO_PAD_ATTR_6_we;
  logic DIO_PAD_ATTR_6_PUEN_6_qs;
  logic DIO_PAD_ATTR_6_PUEN_6_wd;
  logic DIO_PAD_ATTR_6_PDEN_6_qs;
  logic DIO_PAD_ATTR_6_PDEN_6_wd;
  logic DIO_PAD_ATTR_6_SMTEN_6_qs;
  logic DIO_PAD_ATTR_6_SMTEN_6_wd;
  logic [2:0] DIO_PAD_ATTR_6_DRV_6_qs;
  logic [2:0] DIO_PAD_ATTR_6_DRV_6_wd;
  logic DIO_PAD_ATTR_7_re;
  logic DIO_PAD_ATTR_7_we;
  logic DIO_PAD_ATTR_7_PUEN_7_qs;
  logic DIO_PAD_ATTR_7_PUEN_7_wd;
  logic DIO_PAD_ATTR_7_PDEN_7_qs;
  logic DIO_PAD_ATTR_7_PDEN_7_wd;
  logic DIO_PAD_ATTR_7_SMTEN_7_qs;
  logic DIO_PAD_ATTR_7_SMTEN_7_wd;
  logic [2:0] DIO_PAD_ATTR_7_DRV_7_qs;
  logic [2:0] DIO_PAD_ATTR_7_DRV_7_wd;
  logic DIO_PAD_ATTR_8_re;
  logic DIO_PAD_ATTR_8_we;
  logic DIO_PAD_ATTR_8_PUEN_8_qs;
  logic DIO_PAD_ATTR_8_PUEN_8_wd;
  logic DIO_PAD_ATTR_8_PDEN_8_qs;
  logic DIO_PAD_ATTR_8_PDEN_8_wd;
  logic DIO_PAD_ATTR_8_SMTEN_8_qs;
  logic DIO_PAD_ATTR_8_SMTEN_8_wd;
  logic [2:0] DIO_PAD_ATTR_8_DRV_8_qs;
  logic [2:0] DIO_PAD_ATTR_8_DRV_8_wd;
  logic DI3C_PAD_ATTR_REGWEN_0_we;
  logic DI3C_PAD_ATTR_REGWEN_0_qs;
  logic DI3C_PAD_ATTR_REGWEN_0_wd;
  logic DI3C_PAD_ATTR_REGWEN_1_we;
  logic DI3C_PAD_ATTR_REGWEN_1_qs;
  logic DI3C_PAD_ATTR_REGWEN_1_wd;
  logic DI3C_PAD_ATTR_0_re;
  logic DI3C_PAD_ATTR_0_we;
  logic DI3C_PAD_ATTR_0_PUEN_0_qs;
  logic DI3C_PAD_ATTR_0_PUEN_0_wd;
  logic DI3C_PAD_ATTR_0_PDEN_0_qs;
  logic DI3C_PAD_ATTR_0_PDEN_0_wd;
  logic DI3C_PAD_ATTR_0_FILTEN_0_qs;
  logic DI3C_PAD_ATTR_0_FILTEN_0_wd;
  logic DI3C_PAD_ATTR_0_DLYEN_0_qs;
  logic DI3C_PAD_ATTR_0_DLYEN_0_wd;
  logic DI3C_PAD_ATTR_0_I2CEN_0_qs;
  logic DI3C_PAD_ATTR_0_I2CEN_0_wd;
  logic DI3C_PAD_ATTR_0_RINTEN_0_qs;
  logic DI3C_PAD_ATTR_0_RINTEN_0_wd;
  logic DI3C_PAD_ATTR_1_re;
  logic DI3C_PAD_ATTR_1_we;
  logic DI3C_PAD_ATTR_1_PUEN_1_qs;
  logic DI3C_PAD_ATTR_1_PUEN_1_wd;
  logic DI3C_PAD_ATTR_1_PDEN_1_qs;
  logic DI3C_PAD_ATTR_1_PDEN_1_wd;
  logic DI3C_PAD_ATTR_1_FILTEN_1_qs;
  logic DI3C_PAD_ATTR_1_FILTEN_1_wd;
  logic DI3C_PAD_ATTR_1_DLYEN_1_qs;
  logic DI3C_PAD_ATTR_1_DLYEN_1_wd;
  logic DI3C_PAD_ATTR_1_I2CEN_1_qs;
  logic DI3C_PAD_ATTR_1_I2CEN_1_wd;
  logic DI3C_PAD_ATTR_1_RINTEN_1_qs;
  logic DI3C_PAD_ATTR_1_RINTEN_1_wd;
  logic MIO_PAD_SLEEP_STATUS_we;
  logic MIO_PAD_SLEEP_STATUS_qs;
  logic MIO_PAD_SLEEP_STATUS_wd;
  logic MIO_PAD_SLEEP_REGWEN_we;
  logic MIO_PAD_SLEEP_REGWEN_qs;
  logic MIO_PAD_SLEEP_REGWEN_wd;
  logic MIO_PAD_SLEEP_EN_we;
  logic MIO_PAD_SLEEP_EN_qs;
  logic MIO_PAD_SLEEP_EN_wd;
  logic MIO_PAD_SLEEP_MODE_we;
  logic [1:0] MIO_PAD_SLEEP_MODE_qs;
  logic [1:0] MIO_PAD_SLEEP_MODE_wd;
  logic DIO_PAD_SLEEP_STATUS_we;
  logic DIO_PAD_SLEEP_STATUS_EN_0_qs;
  logic DIO_PAD_SLEEP_STATUS_EN_0_wd;
  logic DIO_PAD_SLEEP_STATUS_EN_1_qs;
  logic DIO_PAD_SLEEP_STATUS_EN_1_wd;
  logic DIO_PAD_SLEEP_STATUS_EN_2_qs;
  logic DIO_PAD_SLEEP_STATUS_EN_2_wd;
  logic DIO_PAD_SLEEP_STATUS_EN_3_qs;
  logic DIO_PAD_SLEEP_STATUS_EN_3_wd;
  logic DIO_PAD_SLEEP_STATUS_EN_4_qs;
  logic DIO_PAD_SLEEP_STATUS_EN_4_wd;
  logic DIO_PAD_SLEEP_STATUS_EN_5_qs;
  logic DIO_PAD_SLEEP_STATUS_EN_5_wd;
  logic DIO_PAD_SLEEP_STATUS_EN_6_qs;
  logic DIO_PAD_SLEEP_STATUS_EN_6_wd;
  logic DIO_PAD_SLEEP_STATUS_EN_7_qs;
  logic DIO_PAD_SLEEP_STATUS_EN_7_wd;
  logic DIO_PAD_SLEEP_STATUS_EN_8_qs;
  logic DIO_PAD_SLEEP_STATUS_EN_8_wd;
  logic DIO_PAD_SLEEP_REGWEN_0_we;
  logic DIO_PAD_SLEEP_REGWEN_0_qs;
  logic DIO_PAD_SLEEP_REGWEN_0_wd;
  logic DIO_PAD_SLEEP_REGWEN_1_we;
  logic DIO_PAD_SLEEP_REGWEN_1_qs;
  logic DIO_PAD_SLEEP_REGWEN_1_wd;
  logic DIO_PAD_SLEEP_REGWEN_2_we;
  logic DIO_PAD_SLEEP_REGWEN_2_qs;
  logic DIO_PAD_SLEEP_REGWEN_2_wd;
  logic DIO_PAD_SLEEP_REGWEN_3_we;
  logic DIO_PAD_SLEEP_REGWEN_3_qs;
  logic DIO_PAD_SLEEP_REGWEN_3_wd;
  logic DIO_PAD_SLEEP_REGWEN_4_we;
  logic DIO_PAD_SLEEP_REGWEN_4_qs;
  logic DIO_PAD_SLEEP_REGWEN_4_wd;
  logic DIO_PAD_SLEEP_REGWEN_5_we;
  logic DIO_PAD_SLEEP_REGWEN_5_qs;
  logic DIO_PAD_SLEEP_REGWEN_5_wd;
  logic DIO_PAD_SLEEP_REGWEN_6_we;
  logic DIO_PAD_SLEEP_REGWEN_6_qs;
  logic DIO_PAD_SLEEP_REGWEN_6_wd;
  logic DIO_PAD_SLEEP_REGWEN_7_we;
  logic DIO_PAD_SLEEP_REGWEN_7_qs;
  logic DIO_PAD_SLEEP_REGWEN_7_wd;
  logic DIO_PAD_SLEEP_REGWEN_8_we;
  logic DIO_PAD_SLEEP_REGWEN_8_qs;
  logic DIO_PAD_SLEEP_REGWEN_8_wd;
  logic DIO_PAD_SLEEP_EN_0_we;
  logic DIO_PAD_SLEEP_EN_0_qs;
  logic DIO_PAD_SLEEP_EN_0_wd;
  logic DIO_PAD_SLEEP_EN_1_we;
  logic DIO_PAD_SLEEP_EN_1_qs;
  logic DIO_PAD_SLEEP_EN_1_wd;
  logic DIO_PAD_SLEEP_EN_2_we;
  logic DIO_PAD_SLEEP_EN_2_qs;
  logic DIO_PAD_SLEEP_EN_2_wd;
  logic DIO_PAD_SLEEP_EN_3_we;
  logic DIO_PAD_SLEEP_EN_3_qs;
  logic DIO_PAD_SLEEP_EN_3_wd;
  logic DIO_PAD_SLEEP_EN_4_we;
  logic DIO_PAD_SLEEP_EN_4_qs;
  logic DIO_PAD_SLEEP_EN_4_wd;
  logic DIO_PAD_SLEEP_EN_5_we;
  logic DIO_PAD_SLEEP_EN_5_qs;
  logic DIO_PAD_SLEEP_EN_5_wd;
  logic DIO_PAD_SLEEP_EN_6_we;
  logic DIO_PAD_SLEEP_EN_6_qs;
  logic DIO_PAD_SLEEP_EN_6_wd;
  logic DIO_PAD_SLEEP_EN_7_we;
  logic DIO_PAD_SLEEP_EN_7_qs;
  logic DIO_PAD_SLEEP_EN_7_wd;
  logic DIO_PAD_SLEEP_EN_8_we;
  logic DIO_PAD_SLEEP_EN_8_qs;
  logic DIO_PAD_SLEEP_EN_8_wd;
  logic DIO_PAD_SLEEP_MODE_0_we;
  logic [1:0] DIO_PAD_SLEEP_MODE_0_qs;
  logic [1:0] DIO_PAD_SLEEP_MODE_0_wd;
  logic DIO_PAD_SLEEP_MODE_1_we;
  logic [1:0] DIO_PAD_SLEEP_MODE_1_qs;
  logic [1:0] DIO_PAD_SLEEP_MODE_1_wd;
  logic DIO_PAD_SLEEP_MODE_2_we;
  logic [1:0] DIO_PAD_SLEEP_MODE_2_qs;
  logic [1:0] DIO_PAD_SLEEP_MODE_2_wd;
  logic DIO_PAD_SLEEP_MODE_3_we;
  logic [1:0] DIO_PAD_SLEEP_MODE_3_qs;
  logic [1:0] DIO_PAD_SLEEP_MODE_3_wd;
  logic DIO_PAD_SLEEP_MODE_4_we;
  logic [1:0] DIO_PAD_SLEEP_MODE_4_qs;
  logic [1:0] DIO_PAD_SLEEP_MODE_4_wd;
  logic DIO_PAD_SLEEP_MODE_5_we;
  logic [1:0] DIO_PAD_SLEEP_MODE_5_qs;
  logic [1:0] DIO_PAD_SLEEP_MODE_5_wd;
  logic DIO_PAD_SLEEP_MODE_6_we;
  logic [1:0] DIO_PAD_SLEEP_MODE_6_qs;
  logic [1:0] DIO_PAD_SLEEP_MODE_6_wd;
  logic DIO_PAD_SLEEP_MODE_7_we;
  logic [1:0] DIO_PAD_SLEEP_MODE_7_qs;
  logic [1:0] DIO_PAD_SLEEP_MODE_7_wd;
  logic DIO_PAD_SLEEP_MODE_8_we;
  logic [1:0] DIO_PAD_SLEEP_MODE_8_qs;
  logic [1:0] DIO_PAD_SLEEP_MODE_8_wd;
  logic DI3C_PAD_SLEEP_STATUS_we;
  logic DI3C_PAD_SLEEP_STATUS_EN_0_qs;
  logic DI3C_PAD_SLEEP_STATUS_EN_0_wd;
  logic DI3C_PAD_SLEEP_STATUS_EN_1_qs;
  logic DI3C_PAD_SLEEP_STATUS_EN_1_wd;
  logic DI3C_PAD_SLEEP_REGWEN_0_we;
  logic DI3C_PAD_SLEEP_REGWEN_0_qs;
  logic DI3C_PAD_SLEEP_REGWEN_0_wd;
  logic DI3C_PAD_SLEEP_REGWEN_1_we;
  logic DI3C_PAD_SLEEP_REGWEN_1_qs;
  logic DI3C_PAD_SLEEP_REGWEN_1_wd;
  logic DI3C_PAD_SLEEP_EN_0_we;
  logic DI3C_PAD_SLEEP_EN_0_qs;
  logic DI3C_PAD_SLEEP_EN_0_wd;
  logic DI3C_PAD_SLEEP_EN_1_we;
  logic DI3C_PAD_SLEEP_EN_1_qs;
  logic DI3C_PAD_SLEEP_EN_1_wd;
  logic DI3C_PAD_SLEEP_MODE_0_we;
  logic [1:0] DI3C_PAD_SLEEP_MODE_0_qs;
  logic [1:0] DI3C_PAD_SLEEP_MODE_0_wd;
  logic DI3C_PAD_SLEEP_MODE_1_we;
  logic [1:0] DI3C_PAD_SLEEP_MODE_1_qs;
  logic [1:0] DI3C_PAD_SLEEP_MODE_1_wd;
  logic WKUP_DETECTOR_REGWEN_0_we;
  logic WKUP_DETECTOR_REGWEN_0_qs;
  logic WKUP_DETECTOR_REGWEN_0_wd;
  logic WKUP_DETECTOR_REGWEN_1_we;
  logic WKUP_DETECTOR_REGWEN_1_qs;
  logic WKUP_DETECTOR_REGWEN_1_wd;
  logic WKUP_DETECTOR_REGWEN_2_we;
  logic WKUP_DETECTOR_REGWEN_2_qs;
  logic WKUP_DETECTOR_REGWEN_2_wd;
  logic WKUP_DETECTOR_REGWEN_3_we;
  logic WKUP_DETECTOR_REGWEN_3_qs;
  logic WKUP_DETECTOR_REGWEN_3_wd;
  logic WKUP_DETECTOR_REGWEN_4_we;
  logic WKUP_DETECTOR_REGWEN_4_qs;
  logic WKUP_DETECTOR_REGWEN_4_wd;
  logic WKUP_DETECTOR_REGWEN_5_we;
  logic WKUP_DETECTOR_REGWEN_5_qs;
  logic WKUP_DETECTOR_REGWEN_5_wd;
  logic WKUP_DETECTOR_REGWEN_6_we;
  logic WKUP_DETECTOR_REGWEN_6_qs;
  logic WKUP_DETECTOR_REGWEN_6_wd;
  logic WKUP_DETECTOR_REGWEN_7_we;
  logic WKUP_DETECTOR_REGWEN_7_qs;
  logic WKUP_DETECTOR_REGWEN_7_wd;
  logic WKUP_DETECTOR_EN_0_we;
  logic [0:0] WKUP_DETECTOR_EN_0_qs;
  logic WKUP_DETECTOR_EN_0_busy;
  logic WKUP_DETECTOR_EN_1_we;
  logic [0:0] WKUP_DETECTOR_EN_1_qs;
  logic WKUP_DETECTOR_EN_1_busy;
  logic WKUP_DETECTOR_EN_2_we;
  logic [0:0] WKUP_DETECTOR_EN_2_qs;
  logic WKUP_DETECTOR_EN_2_busy;
  logic WKUP_DETECTOR_EN_3_we;
  logic [0:0] WKUP_DETECTOR_EN_3_qs;
  logic WKUP_DETECTOR_EN_3_busy;
  logic WKUP_DETECTOR_EN_4_we;
  logic [0:0] WKUP_DETECTOR_EN_4_qs;
  logic WKUP_DETECTOR_EN_4_busy;
  logic WKUP_DETECTOR_EN_5_we;
  logic [0:0] WKUP_DETECTOR_EN_5_qs;
  logic WKUP_DETECTOR_EN_5_busy;
  logic WKUP_DETECTOR_EN_6_we;
  logic [0:0] WKUP_DETECTOR_EN_6_qs;
  logic WKUP_DETECTOR_EN_6_busy;
  logic WKUP_DETECTOR_EN_7_we;
  logic [0:0] WKUP_DETECTOR_EN_7_qs;
  logic WKUP_DETECTOR_EN_7_busy;
  logic WKUP_DETECTOR_0_we;
  logic [4:0] WKUP_DETECTOR_0_qs;
  logic WKUP_DETECTOR_0_busy;
  logic WKUP_DETECTOR_1_we;
  logic [4:0] WKUP_DETECTOR_1_qs;
  logic WKUP_DETECTOR_1_busy;
  logic WKUP_DETECTOR_2_we;
  logic [4:0] WKUP_DETECTOR_2_qs;
  logic WKUP_DETECTOR_2_busy;
  logic WKUP_DETECTOR_3_we;
  logic [4:0] WKUP_DETECTOR_3_qs;
  logic WKUP_DETECTOR_3_busy;
  logic WKUP_DETECTOR_4_we;
  logic [4:0] WKUP_DETECTOR_4_qs;
  logic WKUP_DETECTOR_4_busy;
  logic WKUP_DETECTOR_5_we;
  logic [4:0] WKUP_DETECTOR_5_qs;
  logic WKUP_DETECTOR_5_busy;
  logic WKUP_DETECTOR_6_we;
  logic [4:0] WKUP_DETECTOR_6_qs;
  logic WKUP_DETECTOR_6_busy;
  logic WKUP_DETECTOR_7_we;
  logic [4:0] WKUP_DETECTOR_7_qs;
  logic WKUP_DETECTOR_7_busy;
  logic WKUP_DETECTOR_CNT_TH_0_we;
  logic [7:0] WKUP_DETECTOR_CNT_TH_0_qs;
  logic WKUP_DETECTOR_CNT_TH_0_busy;
  logic WKUP_DETECTOR_CNT_TH_1_we;
  logic [7:0] WKUP_DETECTOR_CNT_TH_1_qs;
  logic WKUP_DETECTOR_CNT_TH_1_busy;
  logic WKUP_DETECTOR_CNT_TH_2_we;
  logic [7:0] WKUP_DETECTOR_CNT_TH_2_qs;
  logic WKUP_DETECTOR_CNT_TH_2_busy;
  logic WKUP_DETECTOR_CNT_TH_3_we;
  logic [7:0] WKUP_DETECTOR_CNT_TH_3_qs;
  logic WKUP_DETECTOR_CNT_TH_3_busy;
  logic WKUP_DETECTOR_CNT_TH_4_we;
  logic [7:0] WKUP_DETECTOR_CNT_TH_4_qs;
  logic WKUP_DETECTOR_CNT_TH_4_busy;
  logic WKUP_DETECTOR_CNT_TH_5_we;
  logic [7:0] WKUP_DETECTOR_CNT_TH_5_qs;
  logic WKUP_DETECTOR_CNT_TH_5_busy;
  logic WKUP_DETECTOR_CNT_TH_6_we;
  logic [7:0] WKUP_DETECTOR_CNT_TH_6_qs;
  logic WKUP_DETECTOR_CNT_TH_6_busy;
  logic WKUP_DETECTOR_CNT_TH_7_we;
  logic [7:0] WKUP_DETECTOR_CNT_TH_7_qs;
  logic WKUP_DETECTOR_CNT_TH_7_busy;
  logic WKUP_DETECTOR_PADSEL_0_we;
  logic [1:0] WKUP_DETECTOR_PADSEL_0_qs;
  logic [1:0] WKUP_DETECTOR_PADSEL_0_wd;
  logic WKUP_DETECTOR_PADSEL_1_we;
  logic [1:0] WKUP_DETECTOR_PADSEL_1_qs;
  logic [1:0] WKUP_DETECTOR_PADSEL_1_wd;
  logic WKUP_DETECTOR_PADSEL_2_we;
  logic [1:0] WKUP_DETECTOR_PADSEL_2_qs;
  logic [1:0] WKUP_DETECTOR_PADSEL_2_wd;
  logic WKUP_DETECTOR_PADSEL_3_we;
  logic [1:0] WKUP_DETECTOR_PADSEL_3_qs;
  logic [1:0] WKUP_DETECTOR_PADSEL_3_wd;
  logic WKUP_DETECTOR_PADSEL_4_we;
  logic [1:0] WKUP_DETECTOR_PADSEL_4_qs;
  logic [1:0] WKUP_DETECTOR_PADSEL_4_wd;
  logic WKUP_DETECTOR_PADSEL_5_we;
  logic [1:0] WKUP_DETECTOR_PADSEL_5_qs;
  logic [1:0] WKUP_DETECTOR_PADSEL_5_wd;
  logic WKUP_DETECTOR_PADSEL_6_we;
  logic [1:0] WKUP_DETECTOR_PADSEL_6_qs;
  logic [1:0] WKUP_DETECTOR_PADSEL_6_wd;
  logic WKUP_DETECTOR_PADSEL_7_we;
  logic [1:0] WKUP_DETECTOR_PADSEL_7_qs;
  logic [1:0] WKUP_DETECTOR_PADSEL_7_wd;
  logic WKUP_CAUSE_we;
  logic [7:0] WKUP_CAUSE_qs;
  logic WKUP_CAUSE_busy;
  // Define register CDC handling.
  // CDC handling is done on a per-reg instead of per-field boundary.

  logic  aon_WKUP_DETECTOR_EN_0_qs_int;
  logic [0:0] aon_WKUP_DETECTOR_EN_0_qs;
  logic [0:0] aon_WKUP_DETECTOR_EN_0_wdata;
  logic aon_WKUP_DETECTOR_EN_0_we;
  logic unused_aon_WKUP_DETECTOR_EN_0_wdata;
  logic aon_WKUP_DETECTOR_EN_0_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_EN_0_qs = 1'h0;
    aon_WKUP_DETECTOR_EN_0_qs = aon_WKUP_DETECTOR_EN_0_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_EN_0_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_0_qs),
    .src_we_i     (WKUP_DETECTOR_EN_0_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (WKUP_DETECTOR_EN_0_busy),
    .src_qs_o     (WKUP_DETECTOR_EN_0_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_EN_0_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_EN_0_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_EN_0_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_EN_0_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_EN_0_wdata =
      ^aon_WKUP_DETECTOR_EN_0_wdata;

  logic  aon_WKUP_DETECTOR_EN_1_qs_int;
  logic [0:0] aon_WKUP_DETECTOR_EN_1_qs;
  logic [0:0] aon_WKUP_DETECTOR_EN_1_wdata;
  logic aon_WKUP_DETECTOR_EN_1_we;
  logic unused_aon_WKUP_DETECTOR_EN_1_wdata;
  logic aon_WKUP_DETECTOR_EN_1_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_EN_1_qs = 1'h0;
    aon_WKUP_DETECTOR_EN_1_qs = aon_WKUP_DETECTOR_EN_1_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_EN_1_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_1_qs),
    .src_we_i     (WKUP_DETECTOR_EN_1_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (WKUP_DETECTOR_EN_1_busy),
    .src_qs_o     (WKUP_DETECTOR_EN_1_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_EN_1_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_EN_1_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_EN_1_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_EN_1_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_EN_1_wdata =
      ^aon_WKUP_DETECTOR_EN_1_wdata;

  logic  aon_WKUP_DETECTOR_EN_2_qs_int;
  logic [0:0] aon_WKUP_DETECTOR_EN_2_qs;
  logic [0:0] aon_WKUP_DETECTOR_EN_2_wdata;
  logic aon_WKUP_DETECTOR_EN_2_we;
  logic unused_aon_WKUP_DETECTOR_EN_2_wdata;
  logic aon_WKUP_DETECTOR_EN_2_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_EN_2_qs = 1'h0;
    aon_WKUP_DETECTOR_EN_2_qs = aon_WKUP_DETECTOR_EN_2_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_EN_2_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_2_qs),
    .src_we_i     (WKUP_DETECTOR_EN_2_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (WKUP_DETECTOR_EN_2_busy),
    .src_qs_o     (WKUP_DETECTOR_EN_2_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_EN_2_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_EN_2_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_EN_2_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_EN_2_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_EN_2_wdata =
      ^aon_WKUP_DETECTOR_EN_2_wdata;

  logic  aon_WKUP_DETECTOR_EN_3_qs_int;
  logic [0:0] aon_WKUP_DETECTOR_EN_3_qs;
  logic [0:0] aon_WKUP_DETECTOR_EN_3_wdata;
  logic aon_WKUP_DETECTOR_EN_3_we;
  logic unused_aon_WKUP_DETECTOR_EN_3_wdata;
  logic aon_WKUP_DETECTOR_EN_3_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_EN_3_qs = 1'h0;
    aon_WKUP_DETECTOR_EN_3_qs = aon_WKUP_DETECTOR_EN_3_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_EN_3_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_3_qs),
    .src_we_i     (WKUP_DETECTOR_EN_3_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (WKUP_DETECTOR_EN_3_busy),
    .src_qs_o     (WKUP_DETECTOR_EN_3_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_EN_3_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_EN_3_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_EN_3_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_EN_3_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_EN_3_wdata =
      ^aon_WKUP_DETECTOR_EN_3_wdata;

  logic  aon_WKUP_DETECTOR_EN_4_qs_int;
  logic [0:0] aon_WKUP_DETECTOR_EN_4_qs;
  logic [0:0] aon_WKUP_DETECTOR_EN_4_wdata;
  logic aon_WKUP_DETECTOR_EN_4_we;
  logic unused_aon_WKUP_DETECTOR_EN_4_wdata;
  logic aon_WKUP_DETECTOR_EN_4_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_EN_4_qs = 1'h0;
    aon_WKUP_DETECTOR_EN_4_qs = aon_WKUP_DETECTOR_EN_4_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_EN_4_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_4_qs),
    .src_we_i     (WKUP_DETECTOR_EN_4_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (WKUP_DETECTOR_EN_4_busy),
    .src_qs_o     (WKUP_DETECTOR_EN_4_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_EN_4_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_EN_4_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_EN_4_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_EN_4_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_EN_4_wdata =
      ^aon_WKUP_DETECTOR_EN_4_wdata;

  logic  aon_WKUP_DETECTOR_EN_5_qs_int;
  logic [0:0] aon_WKUP_DETECTOR_EN_5_qs;
  logic [0:0] aon_WKUP_DETECTOR_EN_5_wdata;
  logic aon_WKUP_DETECTOR_EN_5_we;
  logic unused_aon_WKUP_DETECTOR_EN_5_wdata;
  logic aon_WKUP_DETECTOR_EN_5_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_EN_5_qs = 1'h0;
    aon_WKUP_DETECTOR_EN_5_qs = aon_WKUP_DETECTOR_EN_5_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_EN_5_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_5_qs),
    .src_we_i     (WKUP_DETECTOR_EN_5_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (WKUP_DETECTOR_EN_5_busy),
    .src_qs_o     (WKUP_DETECTOR_EN_5_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_EN_5_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_EN_5_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_EN_5_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_EN_5_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_EN_5_wdata =
      ^aon_WKUP_DETECTOR_EN_5_wdata;

  logic  aon_WKUP_DETECTOR_EN_6_qs_int;
  logic [0:0] aon_WKUP_DETECTOR_EN_6_qs;
  logic [0:0] aon_WKUP_DETECTOR_EN_6_wdata;
  logic aon_WKUP_DETECTOR_EN_6_we;
  logic unused_aon_WKUP_DETECTOR_EN_6_wdata;
  logic aon_WKUP_DETECTOR_EN_6_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_EN_6_qs = 1'h0;
    aon_WKUP_DETECTOR_EN_6_qs = aon_WKUP_DETECTOR_EN_6_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_EN_6_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_6_qs),
    .src_we_i     (WKUP_DETECTOR_EN_6_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (WKUP_DETECTOR_EN_6_busy),
    .src_qs_o     (WKUP_DETECTOR_EN_6_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_EN_6_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_EN_6_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_EN_6_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_EN_6_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_EN_6_wdata =
      ^aon_WKUP_DETECTOR_EN_6_wdata;

  logic  aon_WKUP_DETECTOR_EN_7_qs_int;
  logic [0:0] aon_WKUP_DETECTOR_EN_7_qs;
  logic [0:0] aon_WKUP_DETECTOR_EN_7_wdata;
  logic aon_WKUP_DETECTOR_EN_7_we;
  logic unused_aon_WKUP_DETECTOR_EN_7_wdata;
  logic aon_WKUP_DETECTOR_EN_7_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_EN_7_qs = 1'h0;
    aon_WKUP_DETECTOR_EN_7_qs = aon_WKUP_DETECTOR_EN_7_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_EN_7_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_7_qs),
    .src_we_i     (WKUP_DETECTOR_EN_7_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (WKUP_DETECTOR_EN_7_busy),
    .src_qs_o     (WKUP_DETECTOR_EN_7_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_EN_7_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_EN_7_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_EN_7_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_EN_7_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_EN_7_wdata =
      ^aon_WKUP_DETECTOR_EN_7_wdata;

  logic [2:0]  aon_WKUP_DETECTOR_0_MODE_0_qs_int;
  logic  aon_WKUP_DETECTOR_0_FILTER_0_qs_int;
  logic  aon_WKUP_DETECTOR_0_MIODIO_0_qs_int;
  logic [4:0] aon_WKUP_DETECTOR_0_qs;
  logic [4:0] aon_WKUP_DETECTOR_0_wdata;
  logic aon_WKUP_DETECTOR_0_we;
  logic unused_aon_WKUP_DETECTOR_0_wdata;
  logic aon_WKUP_DETECTOR_0_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_0_qs = 5'h0;
    aon_WKUP_DETECTOR_0_qs[2:0] = aon_WKUP_DETECTOR_0_MODE_0_qs_int;
    aon_WKUP_DETECTOR_0_qs[3] = aon_WKUP_DETECTOR_0_FILTER_0_qs_int;
    aon_WKUP_DETECTOR_0_qs[4] = aon_WKUP_DETECTOR_0_MIODIO_0_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_0_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_0_qs),
    .src_we_i     (WKUP_DETECTOR_0_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (WKUP_DETECTOR_0_busy),
    .src_qs_o     (WKUP_DETECTOR_0_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_0_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_0_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_0_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_0_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_0_wdata =
      ^aon_WKUP_DETECTOR_0_wdata;

  logic [2:0]  aon_WKUP_DETECTOR_1_MODE_1_qs_int;
  logic  aon_WKUP_DETECTOR_1_FILTER_1_qs_int;
  logic  aon_WKUP_DETECTOR_1_MIODIO_1_qs_int;
  logic [4:0] aon_WKUP_DETECTOR_1_qs;
  logic [4:0] aon_WKUP_DETECTOR_1_wdata;
  logic aon_WKUP_DETECTOR_1_we;
  logic unused_aon_WKUP_DETECTOR_1_wdata;
  logic aon_WKUP_DETECTOR_1_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_1_qs = 5'h0;
    aon_WKUP_DETECTOR_1_qs[2:0] = aon_WKUP_DETECTOR_1_MODE_1_qs_int;
    aon_WKUP_DETECTOR_1_qs[3] = aon_WKUP_DETECTOR_1_FILTER_1_qs_int;
    aon_WKUP_DETECTOR_1_qs[4] = aon_WKUP_DETECTOR_1_MIODIO_1_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_1_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_1_qs),
    .src_we_i     (WKUP_DETECTOR_1_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (WKUP_DETECTOR_1_busy),
    .src_qs_o     (WKUP_DETECTOR_1_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_1_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_1_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_1_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_1_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_1_wdata =
      ^aon_WKUP_DETECTOR_1_wdata;

  logic [2:0]  aon_WKUP_DETECTOR_2_MODE_2_qs_int;
  logic  aon_WKUP_DETECTOR_2_FILTER_2_qs_int;
  logic  aon_WKUP_DETECTOR_2_MIODIO_2_qs_int;
  logic [4:0] aon_WKUP_DETECTOR_2_qs;
  logic [4:0] aon_WKUP_DETECTOR_2_wdata;
  logic aon_WKUP_DETECTOR_2_we;
  logic unused_aon_WKUP_DETECTOR_2_wdata;
  logic aon_WKUP_DETECTOR_2_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_2_qs = 5'h0;
    aon_WKUP_DETECTOR_2_qs[2:0] = aon_WKUP_DETECTOR_2_MODE_2_qs_int;
    aon_WKUP_DETECTOR_2_qs[3] = aon_WKUP_DETECTOR_2_FILTER_2_qs_int;
    aon_WKUP_DETECTOR_2_qs[4] = aon_WKUP_DETECTOR_2_MIODIO_2_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_2_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_2_qs),
    .src_we_i     (WKUP_DETECTOR_2_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (WKUP_DETECTOR_2_busy),
    .src_qs_o     (WKUP_DETECTOR_2_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_2_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_2_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_2_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_2_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_2_wdata =
      ^aon_WKUP_DETECTOR_2_wdata;

  logic [2:0]  aon_WKUP_DETECTOR_3_MODE_3_qs_int;
  logic  aon_WKUP_DETECTOR_3_FILTER_3_qs_int;
  logic  aon_WKUP_DETECTOR_3_MIODIO_3_qs_int;
  logic [4:0] aon_WKUP_DETECTOR_3_qs;
  logic [4:0] aon_WKUP_DETECTOR_3_wdata;
  logic aon_WKUP_DETECTOR_3_we;
  logic unused_aon_WKUP_DETECTOR_3_wdata;
  logic aon_WKUP_DETECTOR_3_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_3_qs = 5'h0;
    aon_WKUP_DETECTOR_3_qs[2:0] = aon_WKUP_DETECTOR_3_MODE_3_qs_int;
    aon_WKUP_DETECTOR_3_qs[3] = aon_WKUP_DETECTOR_3_FILTER_3_qs_int;
    aon_WKUP_DETECTOR_3_qs[4] = aon_WKUP_DETECTOR_3_MIODIO_3_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_3_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_3_qs),
    .src_we_i     (WKUP_DETECTOR_3_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (WKUP_DETECTOR_3_busy),
    .src_qs_o     (WKUP_DETECTOR_3_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_3_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_3_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_3_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_3_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_3_wdata =
      ^aon_WKUP_DETECTOR_3_wdata;

  logic [2:0]  aon_WKUP_DETECTOR_4_MODE_4_qs_int;
  logic  aon_WKUP_DETECTOR_4_FILTER_4_qs_int;
  logic  aon_WKUP_DETECTOR_4_MIODIO_4_qs_int;
  logic [4:0] aon_WKUP_DETECTOR_4_qs;
  logic [4:0] aon_WKUP_DETECTOR_4_wdata;
  logic aon_WKUP_DETECTOR_4_we;
  logic unused_aon_WKUP_DETECTOR_4_wdata;
  logic aon_WKUP_DETECTOR_4_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_4_qs = 5'h0;
    aon_WKUP_DETECTOR_4_qs[2:0] = aon_WKUP_DETECTOR_4_MODE_4_qs_int;
    aon_WKUP_DETECTOR_4_qs[3] = aon_WKUP_DETECTOR_4_FILTER_4_qs_int;
    aon_WKUP_DETECTOR_4_qs[4] = aon_WKUP_DETECTOR_4_MIODIO_4_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_4_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_4_qs),
    .src_we_i     (WKUP_DETECTOR_4_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (WKUP_DETECTOR_4_busy),
    .src_qs_o     (WKUP_DETECTOR_4_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_4_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_4_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_4_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_4_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_4_wdata =
      ^aon_WKUP_DETECTOR_4_wdata;

  logic [2:0]  aon_WKUP_DETECTOR_5_MODE_5_qs_int;
  logic  aon_WKUP_DETECTOR_5_FILTER_5_qs_int;
  logic  aon_WKUP_DETECTOR_5_MIODIO_5_qs_int;
  logic [4:0] aon_WKUP_DETECTOR_5_qs;
  logic [4:0] aon_WKUP_DETECTOR_5_wdata;
  logic aon_WKUP_DETECTOR_5_we;
  logic unused_aon_WKUP_DETECTOR_5_wdata;
  logic aon_WKUP_DETECTOR_5_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_5_qs = 5'h0;
    aon_WKUP_DETECTOR_5_qs[2:0] = aon_WKUP_DETECTOR_5_MODE_5_qs_int;
    aon_WKUP_DETECTOR_5_qs[3] = aon_WKUP_DETECTOR_5_FILTER_5_qs_int;
    aon_WKUP_DETECTOR_5_qs[4] = aon_WKUP_DETECTOR_5_MIODIO_5_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_5_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_5_qs),
    .src_we_i     (WKUP_DETECTOR_5_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (WKUP_DETECTOR_5_busy),
    .src_qs_o     (WKUP_DETECTOR_5_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_5_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_5_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_5_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_5_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_5_wdata =
      ^aon_WKUP_DETECTOR_5_wdata;

  logic [2:0]  aon_WKUP_DETECTOR_6_MODE_6_qs_int;
  logic  aon_WKUP_DETECTOR_6_FILTER_6_qs_int;
  logic  aon_WKUP_DETECTOR_6_MIODIO_6_qs_int;
  logic [4:0] aon_WKUP_DETECTOR_6_qs;
  logic [4:0] aon_WKUP_DETECTOR_6_wdata;
  logic aon_WKUP_DETECTOR_6_we;
  logic unused_aon_WKUP_DETECTOR_6_wdata;
  logic aon_WKUP_DETECTOR_6_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_6_qs = 5'h0;
    aon_WKUP_DETECTOR_6_qs[2:0] = aon_WKUP_DETECTOR_6_MODE_6_qs_int;
    aon_WKUP_DETECTOR_6_qs[3] = aon_WKUP_DETECTOR_6_FILTER_6_qs_int;
    aon_WKUP_DETECTOR_6_qs[4] = aon_WKUP_DETECTOR_6_MIODIO_6_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_6_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_6_qs),
    .src_we_i     (WKUP_DETECTOR_6_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (WKUP_DETECTOR_6_busy),
    .src_qs_o     (WKUP_DETECTOR_6_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_6_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_6_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_6_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_6_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_6_wdata =
      ^aon_WKUP_DETECTOR_6_wdata;

  logic [2:0]  aon_WKUP_DETECTOR_7_MODE_7_qs_int;
  logic  aon_WKUP_DETECTOR_7_FILTER_7_qs_int;
  logic  aon_WKUP_DETECTOR_7_MIODIO_7_qs_int;
  logic [4:0] aon_WKUP_DETECTOR_7_qs;
  logic [4:0] aon_WKUP_DETECTOR_7_wdata;
  logic aon_WKUP_DETECTOR_7_we;
  logic unused_aon_WKUP_DETECTOR_7_wdata;
  logic aon_WKUP_DETECTOR_7_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_7_qs = 5'h0;
    aon_WKUP_DETECTOR_7_qs[2:0] = aon_WKUP_DETECTOR_7_MODE_7_qs_int;
    aon_WKUP_DETECTOR_7_qs[3] = aon_WKUP_DETECTOR_7_FILTER_7_qs_int;
    aon_WKUP_DETECTOR_7_qs[4] = aon_WKUP_DETECTOR_7_MIODIO_7_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_7_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_7_qs),
    .src_we_i     (WKUP_DETECTOR_7_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (WKUP_DETECTOR_7_busy),
    .src_qs_o     (WKUP_DETECTOR_7_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_7_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_7_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_7_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_7_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_7_wdata =
      ^aon_WKUP_DETECTOR_7_wdata;

  logic [7:0]  aon_WKUP_DETECTOR_CNT_TH_0_qs_int;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_0_qs;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_0_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_0_we;
  logic unused_aon_WKUP_DETECTOR_CNT_TH_0_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_0_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_CNT_TH_0_qs = 8'h0;
    aon_WKUP_DETECTOR_CNT_TH_0_qs = aon_WKUP_DETECTOR_CNT_TH_0_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_CNT_TH_0_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_0_qs),
    .src_we_i     (WKUP_DETECTOR_CNT_TH_0_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (WKUP_DETECTOR_CNT_TH_0_busy),
    .src_qs_o     (WKUP_DETECTOR_CNT_TH_0_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_CNT_TH_0_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_CNT_TH_0_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_CNT_TH_0_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_CNT_TH_0_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_CNT_TH_0_wdata =
      ^aon_WKUP_DETECTOR_CNT_TH_0_wdata;

  logic [7:0]  aon_WKUP_DETECTOR_CNT_TH_1_qs_int;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_1_qs;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_1_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_1_we;
  logic unused_aon_WKUP_DETECTOR_CNT_TH_1_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_1_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_CNT_TH_1_qs = 8'h0;
    aon_WKUP_DETECTOR_CNT_TH_1_qs = aon_WKUP_DETECTOR_CNT_TH_1_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_CNT_TH_1_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_1_qs),
    .src_we_i     (WKUP_DETECTOR_CNT_TH_1_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (WKUP_DETECTOR_CNT_TH_1_busy),
    .src_qs_o     (WKUP_DETECTOR_CNT_TH_1_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_CNT_TH_1_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_CNT_TH_1_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_CNT_TH_1_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_CNT_TH_1_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_CNT_TH_1_wdata =
      ^aon_WKUP_DETECTOR_CNT_TH_1_wdata;

  logic [7:0]  aon_WKUP_DETECTOR_CNT_TH_2_qs_int;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_2_qs;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_2_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_2_we;
  logic unused_aon_WKUP_DETECTOR_CNT_TH_2_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_2_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_CNT_TH_2_qs = 8'h0;
    aon_WKUP_DETECTOR_CNT_TH_2_qs = aon_WKUP_DETECTOR_CNT_TH_2_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_CNT_TH_2_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_2_qs),
    .src_we_i     (WKUP_DETECTOR_CNT_TH_2_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (WKUP_DETECTOR_CNT_TH_2_busy),
    .src_qs_o     (WKUP_DETECTOR_CNT_TH_2_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_CNT_TH_2_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_CNT_TH_2_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_CNT_TH_2_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_CNT_TH_2_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_CNT_TH_2_wdata =
      ^aon_WKUP_DETECTOR_CNT_TH_2_wdata;

  logic [7:0]  aon_WKUP_DETECTOR_CNT_TH_3_qs_int;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_3_qs;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_3_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_3_we;
  logic unused_aon_WKUP_DETECTOR_CNT_TH_3_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_3_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_CNT_TH_3_qs = 8'h0;
    aon_WKUP_DETECTOR_CNT_TH_3_qs = aon_WKUP_DETECTOR_CNT_TH_3_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_CNT_TH_3_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_3_qs),
    .src_we_i     (WKUP_DETECTOR_CNT_TH_3_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (WKUP_DETECTOR_CNT_TH_3_busy),
    .src_qs_o     (WKUP_DETECTOR_CNT_TH_3_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_CNT_TH_3_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_CNT_TH_3_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_CNT_TH_3_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_CNT_TH_3_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_CNT_TH_3_wdata =
      ^aon_WKUP_DETECTOR_CNT_TH_3_wdata;

  logic [7:0]  aon_WKUP_DETECTOR_CNT_TH_4_qs_int;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_4_qs;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_4_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_4_we;
  logic unused_aon_WKUP_DETECTOR_CNT_TH_4_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_4_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_CNT_TH_4_qs = 8'h0;
    aon_WKUP_DETECTOR_CNT_TH_4_qs = aon_WKUP_DETECTOR_CNT_TH_4_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_CNT_TH_4_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_4_qs),
    .src_we_i     (WKUP_DETECTOR_CNT_TH_4_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (WKUP_DETECTOR_CNT_TH_4_busy),
    .src_qs_o     (WKUP_DETECTOR_CNT_TH_4_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_CNT_TH_4_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_CNT_TH_4_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_CNT_TH_4_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_CNT_TH_4_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_CNT_TH_4_wdata =
      ^aon_WKUP_DETECTOR_CNT_TH_4_wdata;

  logic [7:0]  aon_WKUP_DETECTOR_CNT_TH_5_qs_int;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_5_qs;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_5_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_5_we;
  logic unused_aon_WKUP_DETECTOR_CNT_TH_5_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_5_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_CNT_TH_5_qs = 8'h0;
    aon_WKUP_DETECTOR_CNT_TH_5_qs = aon_WKUP_DETECTOR_CNT_TH_5_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_CNT_TH_5_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_5_qs),
    .src_we_i     (WKUP_DETECTOR_CNT_TH_5_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (WKUP_DETECTOR_CNT_TH_5_busy),
    .src_qs_o     (WKUP_DETECTOR_CNT_TH_5_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_CNT_TH_5_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_CNT_TH_5_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_CNT_TH_5_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_CNT_TH_5_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_CNT_TH_5_wdata =
      ^aon_WKUP_DETECTOR_CNT_TH_5_wdata;

  logic [7:0]  aon_WKUP_DETECTOR_CNT_TH_6_qs_int;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_6_qs;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_6_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_6_we;
  logic unused_aon_WKUP_DETECTOR_CNT_TH_6_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_6_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_CNT_TH_6_qs = 8'h0;
    aon_WKUP_DETECTOR_CNT_TH_6_qs = aon_WKUP_DETECTOR_CNT_TH_6_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_CNT_TH_6_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_6_qs),
    .src_we_i     (WKUP_DETECTOR_CNT_TH_6_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (WKUP_DETECTOR_CNT_TH_6_busy),
    .src_qs_o     (WKUP_DETECTOR_CNT_TH_6_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_CNT_TH_6_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_CNT_TH_6_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_CNT_TH_6_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_CNT_TH_6_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_CNT_TH_6_wdata =
      ^aon_WKUP_DETECTOR_CNT_TH_6_wdata;

  logic [7:0]  aon_WKUP_DETECTOR_CNT_TH_7_qs_int;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_7_qs;
  logic [7:0] aon_WKUP_DETECTOR_CNT_TH_7_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_7_we;
  logic unused_aon_WKUP_DETECTOR_CNT_TH_7_wdata;
  logic aon_WKUP_DETECTOR_CNT_TH_7_regwen;

  always_comb begin
    aon_WKUP_DETECTOR_CNT_TH_7_qs = 8'h0;
    aon_WKUP_DETECTOR_CNT_TH_7_qs = aon_WKUP_DETECTOR_CNT_TH_7_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_WKUP_DETECTOR_CNT_TH_7_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (WKUP_DETECTOR_REGWEN_7_qs),
    .src_we_i     (WKUP_DETECTOR_CNT_TH_7_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (WKUP_DETECTOR_CNT_TH_7_busy),
    .src_qs_o     (WKUP_DETECTOR_CNT_TH_7_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_WKUP_DETECTOR_CNT_TH_7_qs),
    .dst_we_o     (aon_WKUP_DETECTOR_CNT_TH_7_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_WKUP_DETECTOR_CNT_TH_7_regwen),
    .dst_wd_o     (aon_WKUP_DETECTOR_CNT_TH_7_wdata)
  );
  assign unused_aon_WKUP_DETECTOR_CNT_TH_7_wdata =
      ^aon_WKUP_DETECTOR_CNT_TH_7_wdata;

  logic  aon_WKUP_CAUSE_CAUSE_0_ds_int;
  logic  aon_WKUP_CAUSE_CAUSE_0_qs_int;
  logic  aon_WKUP_CAUSE_CAUSE_1_ds_int;
  logic  aon_WKUP_CAUSE_CAUSE_1_qs_int;
  logic  aon_WKUP_CAUSE_CAUSE_2_ds_int;
  logic  aon_WKUP_CAUSE_CAUSE_2_qs_int;
  logic  aon_WKUP_CAUSE_CAUSE_3_ds_int;
  logic  aon_WKUP_CAUSE_CAUSE_3_qs_int;
  logic  aon_WKUP_CAUSE_CAUSE_4_ds_int;
  logic  aon_WKUP_CAUSE_CAUSE_4_qs_int;
  logic  aon_WKUP_CAUSE_CAUSE_5_ds_int;
  logic  aon_WKUP_CAUSE_CAUSE_5_qs_int;
  logic  aon_WKUP_CAUSE_CAUSE_6_ds_int;
  logic  aon_WKUP_CAUSE_CAUSE_6_qs_int;
  logic  aon_WKUP_CAUSE_CAUSE_7_ds_int;
  logic  aon_WKUP_CAUSE_CAUSE_7_qs_int;
  logic [7:0] aon_WKUP_CAUSE_ds;
  logic aon_WKUP_CAUSE_qe;
  logic [7:0] aon_WKUP_CAUSE_qs;
  logic [7:0] aon_WKUP_CAUSE_wdata;
  logic aon_WKUP_CAUSE_we;
  logic unused_aon_WKUP_CAUSE_wdata;

  always_comb begin
    aon_WKUP_CAUSE_qs = 8'h0;
    aon_WKUP_CAUSE_ds = 8'h0;
    aon_WKUP_CAUSE_ds[0] = aon_WKUP_CAUSE_CAUSE_0_ds_int;
    aon_WKUP_CAUSE_qs[0] = aon_WKUP_CAUSE_CAUSE_0_qs_int;
    aon_WKUP_CAUSE_ds[1] = aon_WKUP_CAUSE_CAUSE_1_ds_int;
    aon_WKUP_CAUSE_qs[1] = aon_WKUP_CAUSE_CAUSE_1_qs_int;
    aon_WKUP_CAUSE_ds[2] = aon_WKUP_CAUSE_CAUSE_2_ds_int;
    aon_WKUP_CAUSE_qs[2] = aon_WKUP_CAUSE_CAUSE_2_qs_int;
    aon_WKUP_CAUSE_ds[3] = aon_WKUP_CAUSE_CAUSE_3_ds_int;
    aon_WKUP_CAUSE_qs[3] = aon_WKUP_CAUSE_CAUSE_3_qs_int;
    aon_WKUP_CAUSE_ds[4] = aon_WKUP_CAUSE_CAUSE_4_ds_int;
    aon_WKUP_CAUSE_qs[4] = aon_WKUP_CAUSE_CAUSE_4_qs_int;
    aon_WKUP_CAUSE_ds[5] = aon_WKUP_CAUSE_CAUSE_5_ds_int;
    aon_WKUP_CAUSE_qs[5] = aon_WKUP_CAUSE_CAUSE_5_qs_int;
    aon_WKUP_CAUSE_ds[6] = aon_WKUP_CAUSE_CAUSE_6_ds_int;
    aon_WKUP_CAUSE_qs[6] = aon_WKUP_CAUSE_CAUSE_6_qs_int;
    aon_WKUP_CAUSE_ds[7] = aon_WKUP_CAUSE_CAUSE_7_ds_int;
    aon_WKUP_CAUSE_qs[7] = aon_WKUP_CAUSE_CAUSE_7_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(1)
  ) u_WKUP_CAUSE_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i ('0),
    .src_we_i     (WKUP_CAUSE_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (WKUP_CAUSE_busy),
    .src_qs_o     (WKUP_CAUSE_qs), // for software read back
    .dst_update_i (aon_WKUP_CAUSE_qe),
    .dst_ds_i     (aon_WKUP_CAUSE_ds),
    .dst_qs_i     (aon_WKUP_CAUSE_qs),
    .dst_we_o     (aon_WKUP_CAUSE_we),
    .dst_re_o     (),
    .dst_regwen_o (),
    .dst_wd_o     (aon_WKUP_CAUSE_wdata)
  );
  assign unused_aon_WKUP_CAUSE_wdata =
      ^aon_WKUP_CAUSE_wdata;

  // Register instances
  // R[ALERT_TEST]: V(True)
  logic ALERT_TEST_qe;
  logic [0:0] ALERT_TEST_flds_we;
  assign ALERT_TEST_qe = |ALERT_TEST_flds_we; //  Rivos: &*_we --> |*_we
  prim_subreg_ext #(
    .DW    (1)
  ) u_ALERT_TEST (
    .re     (1'b0),
    .we     (ALERT_TEST_we),
    .wd     (ALERT_TEST_wd),
    .d      ('0),
    .qre    (),
    .qe     (ALERT_TEST_flds_we[0]),
    .q      (reg2hw.ALERT_TEST.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.ALERT_TEST.qe = ALERT_TEST_qe;


  // Subregister 0 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_0_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_0_qs)
  );


  // Subregister 1 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_1_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_1_qs)
  );


  // Subregister 2 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_2]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_2_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_2_qs)
  );


  // Subregister 3 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_3]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_3_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_3_qs)
  );


  // Subregister 4 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_4]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_4_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_4_qs)
  );


  // Subregister 5 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_5]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_5_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_5_qs)
  );


  // Subregister 6 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_6]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_6_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_6_qs)
  );


  // Subregister 7 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_7]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_7_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_7_qs)
  );


  // Subregister 8 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_8]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_8_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_8_qs)
  );


  // Subregister 9 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_9]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_9 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_9_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_9_qs)
  );


  // Subregister 10 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_10]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_10 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_10_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_10_qs)
  );


  // Subregister 11 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_11]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_11 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_11_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_11_qs)
  );


  // Subregister 12 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_12]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_12 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_12_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_12_qs)
  );


  // Subregister 13 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_13]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_13 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_13_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_13_qs)
  );


  // Subregister 14 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_14]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_14 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_14_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_14_qs)
  );


  // Subregister 15 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_15]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_15 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_15_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_15_qs)
  );


  // Subregister 16 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_16]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_16 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_16_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_16_qs)
  );


  // Subregister 17 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_17]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_17 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_17_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_17_qs)
  );


  // Subregister 18 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_18]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_18 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_18_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_18_qs)
  );


  // Subregister 19 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_19]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_19 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_19_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_19_qs)
  );


  // Subregister 20 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_20]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_20 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_20_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_20_qs)
  );


  // Subregister 21 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_21]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_21 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_21_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_21_qs)
  );


  // Subregister 22 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_22]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_22 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_22_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_22_qs)
  );


  // Subregister 23 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_23]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_23 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_23_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_23_qs)
  );


  // Subregister 24 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_24]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_24 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_24_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_24_qs)
  );


  // Subregister 25 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_25]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_25 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_25_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_25_qs)
  );


  // Subregister 26 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_26]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_26 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_26_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_26_qs)
  );


  // Subregister 27 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_27]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_27 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_27_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_27_qs)
  );


  // Subregister 28 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_28]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_28 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_28_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_28_qs)
  );


  // Subregister 29 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_29]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_29 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_29_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_29_qs)
  );


  // Subregister 30 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_30]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_30 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_30_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_30_qs)
  );


  // Subregister 31 of Multireg MIO_PERIPH_INSEL_REGWEN
  // R[MIO_PERIPH_INSEL_REGWEN_31]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PERIPH_INSEL_REGWEN_31 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_REGWEN_31_we),
    .wd     (MIO_PERIPH_INSEL_REGWEN_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_REGWEN_31_qs)
  );


  // Subregister 0 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_0]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_0_gated_we;
  assign MIO_PERIPH_INSEL_0_gated_we = MIO_PERIPH_INSEL_0_we & MIO_PERIPH_INSEL_REGWEN_0_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_0_gated_we),
    .wd     (MIO_PERIPH_INSEL_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_0_qs)
  );


  // Subregister 1 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_1]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_1_gated_we;
  assign MIO_PERIPH_INSEL_1_gated_we = MIO_PERIPH_INSEL_1_we & MIO_PERIPH_INSEL_REGWEN_1_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_1_gated_we),
    .wd     (MIO_PERIPH_INSEL_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_1_qs)
  );


  // Subregister 2 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_2]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_2_gated_we;
  assign MIO_PERIPH_INSEL_2_gated_we = MIO_PERIPH_INSEL_2_we & MIO_PERIPH_INSEL_REGWEN_2_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_2_gated_we),
    .wd     (MIO_PERIPH_INSEL_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_2_qs)
  );


  // Subregister 3 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_3]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_3_gated_we;
  assign MIO_PERIPH_INSEL_3_gated_we = MIO_PERIPH_INSEL_3_we & MIO_PERIPH_INSEL_REGWEN_3_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_3_gated_we),
    .wd     (MIO_PERIPH_INSEL_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_3_qs)
  );


  // Subregister 4 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_4]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_4_gated_we;
  assign MIO_PERIPH_INSEL_4_gated_we = MIO_PERIPH_INSEL_4_we & MIO_PERIPH_INSEL_REGWEN_4_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_4_gated_we),
    .wd     (MIO_PERIPH_INSEL_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_4_qs)
  );


  // Subregister 5 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_5]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_5_gated_we;
  assign MIO_PERIPH_INSEL_5_gated_we = MIO_PERIPH_INSEL_5_we & MIO_PERIPH_INSEL_REGWEN_5_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_5_gated_we),
    .wd     (MIO_PERIPH_INSEL_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_5_qs)
  );


  // Subregister 6 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_6]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_6_gated_we;
  assign MIO_PERIPH_INSEL_6_gated_we = MIO_PERIPH_INSEL_6_we & MIO_PERIPH_INSEL_REGWEN_6_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_6_gated_we),
    .wd     (MIO_PERIPH_INSEL_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_6_qs)
  );


  // Subregister 7 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_7]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_7_gated_we;
  assign MIO_PERIPH_INSEL_7_gated_we = MIO_PERIPH_INSEL_7_we & MIO_PERIPH_INSEL_REGWEN_7_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_7_gated_we),
    .wd     (MIO_PERIPH_INSEL_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_7_qs)
  );


  // Subregister 8 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_8]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_8_gated_we;
  assign MIO_PERIPH_INSEL_8_gated_we = MIO_PERIPH_INSEL_8_we & MIO_PERIPH_INSEL_REGWEN_8_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_8_gated_we),
    .wd     (MIO_PERIPH_INSEL_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_8_qs)
  );


  // Subregister 9 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_9]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_9_gated_we;
  assign MIO_PERIPH_INSEL_9_gated_we = MIO_PERIPH_INSEL_9_we & MIO_PERIPH_INSEL_REGWEN_9_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_9 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_9_gated_we),
    .wd     (MIO_PERIPH_INSEL_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_9_qs)
  );


  // Subregister 10 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_10]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_10_gated_we;
  assign MIO_PERIPH_INSEL_10_gated_we = MIO_PERIPH_INSEL_10_we & MIO_PERIPH_INSEL_REGWEN_10_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_10 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_10_gated_we),
    .wd     (MIO_PERIPH_INSEL_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_10_qs)
  );


  // Subregister 11 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_11]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_11_gated_we;
  assign MIO_PERIPH_INSEL_11_gated_we = MIO_PERIPH_INSEL_11_we & MIO_PERIPH_INSEL_REGWEN_11_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_11 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_11_gated_we),
    .wd     (MIO_PERIPH_INSEL_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_11_qs)
  );


  // Subregister 12 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_12]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_12_gated_we;
  assign MIO_PERIPH_INSEL_12_gated_we = MIO_PERIPH_INSEL_12_we & MIO_PERIPH_INSEL_REGWEN_12_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_12 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_12_gated_we),
    .wd     (MIO_PERIPH_INSEL_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_12_qs)
  );


  // Subregister 13 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_13]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_13_gated_we;
  assign MIO_PERIPH_INSEL_13_gated_we = MIO_PERIPH_INSEL_13_we & MIO_PERIPH_INSEL_REGWEN_13_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_13 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_13_gated_we),
    .wd     (MIO_PERIPH_INSEL_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_13_qs)
  );


  // Subregister 14 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_14]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_14_gated_we;
  assign MIO_PERIPH_INSEL_14_gated_we = MIO_PERIPH_INSEL_14_we & MIO_PERIPH_INSEL_REGWEN_14_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_14 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_14_gated_we),
    .wd     (MIO_PERIPH_INSEL_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_14_qs)
  );


  // Subregister 15 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_15]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_15_gated_we;
  assign MIO_PERIPH_INSEL_15_gated_we = MIO_PERIPH_INSEL_15_we & MIO_PERIPH_INSEL_REGWEN_15_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_15 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_15_gated_we),
    .wd     (MIO_PERIPH_INSEL_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_15_qs)
  );


  // Subregister 16 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_16]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_16_gated_we;
  assign MIO_PERIPH_INSEL_16_gated_we = MIO_PERIPH_INSEL_16_we & MIO_PERIPH_INSEL_REGWEN_16_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_16 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_16_gated_we),
    .wd     (MIO_PERIPH_INSEL_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_16_qs)
  );


  // Subregister 17 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_17]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_17_gated_we;
  assign MIO_PERIPH_INSEL_17_gated_we = MIO_PERIPH_INSEL_17_we & MIO_PERIPH_INSEL_REGWEN_17_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_17 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_17_gated_we),
    .wd     (MIO_PERIPH_INSEL_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_17_qs)
  );


  // Subregister 18 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_18]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_18_gated_we;
  assign MIO_PERIPH_INSEL_18_gated_we = MIO_PERIPH_INSEL_18_we & MIO_PERIPH_INSEL_REGWEN_18_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_18 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_18_gated_we),
    .wd     (MIO_PERIPH_INSEL_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_18_qs)
  );


  // Subregister 19 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_19]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_19_gated_we;
  assign MIO_PERIPH_INSEL_19_gated_we = MIO_PERIPH_INSEL_19_we & MIO_PERIPH_INSEL_REGWEN_19_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_19 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_19_gated_we),
    .wd     (MIO_PERIPH_INSEL_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_19_qs)
  );


  // Subregister 20 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_20]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_20_gated_we;
  assign MIO_PERIPH_INSEL_20_gated_we = MIO_PERIPH_INSEL_20_we & MIO_PERIPH_INSEL_REGWEN_20_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_20 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_20_gated_we),
    .wd     (MIO_PERIPH_INSEL_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_20_qs)
  );


  // Subregister 21 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_21]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_21_gated_we;
  assign MIO_PERIPH_INSEL_21_gated_we = MIO_PERIPH_INSEL_21_we & MIO_PERIPH_INSEL_REGWEN_21_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_21 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_21_gated_we),
    .wd     (MIO_PERIPH_INSEL_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_21_qs)
  );


  // Subregister 22 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_22]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_22_gated_we;
  assign MIO_PERIPH_INSEL_22_gated_we = MIO_PERIPH_INSEL_22_we & MIO_PERIPH_INSEL_REGWEN_22_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_22 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_22_gated_we),
    .wd     (MIO_PERIPH_INSEL_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_22_qs)
  );


  // Subregister 23 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_23]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_23_gated_we;
  assign MIO_PERIPH_INSEL_23_gated_we = MIO_PERIPH_INSEL_23_we & MIO_PERIPH_INSEL_REGWEN_23_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_23 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_23_gated_we),
    .wd     (MIO_PERIPH_INSEL_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_23_qs)
  );


  // Subregister 24 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_24]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_24_gated_we;
  assign MIO_PERIPH_INSEL_24_gated_we = MIO_PERIPH_INSEL_24_we & MIO_PERIPH_INSEL_REGWEN_24_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_24 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_24_gated_we),
    .wd     (MIO_PERIPH_INSEL_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_24_qs)
  );


  // Subregister 25 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_25]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_25_gated_we;
  assign MIO_PERIPH_INSEL_25_gated_we = MIO_PERIPH_INSEL_25_we & MIO_PERIPH_INSEL_REGWEN_25_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_25 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_25_gated_we),
    .wd     (MIO_PERIPH_INSEL_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_25_qs)
  );


  // Subregister 26 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_26]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_26_gated_we;
  assign MIO_PERIPH_INSEL_26_gated_we = MIO_PERIPH_INSEL_26_we & MIO_PERIPH_INSEL_REGWEN_26_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_26 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_26_gated_we),
    .wd     (MIO_PERIPH_INSEL_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_26_qs)
  );


  // Subregister 27 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_27]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_27_gated_we;
  assign MIO_PERIPH_INSEL_27_gated_we = MIO_PERIPH_INSEL_27_we & MIO_PERIPH_INSEL_REGWEN_27_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_27 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_27_gated_we),
    .wd     (MIO_PERIPH_INSEL_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_27_qs)
  );


  // Subregister 28 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_28]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_28_gated_we;
  assign MIO_PERIPH_INSEL_28_gated_we = MIO_PERIPH_INSEL_28_we & MIO_PERIPH_INSEL_REGWEN_28_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_28 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_28_gated_we),
    .wd     (MIO_PERIPH_INSEL_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_28_qs)
  );


  // Subregister 29 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_29]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_29_gated_we;
  assign MIO_PERIPH_INSEL_29_gated_we = MIO_PERIPH_INSEL_29_we & MIO_PERIPH_INSEL_REGWEN_29_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_29 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_29_gated_we),
    .wd     (MIO_PERIPH_INSEL_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_29_qs)
  );


  // Subregister 30 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_30]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_30_gated_we;
  assign MIO_PERIPH_INSEL_30_gated_we = MIO_PERIPH_INSEL_30_we & MIO_PERIPH_INSEL_REGWEN_30_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_30 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_30_gated_we),
    .wd     (MIO_PERIPH_INSEL_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_30_qs)
  );


  // Subregister 31 of Multireg MIO_PERIPH_INSEL
  // R[MIO_PERIPH_INSEL_31]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PERIPH_INSEL_31_gated_we;
  assign MIO_PERIPH_INSEL_31_gated_we = MIO_PERIPH_INSEL_31_we & MIO_PERIPH_INSEL_REGWEN_31_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_MIO_PERIPH_INSEL_31 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PERIPH_INSEL_31_gated_we),
    .wd     (MIO_PERIPH_INSEL_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PERIPH_INSEL[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PERIPH_INSEL_31_qs)
  );


  // Subregister 0 of Multireg MIO_OUTSEL_REGWEN
  // R[MIO_OUTSEL_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_OUTSEL_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_OUTSEL_REGWEN_we),
    .wd     (MIO_OUTSEL_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_OUTSEL_REGWEN_qs)
  );


  // Subregister 0 of Multireg MIO_OUTSEL
  // R[MIO_OUTSEL]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_OUTSEL_gated_we;
  assign MIO_OUTSEL_gated_we = MIO_OUTSEL_we & MIO_OUTSEL_REGWEN_qs;


  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_MIO_OUTSEL (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_OUTSEL_gated_we),
    .wd     (MIO_OUTSEL_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_OUTSEL[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_OUTSEL_qs)
  );


  // Subregister 0 of Multireg MIO_PAD_ATTR_REGWEN
  // R[MIO_PAD_ATTR_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PAD_ATTR_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PAD_ATTR_REGWEN_we),
    .wd     (MIO_PAD_ATTR_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PAD_ATTR_REGWEN_qs)
  );


  // Subregister 0 of Multireg MIO_PAD_ATTR
  // R[MIO_PAD_ATTR]: V(True)
  logic MIO_PAD_ATTR_qe;
  logic [3:0] MIO_PAD_ATTR_flds_we;
  assign MIO_PAD_ATTR_qe = |MIO_PAD_ATTR_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic MIO_PAD_ATTR_gated_we;
  assign MIO_PAD_ATTR_gated_we = MIO_PAD_ATTR_we & MIO_PAD_ATTR_REGWEN_qs;
  //   F[PUEN_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_MIO_PAD_ATTR_PUEN_0 (
    .re     (MIO_PAD_ATTR_re),
    .we     (MIO_PAD_ATTR_gated_we),
    .wd     (MIO_PAD_ATTR_PUEN_0_wd),
    .d      (hw2reg.MIO_PAD_ATTR[0].PUEN.d),
    .qre    (),
    .qe     (MIO_PAD_ATTR_flds_we[0]),
    .q      (reg2hw.MIO_PAD_ATTR[0].PUEN.q),
    .ds     (),
    .qs     (MIO_PAD_ATTR_PUEN_0_qs)
  );
  assign reg2hw.MIO_PAD_ATTR[0].PUEN.qe = MIO_PAD_ATTR_qe;

  //   F[PDEN_0]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_MIO_PAD_ATTR_PDEN_0 (
    .re     (MIO_PAD_ATTR_re),
    .we     (MIO_PAD_ATTR_gated_we),
    .wd     (MIO_PAD_ATTR_PDEN_0_wd),
    .d      (hw2reg.MIO_PAD_ATTR[0].PDEN.d),
    .qre    (),
    .qe     (MIO_PAD_ATTR_flds_we[1]),
    .q      (reg2hw.MIO_PAD_ATTR[0].PDEN.q),
    .ds     (),
    .qs     (MIO_PAD_ATTR_PDEN_0_qs)
  );
  assign reg2hw.MIO_PAD_ATTR[0].PDEN.qe = MIO_PAD_ATTR_qe;

  //   F[SMTEN_0]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_MIO_PAD_ATTR_SMTEN_0 (
    .re     (MIO_PAD_ATTR_re),
    .we     (MIO_PAD_ATTR_gated_we),
    .wd     (MIO_PAD_ATTR_SMTEN_0_wd),
    .d      (hw2reg.MIO_PAD_ATTR[0].SMTEN.d),
    .qre    (),
    .qe     (MIO_PAD_ATTR_flds_we[2]),
    .q      (reg2hw.MIO_PAD_ATTR[0].SMTEN.q),
    .ds     (),
    .qs     (MIO_PAD_ATTR_SMTEN_0_qs)
  );
  assign reg2hw.MIO_PAD_ATTR[0].SMTEN.qe = MIO_PAD_ATTR_qe;

  //   F[DRV_0]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_MIO_PAD_ATTR_DRV_0 (
    .re     (MIO_PAD_ATTR_re),
    .we     (MIO_PAD_ATTR_gated_we),
    .wd     (MIO_PAD_ATTR_DRV_0_wd),
    .d      (hw2reg.MIO_PAD_ATTR[0].DRV.d),
    .qre    (),
    .qe     (MIO_PAD_ATTR_flds_we[3]),
    .q      (reg2hw.MIO_PAD_ATTR[0].DRV.q),
    .ds     (),
    .qs     (MIO_PAD_ATTR_DRV_0_qs)
  );
  assign reg2hw.MIO_PAD_ATTR[0].DRV.qe = MIO_PAD_ATTR_qe;


  // Subregister 0 of Multireg DIO_PAD_ATTR_REGWEN
  // R[DIO_PAD_ATTR_REGWEN_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_ATTR_REGWEN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_ATTR_REGWEN_0_we),
    .wd     (DIO_PAD_ATTR_REGWEN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_ATTR_REGWEN_0_qs)
  );


  // Subregister 1 of Multireg DIO_PAD_ATTR_REGWEN
  // R[DIO_PAD_ATTR_REGWEN_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_ATTR_REGWEN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_ATTR_REGWEN_1_we),
    .wd     (DIO_PAD_ATTR_REGWEN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_ATTR_REGWEN_1_qs)
  );


  // Subregister 2 of Multireg DIO_PAD_ATTR_REGWEN
  // R[DIO_PAD_ATTR_REGWEN_2]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_ATTR_REGWEN_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_ATTR_REGWEN_2_we),
    .wd     (DIO_PAD_ATTR_REGWEN_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_ATTR_REGWEN_2_qs)
  );


  // Subregister 3 of Multireg DIO_PAD_ATTR_REGWEN
  // R[DIO_PAD_ATTR_REGWEN_3]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_ATTR_REGWEN_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_ATTR_REGWEN_3_we),
    .wd     (DIO_PAD_ATTR_REGWEN_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_ATTR_REGWEN_3_qs)
  );


  // Subregister 4 of Multireg DIO_PAD_ATTR_REGWEN
  // R[DIO_PAD_ATTR_REGWEN_4]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_ATTR_REGWEN_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_ATTR_REGWEN_4_we),
    .wd     (DIO_PAD_ATTR_REGWEN_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_ATTR_REGWEN_4_qs)
  );


  // Subregister 5 of Multireg DIO_PAD_ATTR_REGWEN
  // R[DIO_PAD_ATTR_REGWEN_5]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_ATTR_REGWEN_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_ATTR_REGWEN_5_we),
    .wd     (DIO_PAD_ATTR_REGWEN_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_ATTR_REGWEN_5_qs)
  );


  // Subregister 6 of Multireg DIO_PAD_ATTR_REGWEN
  // R[DIO_PAD_ATTR_REGWEN_6]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_ATTR_REGWEN_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_ATTR_REGWEN_6_we),
    .wd     (DIO_PAD_ATTR_REGWEN_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_ATTR_REGWEN_6_qs)
  );


  // Subregister 7 of Multireg DIO_PAD_ATTR_REGWEN
  // R[DIO_PAD_ATTR_REGWEN_7]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_ATTR_REGWEN_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_ATTR_REGWEN_7_we),
    .wd     (DIO_PAD_ATTR_REGWEN_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_ATTR_REGWEN_7_qs)
  );


  // Subregister 8 of Multireg DIO_PAD_ATTR_REGWEN
  // R[DIO_PAD_ATTR_REGWEN_8]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_ATTR_REGWEN_8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_ATTR_REGWEN_8_we),
    .wd     (DIO_PAD_ATTR_REGWEN_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_ATTR_REGWEN_8_qs)
  );


  // Subregister 0 of Multireg DIO_PAD_ATTR
  // R[DIO_PAD_ATTR_0]: V(True)
  logic DIO_PAD_ATTR_0_qe;
  logic [3:0] DIO_PAD_ATTR_0_flds_we;
  assign DIO_PAD_ATTR_0_qe = |DIO_PAD_ATTR_0_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DIO_PAD_ATTR_0_gated_we;
  assign DIO_PAD_ATTR_0_gated_we = DIO_PAD_ATTR_0_we & DIO_PAD_ATTR_REGWEN_0_qs;
  //   F[PUEN_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_0_PUEN_0 (
    .re     (DIO_PAD_ATTR_0_re),
    .we     (DIO_PAD_ATTR_0_gated_we),
    .wd     (DIO_PAD_ATTR_0_PUEN_0_wd),
    .d      (hw2reg.DIO_PAD_ATTR[0].PUEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_0_flds_we[0]),
    .q      (reg2hw.DIO_PAD_ATTR[0].PUEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_0_PUEN_0_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[0].PUEN.qe = DIO_PAD_ATTR_0_qe;

  //   F[PDEN_0]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_0_PDEN_0 (
    .re     (DIO_PAD_ATTR_0_re),
    .we     (DIO_PAD_ATTR_0_gated_we),
    .wd     (DIO_PAD_ATTR_0_PDEN_0_wd),
    .d      (hw2reg.DIO_PAD_ATTR[0].PDEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_0_flds_we[1]),
    .q      (reg2hw.DIO_PAD_ATTR[0].PDEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_0_PDEN_0_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[0].PDEN.qe = DIO_PAD_ATTR_0_qe;

  //   F[SMTEN_0]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_0_SMTEN_0 (
    .re     (DIO_PAD_ATTR_0_re),
    .we     (DIO_PAD_ATTR_0_gated_we),
    .wd     (DIO_PAD_ATTR_0_SMTEN_0_wd),
    .d      (hw2reg.DIO_PAD_ATTR[0].SMTEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_0_flds_we[2]),
    .q      (reg2hw.DIO_PAD_ATTR[0].SMTEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_0_SMTEN_0_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[0].SMTEN.qe = DIO_PAD_ATTR_0_qe;

  //   F[DRV_0]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_DIO_PAD_ATTR_0_DRV_0 (
    .re     (DIO_PAD_ATTR_0_re),
    .we     (DIO_PAD_ATTR_0_gated_we),
    .wd     (DIO_PAD_ATTR_0_DRV_0_wd),
    .d      (hw2reg.DIO_PAD_ATTR[0].DRV.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_0_flds_we[3]),
    .q      (reg2hw.DIO_PAD_ATTR[0].DRV.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_0_DRV_0_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[0].DRV.qe = DIO_PAD_ATTR_0_qe;


  // Subregister 1 of Multireg DIO_PAD_ATTR
  // R[DIO_PAD_ATTR_1]: V(True)
  logic DIO_PAD_ATTR_1_qe;
  logic [3:0] DIO_PAD_ATTR_1_flds_we;
  assign DIO_PAD_ATTR_1_qe = |DIO_PAD_ATTR_1_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DIO_PAD_ATTR_1_gated_we;
  assign DIO_PAD_ATTR_1_gated_we = DIO_PAD_ATTR_1_we & DIO_PAD_ATTR_REGWEN_1_qs;
  //   F[PUEN_1]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_1_PUEN_1 (
    .re     (DIO_PAD_ATTR_1_re),
    .we     (DIO_PAD_ATTR_1_gated_we),
    .wd     (DIO_PAD_ATTR_1_PUEN_1_wd),
    .d      (hw2reg.DIO_PAD_ATTR[1].PUEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_1_flds_we[0]),
    .q      (reg2hw.DIO_PAD_ATTR[1].PUEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_1_PUEN_1_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[1].PUEN.qe = DIO_PAD_ATTR_1_qe;

  //   F[PDEN_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_1_PDEN_1 (
    .re     (DIO_PAD_ATTR_1_re),
    .we     (DIO_PAD_ATTR_1_gated_we),
    .wd     (DIO_PAD_ATTR_1_PDEN_1_wd),
    .d      (hw2reg.DIO_PAD_ATTR[1].PDEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_1_flds_we[1]),
    .q      (reg2hw.DIO_PAD_ATTR[1].PDEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_1_PDEN_1_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[1].PDEN.qe = DIO_PAD_ATTR_1_qe;

  //   F[SMTEN_1]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_1_SMTEN_1 (
    .re     (DIO_PAD_ATTR_1_re),
    .we     (DIO_PAD_ATTR_1_gated_we),
    .wd     (DIO_PAD_ATTR_1_SMTEN_1_wd),
    .d      (hw2reg.DIO_PAD_ATTR[1].SMTEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_1_flds_we[2]),
    .q      (reg2hw.DIO_PAD_ATTR[1].SMTEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_1_SMTEN_1_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[1].SMTEN.qe = DIO_PAD_ATTR_1_qe;

  //   F[DRV_1]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_DIO_PAD_ATTR_1_DRV_1 (
    .re     (DIO_PAD_ATTR_1_re),
    .we     (DIO_PAD_ATTR_1_gated_we),
    .wd     (DIO_PAD_ATTR_1_DRV_1_wd),
    .d      (hw2reg.DIO_PAD_ATTR[1].DRV.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_1_flds_we[3]),
    .q      (reg2hw.DIO_PAD_ATTR[1].DRV.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_1_DRV_1_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[1].DRV.qe = DIO_PAD_ATTR_1_qe;


  // Subregister 2 of Multireg DIO_PAD_ATTR
  // R[DIO_PAD_ATTR_2]: V(True)
  logic DIO_PAD_ATTR_2_qe;
  logic [3:0] DIO_PAD_ATTR_2_flds_we;
  assign DIO_PAD_ATTR_2_qe = |DIO_PAD_ATTR_2_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DIO_PAD_ATTR_2_gated_we;
  assign DIO_PAD_ATTR_2_gated_we = DIO_PAD_ATTR_2_we & DIO_PAD_ATTR_REGWEN_2_qs;
  //   F[PUEN_2]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_2_PUEN_2 (
    .re     (DIO_PAD_ATTR_2_re),
    .we     (DIO_PAD_ATTR_2_gated_we),
    .wd     (DIO_PAD_ATTR_2_PUEN_2_wd),
    .d      (hw2reg.DIO_PAD_ATTR[2].PUEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_2_flds_we[0]),
    .q      (reg2hw.DIO_PAD_ATTR[2].PUEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_2_PUEN_2_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[2].PUEN.qe = DIO_PAD_ATTR_2_qe;

  //   F[PDEN_2]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_2_PDEN_2 (
    .re     (DIO_PAD_ATTR_2_re),
    .we     (DIO_PAD_ATTR_2_gated_we),
    .wd     (DIO_PAD_ATTR_2_PDEN_2_wd),
    .d      (hw2reg.DIO_PAD_ATTR[2].PDEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_2_flds_we[1]),
    .q      (reg2hw.DIO_PAD_ATTR[2].PDEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_2_PDEN_2_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[2].PDEN.qe = DIO_PAD_ATTR_2_qe;

  //   F[SMTEN_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_2_SMTEN_2 (
    .re     (DIO_PAD_ATTR_2_re),
    .we     (DIO_PAD_ATTR_2_gated_we),
    .wd     (DIO_PAD_ATTR_2_SMTEN_2_wd),
    .d      (hw2reg.DIO_PAD_ATTR[2].SMTEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_2_flds_we[2]),
    .q      (reg2hw.DIO_PAD_ATTR[2].SMTEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_2_SMTEN_2_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[2].SMTEN.qe = DIO_PAD_ATTR_2_qe;

  //   F[DRV_2]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_DIO_PAD_ATTR_2_DRV_2 (
    .re     (DIO_PAD_ATTR_2_re),
    .we     (DIO_PAD_ATTR_2_gated_we),
    .wd     (DIO_PAD_ATTR_2_DRV_2_wd),
    .d      (hw2reg.DIO_PAD_ATTR[2].DRV.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_2_flds_we[3]),
    .q      (reg2hw.DIO_PAD_ATTR[2].DRV.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_2_DRV_2_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[2].DRV.qe = DIO_PAD_ATTR_2_qe;


  // Subregister 3 of Multireg DIO_PAD_ATTR
  // R[DIO_PAD_ATTR_3]: V(True)
  logic DIO_PAD_ATTR_3_qe;
  logic [3:0] DIO_PAD_ATTR_3_flds_we;
  assign DIO_PAD_ATTR_3_qe = |DIO_PAD_ATTR_3_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DIO_PAD_ATTR_3_gated_we;
  assign DIO_PAD_ATTR_3_gated_we = DIO_PAD_ATTR_3_we & DIO_PAD_ATTR_REGWEN_3_qs;
  //   F[PUEN_3]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_3_PUEN_3 (
    .re     (DIO_PAD_ATTR_3_re),
    .we     (DIO_PAD_ATTR_3_gated_we),
    .wd     (DIO_PAD_ATTR_3_PUEN_3_wd),
    .d      (hw2reg.DIO_PAD_ATTR[3].PUEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_3_flds_we[0]),
    .q      (reg2hw.DIO_PAD_ATTR[3].PUEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_3_PUEN_3_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[3].PUEN.qe = DIO_PAD_ATTR_3_qe;

  //   F[PDEN_3]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_3_PDEN_3 (
    .re     (DIO_PAD_ATTR_3_re),
    .we     (DIO_PAD_ATTR_3_gated_we),
    .wd     (DIO_PAD_ATTR_3_PDEN_3_wd),
    .d      (hw2reg.DIO_PAD_ATTR[3].PDEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_3_flds_we[1]),
    .q      (reg2hw.DIO_PAD_ATTR[3].PDEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_3_PDEN_3_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[3].PDEN.qe = DIO_PAD_ATTR_3_qe;

  //   F[SMTEN_3]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_3_SMTEN_3 (
    .re     (DIO_PAD_ATTR_3_re),
    .we     (DIO_PAD_ATTR_3_gated_we),
    .wd     (DIO_PAD_ATTR_3_SMTEN_3_wd),
    .d      (hw2reg.DIO_PAD_ATTR[3].SMTEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_3_flds_we[2]),
    .q      (reg2hw.DIO_PAD_ATTR[3].SMTEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_3_SMTEN_3_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[3].SMTEN.qe = DIO_PAD_ATTR_3_qe;

  //   F[DRV_3]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_DIO_PAD_ATTR_3_DRV_3 (
    .re     (DIO_PAD_ATTR_3_re),
    .we     (DIO_PAD_ATTR_3_gated_we),
    .wd     (DIO_PAD_ATTR_3_DRV_3_wd),
    .d      (hw2reg.DIO_PAD_ATTR[3].DRV.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_3_flds_we[3]),
    .q      (reg2hw.DIO_PAD_ATTR[3].DRV.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_3_DRV_3_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[3].DRV.qe = DIO_PAD_ATTR_3_qe;


  // Subregister 4 of Multireg DIO_PAD_ATTR
  // R[DIO_PAD_ATTR_4]: V(True)
  logic DIO_PAD_ATTR_4_qe;
  logic [3:0] DIO_PAD_ATTR_4_flds_we;
  assign DIO_PAD_ATTR_4_qe = |DIO_PAD_ATTR_4_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DIO_PAD_ATTR_4_gated_we;
  assign DIO_PAD_ATTR_4_gated_we = DIO_PAD_ATTR_4_we & DIO_PAD_ATTR_REGWEN_4_qs;
  //   F[PUEN_4]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_4_PUEN_4 (
    .re     (DIO_PAD_ATTR_4_re),
    .we     (DIO_PAD_ATTR_4_gated_we),
    .wd     (DIO_PAD_ATTR_4_PUEN_4_wd),
    .d      (hw2reg.DIO_PAD_ATTR[4].PUEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_4_flds_we[0]),
    .q      (reg2hw.DIO_PAD_ATTR[4].PUEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_4_PUEN_4_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[4].PUEN.qe = DIO_PAD_ATTR_4_qe;

  //   F[PDEN_4]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_4_PDEN_4 (
    .re     (DIO_PAD_ATTR_4_re),
    .we     (DIO_PAD_ATTR_4_gated_we),
    .wd     (DIO_PAD_ATTR_4_PDEN_4_wd),
    .d      (hw2reg.DIO_PAD_ATTR[4].PDEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_4_flds_we[1]),
    .q      (reg2hw.DIO_PAD_ATTR[4].PDEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_4_PDEN_4_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[4].PDEN.qe = DIO_PAD_ATTR_4_qe;

  //   F[SMTEN_4]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_4_SMTEN_4 (
    .re     (DIO_PAD_ATTR_4_re),
    .we     (DIO_PAD_ATTR_4_gated_we),
    .wd     (DIO_PAD_ATTR_4_SMTEN_4_wd),
    .d      (hw2reg.DIO_PAD_ATTR[4].SMTEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_4_flds_we[2]),
    .q      (reg2hw.DIO_PAD_ATTR[4].SMTEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_4_SMTEN_4_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[4].SMTEN.qe = DIO_PAD_ATTR_4_qe;

  //   F[DRV_4]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_DIO_PAD_ATTR_4_DRV_4 (
    .re     (DIO_PAD_ATTR_4_re),
    .we     (DIO_PAD_ATTR_4_gated_we),
    .wd     (DIO_PAD_ATTR_4_DRV_4_wd),
    .d      (hw2reg.DIO_PAD_ATTR[4].DRV.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_4_flds_we[3]),
    .q      (reg2hw.DIO_PAD_ATTR[4].DRV.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_4_DRV_4_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[4].DRV.qe = DIO_PAD_ATTR_4_qe;


  // Subregister 5 of Multireg DIO_PAD_ATTR
  // R[DIO_PAD_ATTR_5]: V(True)
  logic DIO_PAD_ATTR_5_qe;
  logic [3:0] DIO_PAD_ATTR_5_flds_we;
  assign DIO_PAD_ATTR_5_qe = |DIO_PAD_ATTR_5_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DIO_PAD_ATTR_5_gated_we;
  assign DIO_PAD_ATTR_5_gated_we = DIO_PAD_ATTR_5_we & DIO_PAD_ATTR_REGWEN_5_qs;
  //   F[PUEN_5]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_5_PUEN_5 (
    .re     (DIO_PAD_ATTR_5_re),
    .we     (DIO_PAD_ATTR_5_gated_we),
    .wd     (DIO_PAD_ATTR_5_PUEN_5_wd),
    .d      (hw2reg.DIO_PAD_ATTR[5].PUEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_5_flds_we[0]),
    .q      (reg2hw.DIO_PAD_ATTR[5].PUEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_5_PUEN_5_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[5].PUEN.qe = DIO_PAD_ATTR_5_qe;

  //   F[PDEN_5]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_5_PDEN_5 (
    .re     (DIO_PAD_ATTR_5_re),
    .we     (DIO_PAD_ATTR_5_gated_we),
    .wd     (DIO_PAD_ATTR_5_PDEN_5_wd),
    .d      (hw2reg.DIO_PAD_ATTR[5].PDEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_5_flds_we[1]),
    .q      (reg2hw.DIO_PAD_ATTR[5].PDEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_5_PDEN_5_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[5].PDEN.qe = DIO_PAD_ATTR_5_qe;

  //   F[SMTEN_5]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_5_SMTEN_5 (
    .re     (DIO_PAD_ATTR_5_re),
    .we     (DIO_PAD_ATTR_5_gated_we),
    .wd     (DIO_PAD_ATTR_5_SMTEN_5_wd),
    .d      (hw2reg.DIO_PAD_ATTR[5].SMTEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_5_flds_we[2]),
    .q      (reg2hw.DIO_PAD_ATTR[5].SMTEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_5_SMTEN_5_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[5].SMTEN.qe = DIO_PAD_ATTR_5_qe;

  //   F[DRV_5]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_DIO_PAD_ATTR_5_DRV_5 (
    .re     (DIO_PAD_ATTR_5_re),
    .we     (DIO_PAD_ATTR_5_gated_we),
    .wd     (DIO_PAD_ATTR_5_DRV_5_wd),
    .d      (hw2reg.DIO_PAD_ATTR[5].DRV.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_5_flds_we[3]),
    .q      (reg2hw.DIO_PAD_ATTR[5].DRV.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_5_DRV_5_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[5].DRV.qe = DIO_PAD_ATTR_5_qe;


  // Subregister 6 of Multireg DIO_PAD_ATTR
  // R[DIO_PAD_ATTR_6]: V(True)
  logic DIO_PAD_ATTR_6_qe;
  logic [3:0] DIO_PAD_ATTR_6_flds_we;
  assign DIO_PAD_ATTR_6_qe = |DIO_PAD_ATTR_6_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DIO_PAD_ATTR_6_gated_we;
  assign DIO_PAD_ATTR_6_gated_we = DIO_PAD_ATTR_6_we & DIO_PAD_ATTR_REGWEN_6_qs;
  //   F[PUEN_6]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_6_PUEN_6 (
    .re     (DIO_PAD_ATTR_6_re),
    .we     (DIO_PAD_ATTR_6_gated_we),
    .wd     (DIO_PAD_ATTR_6_PUEN_6_wd),
    .d      (hw2reg.DIO_PAD_ATTR[6].PUEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_6_flds_we[0]),
    .q      (reg2hw.DIO_PAD_ATTR[6].PUEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_6_PUEN_6_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[6].PUEN.qe = DIO_PAD_ATTR_6_qe;

  //   F[PDEN_6]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_6_PDEN_6 (
    .re     (DIO_PAD_ATTR_6_re),
    .we     (DIO_PAD_ATTR_6_gated_we),
    .wd     (DIO_PAD_ATTR_6_PDEN_6_wd),
    .d      (hw2reg.DIO_PAD_ATTR[6].PDEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_6_flds_we[1]),
    .q      (reg2hw.DIO_PAD_ATTR[6].PDEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_6_PDEN_6_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[6].PDEN.qe = DIO_PAD_ATTR_6_qe;

  //   F[SMTEN_6]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_6_SMTEN_6 (
    .re     (DIO_PAD_ATTR_6_re),
    .we     (DIO_PAD_ATTR_6_gated_we),
    .wd     (DIO_PAD_ATTR_6_SMTEN_6_wd),
    .d      (hw2reg.DIO_PAD_ATTR[6].SMTEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_6_flds_we[2]),
    .q      (reg2hw.DIO_PAD_ATTR[6].SMTEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_6_SMTEN_6_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[6].SMTEN.qe = DIO_PAD_ATTR_6_qe;

  //   F[DRV_6]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_DIO_PAD_ATTR_6_DRV_6 (
    .re     (DIO_PAD_ATTR_6_re),
    .we     (DIO_PAD_ATTR_6_gated_we),
    .wd     (DIO_PAD_ATTR_6_DRV_6_wd),
    .d      (hw2reg.DIO_PAD_ATTR[6].DRV.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_6_flds_we[3]),
    .q      (reg2hw.DIO_PAD_ATTR[6].DRV.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_6_DRV_6_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[6].DRV.qe = DIO_PAD_ATTR_6_qe;


  // Subregister 7 of Multireg DIO_PAD_ATTR
  // R[DIO_PAD_ATTR_7]: V(True)
  logic DIO_PAD_ATTR_7_qe;
  logic [3:0] DIO_PAD_ATTR_7_flds_we;
  assign DIO_PAD_ATTR_7_qe = |DIO_PAD_ATTR_7_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DIO_PAD_ATTR_7_gated_we;
  assign DIO_PAD_ATTR_7_gated_we = DIO_PAD_ATTR_7_we & DIO_PAD_ATTR_REGWEN_7_qs;
  //   F[PUEN_7]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_7_PUEN_7 (
    .re     (DIO_PAD_ATTR_7_re),
    .we     (DIO_PAD_ATTR_7_gated_we),
    .wd     (DIO_PAD_ATTR_7_PUEN_7_wd),
    .d      (hw2reg.DIO_PAD_ATTR[7].PUEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_7_flds_we[0]),
    .q      (reg2hw.DIO_PAD_ATTR[7].PUEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_7_PUEN_7_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[7].PUEN.qe = DIO_PAD_ATTR_7_qe;

  //   F[PDEN_7]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_7_PDEN_7 (
    .re     (DIO_PAD_ATTR_7_re),
    .we     (DIO_PAD_ATTR_7_gated_we),
    .wd     (DIO_PAD_ATTR_7_PDEN_7_wd),
    .d      (hw2reg.DIO_PAD_ATTR[7].PDEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_7_flds_we[1]),
    .q      (reg2hw.DIO_PAD_ATTR[7].PDEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_7_PDEN_7_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[7].PDEN.qe = DIO_PAD_ATTR_7_qe;

  //   F[SMTEN_7]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_7_SMTEN_7 (
    .re     (DIO_PAD_ATTR_7_re),
    .we     (DIO_PAD_ATTR_7_gated_we),
    .wd     (DIO_PAD_ATTR_7_SMTEN_7_wd),
    .d      (hw2reg.DIO_PAD_ATTR[7].SMTEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_7_flds_we[2]),
    .q      (reg2hw.DIO_PAD_ATTR[7].SMTEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_7_SMTEN_7_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[7].SMTEN.qe = DIO_PAD_ATTR_7_qe;

  //   F[DRV_7]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_DIO_PAD_ATTR_7_DRV_7 (
    .re     (DIO_PAD_ATTR_7_re),
    .we     (DIO_PAD_ATTR_7_gated_we),
    .wd     (DIO_PAD_ATTR_7_DRV_7_wd),
    .d      (hw2reg.DIO_PAD_ATTR[7].DRV.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_7_flds_we[3]),
    .q      (reg2hw.DIO_PAD_ATTR[7].DRV.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_7_DRV_7_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[7].DRV.qe = DIO_PAD_ATTR_7_qe;


  // Subregister 8 of Multireg DIO_PAD_ATTR
  // R[DIO_PAD_ATTR_8]: V(True)
  logic DIO_PAD_ATTR_8_qe;
  logic [3:0] DIO_PAD_ATTR_8_flds_we;
  assign DIO_PAD_ATTR_8_qe = |DIO_PAD_ATTR_8_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DIO_PAD_ATTR_8_gated_we;
  assign DIO_PAD_ATTR_8_gated_we = DIO_PAD_ATTR_8_we & DIO_PAD_ATTR_REGWEN_8_qs;
  //   F[PUEN_8]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_8_PUEN_8 (
    .re     (DIO_PAD_ATTR_8_re),
    .we     (DIO_PAD_ATTR_8_gated_we),
    .wd     (DIO_PAD_ATTR_8_PUEN_8_wd),
    .d      (hw2reg.DIO_PAD_ATTR[8].PUEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_8_flds_we[0]),
    .q      (reg2hw.DIO_PAD_ATTR[8].PUEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_8_PUEN_8_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[8].PUEN.qe = DIO_PAD_ATTR_8_qe;

  //   F[PDEN_8]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_8_PDEN_8 (
    .re     (DIO_PAD_ATTR_8_re),
    .we     (DIO_PAD_ATTR_8_gated_we),
    .wd     (DIO_PAD_ATTR_8_PDEN_8_wd),
    .d      (hw2reg.DIO_PAD_ATTR[8].PDEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_8_flds_we[1]),
    .q      (reg2hw.DIO_PAD_ATTR[8].PDEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_8_PDEN_8_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[8].PDEN.qe = DIO_PAD_ATTR_8_qe;

  //   F[SMTEN_8]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DIO_PAD_ATTR_8_SMTEN_8 (
    .re     (DIO_PAD_ATTR_8_re),
    .we     (DIO_PAD_ATTR_8_gated_we),
    .wd     (DIO_PAD_ATTR_8_SMTEN_8_wd),
    .d      (hw2reg.DIO_PAD_ATTR[8].SMTEN.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_8_flds_we[2]),
    .q      (reg2hw.DIO_PAD_ATTR[8].SMTEN.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_8_SMTEN_8_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[8].SMTEN.qe = DIO_PAD_ATTR_8_qe;

  //   F[DRV_8]: 6:4
  prim_subreg_ext #(
    .DW    (3)
  ) u_DIO_PAD_ATTR_8_DRV_8 (
    .re     (DIO_PAD_ATTR_8_re),
    .we     (DIO_PAD_ATTR_8_gated_we),
    .wd     (DIO_PAD_ATTR_8_DRV_8_wd),
    .d      (hw2reg.DIO_PAD_ATTR[8].DRV.d),
    .qre    (),
    .qe     (DIO_PAD_ATTR_8_flds_we[3]),
    .q      (reg2hw.DIO_PAD_ATTR[8].DRV.q),
    .ds     (),
    .qs     (DIO_PAD_ATTR_8_DRV_8_qs)
  );
  assign reg2hw.DIO_PAD_ATTR[8].DRV.qe = DIO_PAD_ATTR_8_qe;


  // Subregister 0 of Multireg DI3C_PAD_ATTR_REGWEN
  // R[DI3C_PAD_ATTR_REGWEN_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DI3C_PAD_ATTR_REGWEN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_ATTR_REGWEN_0_we),
    .wd     (DI3C_PAD_ATTR_REGWEN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_ATTR_REGWEN_0_qs)
  );


  // Subregister 1 of Multireg DI3C_PAD_ATTR_REGWEN
  // R[DI3C_PAD_ATTR_REGWEN_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DI3C_PAD_ATTR_REGWEN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_ATTR_REGWEN_1_we),
    .wd     (DI3C_PAD_ATTR_REGWEN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_ATTR_REGWEN_1_qs)
  );


  // Subregister 0 of Multireg DI3C_PAD_ATTR
  // R[DI3C_PAD_ATTR_0]: V(True)
  logic DI3C_PAD_ATTR_0_qe;
  logic [5:0] DI3C_PAD_ATTR_0_flds_we;
  assign DI3C_PAD_ATTR_0_qe = |DI3C_PAD_ATTR_0_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DI3C_PAD_ATTR_0_gated_we;
  assign DI3C_PAD_ATTR_0_gated_we = DI3C_PAD_ATTR_0_we & DI3C_PAD_ATTR_REGWEN_0_qs;
  //   F[PUEN_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_0_PUEN_0 (
    .re     (DI3C_PAD_ATTR_0_re),
    .we     (DI3C_PAD_ATTR_0_gated_we),
    .wd     (DI3C_PAD_ATTR_0_PUEN_0_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[0].PUEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_0_flds_we[0]),
    .q      (reg2hw.DI3C_PAD_ATTR[0].PUEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_0_PUEN_0_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[0].PUEN.qe = DI3C_PAD_ATTR_0_qe;

  //   F[PDEN_0]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_0_PDEN_0 (
    .re     (DI3C_PAD_ATTR_0_re),
    .we     (DI3C_PAD_ATTR_0_gated_we),
    .wd     (DI3C_PAD_ATTR_0_PDEN_0_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[0].PDEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_0_flds_we[1]),
    .q      (reg2hw.DI3C_PAD_ATTR[0].PDEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_0_PDEN_0_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[0].PDEN.qe = DI3C_PAD_ATTR_0_qe;

  //   F[FILTEN_0]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_0_FILTEN_0 (
    .re     (DI3C_PAD_ATTR_0_re),
    .we     (DI3C_PAD_ATTR_0_gated_we),
    .wd     (DI3C_PAD_ATTR_0_FILTEN_0_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[0].FILTEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_0_flds_we[2]),
    .q      (reg2hw.DI3C_PAD_ATTR[0].FILTEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_0_FILTEN_0_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[0].FILTEN.qe = DI3C_PAD_ATTR_0_qe;

  //   F[DLYEN_0]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_0_DLYEN_0 (
    .re     (DI3C_PAD_ATTR_0_re),
    .we     (DI3C_PAD_ATTR_0_gated_we),
    .wd     (DI3C_PAD_ATTR_0_DLYEN_0_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[0].DLYEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_0_flds_we[3]),
    .q      (reg2hw.DI3C_PAD_ATTR[0].DLYEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_0_DLYEN_0_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[0].DLYEN.qe = DI3C_PAD_ATTR_0_qe;

  //   F[I2CEN_0]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_0_I2CEN_0 (
    .re     (DI3C_PAD_ATTR_0_re),
    .we     (DI3C_PAD_ATTR_0_gated_we),
    .wd     (DI3C_PAD_ATTR_0_I2CEN_0_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[0].I2CEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_0_flds_we[4]),
    .q      (reg2hw.DI3C_PAD_ATTR[0].I2CEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_0_I2CEN_0_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[0].I2CEN.qe = DI3C_PAD_ATTR_0_qe;

  //   F[RINTEN_0]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_0_RINTEN_0 (
    .re     (DI3C_PAD_ATTR_0_re),
    .we     (DI3C_PAD_ATTR_0_gated_we),
    .wd     (DI3C_PAD_ATTR_0_RINTEN_0_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[0].RINTEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_0_flds_we[5]),
    .q      (reg2hw.DI3C_PAD_ATTR[0].RINTEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_0_RINTEN_0_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[0].RINTEN.qe = DI3C_PAD_ATTR_0_qe;


  // Subregister 1 of Multireg DI3C_PAD_ATTR
  // R[DI3C_PAD_ATTR_1]: V(True)
  logic DI3C_PAD_ATTR_1_qe;
  logic [5:0] DI3C_PAD_ATTR_1_flds_we;
  assign DI3C_PAD_ATTR_1_qe = |DI3C_PAD_ATTR_1_flds_we; //  Rivos: &*_we --> |*_we
  // Create REGWEN-gated WE signal
  logic DI3C_PAD_ATTR_1_gated_we;
  assign DI3C_PAD_ATTR_1_gated_we = DI3C_PAD_ATTR_1_we & DI3C_PAD_ATTR_REGWEN_1_qs;
  //   F[PUEN_1]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_1_PUEN_1 (
    .re     (DI3C_PAD_ATTR_1_re),
    .we     (DI3C_PAD_ATTR_1_gated_we),
    .wd     (DI3C_PAD_ATTR_1_PUEN_1_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[1].PUEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_1_flds_we[0]),
    .q      (reg2hw.DI3C_PAD_ATTR[1].PUEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_1_PUEN_1_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[1].PUEN.qe = DI3C_PAD_ATTR_1_qe;

  //   F[PDEN_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_1_PDEN_1 (
    .re     (DI3C_PAD_ATTR_1_re),
    .we     (DI3C_PAD_ATTR_1_gated_we),
    .wd     (DI3C_PAD_ATTR_1_PDEN_1_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[1].PDEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_1_flds_we[1]),
    .q      (reg2hw.DI3C_PAD_ATTR[1].PDEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_1_PDEN_1_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[1].PDEN.qe = DI3C_PAD_ATTR_1_qe;

  //   F[FILTEN_1]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_1_FILTEN_1 (
    .re     (DI3C_PAD_ATTR_1_re),
    .we     (DI3C_PAD_ATTR_1_gated_we),
    .wd     (DI3C_PAD_ATTR_1_FILTEN_1_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[1].FILTEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_1_flds_we[2]),
    .q      (reg2hw.DI3C_PAD_ATTR[1].FILTEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_1_FILTEN_1_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[1].FILTEN.qe = DI3C_PAD_ATTR_1_qe;

  //   F[DLYEN_1]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_1_DLYEN_1 (
    .re     (DI3C_PAD_ATTR_1_re),
    .we     (DI3C_PAD_ATTR_1_gated_we),
    .wd     (DI3C_PAD_ATTR_1_DLYEN_1_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[1].DLYEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_1_flds_we[3]),
    .q      (reg2hw.DI3C_PAD_ATTR[1].DLYEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_1_DLYEN_1_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[1].DLYEN.qe = DI3C_PAD_ATTR_1_qe;

  //   F[I2CEN_1]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_1_I2CEN_1 (
    .re     (DI3C_PAD_ATTR_1_re),
    .we     (DI3C_PAD_ATTR_1_gated_we),
    .wd     (DI3C_PAD_ATTR_1_I2CEN_1_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[1].I2CEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_1_flds_we[4]),
    .q      (reg2hw.DI3C_PAD_ATTR[1].I2CEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_1_I2CEN_1_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[1].I2CEN.qe = DI3C_PAD_ATTR_1_qe;

  //   F[RINTEN_1]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_DI3C_PAD_ATTR_1_RINTEN_1 (
    .re     (DI3C_PAD_ATTR_1_re),
    .we     (DI3C_PAD_ATTR_1_gated_we),
    .wd     (DI3C_PAD_ATTR_1_RINTEN_1_wd),
    .d      (hw2reg.DI3C_PAD_ATTR[1].RINTEN.d),
    .qre    (),
    .qe     (DI3C_PAD_ATTR_1_flds_we[5]),
    .q      (reg2hw.DI3C_PAD_ATTR[1].RINTEN.q),
    .ds     (),
    .qs     (DI3C_PAD_ATTR_1_RINTEN_1_qs)
  );
  assign reg2hw.DI3C_PAD_ATTR[1].RINTEN.qe = DI3C_PAD_ATTR_1_qe;


  // Subregister 0 of Multireg MIO_PAD_SLEEP_STATUS
  // R[MIO_PAD_SLEEP_STATUS]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_MIO_PAD_SLEEP_STATUS (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PAD_SLEEP_STATUS_we),
    .wd     (MIO_PAD_SLEEP_STATUS_wd),

    // from internal hardware
    .de     (hw2reg.MIO_PAD_SLEEP_STATUS[0].de),
    .d      (hw2reg.MIO_PAD_SLEEP_STATUS[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PAD_SLEEP_STATUS[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PAD_SLEEP_STATUS_qs)
  );


  // Subregister 0 of Multireg MIO_PAD_SLEEP_REGWEN
  // R[MIO_PAD_SLEEP_REGWEN]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_MIO_PAD_SLEEP_REGWEN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PAD_SLEEP_REGWEN_we),
    .wd     (MIO_PAD_SLEEP_REGWEN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PAD_SLEEP_REGWEN_qs)
  );


  // Subregister 0 of Multireg MIO_PAD_SLEEP_EN
  // R[MIO_PAD_SLEEP_EN]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PAD_SLEEP_EN_gated_we;
  assign MIO_PAD_SLEEP_EN_gated_we = MIO_PAD_SLEEP_EN_we & MIO_PAD_SLEEP_REGWEN_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_MIO_PAD_SLEEP_EN (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PAD_SLEEP_EN_gated_we),
    .wd     (MIO_PAD_SLEEP_EN_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PAD_SLEEP_EN[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PAD_SLEEP_EN_qs)
  );


  // Subregister 0 of Multireg MIO_PAD_SLEEP_MODE
  // R[MIO_PAD_SLEEP_MODE]: V(False)
  // Create REGWEN-gated WE signal
  logic MIO_PAD_SLEEP_MODE_gated_we;
  assign MIO_PAD_SLEEP_MODE_gated_we = MIO_PAD_SLEEP_MODE_we & MIO_PAD_SLEEP_REGWEN_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_MIO_PAD_SLEEP_MODE (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (MIO_PAD_SLEEP_MODE_gated_we),
    .wd     (MIO_PAD_SLEEP_MODE_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.MIO_PAD_SLEEP_MODE[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (MIO_PAD_SLEEP_MODE_qs)
  );


  // Subregister 0 of Multireg DIO_PAD_SLEEP_STATUS
  // R[DIO_PAD_SLEEP_STATUS]: V(False)
  //   F[EN_0]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_STATUS_EN_0 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_STATUS_we),
    .wd     (DIO_PAD_SLEEP_STATUS_EN_0_wd),

    // from internal hardware
    .de     (hw2reg.DIO_PAD_SLEEP_STATUS[0].de),
    .d      (hw2reg.DIO_PAD_SLEEP_STATUS[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_STATUS[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_STATUS_EN_0_qs)
  );

  //   F[EN_1]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_STATUS_EN_1 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_STATUS_we),
    .wd     (DIO_PAD_SLEEP_STATUS_EN_1_wd),

    // from internal hardware
    .de     (hw2reg.DIO_PAD_SLEEP_STATUS[1].de),
    .d      (hw2reg.DIO_PAD_SLEEP_STATUS[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_STATUS[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_STATUS_EN_1_qs)
  );

  //   F[EN_2]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_STATUS_EN_2 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_STATUS_we),
    .wd     (DIO_PAD_SLEEP_STATUS_EN_2_wd),

    // from internal hardware
    .de     (hw2reg.DIO_PAD_SLEEP_STATUS[2].de),
    .d      (hw2reg.DIO_PAD_SLEEP_STATUS[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_STATUS[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_STATUS_EN_2_qs)
  );

  //   F[EN_3]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_STATUS_EN_3 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_STATUS_we),
    .wd     (DIO_PAD_SLEEP_STATUS_EN_3_wd),

    // from internal hardware
    .de     (hw2reg.DIO_PAD_SLEEP_STATUS[3].de),
    .d      (hw2reg.DIO_PAD_SLEEP_STATUS[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_STATUS[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_STATUS_EN_3_qs)
  );

  //   F[EN_4]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_STATUS_EN_4 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_STATUS_we),
    .wd     (DIO_PAD_SLEEP_STATUS_EN_4_wd),

    // from internal hardware
    .de     (hw2reg.DIO_PAD_SLEEP_STATUS[4].de),
    .d      (hw2reg.DIO_PAD_SLEEP_STATUS[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_STATUS[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_STATUS_EN_4_qs)
  );

  //   F[EN_5]: 5:5


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_STATUS_EN_5 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_STATUS_we),
    .wd     (DIO_PAD_SLEEP_STATUS_EN_5_wd),

    // from internal hardware
    .de     (hw2reg.DIO_PAD_SLEEP_STATUS[5].de),
    .d      (hw2reg.DIO_PAD_SLEEP_STATUS[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_STATUS[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_STATUS_EN_5_qs)
  );

  //   F[EN_6]: 6:6


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_STATUS_EN_6 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_STATUS_we),
    .wd     (DIO_PAD_SLEEP_STATUS_EN_6_wd),

    // from internal hardware
    .de     (hw2reg.DIO_PAD_SLEEP_STATUS[6].de),
    .d      (hw2reg.DIO_PAD_SLEEP_STATUS[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_STATUS[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_STATUS_EN_6_qs)
  );

  //   F[EN_7]: 7:7


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_STATUS_EN_7 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_STATUS_we),
    .wd     (DIO_PAD_SLEEP_STATUS_EN_7_wd),

    // from internal hardware
    .de     (hw2reg.DIO_PAD_SLEEP_STATUS[7].de),
    .d      (hw2reg.DIO_PAD_SLEEP_STATUS[7].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_STATUS[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_STATUS_EN_7_qs)
  );

  //   F[EN_8]: 8:8


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_STATUS_EN_8 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_STATUS_we),
    .wd     (DIO_PAD_SLEEP_STATUS_EN_8_wd),

    // from internal hardware
    .de     (hw2reg.DIO_PAD_SLEEP_STATUS[8].de),
    .d      (hw2reg.DIO_PAD_SLEEP_STATUS[8].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_STATUS[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_STATUS_EN_8_qs)
  );


  // Subregister 0 of Multireg DIO_PAD_SLEEP_REGWEN
  // R[DIO_PAD_SLEEP_REGWEN_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_SLEEP_REGWEN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_REGWEN_0_we),
    .wd     (DIO_PAD_SLEEP_REGWEN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_REGWEN_0_qs)
  );


  // Subregister 1 of Multireg DIO_PAD_SLEEP_REGWEN
  // R[DIO_PAD_SLEEP_REGWEN_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_SLEEP_REGWEN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_REGWEN_1_we),
    .wd     (DIO_PAD_SLEEP_REGWEN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_REGWEN_1_qs)
  );


  // Subregister 2 of Multireg DIO_PAD_SLEEP_REGWEN
  // R[DIO_PAD_SLEEP_REGWEN_2]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_SLEEP_REGWEN_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_REGWEN_2_we),
    .wd     (DIO_PAD_SLEEP_REGWEN_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_REGWEN_2_qs)
  );


  // Subregister 3 of Multireg DIO_PAD_SLEEP_REGWEN
  // R[DIO_PAD_SLEEP_REGWEN_3]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_SLEEP_REGWEN_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_REGWEN_3_we),
    .wd     (DIO_PAD_SLEEP_REGWEN_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_REGWEN_3_qs)
  );


  // Subregister 4 of Multireg DIO_PAD_SLEEP_REGWEN
  // R[DIO_PAD_SLEEP_REGWEN_4]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_SLEEP_REGWEN_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_REGWEN_4_we),
    .wd     (DIO_PAD_SLEEP_REGWEN_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_REGWEN_4_qs)
  );


  // Subregister 5 of Multireg DIO_PAD_SLEEP_REGWEN
  // R[DIO_PAD_SLEEP_REGWEN_5]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_SLEEP_REGWEN_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_REGWEN_5_we),
    .wd     (DIO_PAD_SLEEP_REGWEN_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_REGWEN_5_qs)
  );


  // Subregister 6 of Multireg DIO_PAD_SLEEP_REGWEN
  // R[DIO_PAD_SLEEP_REGWEN_6]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_SLEEP_REGWEN_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_REGWEN_6_we),
    .wd     (DIO_PAD_SLEEP_REGWEN_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_REGWEN_6_qs)
  );


  // Subregister 7 of Multireg DIO_PAD_SLEEP_REGWEN
  // R[DIO_PAD_SLEEP_REGWEN_7]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_SLEEP_REGWEN_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_REGWEN_7_we),
    .wd     (DIO_PAD_SLEEP_REGWEN_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_REGWEN_7_qs)
  );


  // Subregister 8 of Multireg DIO_PAD_SLEEP_REGWEN
  // R[DIO_PAD_SLEEP_REGWEN_8]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DIO_PAD_SLEEP_REGWEN_8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_REGWEN_8_we),
    .wd     (DIO_PAD_SLEEP_REGWEN_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_REGWEN_8_qs)
  );


  // Subregister 0 of Multireg DIO_PAD_SLEEP_EN
  // R[DIO_PAD_SLEEP_EN_0]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_EN_0_gated_we;
  assign DIO_PAD_SLEEP_EN_0_gated_we = DIO_PAD_SLEEP_EN_0_we & DIO_PAD_SLEEP_REGWEN_0_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_EN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_EN_0_gated_we),
    .wd     (DIO_PAD_SLEEP_EN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_EN[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_EN_0_qs)
  );


  // Subregister 1 of Multireg DIO_PAD_SLEEP_EN
  // R[DIO_PAD_SLEEP_EN_1]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_EN_1_gated_we;
  assign DIO_PAD_SLEEP_EN_1_gated_we = DIO_PAD_SLEEP_EN_1_we & DIO_PAD_SLEEP_REGWEN_1_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_EN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_EN_1_gated_we),
    .wd     (DIO_PAD_SLEEP_EN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_EN[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_EN_1_qs)
  );


  // Subregister 2 of Multireg DIO_PAD_SLEEP_EN
  // R[DIO_PAD_SLEEP_EN_2]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_EN_2_gated_we;
  assign DIO_PAD_SLEEP_EN_2_gated_we = DIO_PAD_SLEEP_EN_2_we & DIO_PAD_SLEEP_REGWEN_2_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_EN_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_EN_2_gated_we),
    .wd     (DIO_PAD_SLEEP_EN_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_EN[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_EN_2_qs)
  );


  // Subregister 3 of Multireg DIO_PAD_SLEEP_EN
  // R[DIO_PAD_SLEEP_EN_3]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_EN_3_gated_we;
  assign DIO_PAD_SLEEP_EN_3_gated_we = DIO_PAD_SLEEP_EN_3_we & DIO_PAD_SLEEP_REGWEN_3_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_EN_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_EN_3_gated_we),
    .wd     (DIO_PAD_SLEEP_EN_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_EN[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_EN_3_qs)
  );


  // Subregister 4 of Multireg DIO_PAD_SLEEP_EN
  // R[DIO_PAD_SLEEP_EN_4]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_EN_4_gated_we;
  assign DIO_PAD_SLEEP_EN_4_gated_we = DIO_PAD_SLEEP_EN_4_we & DIO_PAD_SLEEP_REGWEN_4_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_EN_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_EN_4_gated_we),
    .wd     (DIO_PAD_SLEEP_EN_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_EN[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_EN_4_qs)
  );


  // Subregister 5 of Multireg DIO_PAD_SLEEP_EN
  // R[DIO_PAD_SLEEP_EN_5]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_EN_5_gated_we;
  assign DIO_PAD_SLEEP_EN_5_gated_we = DIO_PAD_SLEEP_EN_5_we & DIO_PAD_SLEEP_REGWEN_5_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_EN_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_EN_5_gated_we),
    .wd     (DIO_PAD_SLEEP_EN_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_EN[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_EN_5_qs)
  );


  // Subregister 6 of Multireg DIO_PAD_SLEEP_EN
  // R[DIO_PAD_SLEEP_EN_6]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_EN_6_gated_we;
  assign DIO_PAD_SLEEP_EN_6_gated_we = DIO_PAD_SLEEP_EN_6_we & DIO_PAD_SLEEP_REGWEN_6_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_EN_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_EN_6_gated_we),
    .wd     (DIO_PAD_SLEEP_EN_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_EN[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_EN_6_qs)
  );


  // Subregister 7 of Multireg DIO_PAD_SLEEP_EN
  // R[DIO_PAD_SLEEP_EN_7]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_EN_7_gated_we;
  assign DIO_PAD_SLEEP_EN_7_gated_we = DIO_PAD_SLEEP_EN_7_we & DIO_PAD_SLEEP_REGWEN_7_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_EN_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_EN_7_gated_we),
    .wd     (DIO_PAD_SLEEP_EN_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_EN[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_EN_7_qs)
  );


  // Subregister 8 of Multireg DIO_PAD_SLEEP_EN
  // R[DIO_PAD_SLEEP_EN_8]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_EN_8_gated_we;
  assign DIO_PAD_SLEEP_EN_8_gated_we = DIO_PAD_SLEEP_EN_8_we & DIO_PAD_SLEEP_REGWEN_8_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DIO_PAD_SLEEP_EN_8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_EN_8_gated_we),
    .wd     (DIO_PAD_SLEEP_EN_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_EN[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_EN_8_qs)
  );


  // Subregister 0 of Multireg DIO_PAD_SLEEP_MODE
  // R[DIO_PAD_SLEEP_MODE_0]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_MODE_0_gated_we;
  assign DIO_PAD_SLEEP_MODE_0_gated_we = DIO_PAD_SLEEP_MODE_0_we & DIO_PAD_SLEEP_REGWEN_0_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DIO_PAD_SLEEP_MODE_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_MODE_0_gated_we),
    .wd     (DIO_PAD_SLEEP_MODE_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_MODE[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_MODE_0_qs)
  );


  // Subregister 1 of Multireg DIO_PAD_SLEEP_MODE
  // R[DIO_PAD_SLEEP_MODE_1]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_MODE_1_gated_we;
  assign DIO_PAD_SLEEP_MODE_1_gated_we = DIO_PAD_SLEEP_MODE_1_we & DIO_PAD_SLEEP_REGWEN_1_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DIO_PAD_SLEEP_MODE_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_MODE_1_gated_we),
    .wd     (DIO_PAD_SLEEP_MODE_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_MODE[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_MODE_1_qs)
  );


  // Subregister 2 of Multireg DIO_PAD_SLEEP_MODE
  // R[DIO_PAD_SLEEP_MODE_2]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_MODE_2_gated_we;
  assign DIO_PAD_SLEEP_MODE_2_gated_we = DIO_PAD_SLEEP_MODE_2_we & DIO_PAD_SLEEP_REGWEN_2_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DIO_PAD_SLEEP_MODE_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_MODE_2_gated_we),
    .wd     (DIO_PAD_SLEEP_MODE_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_MODE[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_MODE_2_qs)
  );


  // Subregister 3 of Multireg DIO_PAD_SLEEP_MODE
  // R[DIO_PAD_SLEEP_MODE_3]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_MODE_3_gated_we;
  assign DIO_PAD_SLEEP_MODE_3_gated_we = DIO_PAD_SLEEP_MODE_3_we & DIO_PAD_SLEEP_REGWEN_3_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DIO_PAD_SLEEP_MODE_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_MODE_3_gated_we),
    .wd     (DIO_PAD_SLEEP_MODE_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_MODE[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_MODE_3_qs)
  );


  // Subregister 4 of Multireg DIO_PAD_SLEEP_MODE
  // R[DIO_PAD_SLEEP_MODE_4]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_MODE_4_gated_we;
  assign DIO_PAD_SLEEP_MODE_4_gated_we = DIO_PAD_SLEEP_MODE_4_we & DIO_PAD_SLEEP_REGWEN_4_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DIO_PAD_SLEEP_MODE_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_MODE_4_gated_we),
    .wd     (DIO_PAD_SLEEP_MODE_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_MODE[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_MODE_4_qs)
  );


  // Subregister 5 of Multireg DIO_PAD_SLEEP_MODE
  // R[DIO_PAD_SLEEP_MODE_5]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_MODE_5_gated_we;
  assign DIO_PAD_SLEEP_MODE_5_gated_we = DIO_PAD_SLEEP_MODE_5_we & DIO_PAD_SLEEP_REGWEN_5_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DIO_PAD_SLEEP_MODE_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_MODE_5_gated_we),
    .wd     (DIO_PAD_SLEEP_MODE_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_MODE[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_MODE_5_qs)
  );


  // Subregister 6 of Multireg DIO_PAD_SLEEP_MODE
  // R[DIO_PAD_SLEEP_MODE_6]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_MODE_6_gated_we;
  assign DIO_PAD_SLEEP_MODE_6_gated_we = DIO_PAD_SLEEP_MODE_6_we & DIO_PAD_SLEEP_REGWEN_6_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DIO_PAD_SLEEP_MODE_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_MODE_6_gated_we),
    .wd     (DIO_PAD_SLEEP_MODE_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_MODE[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_MODE_6_qs)
  );


  // Subregister 7 of Multireg DIO_PAD_SLEEP_MODE
  // R[DIO_PAD_SLEEP_MODE_7]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_MODE_7_gated_we;
  assign DIO_PAD_SLEEP_MODE_7_gated_we = DIO_PAD_SLEEP_MODE_7_we & DIO_PAD_SLEEP_REGWEN_7_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DIO_PAD_SLEEP_MODE_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_MODE_7_gated_we),
    .wd     (DIO_PAD_SLEEP_MODE_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_MODE[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_MODE_7_qs)
  );


  // Subregister 8 of Multireg DIO_PAD_SLEEP_MODE
  // R[DIO_PAD_SLEEP_MODE_8]: V(False)
  // Create REGWEN-gated WE signal
  logic DIO_PAD_SLEEP_MODE_8_gated_we;
  assign DIO_PAD_SLEEP_MODE_8_gated_we = DIO_PAD_SLEEP_MODE_8_we & DIO_PAD_SLEEP_REGWEN_8_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DIO_PAD_SLEEP_MODE_8 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DIO_PAD_SLEEP_MODE_8_gated_we),
    .wd     (DIO_PAD_SLEEP_MODE_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DIO_PAD_SLEEP_MODE[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (DIO_PAD_SLEEP_MODE_8_qs)
  );


  // Subregister 0 of Multireg DI3C_PAD_SLEEP_STATUS
  // R[DI3C_PAD_SLEEP_STATUS]: V(False)
  //   F[EN_0]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DI3C_PAD_SLEEP_STATUS_EN_0 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_SLEEP_STATUS_we),
    .wd     (DI3C_PAD_SLEEP_STATUS_EN_0_wd),

    // from internal hardware
    .de     (hw2reg.DI3C_PAD_SLEEP_STATUS[0].de),
    .d      (hw2reg.DI3C_PAD_SLEEP_STATUS[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DI3C_PAD_SLEEP_STATUS[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_SLEEP_STATUS_EN_0_qs)
  );

  //   F[EN_1]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_DI3C_PAD_SLEEP_STATUS_EN_1 (
    .clk_i   (hwUpdClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_SLEEP_STATUS_we),
    .wd     (DI3C_PAD_SLEEP_STATUS_EN_1_wd),

    // from internal hardware
    .de     (hw2reg.DI3C_PAD_SLEEP_STATUS[1].de),
    .d      (hw2reg.DI3C_PAD_SLEEP_STATUS[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DI3C_PAD_SLEEP_STATUS[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_SLEEP_STATUS_EN_1_qs)
  );


  // Subregister 0 of Multireg DI3C_PAD_SLEEP_REGWEN
  // R[DI3C_PAD_SLEEP_REGWEN_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DI3C_PAD_SLEEP_REGWEN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_SLEEP_REGWEN_0_we),
    .wd     (DI3C_PAD_SLEEP_REGWEN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_SLEEP_REGWEN_0_qs)
  );


  // Subregister 1 of Multireg DI3C_PAD_SLEEP_REGWEN
  // R[DI3C_PAD_SLEEP_REGWEN_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_DI3C_PAD_SLEEP_REGWEN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_SLEEP_REGWEN_1_we),
    .wd     (DI3C_PAD_SLEEP_REGWEN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_SLEEP_REGWEN_1_qs)
  );


  // Subregister 0 of Multireg DI3C_PAD_SLEEP_EN
  // R[DI3C_PAD_SLEEP_EN_0]: V(False)
  // Create REGWEN-gated WE signal
  logic DI3C_PAD_SLEEP_EN_0_gated_we;
  assign DI3C_PAD_SLEEP_EN_0_gated_we = DI3C_PAD_SLEEP_EN_0_we & DI3C_PAD_SLEEP_REGWEN_0_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DI3C_PAD_SLEEP_EN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_SLEEP_EN_0_gated_we),
    .wd     (DI3C_PAD_SLEEP_EN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DI3C_PAD_SLEEP_EN[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_SLEEP_EN_0_qs)
  );


  // Subregister 1 of Multireg DI3C_PAD_SLEEP_EN
  // R[DI3C_PAD_SLEEP_EN_1]: V(False)
  // Create REGWEN-gated WE signal
  logic DI3C_PAD_SLEEP_EN_1_gated_we;
  assign DI3C_PAD_SLEEP_EN_1_gated_we = DI3C_PAD_SLEEP_EN_1_we & DI3C_PAD_SLEEP_REGWEN_1_qs;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_DI3C_PAD_SLEEP_EN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_SLEEP_EN_1_gated_we),
    .wd     (DI3C_PAD_SLEEP_EN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DI3C_PAD_SLEEP_EN[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_SLEEP_EN_1_qs)
  );


  // Subregister 0 of Multireg DI3C_PAD_SLEEP_MODE
  // R[DI3C_PAD_SLEEP_MODE_0]: V(False)
  // Create REGWEN-gated WE signal
  logic DI3C_PAD_SLEEP_MODE_0_gated_we;
  assign DI3C_PAD_SLEEP_MODE_0_gated_we = DI3C_PAD_SLEEP_MODE_0_we & DI3C_PAD_SLEEP_REGWEN_0_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DI3C_PAD_SLEEP_MODE_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_SLEEP_MODE_0_gated_we),
    .wd     (DI3C_PAD_SLEEP_MODE_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DI3C_PAD_SLEEP_MODE[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_SLEEP_MODE_0_qs)
  );


  // Subregister 1 of Multireg DI3C_PAD_SLEEP_MODE
  // R[DI3C_PAD_SLEEP_MODE_1]: V(False)
  // Create REGWEN-gated WE signal
  logic DI3C_PAD_SLEEP_MODE_1_gated_we;
  assign DI3C_PAD_SLEEP_MODE_1_gated_we = DI3C_PAD_SLEEP_MODE_1_we & DI3C_PAD_SLEEP_REGWEN_1_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_DI3C_PAD_SLEEP_MODE_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (DI3C_PAD_SLEEP_MODE_1_gated_we),
    .wd     (DI3C_PAD_SLEEP_MODE_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.DI3C_PAD_SLEEP_MODE[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (DI3C_PAD_SLEEP_MODE_1_qs)
  );


  // Subregister 0 of Multireg WKUP_DETECTOR_REGWEN
  // R[WKUP_DETECTOR_REGWEN_0]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_WKUP_DETECTOR_REGWEN_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_REGWEN_0_we),
    .wd     (WKUP_DETECTOR_REGWEN_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_REGWEN_0_qs)
  );


  // Subregister 1 of Multireg WKUP_DETECTOR_REGWEN
  // R[WKUP_DETECTOR_REGWEN_1]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_WKUP_DETECTOR_REGWEN_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_REGWEN_1_we),
    .wd     (WKUP_DETECTOR_REGWEN_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_REGWEN_1_qs)
  );


  // Subregister 2 of Multireg WKUP_DETECTOR_REGWEN
  // R[WKUP_DETECTOR_REGWEN_2]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_WKUP_DETECTOR_REGWEN_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_REGWEN_2_we),
    .wd     (WKUP_DETECTOR_REGWEN_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_REGWEN_2_qs)
  );


  // Subregister 3 of Multireg WKUP_DETECTOR_REGWEN
  // R[WKUP_DETECTOR_REGWEN_3]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_WKUP_DETECTOR_REGWEN_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_REGWEN_3_we),
    .wd     (WKUP_DETECTOR_REGWEN_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_REGWEN_3_qs)
  );


  // Subregister 4 of Multireg WKUP_DETECTOR_REGWEN
  // R[WKUP_DETECTOR_REGWEN_4]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_WKUP_DETECTOR_REGWEN_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_REGWEN_4_we),
    .wd     (WKUP_DETECTOR_REGWEN_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_REGWEN_4_qs)
  );


  // Subregister 5 of Multireg WKUP_DETECTOR_REGWEN
  // R[WKUP_DETECTOR_REGWEN_5]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_WKUP_DETECTOR_REGWEN_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_REGWEN_5_we),
    .wd     (WKUP_DETECTOR_REGWEN_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_REGWEN_5_qs)
  );


  // Subregister 6 of Multireg WKUP_DETECTOR_REGWEN
  // R[WKUP_DETECTOR_REGWEN_6]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_WKUP_DETECTOR_REGWEN_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_REGWEN_6_we),
    .wd     (WKUP_DETECTOR_REGWEN_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_REGWEN_6_qs)
  );


  // Subregister 7 of Multireg WKUP_DETECTOR_REGWEN
  // R[WKUP_DETECTOR_REGWEN_7]: V(False)


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_WKUP_DETECTOR_REGWEN_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_REGWEN_7_we),
    .wd     (WKUP_DETECTOR_REGWEN_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_REGWEN_7_qs)
  );


  // Subregister 0 of Multireg WKUP_DETECTOR_EN
  // R[WKUP_DETECTOR_EN_0]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_EN_0_gated_we;
  assign aon_WKUP_DETECTOR_EN_0_gated_we =
    aon_WKUP_DETECTOR_EN_0_we & aon_WKUP_DETECTOR_EN_0_regwen;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_EN_0 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_EN_0_gated_we),
    .wd     (aon_WKUP_DETECTOR_EN_0_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_EN[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_EN_0_qs_int)
  );


  // Subregister 1 of Multireg WKUP_DETECTOR_EN
  // R[WKUP_DETECTOR_EN_1]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_EN_1_gated_we;
  assign aon_WKUP_DETECTOR_EN_1_gated_we =
    aon_WKUP_DETECTOR_EN_1_we & aon_WKUP_DETECTOR_EN_1_regwen;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_EN_1 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_EN_1_gated_we),
    .wd     (aon_WKUP_DETECTOR_EN_1_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_EN[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_EN_1_qs_int)
  );


  // Subregister 2 of Multireg WKUP_DETECTOR_EN
  // R[WKUP_DETECTOR_EN_2]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_EN_2_gated_we;
  assign aon_WKUP_DETECTOR_EN_2_gated_we =
    aon_WKUP_DETECTOR_EN_2_we & aon_WKUP_DETECTOR_EN_2_regwen;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_EN_2 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_EN_2_gated_we),
    .wd     (aon_WKUP_DETECTOR_EN_2_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_EN[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_EN_2_qs_int)
  );


  // Subregister 3 of Multireg WKUP_DETECTOR_EN
  // R[WKUP_DETECTOR_EN_3]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_EN_3_gated_we;
  assign aon_WKUP_DETECTOR_EN_3_gated_we =
    aon_WKUP_DETECTOR_EN_3_we & aon_WKUP_DETECTOR_EN_3_regwen;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_EN_3 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_EN_3_gated_we),
    .wd     (aon_WKUP_DETECTOR_EN_3_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_EN[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_EN_3_qs_int)
  );


  // Subregister 4 of Multireg WKUP_DETECTOR_EN
  // R[WKUP_DETECTOR_EN_4]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_EN_4_gated_we;
  assign aon_WKUP_DETECTOR_EN_4_gated_we =
    aon_WKUP_DETECTOR_EN_4_we & aon_WKUP_DETECTOR_EN_4_regwen;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_EN_4 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_EN_4_gated_we),
    .wd     (aon_WKUP_DETECTOR_EN_4_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_EN[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_EN_4_qs_int)
  );


  // Subregister 5 of Multireg WKUP_DETECTOR_EN
  // R[WKUP_DETECTOR_EN_5]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_EN_5_gated_we;
  assign aon_WKUP_DETECTOR_EN_5_gated_we =
    aon_WKUP_DETECTOR_EN_5_we & aon_WKUP_DETECTOR_EN_5_regwen;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_EN_5 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_EN_5_gated_we),
    .wd     (aon_WKUP_DETECTOR_EN_5_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_EN[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_EN_5_qs_int)
  );


  // Subregister 6 of Multireg WKUP_DETECTOR_EN
  // R[WKUP_DETECTOR_EN_6]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_EN_6_gated_we;
  assign aon_WKUP_DETECTOR_EN_6_gated_we =
    aon_WKUP_DETECTOR_EN_6_we & aon_WKUP_DETECTOR_EN_6_regwen;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_EN_6 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_EN_6_gated_we),
    .wd     (aon_WKUP_DETECTOR_EN_6_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_EN[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_EN_6_qs_int)
  );


  // Subregister 7 of Multireg WKUP_DETECTOR_EN
  // R[WKUP_DETECTOR_EN_7]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_EN_7_gated_we;
  assign aon_WKUP_DETECTOR_EN_7_gated_we =
    aon_WKUP_DETECTOR_EN_7_we & aon_WKUP_DETECTOR_EN_7_regwen;


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_EN_7 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_EN_7_gated_we),
    .wd     (aon_WKUP_DETECTOR_EN_7_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_EN[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_EN_7_qs_int)
  );


  // Subregister 0 of Multireg WKUP_DETECTOR
  // R[WKUP_DETECTOR_0]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_0_gated_we;
  assign aon_WKUP_DETECTOR_0_gated_we = aon_WKUP_DETECTOR_0_we & aon_WKUP_DETECTOR_0_regwen;
  //   F[MODE_0]: 2:0


  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_WKUP_DETECTOR_0_MODE_0 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_0_gated_we),
    .wd     (aon_WKUP_DETECTOR_0_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[0].MODE.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_0_MODE_0_qs_int)
  );

  //   F[FILTER_0]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_0_FILTER_0 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_0_gated_we),
    .wd     (aon_WKUP_DETECTOR_0_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[0].FILTER.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_0_FILTER_0_qs_int)
  );

  //   F[MIODIO_0]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_0_MIODIO_0 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_0_gated_we),
    .wd     (aon_WKUP_DETECTOR_0_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[0].MIODIO.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_0_MIODIO_0_qs_int)
  );


  // Subregister 1 of Multireg WKUP_DETECTOR
  // R[WKUP_DETECTOR_1]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_1_gated_we;
  assign aon_WKUP_DETECTOR_1_gated_we = aon_WKUP_DETECTOR_1_we & aon_WKUP_DETECTOR_1_regwen;
  //   F[MODE_1]: 2:0


  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_WKUP_DETECTOR_1_MODE_1 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_1_gated_we),
    .wd     (aon_WKUP_DETECTOR_1_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[1].MODE.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_1_MODE_1_qs_int)
  );

  //   F[FILTER_1]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_1_FILTER_1 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_1_gated_we),
    .wd     (aon_WKUP_DETECTOR_1_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[1].FILTER.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_1_FILTER_1_qs_int)
  );

  //   F[MIODIO_1]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_1_MIODIO_1 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_1_gated_we),
    .wd     (aon_WKUP_DETECTOR_1_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[1].MIODIO.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_1_MIODIO_1_qs_int)
  );


  // Subregister 2 of Multireg WKUP_DETECTOR
  // R[WKUP_DETECTOR_2]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_2_gated_we;
  assign aon_WKUP_DETECTOR_2_gated_we = aon_WKUP_DETECTOR_2_we & aon_WKUP_DETECTOR_2_regwen;
  //   F[MODE_2]: 2:0


  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_WKUP_DETECTOR_2_MODE_2 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_2_gated_we),
    .wd     (aon_WKUP_DETECTOR_2_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[2].MODE.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_2_MODE_2_qs_int)
  );

  //   F[FILTER_2]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_2_FILTER_2 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_2_gated_we),
    .wd     (aon_WKUP_DETECTOR_2_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[2].FILTER.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_2_FILTER_2_qs_int)
  );

  //   F[MIODIO_2]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_2_MIODIO_2 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_2_gated_we),
    .wd     (aon_WKUP_DETECTOR_2_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[2].MIODIO.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_2_MIODIO_2_qs_int)
  );


  // Subregister 3 of Multireg WKUP_DETECTOR
  // R[WKUP_DETECTOR_3]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_3_gated_we;
  assign aon_WKUP_DETECTOR_3_gated_we = aon_WKUP_DETECTOR_3_we & aon_WKUP_DETECTOR_3_regwen;
  //   F[MODE_3]: 2:0


  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_WKUP_DETECTOR_3_MODE_3 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_3_gated_we),
    .wd     (aon_WKUP_DETECTOR_3_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[3].MODE.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_3_MODE_3_qs_int)
  );

  //   F[FILTER_3]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_3_FILTER_3 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_3_gated_we),
    .wd     (aon_WKUP_DETECTOR_3_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[3].FILTER.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_3_FILTER_3_qs_int)
  );

  //   F[MIODIO_3]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_3_MIODIO_3 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_3_gated_we),
    .wd     (aon_WKUP_DETECTOR_3_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[3].MIODIO.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_3_MIODIO_3_qs_int)
  );


  // Subregister 4 of Multireg WKUP_DETECTOR
  // R[WKUP_DETECTOR_4]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_4_gated_we;
  assign aon_WKUP_DETECTOR_4_gated_we = aon_WKUP_DETECTOR_4_we & aon_WKUP_DETECTOR_4_regwen;
  //   F[MODE_4]: 2:0


  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_WKUP_DETECTOR_4_MODE_4 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_4_gated_we),
    .wd     (aon_WKUP_DETECTOR_4_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[4].MODE.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_4_MODE_4_qs_int)
  );

  //   F[FILTER_4]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_4_FILTER_4 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_4_gated_we),
    .wd     (aon_WKUP_DETECTOR_4_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[4].FILTER.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_4_FILTER_4_qs_int)
  );

  //   F[MIODIO_4]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_4_MIODIO_4 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_4_gated_we),
    .wd     (aon_WKUP_DETECTOR_4_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[4].MIODIO.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_4_MIODIO_4_qs_int)
  );


  // Subregister 5 of Multireg WKUP_DETECTOR
  // R[WKUP_DETECTOR_5]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_5_gated_we;
  assign aon_WKUP_DETECTOR_5_gated_we = aon_WKUP_DETECTOR_5_we & aon_WKUP_DETECTOR_5_regwen;
  //   F[MODE_5]: 2:0


  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_WKUP_DETECTOR_5_MODE_5 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_5_gated_we),
    .wd     (aon_WKUP_DETECTOR_5_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[5].MODE.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_5_MODE_5_qs_int)
  );

  //   F[FILTER_5]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_5_FILTER_5 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_5_gated_we),
    .wd     (aon_WKUP_DETECTOR_5_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[5].FILTER.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_5_FILTER_5_qs_int)
  );

  //   F[MIODIO_5]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_5_MIODIO_5 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_5_gated_we),
    .wd     (aon_WKUP_DETECTOR_5_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[5].MIODIO.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_5_MIODIO_5_qs_int)
  );


  // Subregister 6 of Multireg WKUP_DETECTOR
  // R[WKUP_DETECTOR_6]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_6_gated_we;
  assign aon_WKUP_DETECTOR_6_gated_we = aon_WKUP_DETECTOR_6_we & aon_WKUP_DETECTOR_6_regwen;
  //   F[MODE_6]: 2:0


  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_WKUP_DETECTOR_6_MODE_6 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_6_gated_we),
    .wd     (aon_WKUP_DETECTOR_6_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[6].MODE.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_6_MODE_6_qs_int)
  );

  //   F[FILTER_6]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_6_FILTER_6 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_6_gated_we),
    .wd     (aon_WKUP_DETECTOR_6_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[6].FILTER.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_6_FILTER_6_qs_int)
  );

  //   F[MIODIO_6]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_6_MIODIO_6 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_6_gated_we),
    .wd     (aon_WKUP_DETECTOR_6_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[6].MIODIO.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_6_MIODIO_6_qs_int)
  );


  // Subregister 7 of Multireg WKUP_DETECTOR
  // R[WKUP_DETECTOR_7]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_7_gated_we;
  assign aon_WKUP_DETECTOR_7_gated_we = aon_WKUP_DETECTOR_7_we & aon_WKUP_DETECTOR_7_regwen;
  //   F[MODE_7]: 2:0


  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_WKUP_DETECTOR_7_MODE_7 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_7_gated_we),
    .wd     (aon_WKUP_DETECTOR_7_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[7].MODE.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_7_MODE_7_qs_int)
  );

  //   F[FILTER_7]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_7_FILTER_7 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_7_gated_we),
    .wd     (aon_WKUP_DETECTOR_7_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[7].FILTER.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_7_FILTER_7_qs_int)
  );

  //   F[MIODIO_7]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_WKUP_DETECTOR_7_MIODIO_7 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_7_gated_we),
    .wd     (aon_WKUP_DETECTOR_7_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR[7].MIODIO.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_7_MIODIO_7_qs_int)
  );


  // Subregister 0 of Multireg WKUP_DETECTOR_CNT_TH
  // R[WKUP_DETECTOR_CNT_TH_0]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_CNT_TH_0_gated_we;
  assign aon_WKUP_DETECTOR_CNT_TH_0_gated_we =
    aon_WKUP_DETECTOR_CNT_TH_0_we & aon_WKUP_DETECTOR_CNT_TH_0_regwen;


  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_WKUP_DETECTOR_CNT_TH_0 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_CNT_TH_0_gated_we),
    .wd     (aon_WKUP_DETECTOR_CNT_TH_0_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_CNT_TH[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_CNT_TH_0_qs_int)
  );


  // Subregister 1 of Multireg WKUP_DETECTOR_CNT_TH
  // R[WKUP_DETECTOR_CNT_TH_1]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_CNT_TH_1_gated_we;
  assign aon_WKUP_DETECTOR_CNT_TH_1_gated_we =
    aon_WKUP_DETECTOR_CNT_TH_1_we & aon_WKUP_DETECTOR_CNT_TH_1_regwen;


  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_WKUP_DETECTOR_CNT_TH_1 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_CNT_TH_1_gated_we),
    .wd     (aon_WKUP_DETECTOR_CNT_TH_1_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_CNT_TH[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_CNT_TH_1_qs_int)
  );


  // Subregister 2 of Multireg WKUP_DETECTOR_CNT_TH
  // R[WKUP_DETECTOR_CNT_TH_2]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_CNT_TH_2_gated_we;
  assign aon_WKUP_DETECTOR_CNT_TH_2_gated_we =
    aon_WKUP_DETECTOR_CNT_TH_2_we & aon_WKUP_DETECTOR_CNT_TH_2_regwen;


  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_WKUP_DETECTOR_CNT_TH_2 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_CNT_TH_2_gated_we),
    .wd     (aon_WKUP_DETECTOR_CNT_TH_2_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_CNT_TH[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_CNT_TH_2_qs_int)
  );


  // Subregister 3 of Multireg WKUP_DETECTOR_CNT_TH
  // R[WKUP_DETECTOR_CNT_TH_3]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_CNT_TH_3_gated_we;
  assign aon_WKUP_DETECTOR_CNT_TH_3_gated_we =
    aon_WKUP_DETECTOR_CNT_TH_3_we & aon_WKUP_DETECTOR_CNT_TH_3_regwen;


  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_WKUP_DETECTOR_CNT_TH_3 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_CNT_TH_3_gated_we),
    .wd     (aon_WKUP_DETECTOR_CNT_TH_3_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_CNT_TH[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_CNT_TH_3_qs_int)
  );


  // Subregister 4 of Multireg WKUP_DETECTOR_CNT_TH
  // R[WKUP_DETECTOR_CNT_TH_4]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_CNT_TH_4_gated_we;
  assign aon_WKUP_DETECTOR_CNT_TH_4_gated_we =
    aon_WKUP_DETECTOR_CNT_TH_4_we & aon_WKUP_DETECTOR_CNT_TH_4_regwen;


  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_WKUP_DETECTOR_CNT_TH_4 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_CNT_TH_4_gated_we),
    .wd     (aon_WKUP_DETECTOR_CNT_TH_4_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_CNT_TH[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_CNT_TH_4_qs_int)
  );


  // Subregister 5 of Multireg WKUP_DETECTOR_CNT_TH
  // R[WKUP_DETECTOR_CNT_TH_5]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_CNT_TH_5_gated_we;
  assign aon_WKUP_DETECTOR_CNT_TH_5_gated_we =
    aon_WKUP_DETECTOR_CNT_TH_5_we & aon_WKUP_DETECTOR_CNT_TH_5_regwen;


  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_WKUP_DETECTOR_CNT_TH_5 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_CNT_TH_5_gated_we),
    .wd     (aon_WKUP_DETECTOR_CNT_TH_5_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_CNT_TH[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_CNT_TH_5_qs_int)
  );


  // Subregister 6 of Multireg WKUP_DETECTOR_CNT_TH
  // R[WKUP_DETECTOR_CNT_TH_6]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_CNT_TH_6_gated_we;
  assign aon_WKUP_DETECTOR_CNT_TH_6_gated_we =
    aon_WKUP_DETECTOR_CNT_TH_6_we & aon_WKUP_DETECTOR_CNT_TH_6_regwen;


  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_WKUP_DETECTOR_CNT_TH_6 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_CNT_TH_6_gated_we),
    .wd     (aon_WKUP_DETECTOR_CNT_TH_6_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_CNT_TH[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_CNT_TH_6_qs_int)
  );


  // Subregister 7 of Multireg WKUP_DETECTOR_CNT_TH
  // R[WKUP_DETECTOR_CNT_TH_7]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_WKUP_DETECTOR_CNT_TH_7_gated_we;
  assign aon_WKUP_DETECTOR_CNT_TH_7_gated_we =
    aon_WKUP_DETECTOR_CNT_TH_7_we & aon_WKUP_DETECTOR_CNT_TH_7_regwen;


  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_WKUP_DETECTOR_CNT_TH_7 (
    .clk_i   (swWenClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_DETECTOR_CNT_TH_7_gated_we),
    .wd     (aon_WKUP_DETECTOR_CNT_TH_7_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_CNT_TH[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_WKUP_DETECTOR_CNT_TH_7_qs_int)
  );


  // Subregister 0 of Multireg WKUP_DETECTOR_PADSEL
  // R[WKUP_DETECTOR_PADSEL_0]: V(False)
  // Create REGWEN-gated WE signal
  logic WKUP_DETECTOR_PADSEL_0_gated_we;
  assign WKUP_DETECTOR_PADSEL_0_gated_we = WKUP_DETECTOR_PADSEL_0_we & WKUP_DETECTOR_REGWEN_0_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_WKUP_DETECTOR_PADSEL_0 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_PADSEL_0_gated_we),
    .wd     (WKUP_DETECTOR_PADSEL_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_PADSEL[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_PADSEL_0_qs)
  );


  // Subregister 1 of Multireg WKUP_DETECTOR_PADSEL
  // R[WKUP_DETECTOR_PADSEL_1]: V(False)
  // Create REGWEN-gated WE signal
  logic WKUP_DETECTOR_PADSEL_1_gated_we;
  assign WKUP_DETECTOR_PADSEL_1_gated_we = WKUP_DETECTOR_PADSEL_1_we & WKUP_DETECTOR_REGWEN_1_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_WKUP_DETECTOR_PADSEL_1 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_PADSEL_1_gated_we),
    .wd     (WKUP_DETECTOR_PADSEL_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_PADSEL[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_PADSEL_1_qs)
  );


  // Subregister 2 of Multireg WKUP_DETECTOR_PADSEL
  // R[WKUP_DETECTOR_PADSEL_2]: V(False)
  // Create REGWEN-gated WE signal
  logic WKUP_DETECTOR_PADSEL_2_gated_we;
  assign WKUP_DETECTOR_PADSEL_2_gated_we = WKUP_DETECTOR_PADSEL_2_we & WKUP_DETECTOR_REGWEN_2_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_WKUP_DETECTOR_PADSEL_2 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_PADSEL_2_gated_we),
    .wd     (WKUP_DETECTOR_PADSEL_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_PADSEL[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_PADSEL_2_qs)
  );


  // Subregister 3 of Multireg WKUP_DETECTOR_PADSEL
  // R[WKUP_DETECTOR_PADSEL_3]: V(False)
  // Create REGWEN-gated WE signal
  logic WKUP_DETECTOR_PADSEL_3_gated_we;
  assign WKUP_DETECTOR_PADSEL_3_gated_we = WKUP_DETECTOR_PADSEL_3_we & WKUP_DETECTOR_REGWEN_3_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_WKUP_DETECTOR_PADSEL_3 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_PADSEL_3_gated_we),
    .wd     (WKUP_DETECTOR_PADSEL_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_PADSEL[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_PADSEL_3_qs)
  );


  // Subregister 4 of Multireg WKUP_DETECTOR_PADSEL
  // R[WKUP_DETECTOR_PADSEL_4]: V(False)
  // Create REGWEN-gated WE signal
  logic WKUP_DETECTOR_PADSEL_4_gated_we;
  assign WKUP_DETECTOR_PADSEL_4_gated_we = WKUP_DETECTOR_PADSEL_4_we & WKUP_DETECTOR_REGWEN_4_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_WKUP_DETECTOR_PADSEL_4 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_PADSEL_4_gated_we),
    .wd     (WKUP_DETECTOR_PADSEL_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_PADSEL[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_PADSEL_4_qs)
  );


  // Subregister 5 of Multireg WKUP_DETECTOR_PADSEL
  // R[WKUP_DETECTOR_PADSEL_5]: V(False)
  // Create REGWEN-gated WE signal
  logic WKUP_DETECTOR_PADSEL_5_gated_we;
  assign WKUP_DETECTOR_PADSEL_5_gated_we = WKUP_DETECTOR_PADSEL_5_we & WKUP_DETECTOR_REGWEN_5_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_WKUP_DETECTOR_PADSEL_5 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_PADSEL_5_gated_we),
    .wd     (WKUP_DETECTOR_PADSEL_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_PADSEL[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_PADSEL_5_qs)
  );


  // Subregister 6 of Multireg WKUP_DETECTOR_PADSEL
  // R[WKUP_DETECTOR_PADSEL_6]: V(False)
  // Create REGWEN-gated WE signal
  logic WKUP_DETECTOR_PADSEL_6_gated_we;
  assign WKUP_DETECTOR_PADSEL_6_gated_we = WKUP_DETECTOR_PADSEL_6_we & WKUP_DETECTOR_REGWEN_6_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_WKUP_DETECTOR_PADSEL_6 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_PADSEL_6_gated_we),
    .wd     (WKUP_DETECTOR_PADSEL_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_PADSEL[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_PADSEL_6_qs)
  );


  // Subregister 7 of Multireg WKUP_DETECTOR_PADSEL
  // R[WKUP_DETECTOR_PADSEL_7]: V(False)
  // Create REGWEN-gated WE signal
  logic WKUP_DETECTOR_PADSEL_7_gated_we;
  assign WKUP_DETECTOR_PADSEL_7_gated_we = WKUP_DETECTOR_PADSEL_7_we & WKUP_DETECTOR_REGWEN_7_qs;


  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_WKUP_DETECTOR_PADSEL_7 (
    .clk_i   (swWenClk), // OT: clk_i
    .rst_ni  (rst_ni), // OT: rst_ni

    // from register interface
    .we     (WKUP_DETECTOR_PADSEL_7_gated_we),
    .wd     (WKUP_DETECTOR_PADSEL_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.WKUP_DETECTOR_PADSEL[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (WKUP_DETECTOR_PADSEL_7_qs)
  );


  // Subregister 0 of Multireg WKUP_CAUSE
  // R[WKUP_CAUSE]: V(False)
  logic [7:0] WKUP_CAUSE_flds_we;
  assign aon_WKUP_CAUSE_qe = |WKUP_CAUSE_flds_we;
  //   F[CAUSE_0]: 0:0


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_WKUP_CAUSE_CAUSE_0 (
    .clk_i   (hwUpdClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_CAUSE_we),
    .wd     (aon_WKUP_CAUSE_wdata[0]),

    // from internal hardware
    .de     (hw2reg.WKUP_CAUSE[0].de),
    .d      (hw2reg.WKUP_CAUSE[0].d),

    // to internal hardware
    .qe     (WKUP_CAUSE_flds_we[0]),
    .q      (reg2hw.WKUP_CAUSE[0].q),
    .ds     (aon_WKUP_CAUSE_CAUSE_0_ds_int),

    // to register interface (read)
    .qs     (aon_WKUP_CAUSE_CAUSE_0_qs_int)
  );

  //   F[CAUSE_1]: 1:1


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_WKUP_CAUSE_CAUSE_1 (
    .clk_i   (hwUpdClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_CAUSE_we),
    .wd     (aon_WKUP_CAUSE_wdata[1]),

    // from internal hardware
    .de     (hw2reg.WKUP_CAUSE[1].de),
    .d      (hw2reg.WKUP_CAUSE[1].d),

    // to internal hardware
    .qe     (WKUP_CAUSE_flds_we[1]),
    .q      (reg2hw.WKUP_CAUSE[1].q),
    .ds     (aon_WKUP_CAUSE_CAUSE_1_ds_int),

    // to register interface (read)
    .qs     (aon_WKUP_CAUSE_CAUSE_1_qs_int)
  );

  //   F[CAUSE_2]: 2:2


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_WKUP_CAUSE_CAUSE_2 (
    .clk_i   (hwUpdClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_CAUSE_we),
    .wd     (aon_WKUP_CAUSE_wdata[2]),

    // from internal hardware
    .de     (hw2reg.WKUP_CAUSE[2].de),
    .d      (hw2reg.WKUP_CAUSE[2].d),

    // to internal hardware
    .qe     (WKUP_CAUSE_flds_we[2]),
    .q      (reg2hw.WKUP_CAUSE[2].q),
    .ds     (aon_WKUP_CAUSE_CAUSE_2_ds_int),

    // to register interface (read)
    .qs     (aon_WKUP_CAUSE_CAUSE_2_qs_int)
  );

  //   F[CAUSE_3]: 3:3


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_WKUP_CAUSE_CAUSE_3 (
    .clk_i   (hwUpdClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_CAUSE_we),
    .wd     (aon_WKUP_CAUSE_wdata[3]),

    // from internal hardware
    .de     (hw2reg.WKUP_CAUSE[3].de),
    .d      (hw2reg.WKUP_CAUSE[3].d),

    // to internal hardware
    .qe     (WKUP_CAUSE_flds_we[3]),
    .q      (reg2hw.WKUP_CAUSE[3].q),
    .ds     (aon_WKUP_CAUSE_CAUSE_3_ds_int),

    // to register interface (read)
    .qs     (aon_WKUP_CAUSE_CAUSE_3_qs_int)
  );

  //   F[CAUSE_4]: 4:4


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_WKUP_CAUSE_CAUSE_4 (
    .clk_i   (hwUpdClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_CAUSE_we),
    .wd     (aon_WKUP_CAUSE_wdata[4]),

    // from internal hardware
    .de     (hw2reg.WKUP_CAUSE[4].de),
    .d      (hw2reg.WKUP_CAUSE[4].d),

    // to internal hardware
    .qe     (WKUP_CAUSE_flds_we[4]),
    .q      (reg2hw.WKUP_CAUSE[4].q),
    .ds     (aon_WKUP_CAUSE_CAUSE_4_ds_int),

    // to register interface (read)
    .qs     (aon_WKUP_CAUSE_CAUSE_4_qs_int)
  );

  //   F[CAUSE_5]: 5:5


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_WKUP_CAUSE_CAUSE_5 (
    .clk_i   (hwUpdClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_CAUSE_we),
    .wd     (aon_WKUP_CAUSE_wdata[5]),

    // from internal hardware
    .de     (hw2reg.WKUP_CAUSE[5].de),
    .d      (hw2reg.WKUP_CAUSE[5].d),

    // to internal hardware
    .qe     (WKUP_CAUSE_flds_we[5]),
    .q      (reg2hw.WKUP_CAUSE[5].q),
    .ds     (aon_WKUP_CAUSE_CAUSE_5_ds_int),

    // to register interface (read)
    .qs     (aon_WKUP_CAUSE_CAUSE_5_qs_int)
  );

  //   F[CAUSE_6]: 6:6


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_WKUP_CAUSE_CAUSE_6 (
    .clk_i   (hwUpdClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_CAUSE_we),
    .wd     (aon_WKUP_CAUSE_wdata[6]),

    // from internal hardware
    .de     (hw2reg.WKUP_CAUSE[6].de),
    .d      (hw2reg.WKUP_CAUSE[6].d),

    // to internal hardware
    .qe     (WKUP_CAUSE_flds_we[6]),
    .q      (reg2hw.WKUP_CAUSE[6].q),
    .ds     (aon_WKUP_CAUSE_CAUSE_6_ds_int),

    // to register interface (read)
    .qs     (aon_WKUP_CAUSE_CAUSE_6_qs_int)
  );

  //   F[CAUSE_7]: 7:7


  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_WKUP_CAUSE_CAUSE_7 (
    .clk_i   (hwUpdClk), // OT: clk_aon_i
    .rst_ni  (rst_aon_ni), // OT: rst_aon_ni

    // from register interface
    .we     (aon_WKUP_CAUSE_we),
    .wd     (aon_WKUP_CAUSE_wdata[7]),

    // from internal hardware
    .de     (hw2reg.WKUP_CAUSE[7].de),
    .d      (hw2reg.WKUP_CAUSE[7].d),

    // to internal hardware
    .qe     (WKUP_CAUSE_flds_we[7]),
    .q      (reg2hw.WKUP_CAUSE[7].q),
    .ds     (aon_WKUP_CAUSE_CAUSE_7_ds_int),

    // to register interface (read)
    .qs     (aon_WKUP_CAUSE_CAUSE_7_qs_int)
  );



  logic [15:0]  reqRoleVec;
  RDP_DECODE  #(.ENC_WID(4))
    raclRoleXDEC  (.dec(reqRoleVec),  .enc(tl_i.a_user.rsvd[3:0])); // incoming RACL, assigned in scsctnif.sv

  logic [170:0] addr_hit;
  logic [170:0] addrHitNRdAllowed;
  logic [170:0] addrHitNWrAllowed;
  always_comb begin
    addr_hit   = '0;
    addrHitNRdAllowed = '0;
    addrHitNWrAllowed = '0;

    addr_hit[  0]          = (reg_addr == PINMUX_ALERT_TEST_OFFSET);  // ALERT_TEST
    addrHitNRdAllowed[  0] = (reg_addr == PINMUX_ALERT_TEST_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  0] = (reg_addr == PINMUX_ALERT_TEST_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  1]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_0_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_0
    addrHitNRdAllowed[  1] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  1] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  2]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_1_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_1
    addrHitNRdAllowed[  2] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  2] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  3]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_2_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_2
    addrHitNRdAllowed[  3] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  3] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  4]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_3_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_3
    addrHitNRdAllowed[  4] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  4] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  5]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_4_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_4
    addrHitNRdAllowed[  5] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  5] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  6]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_5_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_5
    addrHitNRdAllowed[  6] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  6] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  7]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_6_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_6
    addrHitNRdAllowed[  7] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  7] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  8]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_7_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_7
    addrHitNRdAllowed[  8] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  8] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[  9]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_8_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_8
    addrHitNRdAllowed[  9] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[  9] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 10]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_9_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_9
    addrHitNRdAllowed[ 10] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_9_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 10] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_9_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 11]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_10_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_10
    addrHitNRdAllowed[ 11] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_10_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 11] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_10_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 12]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_11_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_11
    addrHitNRdAllowed[ 12] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_11_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 12] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_11_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 13]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_12_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_12
    addrHitNRdAllowed[ 13] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_12_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 13] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_12_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 14]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_13_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_13
    addrHitNRdAllowed[ 14] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_13_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 14] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_13_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 15]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_14_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_14
    addrHitNRdAllowed[ 15] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_14_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 15] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_14_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 16]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_15_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_15
    addrHitNRdAllowed[ 16] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_15_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 16] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_15_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 17]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_16_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_16
    addrHitNRdAllowed[ 17] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_16_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 17] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_16_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 18]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_17_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_17
    addrHitNRdAllowed[ 18] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_17_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 18] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_17_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 19]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_18_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_18
    addrHitNRdAllowed[ 19] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_18_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 19] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_18_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 20]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_19_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_19
    addrHitNRdAllowed[ 20] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_19_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 20] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_19_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 21]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_20_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_20
    addrHitNRdAllowed[ 21] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_20_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 21] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_20_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 22]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_21_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_21
    addrHitNRdAllowed[ 22] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_21_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 22] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_21_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 23]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_22_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_22
    addrHitNRdAllowed[ 23] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_22_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 23] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_22_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 24]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_23_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_23
    addrHitNRdAllowed[ 24] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_23_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 24] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_23_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 25]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_24_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_24
    addrHitNRdAllowed[ 25] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_24_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 25] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_24_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 26]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_25_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_25
    addrHitNRdAllowed[ 26] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_25_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 26] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_25_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 27]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_26_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_26
    addrHitNRdAllowed[ 27] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_26_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 27] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_26_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 28]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_27_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_27
    addrHitNRdAllowed[ 28] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_27_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 28] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_27_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 29]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_28_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_28
    addrHitNRdAllowed[ 29] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_28_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 29] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_28_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 30]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_29_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_29
    addrHitNRdAllowed[ 30] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_29_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 30] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_29_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 31]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_30_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_30
    addrHitNRdAllowed[ 31] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_30_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 31] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_30_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 32]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_31_OFFSET);  // MIO_PERIPH_INSEL_REGWEN_31
    addrHitNRdAllowed[ 32] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_31_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 32] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_31_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 33]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_0_OFFSET);  // MIO_PERIPH_INSEL_0
    addrHitNRdAllowed[ 33] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 33] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 34]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_1_OFFSET);  // MIO_PERIPH_INSEL_1
    addrHitNRdAllowed[ 34] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 34] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 35]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_2_OFFSET);  // MIO_PERIPH_INSEL_2
    addrHitNRdAllowed[ 35] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 35] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 36]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_3_OFFSET);  // MIO_PERIPH_INSEL_3
    addrHitNRdAllowed[ 36] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 36] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 37]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_4_OFFSET);  // MIO_PERIPH_INSEL_4
    addrHitNRdAllowed[ 37] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 37] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 38]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_5_OFFSET);  // MIO_PERIPH_INSEL_5
    addrHitNRdAllowed[ 38] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 38] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 39]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_6_OFFSET);  // MIO_PERIPH_INSEL_6
    addrHitNRdAllowed[ 39] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 39] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 40]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_7_OFFSET);  // MIO_PERIPH_INSEL_7
    addrHitNRdAllowed[ 40] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 40] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 41]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_8_OFFSET);  // MIO_PERIPH_INSEL_8
    addrHitNRdAllowed[ 41] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 41] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 42]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_9_OFFSET);  // MIO_PERIPH_INSEL_9
    addrHitNRdAllowed[ 42] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_9_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 42] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_9_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 43]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_10_OFFSET);  // MIO_PERIPH_INSEL_10
    addrHitNRdAllowed[ 43] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_10_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 43] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_10_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 44]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_11_OFFSET);  // MIO_PERIPH_INSEL_11
    addrHitNRdAllowed[ 44] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_11_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 44] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_11_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 45]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_12_OFFSET);  // MIO_PERIPH_INSEL_12
    addrHitNRdAllowed[ 45] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_12_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 45] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_12_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 46]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_13_OFFSET);  // MIO_PERIPH_INSEL_13
    addrHitNRdAllowed[ 46] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_13_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 46] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_13_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 47]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_14_OFFSET);  // MIO_PERIPH_INSEL_14
    addrHitNRdAllowed[ 47] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_14_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 47] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_14_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 48]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_15_OFFSET);  // MIO_PERIPH_INSEL_15
    addrHitNRdAllowed[ 48] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_15_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 48] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_15_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 49]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_16_OFFSET);  // MIO_PERIPH_INSEL_16
    addrHitNRdAllowed[ 49] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_16_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 49] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_16_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 50]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_17_OFFSET);  // MIO_PERIPH_INSEL_17
    addrHitNRdAllowed[ 50] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_17_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 50] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_17_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 51]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_18_OFFSET);  // MIO_PERIPH_INSEL_18
    addrHitNRdAllowed[ 51] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_18_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 51] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_18_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 52]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_19_OFFSET);  // MIO_PERIPH_INSEL_19
    addrHitNRdAllowed[ 52] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_19_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 52] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_19_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 53]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_20_OFFSET);  // MIO_PERIPH_INSEL_20
    addrHitNRdAllowed[ 53] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_20_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 53] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_20_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 54]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_21_OFFSET);  // MIO_PERIPH_INSEL_21
    addrHitNRdAllowed[ 54] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_21_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 54] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_21_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 55]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_22_OFFSET);  // MIO_PERIPH_INSEL_22
    addrHitNRdAllowed[ 55] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_22_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 55] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_22_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 56]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_23_OFFSET);  // MIO_PERIPH_INSEL_23
    addrHitNRdAllowed[ 56] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_23_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 56] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_23_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 57]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_24_OFFSET);  // MIO_PERIPH_INSEL_24
    addrHitNRdAllowed[ 57] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_24_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 57] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_24_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 58]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_25_OFFSET);  // MIO_PERIPH_INSEL_25
    addrHitNRdAllowed[ 58] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_25_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 58] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_25_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 59]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_26_OFFSET);  // MIO_PERIPH_INSEL_26
    addrHitNRdAllowed[ 59] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_26_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 59] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_26_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 60]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_27_OFFSET);  // MIO_PERIPH_INSEL_27
    addrHitNRdAllowed[ 60] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_27_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 60] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_27_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 61]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_28_OFFSET);  // MIO_PERIPH_INSEL_28
    addrHitNRdAllowed[ 61] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_28_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 61] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_28_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 62]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_29_OFFSET);  // MIO_PERIPH_INSEL_29
    addrHitNRdAllowed[ 62] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_29_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 62] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_29_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 63]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_30_OFFSET);  // MIO_PERIPH_INSEL_30
    addrHitNRdAllowed[ 63] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_30_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 63] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_30_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 64]          = (reg_addr == PINMUX_MIO_PERIPH_INSEL_31_OFFSET);  // MIO_PERIPH_INSEL_31
    addrHitNRdAllowed[ 64] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_31_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 64] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_31_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 65]          = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_OFFSET);  // MIO_OUTSEL_REGWEN
    addrHitNRdAllowed[ 65] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 65] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 66]          = (reg_addr == PINMUX_MIO_OUTSEL_OFFSET);  // MIO_OUTSEL
    addrHitNRdAllowed[ 66] = (reg_addr == PINMUX_MIO_OUTSEL_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 66] = (reg_addr == PINMUX_MIO_OUTSEL_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 67]          = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_OFFSET);  // MIO_PAD_ATTR_REGWEN
    addrHitNRdAllowed[ 67] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 67] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 68]          = (reg_addr == PINMUX_MIO_PAD_ATTR_OFFSET);  // MIO_PAD_ATTR
    addrHitNRdAllowed[ 68] = (reg_addr == PINMUX_MIO_PAD_ATTR_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 68] = (reg_addr == PINMUX_MIO_PAD_ATTR_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 69]          = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_0_OFFSET);  // DIO_PAD_ATTR_REGWEN_0
    addrHitNRdAllowed[ 69] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 69] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 70]          = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_1_OFFSET);  // DIO_PAD_ATTR_REGWEN_1
    addrHitNRdAllowed[ 70] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 70] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 71]          = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_2_OFFSET);  // DIO_PAD_ATTR_REGWEN_2
    addrHitNRdAllowed[ 71] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 71] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 72]          = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_3_OFFSET);  // DIO_PAD_ATTR_REGWEN_3
    addrHitNRdAllowed[ 72] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 72] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 73]          = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_4_OFFSET);  // DIO_PAD_ATTR_REGWEN_4
    addrHitNRdAllowed[ 73] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 73] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 74]          = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_5_OFFSET);  // DIO_PAD_ATTR_REGWEN_5
    addrHitNRdAllowed[ 74] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 74] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 75]          = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_6_OFFSET);  // DIO_PAD_ATTR_REGWEN_6
    addrHitNRdAllowed[ 75] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 75] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 76]          = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_7_OFFSET);  // DIO_PAD_ATTR_REGWEN_7
    addrHitNRdAllowed[ 76] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 76] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 77]          = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_8_OFFSET);  // DIO_PAD_ATTR_REGWEN_8
    addrHitNRdAllowed[ 77] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 77] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 78]          = (reg_addr == PINMUX_DIO_PAD_ATTR_0_OFFSET);  // DIO_PAD_ATTR_0
    addrHitNRdAllowed[ 78] = (reg_addr == PINMUX_DIO_PAD_ATTR_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 78] = (reg_addr == PINMUX_DIO_PAD_ATTR_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 79]          = (reg_addr == PINMUX_DIO_PAD_ATTR_1_OFFSET);  // DIO_PAD_ATTR_1
    addrHitNRdAllowed[ 79] = (reg_addr == PINMUX_DIO_PAD_ATTR_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 79] = (reg_addr == PINMUX_DIO_PAD_ATTR_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 80]          = (reg_addr == PINMUX_DIO_PAD_ATTR_2_OFFSET);  // DIO_PAD_ATTR_2
    addrHitNRdAllowed[ 80] = (reg_addr == PINMUX_DIO_PAD_ATTR_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 80] = (reg_addr == PINMUX_DIO_PAD_ATTR_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 81]          = (reg_addr == PINMUX_DIO_PAD_ATTR_3_OFFSET);  // DIO_PAD_ATTR_3
    addrHitNRdAllowed[ 81] = (reg_addr == PINMUX_DIO_PAD_ATTR_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 81] = (reg_addr == PINMUX_DIO_PAD_ATTR_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 82]          = (reg_addr == PINMUX_DIO_PAD_ATTR_4_OFFSET);  // DIO_PAD_ATTR_4
    addrHitNRdAllowed[ 82] = (reg_addr == PINMUX_DIO_PAD_ATTR_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 82] = (reg_addr == PINMUX_DIO_PAD_ATTR_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 83]          = (reg_addr == PINMUX_DIO_PAD_ATTR_5_OFFSET);  // DIO_PAD_ATTR_5
    addrHitNRdAllowed[ 83] = (reg_addr == PINMUX_DIO_PAD_ATTR_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 83] = (reg_addr == PINMUX_DIO_PAD_ATTR_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 84]          = (reg_addr == PINMUX_DIO_PAD_ATTR_6_OFFSET);  // DIO_PAD_ATTR_6
    addrHitNRdAllowed[ 84] = (reg_addr == PINMUX_DIO_PAD_ATTR_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 84] = (reg_addr == PINMUX_DIO_PAD_ATTR_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 85]          = (reg_addr == PINMUX_DIO_PAD_ATTR_7_OFFSET);  // DIO_PAD_ATTR_7
    addrHitNRdAllowed[ 85] = (reg_addr == PINMUX_DIO_PAD_ATTR_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 85] = (reg_addr == PINMUX_DIO_PAD_ATTR_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 86]          = (reg_addr == PINMUX_DIO_PAD_ATTR_8_OFFSET);  // DIO_PAD_ATTR_8
    addrHitNRdAllowed[ 86] = (reg_addr == PINMUX_DIO_PAD_ATTR_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 86] = (reg_addr == PINMUX_DIO_PAD_ATTR_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 87]          = (reg_addr == PINMUX_DI3C_PAD_ATTR_REGWEN_0_OFFSET);  // DI3C_PAD_ATTR_REGWEN_0
    addrHitNRdAllowed[ 87] = (reg_addr == PINMUX_DI3C_PAD_ATTR_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 87] = (reg_addr == PINMUX_DI3C_PAD_ATTR_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 88]          = (reg_addr == PINMUX_DI3C_PAD_ATTR_REGWEN_1_OFFSET);  // DI3C_PAD_ATTR_REGWEN_1
    addrHitNRdAllowed[ 88] = (reg_addr == PINMUX_DI3C_PAD_ATTR_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 88] = (reg_addr == PINMUX_DI3C_PAD_ATTR_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 89]          = (reg_addr == PINMUX_DI3C_PAD_ATTR_0_OFFSET);  // DI3C_PAD_ATTR_0
    addrHitNRdAllowed[ 89] = (reg_addr == PINMUX_DI3C_PAD_ATTR_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 89] = (reg_addr == PINMUX_DI3C_PAD_ATTR_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 90]          = (reg_addr == PINMUX_DI3C_PAD_ATTR_1_OFFSET);  // DI3C_PAD_ATTR_1
    addrHitNRdAllowed[ 90] = (reg_addr == PINMUX_DI3C_PAD_ATTR_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 90] = (reg_addr == PINMUX_DI3C_PAD_ATTR_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 91]          = (reg_addr == PINMUX_MIO_PAD_SLEEP_STATUS_OFFSET);  // MIO_PAD_SLEEP_STATUS
    addrHitNRdAllowed[ 91] = (reg_addr == PINMUX_MIO_PAD_SLEEP_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 91] = (reg_addr == PINMUX_MIO_PAD_SLEEP_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 92]          = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_OFFSET);  // MIO_PAD_SLEEP_REGWEN
    addrHitNRdAllowed[ 92] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 92] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 93]          = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_OFFSET);  // MIO_PAD_SLEEP_EN
    addrHitNRdAllowed[ 93] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 93] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 94]          = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_OFFSET);  // MIO_PAD_SLEEP_MODE
    addrHitNRdAllowed[ 94] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 94] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 95]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_STATUS_OFFSET);  // DIO_PAD_SLEEP_STATUS
    addrHitNRdAllowed[ 95] = (reg_addr == PINMUX_DIO_PAD_SLEEP_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 95] = (reg_addr == PINMUX_DIO_PAD_SLEEP_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 96]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_0_OFFSET);  // DIO_PAD_SLEEP_REGWEN_0
    addrHitNRdAllowed[ 96] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 96] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 97]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_1_OFFSET);  // DIO_PAD_SLEEP_REGWEN_1
    addrHitNRdAllowed[ 97] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 97] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 98]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_2_OFFSET);  // DIO_PAD_SLEEP_REGWEN_2
    addrHitNRdAllowed[ 98] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 98] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[ 99]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_3_OFFSET);  // DIO_PAD_SLEEP_REGWEN_3
    addrHitNRdAllowed[ 99] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[ 99] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[100]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_4_OFFSET);  // DIO_PAD_SLEEP_REGWEN_4
    addrHitNRdAllowed[100] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[100] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[101]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_5_OFFSET);  // DIO_PAD_SLEEP_REGWEN_5
    addrHitNRdAllowed[101] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[101] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[102]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_6_OFFSET);  // DIO_PAD_SLEEP_REGWEN_6
    addrHitNRdAllowed[102] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[102] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[103]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_7_OFFSET);  // DIO_PAD_SLEEP_REGWEN_7
    addrHitNRdAllowed[103] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[103] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[104]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_8_OFFSET);  // DIO_PAD_SLEEP_REGWEN_8
    addrHitNRdAllowed[104] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[104] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[105]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_0_OFFSET);  // DIO_PAD_SLEEP_EN_0
    addrHitNRdAllowed[105] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[105] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[106]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_1_OFFSET);  // DIO_PAD_SLEEP_EN_1
    addrHitNRdAllowed[106] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[106] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[107]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_2_OFFSET);  // DIO_PAD_SLEEP_EN_2
    addrHitNRdAllowed[107] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[107] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[108]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_3_OFFSET);  // DIO_PAD_SLEEP_EN_3
    addrHitNRdAllowed[108] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[108] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[109]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_4_OFFSET);  // DIO_PAD_SLEEP_EN_4
    addrHitNRdAllowed[109] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[109] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[110]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_5_OFFSET);  // DIO_PAD_SLEEP_EN_5
    addrHitNRdAllowed[110] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[110] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[111]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_6_OFFSET);  // DIO_PAD_SLEEP_EN_6
    addrHitNRdAllowed[111] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[111] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[112]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_7_OFFSET);  // DIO_PAD_SLEEP_EN_7
    addrHitNRdAllowed[112] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[112] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[113]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_8_OFFSET);  // DIO_PAD_SLEEP_EN_8
    addrHitNRdAllowed[113] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[113] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[114]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_0_OFFSET);  // DIO_PAD_SLEEP_MODE_0
    addrHitNRdAllowed[114] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[114] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[115]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_1_OFFSET);  // DIO_PAD_SLEEP_MODE_1
    addrHitNRdAllowed[115] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[115] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[116]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_2_OFFSET);  // DIO_PAD_SLEEP_MODE_2
    addrHitNRdAllowed[116] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[116] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[117]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_3_OFFSET);  // DIO_PAD_SLEEP_MODE_3
    addrHitNRdAllowed[117] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[117] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[118]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_4_OFFSET);  // DIO_PAD_SLEEP_MODE_4
    addrHitNRdAllowed[118] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[118] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[119]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_5_OFFSET);  // DIO_PAD_SLEEP_MODE_5
    addrHitNRdAllowed[119] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[119] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[120]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_6_OFFSET);  // DIO_PAD_SLEEP_MODE_6
    addrHitNRdAllowed[120] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[120] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[121]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_7_OFFSET);  // DIO_PAD_SLEEP_MODE_7
    addrHitNRdAllowed[121] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[121] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[122]          = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_8_OFFSET);  // DIO_PAD_SLEEP_MODE_8
    addrHitNRdAllowed[122] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_8_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[122] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_8_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[123]          = (reg_addr == PINMUX_DI3C_PAD_SLEEP_STATUS_OFFSET);  // DI3C_PAD_SLEEP_STATUS
    addrHitNRdAllowed[123] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[123] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_STATUS_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[124]          = (reg_addr == PINMUX_DI3C_PAD_SLEEP_REGWEN_0_OFFSET);  // DI3C_PAD_SLEEP_REGWEN_0
    addrHitNRdAllowed[124] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[124] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[125]          = (reg_addr == PINMUX_DI3C_PAD_SLEEP_REGWEN_1_OFFSET);  // DI3C_PAD_SLEEP_REGWEN_1
    addrHitNRdAllowed[125] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[125] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[126]          = (reg_addr == PINMUX_DI3C_PAD_SLEEP_EN_0_OFFSET);  // DI3C_PAD_SLEEP_EN_0
    addrHitNRdAllowed[126] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_EN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[126] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_EN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[127]          = (reg_addr == PINMUX_DI3C_PAD_SLEEP_EN_1_OFFSET);  // DI3C_PAD_SLEEP_EN_1
    addrHitNRdAllowed[127] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_EN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[127] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_EN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[128]          = (reg_addr == PINMUX_DI3C_PAD_SLEEP_MODE_0_OFFSET);  // DI3C_PAD_SLEEP_MODE_0
    addrHitNRdAllowed[128] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_MODE_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[128] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_MODE_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[129]          = (reg_addr == PINMUX_DI3C_PAD_SLEEP_MODE_1_OFFSET);  // DI3C_PAD_SLEEP_MODE_1
    addrHitNRdAllowed[129] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_MODE_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[129] = (reg_addr == PINMUX_DI3C_PAD_SLEEP_MODE_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[130]          = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_0_OFFSET);  // WKUP_DETECTOR_REGWEN_0
    addrHitNRdAllowed[130] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[130] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[131]          = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_1_OFFSET);  // WKUP_DETECTOR_REGWEN_1
    addrHitNRdAllowed[131] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[131] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[132]          = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_2_OFFSET);  // WKUP_DETECTOR_REGWEN_2
    addrHitNRdAllowed[132] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[132] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[133]          = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_3_OFFSET);  // WKUP_DETECTOR_REGWEN_3
    addrHitNRdAllowed[133] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[133] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[134]          = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_4_OFFSET);  // WKUP_DETECTOR_REGWEN_4
    addrHitNRdAllowed[134] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[134] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[135]          = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_5_OFFSET);  // WKUP_DETECTOR_REGWEN_5
    addrHitNRdAllowed[135] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[135] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[136]          = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_6_OFFSET);  // WKUP_DETECTOR_REGWEN_6
    addrHitNRdAllowed[136] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[136] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[137]          = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_7_OFFSET);  // WKUP_DETECTOR_REGWEN_7
    addrHitNRdAllowed[137] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[137] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[138]          = (reg_addr == PINMUX_WKUP_DETECTOR_EN_0_OFFSET);  // WKUP_DETECTOR_EN_0
    addrHitNRdAllowed[138] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[138] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[139]          = (reg_addr == PINMUX_WKUP_DETECTOR_EN_1_OFFSET);  // WKUP_DETECTOR_EN_1
    addrHitNRdAllowed[139] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[139] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[140]          = (reg_addr == PINMUX_WKUP_DETECTOR_EN_2_OFFSET);  // WKUP_DETECTOR_EN_2
    addrHitNRdAllowed[140] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[140] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[141]          = (reg_addr == PINMUX_WKUP_DETECTOR_EN_3_OFFSET);  // WKUP_DETECTOR_EN_3
    addrHitNRdAllowed[141] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[141] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[142]          = (reg_addr == PINMUX_WKUP_DETECTOR_EN_4_OFFSET);  // WKUP_DETECTOR_EN_4
    addrHitNRdAllowed[142] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[142] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[143]          = (reg_addr == PINMUX_WKUP_DETECTOR_EN_5_OFFSET);  // WKUP_DETECTOR_EN_5
    addrHitNRdAllowed[143] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[143] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[144]          = (reg_addr == PINMUX_WKUP_DETECTOR_EN_6_OFFSET);  // WKUP_DETECTOR_EN_6
    addrHitNRdAllowed[144] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[144] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[145]          = (reg_addr == PINMUX_WKUP_DETECTOR_EN_7_OFFSET);  // WKUP_DETECTOR_EN_7
    addrHitNRdAllowed[145] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[145] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[146]          = (reg_addr == PINMUX_WKUP_DETECTOR_0_OFFSET);  // WKUP_DETECTOR_0
    addrHitNRdAllowed[146] = (reg_addr == PINMUX_WKUP_DETECTOR_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[146] = (reg_addr == PINMUX_WKUP_DETECTOR_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[147]          = (reg_addr == PINMUX_WKUP_DETECTOR_1_OFFSET);  // WKUP_DETECTOR_1
    addrHitNRdAllowed[147] = (reg_addr == PINMUX_WKUP_DETECTOR_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[147] = (reg_addr == PINMUX_WKUP_DETECTOR_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[148]          = (reg_addr == PINMUX_WKUP_DETECTOR_2_OFFSET);  // WKUP_DETECTOR_2
    addrHitNRdAllowed[148] = (reg_addr == PINMUX_WKUP_DETECTOR_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[148] = (reg_addr == PINMUX_WKUP_DETECTOR_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[149]          = (reg_addr == PINMUX_WKUP_DETECTOR_3_OFFSET);  // WKUP_DETECTOR_3
    addrHitNRdAllowed[149] = (reg_addr == PINMUX_WKUP_DETECTOR_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[149] = (reg_addr == PINMUX_WKUP_DETECTOR_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[150]          = (reg_addr == PINMUX_WKUP_DETECTOR_4_OFFSET);  // WKUP_DETECTOR_4
    addrHitNRdAllowed[150] = (reg_addr == PINMUX_WKUP_DETECTOR_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[150] = (reg_addr == PINMUX_WKUP_DETECTOR_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[151]          = (reg_addr == PINMUX_WKUP_DETECTOR_5_OFFSET);  // WKUP_DETECTOR_5
    addrHitNRdAllowed[151] = (reg_addr == PINMUX_WKUP_DETECTOR_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[151] = (reg_addr == PINMUX_WKUP_DETECTOR_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[152]          = (reg_addr == PINMUX_WKUP_DETECTOR_6_OFFSET);  // WKUP_DETECTOR_6
    addrHitNRdAllowed[152] = (reg_addr == PINMUX_WKUP_DETECTOR_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[152] = (reg_addr == PINMUX_WKUP_DETECTOR_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[153]          = (reg_addr == PINMUX_WKUP_DETECTOR_7_OFFSET);  // WKUP_DETECTOR_7
    addrHitNRdAllowed[153] = (reg_addr == PINMUX_WKUP_DETECTOR_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[153] = (reg_addr == PINMUX_WKUP_DETECTOR_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[154]          = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_0_OFFSET);  // WKUP_DETECTOR_CNT_TH_0
    addrHitNRdAllowed[154] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[154] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[155]          = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_1_OFFSET);  // WKUP_DETECTOR_CNT_TH_1
    addrHitNRdAllowed[155] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[155] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[156]          = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_2_OFFSET);  // WKUP_DETECTOR_CNT_TH_2
    addrHitNRdAllowed[156] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[156] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[157]          = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_3_OFFSET);  // WKUP_DETECTOR_CNT_TH_3
    addrHitNRdAllowed[157] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[157] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[158]          = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_4_OFFSET);  // WKUP_DETECTOR_CNT_TH_4
    addrHitNRdAllowed[158] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[158] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[159]          = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_5_OFFSET);  // WKUP_DETECTOR_CNT_TH_5
    addrHitNRdAllowed[159] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[159] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[160]          = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_6_OFFSET);  // WKUP_DETECTOR_CNT_TH_6
    addrHitNRdAllowed[160] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[160] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[161]          = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_7_OFFSET);  // WKUP_DETECTOR_CNT_TH_7
    addrHitNRdAllowed[161] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[161] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[162]          = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_0_OFFSET);  // WKUP_DETECTOR_PADSEL_0
    addrHitNRdAllowed[162] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_0_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[162] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_0_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[163]          = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_1_OFFSET);  // WKUP_DETECTOR_PADSEL_1
    addrHitNRdAllowed[163] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_1_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[163] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_1_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[164]          = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_2_OFFSET);  // WKUP_DETECTOR_PADSEL_2
    addrHitNRdAllowed[164] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_2_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[164] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_2_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[165]          = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_3_OFFSET);  // WKUP_DETECTOR_PADSEL_3
    addrHitNRdAllowed[165] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_3_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[165] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_3_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[166]          = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_4_OFFSET);  // WKUP_DETECTOR_PADSEL_4
    addrHitNRdAllowed[166] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_4_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[166] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_4_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[167]          = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_5_OFFSET);  // WKUP_DETECTOR_PADSEL_5
    addrHitNRdAllowed[167] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_5_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[167] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_5_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[168]          = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_6_OFFSET);  // WKUP_DETECTOR_PADSEL_6
    addrHitNRdAllowed[168] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_6_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[168] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_6_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[169]          = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_7_OFFSET);  // WKUP_DETECTOR_PADSEL_7
    addrHitNRdAllowed[169] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_7_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[169] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_7_OFFSET) & (|(16'hffff & reqRoleVec));

    addr_hit[170]          = (reg_addr == PINMUX_WKUP_CAUSE_OFFSET);  // WKUP_CAUSE
    addrHitNRdAllowed[170] = (reg_addr == PINMUX_WKUP_CAUSE_OFFSET) & (|(16'hffff & reqRoleVec));
    addrHitNWrAllowed[170] = (reg_addr == PINMUX_WKUP_CAUSE_OFFSET) & (|(16'hffff & reqRoleVec));

  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
  assign raclViol = (|addr_hit) & ~(|(addr_hit & (addrHitNRdAllowed | addrHitNWrAllowed))); // address hit but failed the RACL check

  // Check sub-word write is permitted
  always_comb begin
    wr_err = reg_we &
              (( addrHitNWrAllowed[  0] & (|(PINMUX_PERMIT[  0] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  1] & (|(PINMUX_PERMIT[  1] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  2] & (|(PINMUX_PERMIT[  2] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  3] & (|(PINMUX_PERMIT[  3] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  4] & (|(PINMUX_PERMIT[  4] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  5] & (|(PINMUX_PERMIT[  5] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  6] & (|(PINMUX_PERMIT[  6] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  7] & (|(PINMUX_PERMIT[  7] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  8] & (|(PINMUX_PERMIT[  8] & ~reg_be)) ) |
               ( addrHitNWrAllowed[  9] & (|(PINMUX_PERMIT[  9] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 10] & (|(PINMUX_PERMIT[ 10] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 11] & (|(PINMUX_PERMIT[ 11] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 12] & (|(PINMUX_PERMIT[ 12] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 13] & (|(PINMUX_PERMIT[ 13] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 14] & (|(PINMUX_PERMIT[ 14] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 15] & (|(PINMUX_PERMIT[ 15] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 16] & (|(PINMUX_PERMIT[ 16] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 17] & (|(PINMUX_PERMIT[ 17] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 18] & (|(PINMUX_PERMIT[ 18] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 19] & (|(PINMUX_PERMIT[ 19] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 20] & (|(PINMUX_PERMIT[ 20] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 21] & (|(PINMUX_PERMIT[ 21] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 22] & (|(PINMUX_PERMIT[ 22] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 23] & (|(PINMUX_PERMIT[ 23] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 24] & (|(PINMUX_PERMIT[ 24] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 25] & (|(PINMUX_PERMIT[ 25] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 26] & (|(PINMUX_PERMIT[ 26] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 27] & (|(PINMUX_PERMIT[ 27] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 28] & (|(PINMUX_PERMIT[ 28] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 29] & (|(PINMUX_PERMIT[ 29] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 30] & (|(PINMUX_PERMIT[ 30] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 31] & (|(PINMUX_PERMIT[ 31] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 32] & (|(PINMUX_PERMIT[ 32] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 33] & (|(PINMUX_PERMIT[ 33] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 34] & (|(PINMUX_PERMIT[ 34] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 35] & (|(PINMUX_PERMIT[ 35] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 36] & (|(PINMUX_PERMIT[ 36] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 37] & (|(PINMUX_PERMIT[ 37] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 38] & (|(PINMUX_PERMIT[ 38] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 39] & (|(PINMUX_PERMIT[ 39] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 40] & (|(PINMUX_PERMIT[ 40] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 41] & (|(PINMUX_PERMIT[ 41] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 42] & (|(PINMUX_PERMIT[ 42] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 43] & (|(PINMUX_PERMIT[ 43] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 44] & (|(PINMUX_PERMIT[ 44] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 45] & (|(PINMUX_PERMIT[ 45] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 46] & (|(PINMUX_PERMIT[ 46] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 47] & (|(PINMUX_PERMIT[ 47] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 48] & (|(PINMUX_PERMIT[ 48] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 49] & (|(PINMUX_PERMIT[ 49] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 50] & (|(PINMUX_PERMIT[ 50] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 51] & (|(PINMUX_PERMIT[ 51] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 52] & (|(PINMUX_PERMIT[ 52] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 53] & (|(PINMUX_PERMIT[ 53] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 54] & (|(PINMUX_PERMIT[ 54] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 55] & (|(PINMUX_PERMIT[ 55] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 56] & (|(PINMUX_PERMIT[ 56] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 57] & (|(PINMUX_PERMIT[ 57] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 58] & (|(PINMUX_PERMIT[ 58] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 59] & (|(PINMUX_PERMIT[ 59] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 60] & (|(PINMUX_PERMIT[ 60] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 61] & (|(PINMUX_PERMIT[ 61] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 62] & (|(PINMUX_PERMIT[ 62] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 63] & (|(PINMUX_PERMIT[ 63] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 64] & (|(PINMUX_PERMIT[ 64] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 65] & (|(PINMUX_PERMIT[ 65] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 66] & (|(PINMUX_PERMIT[ 66] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 67] & (|(PINMUX_PERMIT[ 67] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 68] & (|(PINMUX_PERMIT[ 68] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 69] & (|(PINMUX_PERMIT[ 69] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 70] & (|(PINMUX_PERMIT[ 70] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 71] & (|(PINMUX_PERMIT[ 71] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 72] & (|(PINMUX_PERMIT[ 72] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 73] & (|(PINMUX_PERMIT[ 73] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 74] & (|(PINMUX_PERMIT[ 74] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 75] & (|(PINMUX_PERMIT[ 75] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 76] & (|(PINMUX_PERMIT[ 76] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 77] & (|(PINMUX_PERMIT[ 77] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 78] & (|(PINMUX_PERMIT[ 78] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 79] & (|(PINMUX_PERMIT[ 79] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 80] & (|(PINMUX_PERMIT[ 80] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 81] & (|(PINMUX_PERMIT[ 81] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 82] & (|(PINMUX_PERMIT[ 82] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 83] & (|(PINMUX_PERMIT[ 83] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 84] & (|(PINMUX_PERMIT[ 84] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 85] & (|(PINMUX_PERMIT[ 85] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 86] & (|(PINMUX_PERMIT[ 86] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 87] & (|(PINMUX_PERMIT[ 87] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 88] & (|(PINMUX_PERMIT[ 88] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 89] & (|(PINMUX_PERMIT[ 89] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 90] & (|(PINMUX_PERMIT[ 90] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 91] & (|(PINMUX_PERMIT[ 91] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 92] & (|(PINMUX_PERMIT[ 92] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 93] & (|(PINMUX_PERMIT[ 93] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 94] & (|(PINMUX_PERMIT[ 94] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 95] & (|(PINMUX_PERMIT[ 95] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 96] & (|(PINMUX_PERMIT[ 96] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 97] & (|(PINMUX_PERMIT[ 97] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 98] & (|(PINMUX_PERMIT[ 98] & ~reg_be)) ) |
               ( addrHitNWrAllowed[ 99] & (|(PINMUX_PERMIT[ 99] & ~reg_be)) ) |
               ( addrHitNWrAllowed[100] & (|(PINMUX_PERMIT[100] & ~reg_be)) ) |
               ( addrHitNWrAllowed[101] & (|(PINMUX_PERMIT[101] & ~reg_be)) ) |
               ( addrHitNWrAllowed[102] & (|(PINMUX_PERMIT[102] & ~reg_be)) ) |
               ( addrHitNWrAllowed[103] & (|(PINMUX_PERMIT[103] & ~reg_be)) ) |
               ( addrHitNWrAllowed[104] & (|(PINMUX_PERMIT[104] & ~reg_be)) ) |
               ( addrHitNWrAllowed[105] & (|(PINMUX_PERMIT[105] & ~reg_be)) ) |
               ( addrHitNWrAllowed[106] & (|(PINMUX_PERMIT[106] & ~reg_be)) ) |
               ( addrHitNWrAllowed[107] & (|(PINMUX_PERMIT[107] & ~reg_be)) ) |
               ( addrHitNWrAllowed[108] & (|(PINMUX_PERMIT[108] & ~reg_be)) ) |
               ( addrHitNWrAllowed[109] & (|(PINMUX_PERMIT[109] & ~reg_be)) ) |
               ( addrHitNWrAllowed[110] & (|(PINMUX_PERMIT[110] & ~reg_be)) ) |
               ( addrHitNWrAllowed[111] & (|(PINMUX_PERMIT[111] & ~reg_be)) ) |
               ( addrHitNWrAllowed[112] & (|(PINMUX_PERMIT[112] & ~reg_be)) ) |
               ( addrHitNWrAllowed[113] & (|(PINMUX_PERMIT[113] & ~reg_be)) ) |
               ( addrHitNWrAllowed[114] & (|(PINMUX_PERMIT[114] & ~reg_be)) ) |
               ( addrHitNWrAllowed[115] & (|(PINMUX_PERMIT[115] & ~reg_be)) ) |
               ( addrHitNWrAllowed[116] & (|(PINMUX_PERMIT[116] & ~reg_be)) ) |
               ( addrHitNWrAllowed[117] & (|(PINMUX_PERMIT[117] & ~reg_be)) ) |
               ( addrHitNWrAllowed[118] & (|(PINMUX_PERMIT[118] & ~reg_be)) ) |
               ( addrHitNWrAllowed[119] & (|(PINMUX_PERMIT[119] & ~reg_be)) ) |
               ( addrHitNWrAllowed[120] & (|(PINMUX_PERMIT[120] & ~reg_be)) ) |
               ( addrHitNWrAllowed[121] & (|(PINMUX_PERMIT[121] & ~reg_be)) ) |
               ( addrHitNWrAllowed[122] & (|(PINMUX_PERMIT[122] & ~reg_be)) ) |
               ( addrHitNWrAllowed[123] & (|(PINMUX_PERMIT[123] & ~reg_be)) ) |
               ( addrHitNWrAllowed[124] & (|(PINMUX_PERMIT[124] & ~reg_be)) ) |
               ( addrHitNWrAllowed[125] & (|(PINMUX_PERMIT[125] & ~reg_be)) ) |
               ( addrHitNWrAllowed[126] & (|(PINMUX_PERMIT[126] & ~reg_be)) ) |
               ( addrHitNWrAllowed[127] & (|(PINMUX_PERMIT[127] & ~reg_be)) ) |
               ( addrHitNWrAllowed[128] & (|(PINMUX_PERMIT[128] & ~reg_be)) ) |
               ( addrHitNWrAllowed[129] & (|(PINMUX_PERMIT[129] & ~reg_be)) ) |
               ( addrHitNWrAllowed[130] & (|(PINMUX_PERMIT[130] & ~reg_be)) ) |
               ( addrHitNWrAllowed[131] & (|(PINMUX_PERMIT[131] & ~reg_be)) ) |
               ( addrHitNWrAllowed[132] & (|(PINMUX_PERMIT[132] & ~reg_be)) ) |
               ( addrHitNWrAllowed[133] & (|(PINMUX_PERMIT[133] & ~reg_be)) ) |
               ( addrHitNWrAllowed[134] & (|(PINMUX_PERMIT[134] & ~reg_be)) ) |
               ( addrHitNWrAllowed[135] & (|(PINMUX_PERMIT[135] & ~reg_be)) ) |
               ( addrHitNWrAllowed[136] & (|(PINMUX_PERMIT[136] & ~reg_be)) ) |
               ( addrHitNWrAllowed[137] & (|(PINMUX_PERMIT[137] & ~reg_be)) ) |
               ( addrHitNWrAllowed[138] & (|(PINMUX_PERMIT[138] & ~reg_be)) ) |
               ( addrHitNWrAllowed[139] & (|(PINMUX_PERMIT[139] & ~reg_be)) ) |
               ( addrHitNWrAllowed[140] & (|(PINMUX_PERMIT[140] & ~reg_be)) ) |
               ( addrHitNWrAllowed[141] & (|(PINMUX_PERMIT[141] & ~reg_be)) ) |
               ( addrHitNWrAllowed[142] & (|(PINMUX_PERMIT[142] & ~reg_be)) ) |
               ( addrHitNWrAllowed[143] & (|(PINMUX_PERMIT[143] & ~reg_be)) ) |
               ( addrHitNWrAllowed[144] & (|(PINMUX_PERMIT[144] & ~reg_be)) ) |
               ( addrHitNWrAllowed[145] & (|(PINMUX_PERMIT[145] & ~reg_be)) ) |
               ( addrHitNWrAllowed[146] & (|(PINMUX_PERMIT[146] & ~reg_be)) ) |
               ( addrHitNWrAllowed[147] & (|(PINMUX_PERMIT[147] & ~reg_be)) ) |
               ( addrHitNWrAllowed[148] & (|(PINMUX_PERMIT[148] & ~reg_be)) ) |
               ( addrHitNWrAllowed[149] & (|(PINMUX_PERMIT[149] & ~reg_be)) ) |
               ( addrHitNWrAllowed[150] & (|(PINMUX_PERMIT[150] & ~reg_be)) ) |
               ( addrHitNWrAllowed[151] & (|(PINMUX_PERMIT[151] & ~reg_be)) ) |
               ( addrHitNWrAllowed[152] & (|(PINMUX_PERMIT[152] & ~reg_be)) ) |
               ( addrHitNWrAllowed[153] & (|(PINMUX_PERMIT[153] & ~reg_be)) ) |
               ( addrHitNWrAllowed[154] & (|(PINMUX_PERMIT[154] & ~reg_be)) ) |
               ( addrHitNWrAllowed[155] & (|(PINMUX_PERMIT[155] & ~reg_be)) ) |
               ( addrHitNWrAllowed[156] & (|(PINMUX_PERMIT[156] & ~reg_be)) ) |
               ( addrHitNWrAllowed[157] & (|(PINMUX_PERMIT[157] & ~reg_be)) ) |
               ( addrHitNWrAllowed[158] & (|(PINMUX_PERMIT[158] & ~reg_be)) ) |
               ( addrHitNWrAllowed[159] & (|(PINMUX_PERMIT[159] & ~reg_be)) ) |
               ( addrHitNWrAllowed[160] & (|(PINMUX_PERMIT[160] & ~reg_be)) ) |
               ( addrHitNWrAllowed[161] & (|(PINMUX_PERMIT[161] & ~reg_be)) ) |
               ( addrHitNWrAllowed[162] & (|(PINMUX_PERMIT[162] & ~reg_be)) ) |
               ( addrHitNWrAllowed[163] & (|(PINMUX_PERMIT[163] & ~reg_be)) ) |
               ( addrHitNWrAllowed[164] & (|(PINMUX_PERMIT[164] & ~reg_be)) ) |
               ( addrHitNWrAllowed[165] & (|(PINMUX_PERMIT[165] & ~reg_be)) ) |
               ( addrHitNWrAllowed[166] & (|(PINMUX_PERMIT[166] & ~reg_be)) ) |
               ( addrHitNWrAllowed[167] & (|(PINMUX_PERMIT[167] & ~reg_be)) ) |
               ( addrHitNWrAllowed[168] & (|(PINMUX_PERMIT[168] & ~reg_be)) ) |
               ( addrHitNWrAllowed[169] & (|(PINMUX_PERMIT[169] & ~reg_be)) ) |
               ( addrHitNWrAllowed[170] & (|(PINMUX_PERMIT[170] & ~reg_be)) ) );
  end

  // Generate write-enables
  assign ALERT_TEST_we = addrHitNWrAllowed[0] & reg_we & !reg_error;
  assign ALERT_TEST_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_0_we = addrHitNWrAllowed[1] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_0_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_1_we = addrHitNWrAllowed[2] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_1_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_2_we = addrHitNWrAllowed[3] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_2_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_3_we = addrHitNWrAllowed[4] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_3_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_4_we = addrHitNWrAllowed[5] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_4_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_5_we = addrHitNWrAllowed[6] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_5_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_6_we = addrHitNWrAllowed[7] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_6_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_7_we = addrHitNWrAllowed[8] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_7_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_8_we = addrHitNWrAllowed[9] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_8_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_9_we = addrHitNWrAllowed[10] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_9_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_10_we = addrHitNWrAllowed[11] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_10_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_11_we = addrHitNWrAllowed[12] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_11_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_12_we = addrHitNWrAllowed[13] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_12_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_13_we = addrHitNWrAllowed[14] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_13_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_14_we = addrHitNWrAllowed[15] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_14_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_15_we = addrHitNWrAllowed[16] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_15_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_16_we = addrHitNWrAllowed[17] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_16_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_17_we = addrHitNWrAllowed[18] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_17_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_18_we = addrHitNWrAllowed[19] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_18_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_19_we = addrHitNWrAllowed[20] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_19_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_20_we = addrHitNWrAllowed[21] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_20_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_21_we = addrHitNWrAllowed[22] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_21_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_22_we = addrHitNWrAllowed[23] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_22_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_23_we = addrHitNWrAllowed[24] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_23_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_24_we = addrHitNWrAllowed[25] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_24_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_25_we = addrHitNWrAllowed[26] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_25_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_26_we = addrHitNWrAllowed[27] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_26_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_27_we = addrHitNWrAllowed[28] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_27_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_28_we = addrHitNWrAllowed[29] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_28_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_29_we = addrHitNWrAllowed[30] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_29_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_30_we = addrHitNWrAllowed[31] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_30_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_REGWEN_31_we = addrHitNWrAllowed[32] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_REGWEN_31_wd = reg_wdata[0];

  assign MIO_PERIPH_INSEL_0_we = addrHitNWrAllowed[33] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_0_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_1_we = addrHitNWrAllowed[34] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_1_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_2_we = addrHitNWrAllowed[35] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_2_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_3_we = addrHitNWrAllowed[36] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_3_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_4_we = addrHitNWrAllowed[37] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_4_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_5_we = addrHitNWrAllowed[38] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_5_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_6_we = addrHitNWrAllowed[39] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_6_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_7_we = addrHitNWrAllowed[40] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_7_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_8_we = addrHitNWrAllowed[41] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_8_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_9_we = addrHitNWrAllowed[42] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_9_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_10_we = addrHitNWrAllowed[43] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_10_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_11_we = addrHitNWrAllowed[44] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_11_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_12_we = addrHitNWrAllowed[45] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_12_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_13_we = addrHitNWrAllowed[46] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_13_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_14_we = addrHitNWrAllowed[47] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_14_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_15_we = addrHitNWrAllowed[48] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_15_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_16_we = addrHitNWrAllowed[49] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_16_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_17_we = addrHitNWrAllowed[50] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_17_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_18_we = addrHitNWrAllowed[51] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_18_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_19_we = addrHitNWrAllowed[52] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_19_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_20_we = addrHitNWrAllowed[53] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_20_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_21_we = addrHitNWrAllowed[54] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_21_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_22_we = addrHitNWrAllowed[55] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_22_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_23_we = addrHitNWrAllowed[56] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_23_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_24_we = addrHitNWrAllowed[57] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_24_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_25_we = addrHitNWrAllowed[58] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_25_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_26_we = addrHitNWrAllowed[59] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_26_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_27_we = addrHitNWrAllowed[60] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_27_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_28_we = addrHitNWrAllowed[61] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_28_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_29_we = addrHitNWrAllowed[62] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_29_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_30_we = addrHitNWrAllowed[63] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_30_wd = reg_wdata[1:0];

  assign MIO_PERIPH_INSEL_31_we = addrHitNWrAllowed[64] & reg_we & !reg_error;
  assign MIO_PERIPH_INSEL_31_wd = reg_wdata[1:0];

  assign MIO_OUTSEL_REGWEN_we = addrHitNWrAllowed[65] & reg_we & !reg_error;
  assign MIO_OUTSEL_REGWEN_wd = reg_wdata[0];

  assign MIO_OUTSEL_we = addrHitNWrAllowed[66] & reg_we & !reg_error;
  assign MIO_OUTSEL_wd = reg_wdata[5:0];

  assign MIO_PAD_ATTR_REGWEN_we = addrHitNWrAllowed[67] & reg_we & !reg_error;
  assign MIO_PAD_ATTR_REGWEN_wd = reg_wdata[0];

  assign MIO_PAD_ATTR_re = addrHitNRdAllowed[68] & reg_re & !reg_error;
  assign MIO_PAD_ATTR_we = addrHitNWrAllowed[68] & reg_we & !reg_error;
  assign MIO_PAD_ATTR_PUEN_0_wd = reg_wdata[0];

  assign MIO_PAD_ATTR_PDEN_0_wd = reg_wdata[1];

  assign MIO_PAD_ATTR_SMTEN_0_wd = reg_wdata[2];

  assign MIO_PAD_ATTR_DRV_0_wd = reg_wdata[6:4];

  assign DIO_PAD_ATTR_REGWEN_0_we = addrHitNWrAllowed[69] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_REGWEN_0_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_REGWEN_1_we = addrHitNWrAllowed[70] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_REGWEN_1_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_REGWEN_2_we = addrHitNWrAllowed[71] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_REGWEN_2_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_REGWEN_3_we = addrHitNWrAllowed[72] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_REGWEN_3_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_REGWEN_4_we = addrHitNWrAllowed[73] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_REGWEN_4_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_REGWEN_5_we = addrHitNWrAllowed[74] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_REGWEN_5_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_REGWEN_6_we = addrHitNWrAllowed[75] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_REGWEN_6_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_REGWEN_7_we = addrHitNWrAllowed[76] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_REGWEN_7_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_REGWEN_8_we = addrHitNWrAllowed[77] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_REGWEN_8_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_0_re = addrHitNRdAllowed[78] & reg_re & !reg_error;
  assign DIO_PAD_ATTR_0_we = addrHitNWrAllowed[78] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_0_PUEN_0_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_0_PDEN_0_wd = reg_wdata[1];

  assign DIO_PAD_ATTR_0_SMTEN_0_wd = reg_wdata[2];

  assign DIO_PAD_ATTR_0_DRV_0_wd = reg_wdata[6:4];

  assign DIO_PAD_ATTR_1_re = addrHitNRdAllowed[79] & reg_re & !reg_error;
  assign DIO_PAD_ATTR_1_we = addrHitNWrAllowed[79] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_1_PUEN_1_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_1_PDEN_1_wd = reg_wdata[1];

  assign DIO_PAD_ATTR_1_SMTEN_1_wd = reg_wdata[2];

  assign DIO_PAD_ATTR_1_DRV_1_wd = reg_wdata[6:4];

  assign DIO_PAD_ATTR_2_re = addrHitNRdAllowed[80] & reg_re & !reg_error;
  assign DIO_PAD_ATTR_2_we = addrHitNWrAllowed[80] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_2_PUEN_2_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_2_PDEN_2_wd = reg_wdata[1];

  assign DIO_PAD_ATTR_2_SMTEN_2_wd = reg_wdata[2];

  assign DIO_PAD_ATTR_2_DRV_2_wd = reg_wdata[6:4];

  assign DIO_PAD_ATTR_3_re = addrHitNRdAllowed[81] & reg_re & !reg_error;
  assign DIO_PAD_ATTR_3_we = addrHitNWrAllowed[81] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_3_PUEN_3_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_3_PDEN_3_wd = reg_wdata[1];

  assign DIO_PAD_ATTR_3_SMTEN_3_wd = reg_wdata[2];

  assign DIO_PAD_ATTR_3_DRV_3_wd = reg_wdata[6:4];

  assign DIO_PAD_ATTR_4_re = addrHitNRdAllowed[82] & reg_re & !reg_error;
  assign DIO_PAD_ATTR_4_we = addrHitNWrAllowed[82] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_4_PUEN_4_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_4_PDEN_4_wd = reg_wdata[1];

  assign DIO_PAD_ATTR_4_SMTEN_4_wd = reg_wdata[2];

  assign DIO_PAD_ATTR_4_DRV_4_wd = reg_wdata[6:4];

  assign DIO_PAD_ATTR_5_re = addrHitNRdAllowed[83] & reg_re & !reg_error;
  assign DIO_PAD_ATTR_5_we = addrHitNWrAllowed[83] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_5_PUEN_5_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_5_PDEN_5_wd = reg_wdata[1];

  assign DIO_PAD_ATTR_5_SMTEN_5_wd = reg_wdata[2];

  assign DIO_PAD_ATTR_5_DRV_5_wd = reg_wdata[6:4];

  assign DIO_PAD_ATTR_6_re = addrHitNRdAllowed[84] & reg_re & !reg_error;
  assign DIO_PAD_ATTR_6_we = addrHitNWrAllowed[84] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_6_PUEN_6_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_6_PDEN_6_wd = reg_wdata[1];

  assign DIO_PAD_ATTR_6_SMTEN_6_wd = reg_wdata[2];

  assign DIO_PAD_ATTR_6_DRV_6_wd = reg_wdata[6:4];

  assign DIO_PAD_ATTR_7_re = addrHitNRdAllowed[85] & reg_re & !reg_error;
  assign DIO_PAD_ATTR_7_we = addrHitNWrAllowed[85] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_7_PUEN_7_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_7_PDEN_7_wd = reg_wdata[1];

  assign DIO_PAD_ATTR_7_SMTEN_7_wd = reg_wdata[2];

  assign DIO_PAD_ATTR_7_DRV_7_wd = reg_wdata[6:4];

  assign DIO_PAD_ATTR_8_re = addrHitNRdAllowed[86] & reg_re & !reg_error;
  assign DIO_PAD_ATTR_8_we = addrHitNWrAllowed[86] & reg_we & !reg_error;
  assign DIO_PAD_ATTR_8_PUEN_8_wd = reg_wdata[0];

  assign DIO_PAD_ATTR_8_PDEN_8_wd = reg_wdata[1];

  assign DIO_PAD_ATTR_8_SMTEN_8_wd = reg_wdata[2];

  assign DIO_PAD_ATTR_8_DRV_8_wd = reg_wdata[6:4];

  assign DI3C_PAD_ATTR_REGWEN_0_we = addrHitNWrAllowed[87] & reg_we & !reg_error;
  assign DI3C_PAD_ATTR_REGWEN_0_wd = reg_wdata[0];

  assign DI3C_PAD_ATTR_REGWEN_1_we = addrHitNWrAllowed[88] & reg_we & !reg_error;
  assign DI3C_PAD_ATTR_REGWEN_1_wd = reg_wdata[0];

  assign DI3C_PAD_ATTR_0_re = addrHitNRdAllowed[89] & reg_re & !reg_error;
  assign DI3C_PAD_ATTR_0_we = addrHitNWrAllowed[89] & reg_we & !reg_error;
  assign DI3C_PAD_ATTR_0_PUEN_0_wd = reg_wdata[0];

  assign DI3C_PAD_ATTR_0_PDEN_0_wd = reg_wdata[1];

  assign DI3C_PAD_ATTR_0_FILTEN_0_wd = reg_wdata[2];

  assign DI3C_PAD_ATTR_0_DLYEN_0_wd = reg_wdata[3];

  assign DI3C_PAD_ATTR_0_I2CEN_0_wd = reg_wdata[4];

  assign DI3C_PAD_ATTR_0_RINTEN_0_wd = reg_wdata[5];

  assign DI3C_PAD_ATTR_1_re = addrHitNRdAllowed[90] & reg_re & !reg_error;
  assign DI3C_PAD_ATTR_1_we = addrHitNWrAllowed[90] & reg_we & !reg_error;
  assign DI3C_PAD_ATTR_1_PUEN_1_wd = reg_wdata[0];

  assign DI3C_PAD_ATTR_1_PDEN_1_wd = reg_wdata[1];

  assign DI3C_PAD_ATTR_1_FILTEN_1_wd = reg_wdata[2];

  assign DI3C_PAD_ATTR_1_DLYEN_1_wd = reg_wdata[3];

  assign DI3C_PAD_ATTR_1_I2CEN_1_wd = reg_wdata[4];

  assign DI3C_PAD_ATTR_1_RINTEN_1_wd = reg_wdata[5];

  assign MIO_PAD_SLEEP_STATUS_we = addrHitNWrAllowed[91] & reg_we & !reg_error;
  assign MIO_PAD_SLEEP_STATUS_wd = reg_wdata[0];

  assign MIO_PAD_SLEEP_REGWEN_we = addrHitNWrAllowed[92] & reg_we & !reg_error;
  assign MIO_PAD_SLEEP_REGWEN_wd = reg_wdata[0];

  assign MIO_PAD_SLEEP_EN_we = addrHitNWrAllowed[93] & reg_we & !reg_error;
  assign MIO_PAD_SLEEP_EN_wd = reg_wdata[0];

  assign MIO_PAD_SLEEP_MODE_we = addrHitNWrAllowed[94] & reg_we & !reg_error;
  assign MIO_PAD_SLEEP_MODE_wd = reg_wdata[1:0];

  assign DIO_PAD_SLEEP_STATUS_we = addrHitNWrAllowed[95] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_STATUS_EN_0_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_STATUS_EN_1_wd = reg_wdata[1];

  assign DIO_PAD_SLEEP_STATUS_EN_2_wd = reg_wdata[2];

  assign DIO_PAD_SLEEP_STATUS_EN_3_wd = reg_wdata[3];

  assign DIO_PAD_SLEEP_STATUS_EN_4_wd = reg_wdata[4];

  assign DIO_PAD_SLEEP_STATUS_EN_5_wd = reg_wdata[5];

  assign DIO_PAD_SLEEP_STATUS_EN_6_wd = reg_wdata[6];

  assign DIO_PAD_SLEEP_STATUS_EN_7_wd = reg_wdata[7];

  assign DIO_PAD_SLEEP_STATUS_EN_8_wd = reg_wdata[8];

  assign DIO_PAD_SLEEP_REGWEN_0_we = addrHitNWrAllowed[96] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_REGWEN_0_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_REGWEN_1_we = addrHitNWrAllowed[97] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_REGWEN_1_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_REGWEN_2_we = addrHitNWrAllowed[98] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_REGWEN_2_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_REGWEN_3_we = addrHitNWrAllowed[99] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_REGWEN_3_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_REGWEN_4_we = addrHitNWrAllowed[100] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_REGWEN_4_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_REGWEN_5_we = addrHitNWrAllowed[101] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_REGWEN_5_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_REGWEN_6_we = addrHitNWrAllowed[102] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_REGWEN_6_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_REGWEN_7_we = addrHitNWrAllowed[103] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_REGWEN_7_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_REGWEN_8_we = addrHitNWrAllowed[104] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_REGWEN_8_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_EN_0_we = addrHitNWrAllowed[105] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_EN_0_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_EN_1_we = addrHitNWrAllowed[106] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_EN_1_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_EN_2_we = addrHitNWrAllowed[107] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_EN_2_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_EN_3_we = addrHitNWrAllowed[108] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_EN_3_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_EN_4_we = addrHitNWrAllowed[109] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_EN_4_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_EN_5_we = addrHitNWrAllowed[110] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_EN_5_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_EN_6_we = addrHitNWrAllowed[111] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_EN_6_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_EN_7_we = addrHitNWrAllowed[112] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_EN_7_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_EN_8_we = addrHitNWrAllowed[113] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_EN_8_wd = reg_wdata[0];

  assign DIO_PAD_SLEEP_MODE_0_we = addrHitNWrAllowed[114] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_MODE_0_wd = reg_wdata[1:0];

  assign DIO_PAD_SLEEP_MODE_1_we = addrHitNWrAllowed[115] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_MODE_1_wd = reg_wdata[1:0];

  assign DIO_PAD_SLEEP_MODE_2_we = addrHitNWrAllowed[116] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_MODE_2_wd = reg_wdata[1:0];

  assign DIO_PAD_SLEEP_MODE_3_we = addrHitNWrAllowed[117] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_MODE_3_wd = reg_wdata[1:0];

  assign DIO_PAD_SLEEP_MODE_4_we = addrHitNWrAllowed[118] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_MODE_4_wd = reg_wdata[1:0];

  assign DIO_PAD_SLEEP_MODE_5_we = addrHitNWrAllowed[119] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_MODE_5_wd = reg_wdata[1:0];

  assign DIO_PAD_SLEEP_MODE_6_we = addrHitNWrAllowed[120] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_MODE_6_wd = reg_wdata[1:0];

  assign DIO_PAD_SLEEP_MODE_7_we = addrHitNWrAllowed[121] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_MODE_7_wd = reg_wdata[1:0];

  assign DIO_PAD_SLEEP_MODE_8_we = addrHitNWrAllowed[122] & reg_we & !reg_error;
  assign DIO_PAD_SLEEP_MODE_8_wd = reg_wdata[1:0];

  assign DI3C_PAD_SLEEP_STATUS_we = addrHitNWrAllowed[123] & reg_we & !reg_error;
  assign DI3C_PAD_SLEEP_STATUS_EN_0_wd = reg_wdata[0];

  assign DI3C_PAD_SLEEP_STATUS_EN_1_wd = reg_wdata[1];

  assign DI3C_PAD_SLEEP_REGWEN_0_we = addrHitNWrAllowed[124] & reg_we & !reg_error;
  assign DI3C_PAD_SLEEP_REGWEN_0_wd = reg_wdata[0];

  assign DI3C_PAD_SLEEP_REGWEN_1_we = addrHitNWrAllowed[125] & reg_we & !reg_error;
  assign DI3C_PAD_SLEEP_REGWEN_1_wd = reg_wdata[0];

  assign DI3C_PAD_SLEEP_EN_0_we = addrHitNWrAllowed[126] & reg_we & !reg_error;
  assign DI3C_PAD_SLEEP_EN_0_wd = reg_wdata[0];

  assign DI3C_PAD_SLEEP_EN_1_we = addrHitNWrAllowed[127] & reg_we & !reg_error;
  assign DI3C_PAD_SLEEP_EN_1_wd = reg_wdata[0];

  assign DI3C_PAD_SLEEP_MODE_0_we = addrHitNWrAllowed[128] & reg_we & !reg_error;
  assign DI3C_PAD_SLEEP_MODE_0_wd = reg_wdata[1:0];

  assign DI3C_PAD_SLEEP_MODE_1_we = addrHitNWrAllowed[129] & reg_we & !reg_error;
  assign DI3C_PAD_SLEEP_MODE_1_wd = reg_wdata[1:0];

  assign WKUP_DETECTOR_REGWEN_0_we = addrHitNWrAllowed[130] & reg_we & !reg_error;
  assign WKUP_DETECTOR_REGWEN_0_wd = reg_wdata[0];

  assign WKUP_DETECTOR_REGWEN_1_we = addrHitNWrAllowed[131] & reg_we & !reg_error;
  assign WKUP_DETECTOR_REGWEN_1_wd = reg_wdata[0];

  assign WKUP_DETECTOR_REGWEN_2_we = addrHitNWrAllowed[132] & reg_we & !reg_error;
  assign WKUP_DETECTOR_REGWEN_2_wd = reg_wdata[0];

  assign WKUP_DETECTOR_REGWEN_3_we = addrHitNWrAllowed[133] & reg_we & !reg_error;
  assign WKUP_DETECTOR_REGWEN_3_wd = reg_wdata[0];

  assign WKUP_DETECTOR_REGWEN_4_we = addrHitNWrAllowed[134] & reg_we & !reg_error;
  assign WKUP_DETECTOR_REGWEN_4_wd = reg_wdata[0];

  assign WKUP_DETECTOR_REGWEN_5_we = addrHitNWrAllowed[135] & reg_we & !reg_error;
  assign WKUP_DETECTOR_REGWEN_5_wd = reg_wdata[0];

  assign WKUP_DETECTOR_REGWEN_6_we = addrHitNWrAllowed[136] & reg_we & !reg_error;
  assign WKUP_DETECTOR_REGWEN_6_wd = reg_wdata[0];

  assign WKUP_DETECTOR_REGWEN_7_we = addrHitNWrAllowed[137] & reg_we & !reg_error;
  assign WKUP_DETECTOR_REGWEN_7_wd = reg_wdata[0];

  assign WKUP_DETECTOR_EN_0_we = addrHitNWrAllowed[138] & reg_we & !reg_error;
  assign WKUP_DETECTOR_EN_1_we = addrHitNWrAllowed[139] & reg_we & !reg_error;
  assign WKUP_DETECTOR_EN_2_we = addrHitNWrAllowed[140] & reg_we & !reg_error;
  assign WKUP_DETECTOR_EN_3_we = addrHitNWrAllowed[141] & reg_we & !reg_error;
  assign WKUP_DETECTOR_EN_4_we = addrHitNWrAllowed[142] & reg_we & !reg_error;
  assign WKUP_DETECTOR_EN_5_we = addrHitNWrAllowed[143] & reg_we & !reg_error;
  assign WKUP_DETECTOR_EN_6_we = addrHitNWrAllowed[144] & reg_we & !reg_error;
  assign WKUP_DETECTOR_EN_7_we = addrHitNWrAllowed[145] & reg_we & !reg_error;
  assign WKUP_DETECTOR_0_we = addrHitNWrAllowed[146] & reg_we & !reg_error;
  assign WKUP_DETECTOR_1_we = addrHitNWrAllowed[147] & reg_we & !reg_error;
  assign WKUP_DETECTOR_2_we = addrHitNWrAllowed[148] & reg_we & !reg_error;
  assign WKUP_DETECTOR_3_we = addrHitNWrAllowed[149] & reg_we & !reg_error;
  assign WKUP_DETECTOR_4_we = addrHitNWrAllowed[150] & reg_we & !reg_error;
  assign WKUP_DETECTOR_5_we = addrHitNWrAllowed[151] & reg_we & !reg_error;
  assign WKUP_DETECTOR_6_we = addrHitNWrAllowed[152] & reg_we & !reg_error;
  assign WKUP_DETECTOR_7_we = addrHitNWrAllowed[153] & reg_we & !reg_error;
  assign WKUP_DETECTOR_CNT_TH_0_we = addrHitNWrAllowed[154] & reg_we & !reg_error;
  assign WKUP_DETECTOR_CNT_TH_1_we = addrHitNWrAllowed[155] & reg_we & !reg_error;
  assign WKUP_DETECTOR_CNT_TH_2_we = addrHitNWrAllowed[156] & reg_we & !reg_error;
  assign WKUP_DETECTOR_CNT_TH_3_we = addrHitNWrAllowed[157] & reg_we & !reg_error;
  assign WKUP_DETECTOR_CNT_TH_4_we = addrHitNWrAllowed[158] & reg_we & !reg_error;
  assign WKUP_DETECTOR_CNT_TH_5_we = addrHitNWrAllowed[159] & reg_we & !reg_error;
  assign WKUP_DETECTOR_CNT_TH_6_we = addrHitNWrAllowed[160] & reg_we & !reg_error;
  assign WKUP_DETECTOR_CNT_TH_7_we = addrHitNWrAllowed[161] & reg_we & !reg_error;
  assign WKUP_DETECTOR_PADSEL_0_we = addrHitNWrAllowed[162] & reg_we & !reg_error;
  assign WKUP_DETECTOR_PADSEL_0_wd = reg_wdata[1:0];

  assign WKUP_DETECTOR_PADSEL_1_we = addrHitNWrAllowed[163] & reg_we & !reg_error;
  assign WKUP_DETECTOR_PADSEL_1_wd = reg_wdata[1:0];

  assign WKUP_DETECTOR_PADSEL_2_we = addrHitNWrAllowed[164] & reg_we & !reg_error;
  assign WKUP_DETECTOR_PADSEL_2_wd = reg_wdata[1:0];

  assign WKUP_DETECTOR_PADSEL_3_we = addrHitNWrAllowed[165] & reg_we & !reg_error;
  assign WKUP_DETECTOR_PADSEL_3_wd = reg_wdata[1:0];

  assign WKUP_DETECTOR_PADSEL_4_we = addrHitNWrAllowed[166] & reg_we & !reg_error;
  assign WKUP_DETECTOR_PADSEL_4_wd = reg_wdata[1:0];

  assign WKUP_DETECTOR_PADSEL_5_we = addrHitNWrAllowed[167] & reg_we & !reg_error;
  assign WKUP_DETECTOR_PADSEL_5_wd = reg_wdata[1:0];

  assign WKUP_DETECTOR_PADSEL_6_we = addrHitNWrAllowed[168] & reg_we & !reg_error;
  assign WKUP_DETECTOR_PADSEL_6_wd = reg_wdata[1:0];

  assign WKUP_DETECTOR_PADSEL_7_we = addrHitNWrAllowed[169] & reg_we & !reg_error;
  assign WKUP_DETECTOR_PADSEL_7_wd = reg_wdata[1:0];

  assign WKUP_CAUSE_we = addrHitNWrAllowed[170] & reg_we & !reg_error;

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = ALERT_TEST_we;
    reg_we_check[1] = MIO_PERIPH_INSEL_REGWEN_0_we;
    reg_we_check[2] = MIO_PERIPH_INSEL_REGWEN_1_we;
    reg_we_check[3] = MIO_PERIPH_INSEL_REGWEN_2_we;
    reg_we_check[4] = MIO_PERIPH_INSEL_REGWEN_3_we;
    reg_we_check[5] = MIO_PERIPH_INSEL_REGWEN_4_we;
    reg_we_check[6] = MIO_PERIPH_INSEL_REGWEN_5_we;
    reg_we_check[7] = MIO_PERIPH_INSEL_REGWEN_6_we;
    reg_we_check[8] = MIO_PERIPH_INSEL_REGWEN_7_we;
    reg_we_check[9] = MIO_PERIPH_INSEL_REGWEN_8_we;
    reg_we_check[10] = MIO_PERIPH_INSEL_REGWEN_9_we;
    reg_we_check[11] = MIO_PERIPH_INSEL_REGWEN_10_we;
    reg_we_check[12] = MIO_PERIPH_INSEL_REGWEN_11_we;
    reg_we_check[13] = MIO_PERIPH_INSEL_REGWEN_12_we;
    reg_we_check[14] = MIO_PERIPH_INSEL_REGWEN_13_we;
    reg_we_check[15] = MIO_PERIPH_INSEL_REGWEN_14_we;
    reg_we_check[16] = MIO_PERIPH_INSEL_REGWEN_15_we;
    reg_we_check[17] = MIO_PERIPH_INSEL_REGWEN_16_we;
    reg_we_check[18] = MIO_PERIPH_INSEL_REGWEN_17_we;
    reg_we_check[19] = MIO_PERIPH_INSEL_REGWEN_18_we;
    reg_we_check[20] = MIO_PERIPH_INSEL_REGWEN_19_we;
    reg_we_check[21] = MIO_PERIPH_INSEL_REGWEN_20_we;
    reg_we_check[22] = MIO_PERIPH_INSEL_REGWEN_21_we;
    reg_we_check[23] = MIO_PERIPH_INSEL_REGWEN_22_we;
    reg_we_check[24] = MIO_PERIPH_INSEL_REGWEN_23_we;
    reg_we_check[25] = MIO_PERIPH_INSEL_REGWEN_24_we;
    reg_we_check[26] = MIO_PERIPH_INSEL_REGWEN_25_we;
    reg_we_check[27] = MIO_PERIPH_INSEL_REGWEN_26_we;
    reg_we_check[28] = MIO_PERIPH_INSEL_REGWEN_27_we;
    reg_we_check[29] = MIO_PERIPH_INSEL_REGWEN_28_we;
    reg_we_check[30] = MIO_PERIPH_INSEL_REGWEN_29_we;
    reg_we_check[31] = MIO_PERIPH_INSEL_REGWEN_30_we;
    reg_we_check[32] = MIO_PERIPH_INSEL_REGWEN_31_we;
    reg_we_check[33] = MIO_PERIPH_INSEL_0_gated_we;
    reg_we_check[34] = MIO_PERIPH_INSEL_1_gated_we;
    reg_we_check[35] = MIO_PERIPH_INSEL_2_gated_we;
    reg_we_check[36] = MIO_PERIPH_INSEL_3_gated_we;
    reg_we_check[37] = MIO_PERIPH_INSEL_4_gated_we;
    reg_we_check[38] = MIO_PERIPH_INSEL_5_gated_we;
    reg_we_check[39] = MIO_PERIPH_INSEL_6_gated_we;
    reg_we_check[40] = MIO_PERIPH_INSEL_7_gated_we;
    reg_we_check[41] = MIO_PERIPH_INSEL_8_gated_we;
    reg_we_check[42] = MIO_PERIPH_INSEL_9_gated_we;
    reg_we_check[43] = MIO_PERIPH_INSEL_10_gated_we;
    reg_we_check[44] = MIO_PERIPH_INSEL_11_gated_we;
    reg_we_check[45] = MIO_PERIPH_INSEL_12_gated_we;
    reg_we_check[46] = MIO_PERIPH_INSEL_13_gated_we;
    reg_we_check[47] = MIO_PERIPH_INSEL_14_gated_we;
    reg_we_check[48] = MIO_PERIPH_INSEL_15_gated_we;
    reg_we_check[49] = MIO_PERIPH_INSEL_16_gated_we;
    reg_we_check[50] = MIO_PERIPH_INSEL_17_gated_we;
    reg_we_check[51] = MIO_PERIPH_INSEL_18_gated_we;
    reg_we_check[52] = MIO_PERIPH_INSEL_19_gated_we;
    reg_we_check[53] = MIO_PERIPH_INSEL_20_gated_we;
    reg_we_check[54] = MIO_PERIPH_INSEL_21_gated_we;
    reg_we_check[55] = MIO_PERIPH_INSEL_22_gated_we;
    reg_we_check[56] = MIO_PERIPH_INSEL_23_gated_we;
    reg_we_check[57] = MIO_PERIPH_INSEL_24_gated_we;
    reg_we_check[58] = MIO_PERIPH_INSEL_25_gated_we;
    reg_we_check[59] = MIO_PERIPH_INSEL_26_gated_we;
    reg_we_check[60] = MIO_PERIPH_INSEL_27_gated_we;
    reg_we_check[61] = MIO_PERIPH_INSEL_28_gated_we;
    reg_we_check[62] = MIO_PERIPH_INSEL_29_gated_we;
    reg_we_check[63] = MIO_PERIPH_INSEL_30_gated_we;
    reg_we_check[64] = MIO_PERIPH_INSEL_31_gated_we;
    reg_we_check[65] = MIO_OUTSEL_REGWEN_we;
    reg_we_check[66] = MIO_OUTSEL_gated_we;
    reg_we_check[67] = MIO_PAD_ATTR_REGWEN_we;
    reg_we_check[68] = MIO_PAD_ATTR_gated_we;
    reg_we_check[69] = DIO_PAD_ATTR_REGWEN_0_we;
    reg_we_check[70] = DIO_PAD_ATTR_REGWEN_1_we;
    reg_we_check[71] = DIO_PAD_ATTR_REGWEN_2_we;
    reg_we_check[72] = DIO_PAD_ATTR_REGWEN_3_we;
    reg_we_check[73] = DIO_PAD_ATTR_REGWEN_4_we;
    reg_we_check[74] = DIO_PAD_ATTR_REGWEN_5_we;
    reg_we_check[75] = DIO_PAD_ATTR_REGWEN_6_we;
    reg_we_check[76] = DIO_PAD_ATTR_REGWEN_7_we;
    reg_we_check[77] = DIO_PAD_ATTR_REGWEN_8_we;
    reg_we_check[78] = DIO_PAD_ATTR_0_gated_we;
    reg_we_check[79] = DIO_PAD_ATTR_1_gated_we;
    reg_we_check[80] = DIO_PAD_ATTR_2_gated_we;
    reg_we_check[81] = DIO_PAD_ATTR_3_gated_we;
    reg_we_check[82] = DIO_PAD_ATTR_4_gated_we;
    reg_we_check[83] = DIO_PAD_ATTR_5_gated_we;
    reg_we_check[84] = DIO_PAD_ATTR_6_gated_we;
    reg_we_check[85] = DIO_PAD_ATTR_7_gated_we;
    reg_we_check[86] = DIO_PAD_ATTR_8_gated_we;
    reg_we_check[87] = DI3C_PAD_ATTR_REGWEN_0_we;
    reg_we_check[88] = DI3C_PAD_ATTR_REGWEN_1_we;
    reg_we_check[89] = DI3C_PAD_ATTR_0_gated_we;
    reg_we_check[90] = DI3C_PAD_ATTR_1_gated_we;
    reg_we_check[91] = MIO_PAD_SLEEP_STATUS_we;
    reg_we_check[92] = MIO_PAD_SLEEP_REGWEN_we;
    reg_we_check[93] = MIO_PAD_SLEEP_EN_gated_we;
    reg_we_check[94] = MIO_PAD_SLEEP_MODE_gated_we;
    reg_we_check[95] = DIO_PAD_SLEEP_STATUS_we;
    reg_we_check[96] = DIO_PAD_SLEEP_REGWEN_0_we;
    reg_we_check[97] = DIO_PAD_SLEEP_REGWEN_1_we;
    reg_we_check[98] = DIO_PAD_SLEEP_REGWEN_2_we;
    reg_we_check[99] = DIO_PAD_SLEEP_REGWEN_3_we;
    reg_we_check[100] = DIO_PAD_SLEEP_REGWEN_4_we;
    reg_we_check[101] = DIO_PAD_SLEEP_REGWEN_5_we;
    reg_we_check[102] = DIO_PAD_SLEEP_REGWEN_6_we;
    reg_we_check[103] = DIO_PAD_SLEEP_REGWEN_7_we;
    reg_we_check[104] = DIO_PAD_SLEEP_REGWEN_8_we;
    reg_we_check[105] = DIO_PAD_SLEEP_EN_0_gated_we;
    reg_we_check[106] = DIO_PAD_SLEEP_EN_1_gated_we;
    reg_we_check[107] = DIO_PAD_SLEEP_EN_2_gated_we;
    reg_we_check[108] = DIO_PAD_SLEEP_EN_3_gated_we;
    reg_we_check[109] = DIO_PAD_SLEEP_EN_4_gated_we;
    reg_we_check[110] = DIO_PAD_SLEEP_EN_5_gated_we;
    reg_we_check[111] = DIO_PAD_SLEEP_EN_6_gated_we;
    reg_we_check[112] = DIO_PAD_SLEEP_EN_7_gated_we;
    reg_we_check[113] = DIO_PAD_SLEEP_EN_8_gated_we;
    reg_we_check[114] = DIO_PAD_SLEEP_MODE_0_gated_we;
    reg_we_check[115] = DIO_PAD_SLEEP_MODE_1_gated_we;
    reg_we_check[116] = DIO_PAD_SLEEP_MODE_2_gated_we;
    reg_we_check[117] = DIO_PAD_SLEEP_MODE_3_gated_we;
    reg_we_check[118] = DIO_PAD_SLEEP_MODE_4_gated_we;
    reg_we_check[119] = DIO_PAD_SLEEP_MODE_5_gated_we;
    reg_we_check[120] = DIO_PAD_SLEEP_MODE_6_gated_we;
    reg_we_check[121] = DIO_PAD_SLEEP_MODE_7_gated_we;
    reg_we_check[122] = DIO_PAD_SLEEP_MODE_8_gated_we;
    reg_we_check[123] = DI3C_PAD_SLEEP_STATUS_we;
    reg_we_check[124] = DI3C_PAD_SLEEP_REGWEN_0_we;
    reg_we_check[125] = DI3C_PAD_SLEEP_REGWEN_1_we;
    reg_we_check[126] = DI3C_PAD_SLEEP_EN_0_gated_we;
    reg_we_check[127] = DI3C_PAD_SLEEP_EN_1_gated_we;
    reg_we_check[128] = DI3C_PAD_SLEEP_MODE_0_gated_we;
    reg_we_check[129] = DI3C_PAD_SLEEP_MODE_1_gated_we;
    reg_we_check[130] = WKUP_DETECTOR_REGWEN_0_we;
    reg_we_check[131] = WKUP_DETECTOR_REGWEN_1_we;
    reg_we_check[132] = WKUP_DETECTOR_REGWEN_2_we;
    reg_we_check[133] = WKUP_DETECTOR_REGWEN_3_we;
    reg_we_check[134] = WKUP_DETECTOR_REGWEN_4_we;
    reg_we_check[135] = WKUP_DETECTOR_REGWEN_5_we;
    reg_we_check[136] = WKUP_DETECTOR_REGWEN_6_we;
    reg_we_check[137] = WKUP_DETECTOR_REGWEN_7_we;
    reg_we_check[138] = WKUP_DETECTOR_EN_0_we;
    reg_we_check[139] = WKUP_DETECTOR_EN_1_we;
    reg_we_check[140] = WKUP_DETECTOR_EN_2_we;
    reg_we_check[141] = WKUP_DETECTOR_EN_3_we;
    reg_we_check[142] = WKUP_DETECTOR_EN_4_we;
    reg_we_check[143] = WKUP_DETECTOR_EN_5_we;
    reg_we_check[144] = WKUP_DETECTOR_EN_6_we;
    reg_we_check[145] = WKUP_DETECTOR_EN_7_we;
    reg_we_check[146] = WKUP_DETECTOR_0_we;
    reg_we_check[147] = WKUP_DETECTOR_1_we;
    reg_we_check[148] = WKUP_DETECTOR_2_we;
    reg_we_check[149] = WKUP_DETECTOR_3_we;
    reg_we_check[150] = WKUP_DETECTOR_4_we;
    reg_we_check[151] = WKUP_DETECTOR_5_we;
    reg_we_check[152] = WKUP_DETECTOR_6_we;
    reg_we_check[153] = WKUP_DETECTOR_7_we;
    reg_we_check[154] = WKUP_DETECTOR_CNT_TH_0_we;
    reg_we_check[155] = WKUP_DETECTOR_CNT_TH_1_we;
    reg_we_check[156] = WKUP_DETECTOR_CNT_TH_2_we;
    reg_we_check[157] = WKUP_DETECTOR_CNT_TH_3_we;
    reg_we_check[158] = WKUP_DETECTOR_CNT_TH_4_we;
    reg_we_check[159] = WKUP_DETECTOR_CNT_TH_5_we;
    reg_we_check[160] = WKUP_DETECTOR_CNT_TH_6_we;
    reg_we_check[161] = WKUP_DETECTOR_CNT_TH_7_we;
    reg_we_check[162] = WKUP_DETECTOR_PADSEL_0_gated_we;
    reg_we_check[163] = WKUP_DETECTOR_PADSEL_1_gated_we;
    reg_we_check[164] = WKUP_DETECTOR_PADSEL_2_gated_we;
    reg_we_check[165] = WKUP_DETECTOR_PADSEL_3_gated_we;
    reg_we_check[166] = WKUP_DETECTOR_PADSEL_4_gated_we;
    reg_we_check[167] = WKUP_DETECTOR_PADSEL_5_gated_we;
    reg_we_check[168] = WKUP_DETECTOR_PADSEL_6_gated_we;
    reg_we_check[169] = WKUP_DETECTOR_PADSEL_7_gated_we;
    reg_we_check[170] = WKUP_CAUSE_we;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addrHitNRdAllowed[0]: begin
        reg_rdata_next[0] = '0;
      end

      addrHitNRdAllowed[1]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_0_qs;
      end

      addrHitNRdAllowed[2]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_1_qs;
      end

      addrHitNRdAllowed[3]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_2_qs;
      end

      addrHitNRdAllowed[4]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_3_qs;
      end

      addrHitNRdAllowed[5]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_4_qs;
      end

      addrHitNRdAllowed[6]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_5_qs;
      end

      addrHitNRdAllowed[7]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_6_qs;
      end

      addrHitNRdAllowed[8]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_7_qs;
      end

      addrHitNRdAllowed[9]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_8_qs;
      end

      addrHitNRdAllowed[10]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_9_qs;
      end

      addrHitNRdAllowed[11]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_10_qs;
      end

      addrHitNRdAllowed[12]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_11_qs;
      end

      addrHitNRdAllowed[13]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_12_qs;
      end

      addrHitNRdAllowed[14]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_13_qs;
      end

      addrHitNRdAllowed[15]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_14_qs;
      end

      addrHitNRdAllowed[16]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_15_qs;
      end

      addrHitNRdAllowed[17]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_16_qs;
      end

      addrHitNRdAllowed[18]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_17_qs;
      end

      addrHitNRdAllowed[19]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_18_qs;
      end

      addrHitNRdAllowed[20]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_19_qs;
      end

      addrHitNRdAllowed[21]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_20_qs;
      end

      addrHitNRdAllowed[22]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_21_qs;
      end

      addrHitNRdAllowed[23]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_22_qs;
      end

      addrHitNRdAllowed[24]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_23_qs;
      end

      addrHitNRdAllowed[25]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_24_qs;
      end

      addrHitNRdAllowed[26]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_25_qs;
      end

      addrHitNRdAllowed[27]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_26_qs;
      end

      addrHitNRdAllowed[28]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_27_qs;
      end

      addrHitNRdAllowed[29]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_28_qs;
      end

      addrHitNRdAllowed[30]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_29_qs;
      end

      addrHitNRdAllowed[31]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_30_qs;
      end

      addrHitNRdAllowed[32]: begin
        reg_rdata_next[0] = MIO_PERIPH_INSEL_REGWEN_31_qs;
      end

      addrHitNRdAllowed[33]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_0_qs;
      end

      addrHitNRdAllowed[34]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_1_qs;
      end

      addrHitNRdAllowed[35]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_2_qs;
      end

      addrHitNRdAllowed[36]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_3_qs;
      end

      addrHitNRdAllowed[37]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_4_qs;
      end

      addrHitNRdAllowed[38]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_5_qs;
      end

      addrHitNRdAllowed[39]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_6_qs;
      end

      addrHitNRdAllowed[40]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_7_qs;
      end

      addrHitNRdAllowed[41]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_8_qs;
      end

      addrHitNRdAllowed[42]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_9_qs;
      end

      addrHitNRdAllowed[43]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_10_qs;
      end

      addrHitNRdAllowed[44]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_11_qs;
      end

      addrHitNRdAllowed[45]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_12_qs;
      end

      addrHitNRdAllowed[46]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_13_qs;
      end

      addrHitNRdAllowed[47]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_14_qs;
      end

      addrHitNRdAllowed[48]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_15_qs;
      end

      addrHitNRdAllowed[49]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_16_qs;
      end

      addrHitNRdAllowed[50]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_17_qs;
      end

      addrHitNRdAllowed[51]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_18_qs;
      end

      addrHitNRdAllowed[52]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_19_qs;
      end

      addrHitNRdAllowed[53]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_20_qs;
      end

      addrHitNRdAllowed[54]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_21_qs;
      end

      addrHitNRdAllowed[55]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_22_qs;
      end

      addrHitNRdAllowed[56]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_23_qs;
      end

      addrHitNRdAllowed[57]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_24_qs;
      end

      addrHitNRdAllowed[58]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_25_qs;
      end

      addrHitNRdAllowed[59]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_26_qs;
      end

      addrHitNRdAllowed[60]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_27_qs;
      end

      addrHitNRdAllowed[61]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_28_qs;
      end

      addrHitNRdAllowed[62]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_29_qs;
      end

      addrHitNRdAllowed[63]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_30_qs;
      end

      addrHitNRdAllowed[64]: begin
        reg_rdata_next[1:0] = MIO_PERIPH_INSEL_31_qs;
      end

      addrHitNRdAllowed[65]: begin
        reg_rdata_next[0] = MIO_OUTSEL_REGWEN_qs;
      end

      addrHitNRdAllowed[66]: begin
        reg_rdata_next[5:0] = MIO_OUTSEL_qs;
      end

      addrHitNRdAllowed[67]: begin
        reg_rdata_next[0] = MIO_PAD_ATTR_REGWEN_qs;
      end

      addrHitNRdAllowed[68]: begin
        reg_rdata_next[0] = MIO_PAD_ATTR_PUEN_0_qs;
        reg_rdata_next[1] = MIO_PAD_ATTR_PDEN_0_qs;
        reg_rdata_next[2] = MIO_PAD_ATTR_SMTEN_0_qs;
        reg_rdata_next[6:4] = MIO_PAD_ATTR_DRV_0_qs;
      end

      addrHitNRdAllowed[69]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_REGWEN_0_qs;
      end

      addrHitNRdAllowed[70]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_REGWEN_1_qs;
      end

      addrHitNRdAllowed[71]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_REGWEN_2_qs;
      end

      addrHitNRdAllowed[72]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_REGWEN_3_qs;
      end

      addrHitNRdAllowed[73]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_REGWEN_4_qs;
      end

      addrHitNRdAllowed[74]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_REGWEN_5_qs;
      end

      addrHitNRdAllowed[75]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_REGWEN_6_qs;
      end

      addrHitNRdAllowed[76]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_REGWEN_7_qs;
      end

      addrHitNRdAllowed[77]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_REGWEN_8_qs;
      end

      addrHitNRdAllowed[78]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_0_PUEN_0_qs;
        reg_rdata_next[1] = DIO_PAD_ATTR_0_PDEN_0_qs;
        reg_rdata_next[2] = DIO_PAD_ATTR_0_SMTEN_0_qs;
        reg_rdata_next[6:4] = DIO_PAD_ATTR_0_DRV_0_qs;
      end

      addrHitNRdAllowed[79]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_1_PUEN_1_qs;
        reg_rdata_next[1] = DIO_PAD_ATTR_1_PDEN_1_qs;
        reg_rdata_next[2] = DIO_PAD_ATTR_1_SMTEN_1_qs;
        reg_rdata_next[6:4] = DIO_PAD_ATTR_1_DRV_1_qs;
      end

      addrHitNRdAllowed[80]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_2_PUEN_2_qs;
        reg_rdata_next[1] = DIO_PAD_ATTR_2_PDEN_2_qs;
        reg_rdata_next[2] = DIO_PAD_ATTR_2_SMTEN_2_qs;
        reg_rdata_next[6:4] = DIO_PAD_ATTR_2_DRV_2_qs;
      end

      addrHitNRdAllowed[81]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_3_PUEN_3_qs;
        reg_rdata_next[1] = DIO_PAD_ATTR_3_PDEN_3_qs;
        reg_rdata_next[2] = DIO_PAD_ATTR_3_SMTEN_3_qs;
        reg_rdata_next[6:4] = DIO_PAD_ATTR_3_DRV_3_qs;
      end

      addrHitNRdAllowed[82]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_4_PUEN_4_qs;
        reg_rdata_next[1] = DIO_PAD_ATTR_4_PDEN_4_qs;
        reg_rdata_next[2] = DIO_PAD_ATTR_4_SMTEN_4_qs;
        reg_rdata_next[6:4] = DIO_PAD_ATTR_4_DRV_4_qs;
      end

      addrHitNRdAllowed[83]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_5_PUEN_5_qs;
        reg_rdata_next[1] = DIO_PAD_ATTR_5_PDEN_5_qs;
        reg_rdata_next[2] = DIO_PAD_ATTR_5_SMTEN_5_qs;
        reg_rdata_next[6:4] = DIO_PAD_ATTR_5_DRV_5_qs;
      end

      addrHitNRdAllowed[84]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_6_PUEN_6_qs;
        reg_rdata_next[1] = DIO_PAD_ATTR_6_PDEN_6_qs;
        reg_rdata_next[2] = DIO_PAD_ATTR_6_SMTEN_6_qs;
        reg_rdata_next[6:4] = DIO_PAD_ATTR_6_DRV_6_qs;
      end

      addrHitNRdAllowed[85]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_7_PUEN_7_qs;
        reg_rdata_next[1] = DIO_PAD_ATTR_7_PDEN_7_qs;
        reg_rdata_next[2] = DIO_PAD_ATTR_7_SMTEN_7_qs;
        reg_rdata_next[6:4] = DIO_PAD_ATTR_7_DRV_7_qs;
      end

      addrHitNRdAllowed[86]: begin
        reg_rdata_next[0] = DIO_PAD_ATTR_8_PUEN_8_qs;
        reg_rdata_next[1] = DIO_PAD_ATTR_8_PDEN_8_qs;
        reg_rdata_next[2] = DIO_PAD_ATTR_8_SMTEN_8_qs;
        reg_rdata_next[6:4] = DIO_PAD_ATTR_8_DRV_8_qs;
      end

      addrHitNRdAllowed[87]: begin
        reg_rdata_next[0] = DI3C_PAD_ATTR_REGWEN_0_qs;
      end

      addrHitNRdAllowed[88]: begin
        reg_rdata_next[0] = DI3C_PAD_ATTR_REGWEN_1_qs;
      end

      addrHitNRdAllowed[89]: begin
        reg_rdata_next[0] = DI3C_PAD_ATTR_0_PUEN_0_qs;
        reg_rdata_next[1] = DI3C_PAD_ATTR_0_PDEN_0_qs;
        reg_rdata_next[2] = DI3C_PAD_ATTR_0_FILTEN_0_qs;
        reg_rdata_next[3] = DI3C_PAD_ATTR_0_DLYEN_0_qs;
        reg_rdata_next[4] = DI3C_PAD_ATTR_0_I2CEN_0_qs;
        reg_rdata_next[5] = DI3C_PAD_ATTR_0_RINTEN_0_qs;
      end

      addrHitNRdAllowed[90]: begin
        reg_rdata_next[0] = DI3C_PAD_ATTR_1_PUEN_1_qs;
        reg_rdata_next[1] = DI3C_PAD_ATTR_1_PDEN_1_qs;
        reg_rdata_next[2] = DI3C_PAD_ATTR_1_FILTEN_1_qs;
        reg_rdata_next[3] = DI3C_PAD_ATTR_1_DLYEN_1_qs;
        reg_rdata_next[4] = DI3C_PAD_ATTR_1_I2CEN_1_qs;
        reg_rdata_next[5] = DI3C_PAD_ATTR_1_RINTEN_1_qs;
      end

      addrHitNRdAllowed[91]: begin
        reg_rdata_next[0] = MIO_PAD_SLEEP_STATUS_qs;
      end

      addrHitNRdAllowed[92]: begin
        reg_rdata_next[0] = MIO_PAD_SLEEP_REGWEN_qs;
      end

      addrHitNRdAllowed[93]: begin
        reg_rdata_next[0] = MIO_PAD_SLEEP_EN_qs;
      end

      addrHitNRdAllowed[94]: begin
        reg_rdata_next[1:0] = MIO_PAD_SLEEP_MODE_qs;
      end

      addrHitNRdAllowed[95]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_STATUS_EN_0_qs;
        reg_rdata_next[1] = DIO_PAD_SLEEP_STATUS_EN_1_qs;
        reg_rdata_next[2] = DIO_PAD_SLEEP_STATUS_EN_2_qs;
        reg_rdata_next[3] = DIO_PAD_SLEEP_STATUS_EN_3_qs;
        reg_rdata_next[4] = DIO_PAD_SLEEP_STATUS_EN_4_qs;
        reg_rdata_next[5] = DIO_PAD_SLEEP_STATUS_EN_5_qs;
        reg_rdata_next[6] = DIO_PAD_SLEEP_STATUS_EN_6_qs;
        reg_rdata_next[7] = DIO_PAD_SLEEP_STATUS_EN_7_qs;
        reg_rdata_next[8] = DIO_PAD_SLEEP_STATUS_EN_8_qs;
      end

      addrHitNRdAllowed[96]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_REGWEN_0_qs;
      end

      addrHitNRdAllowed[97]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_REGWEN_1_qs;
      end

      addrHitNRdAllowed[98]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_REGWEN_2_qs;
      end

      addrHitNRdAllowed[99]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_REGWEN_3_qs;
      end

      addrHitNRdAllowed[100]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_REGWEN_4_qs;
      end

      addrHitNRdAllowed[101]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_REGWEN_5_qs;
      end

      addrHitNRdAllowed[102]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_REGWEN_6_qs;
      end

      addrHitNRdAllowed[103]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_REGWEN_7_qs;
      end

      addrHitNRdAllowed[104]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_REGWEN_8_qs;
      end

      addrHitNRdAllowed[105]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_EN_0_qs;
      end

      addrHitNRdAllowed[106]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_EN_1_qs;
      end

      addrHitNRdAllowed[107]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_EN_2_qs;
      end

      addrHitNRdAllowed[108]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_EN_3_qs;
      end

      addrHitNRdAllowed[109]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_EN_4_qs;
      end

      addrHitNRdAllowed[110]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_EN_5_qs;
      end

      addrHitNRdAllowed[111]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_EN_6_qs;
      end

      addrHitNRdAllowed[112]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_EN_7_qs;
      end

      addrHitNRdAllowed[113]: begin
        reg_rdata_next[0] = DIO_PAD_SLEEP_EN_8_qs;
      end

      addrHitNRdAllowed[114]: begin
        reg_rdata_next[1:0] = DIO_PAD_SLEEP_MODE_0_qs;
      end

      addrHitNRdAllowed[115]: begin
        reg_rdata_next[1:0] = DIO_PAD_SLEEP_MODE_1_qs;
      end

      addrHitNRdAllowed[116]: begin
        reg_rdata_next[1:0] = DIO_PAD_SLEEP_MODE_2_qs;
      end

      addrHitNRdAllowed[117]: begin
        reg_rdata_next[1:0] = DIO_PAD_SLEEP_MODE_3_qs;
      end

      addrHitNRdAllowed[118]: begin
        reg_rdata_next[1:0] = DIO_PAD_SLEEP_MODE_4_qs;
      end

      addrHitNRdAllowed[119]: begin
        reg_rdata_next[1:0] = DIO_PAD_SLEEP_MODE_5_qs;
      end

      addrHitNRdAllowed[120]: begin
        reg_rdata_next[1:0] = DIO_PAD_SLEEP_MODE_6_qs;
      end

      addrHitNRdAllowed[121]: begin
        reg_rdata_next[1:0] = DIO_PAD_SLEEP_MODE_7_qs;
      end

      addrHitNRdAllowed[122]: begin
        reg_rdata_next[1:0] = DIO_PAD_SLEEP_MODE_8_qs;
      end

      addrHitNRdAllowed[123]: begin
        reg_rdata_next[0] = DI3C_PAD_SLEEP_STATUS_EN_0_qs;
        reg_rdata_next[1] = DI3C_PAD_SLEEP_STATUS_EN_1_qs;
      end

      addrHitNRdAllowed[124]: begin
        reg_rdata_next[0] = DI3C_PAD_SLEEP_REGWEN_0_qs;
      end

      addrHitNRdAllowed[125]: begin
        reg_rdata_next[0] = DI3C_PAD_SLEEP_REGWEN_1_qs;
      end

      addrHitNRdAllowed[126]: begin
        reg_rdata_next[0] = DI3C_PAD_SLEEP_EN_0_qs;
      end

      addrHitNRdAllowed[127]: begin
        reg_rdata_next[0] = DI3C_PAD_SLEEP_EN_1_qs;
      end

      addrHitNRdAllowed[128]: begin
        reg_rdata_next[1:0] = DI3C_PAD_SLEEP_MODE_0_qs;
      end

      addrHitNRdAllowed[129]: begin
        reg_rdata_next[1:0] = DI3C_PAD_SLEEP_MODE_1_qs;
      end

      addrHitNRdAllowed[130]: begin
        reg_rdata_next[0] = WKUP_DETECTOR_REGWEN_0_qs;
      end

      addrHitNRdAllowed[131]: begin
        reg_rdata_next[0] = WKUP_DETECTOR_REGWEN_1_qs;
      end

      addrHitNRdAllowed[132]: begin
        reg_rdata_next[0] = WKUP_DETECTOR_REGWEN_2_qs;
      end

      addrHitNRdAllowed[133]: begin
        reg_rdata_next[0] = WKUP_DETECTOR_REGWEN_3_qs;
      end

      addrHitNRdAllowed[134]: begin
        reg_rdata_next[0] = WKUP_DETECTOR_REGWEN_4_qs;
      end

      addrHitNRdAllowed[135]: begin
        reg_rdata_next[0] = WKUP_DETECTOR_REGWEN_5_qs;
      end

      addrHitNRdAllowed[136]: begin
        reg_rdata_next[0] = WKUP_DETECTOR_REGWEN_6_qs;
      end

      addrHitNRdAllowed[137]: begin
        reg_rdata_next[0] = WKUP_DETECTOR_REGWEN_7_qs;
      end

      addrHitNRdAllowed[138]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_EN_0_qs);
      end
      addrHitNRdAllowed[139]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_EN_1_qs);
      end
      addrHitNRdAllowed[140]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_EN_2_qs);
      end
      addrHitNRdAllowed[141]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_EN_3_qs);
      end
      addrHitNRdAllowed[142]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_EN_4_qs);
      end
      addrHitNRdAllowed[143]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_EN_5_qs);
      end
      addrHitNRdAllowed[144]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_EN_6_qs);
      end
      addrHitNRdAllowed[145]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_EN_7_qs);
      end
      addrHitNRdAllowed[146]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_0_qs);
      end
      addrHitNRdAllowed[147]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_1_qs);
      end
      addrHitNRdAllowed[148]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_2_qs);
      end
      addrHitNRdAllowed[149]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_3_qs);
      end
      addrHitNRdAllowed[150]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_4_qs);
      end
      addrHitNRdAllowed[151]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_5_qs);
      end
      addrHitNRdAllowed[152]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_6_qs);
      end
      addrHitNRdAllowed[153]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_7_qs);
      end
      addrHitNRdAllowed[154]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_CNT_TH_0_qs);
      end
      addrHitNRdAllowed[155]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_CNT_TH_1_qs);
      end
      addrHitNRdAllowed[156]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_CNT_TH_2_qs);
      end
      addrHitNRdAllowed[157]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_CNT_TH_3_qs);
      end
      addrHitNRdAllowed[158]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_CNT_TH_4_qs);
      end
      addrHitNRdAllowed[159]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_CNT_TH_5_qs);
      end
      addrHitNRdAllowed[160]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_CNT_TH_6_qs);
      end
      addrHitNRdAllowed[161]: begin
        reg_rdata_next = DW'(WKUP_DETECTOR_CNT_TH_7_qs);
      end
      addrHitNRdAllowed[162]: begin
        reg_rdata_next[1:0] = WKUP_DETECTOR_PADSEL_0_qs;
      end

      addrHitNRdAllowed[163]: begin
        reg_rdata_next[1:0] = WKUP_DETECTOR_PADSEL_1_qs;
      end

      addrHitNRdAllowed[164]: begin
        reg_rdata_next[1:0] = WKUP_DETECTOR_PADSEL_2_qs;
      end

      addrHitNRdAllowed[165]: begin
        reg_rdata_next[1:0] = WKUP_DETECTOR_PADSEL_3_qs;
      end

      addrHitNRdAllowed[166]: begin
        reg_rdata_next[1:0] = WKUP_DETECTOR_PADSEL_4_qs;
      end

      addrHitNRdAllowed[167]: begin
        reg_rdata_next[1:0] = WKUP_DETECTOR_PADSEL_5_qs;
      end

      addrHitNRdAllowed[168]: begin
        reg_rdata_next[1:0] = WKUP_DETECTOR_PADSEL_6_qs;
      end

      addrHitNRdAllowed[169]: begin
        reg_rdata_next[1:0] = WKUP_DETECTOR_PADSEL_7_qs;
      end

      addrHitNRdAllowed[170]: begin
        reg_rdata_next = DW'(WKUP_CAUSE_qs);
      end
      default: begin
        reg_rdata_next = '0;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  logic reg_busy_sel;
  assign reg_busy = reg_busy_sel | shadow_busy;
  always_comb begin
    reg_busy_sel = '0;
    unique case (1'b1)
      addr_hit[138]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_EN_0_busy;
      end
      addr_hit[139]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_EN_1_busy;
      end
      addr_hit[140]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_EN_2_busy;
      end
      addr_hit[141]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_EN_3_busy;
      end
      addr_hit[142]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_EN_4_busy;
      end
      addr_hit[143]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_EN_5_busy;
      end
      addr_hit[144]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_EN_6_busy;
      end
      addr_hit[145]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_EN_7_busy;
      end
      addr_hit[146]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_0_busy;
      end
      addr_hit[147]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_1_busy;
      end
      addr_hit[148]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_2_busy;
      end
      addr_hit[149]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_3_busy;
      end
      addr_hit[150]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_4_busy;
      end
      addr_hit[151]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_5_busy;
      end
      addr_hit[152]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_6_busy;
      end
      addr_hit[153]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_7_busy;
      end
      addr_hit[154]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_CNT_TH_0_busy;
      end
      addr_hit[155]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_CNT_TH_1_busy;
      end
      addr_hit[156]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_CNT_TH_2_busy;
      end
      addr_hit[157]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_CNT_TH_3_busy;
      end
      addr_hit[158]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_CNT_TH_4_busy;
      end
      addr_hit[159]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_CNT_TH_5_busy;
      end
      addr_hit[160]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_CNT_TH_6_busy;
      end
      addr_hit[161]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_DETECTOR_CNT_TH_7_busy;
      end
      addr_hit[170]: begin // Note: rd/wr RACL is not factored in
        reg_busy_sel = WKUP_CAUSE_busy;
      end
      default: begin
        reg_busy_sel  = '0;
      end
    endcase
  end


  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
// Local Variables:
// fill-column:1
// verilog-auto-arg-sort:t
// verilog-typedef-regexp: "_[etu]$"
// verilog-library-directories:(".")
// End:
