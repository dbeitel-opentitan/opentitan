// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// This file was generated automatically.
// Please do not modify content of this file directly.
// File generated by using template: "toplevel_memory.rs.tpl"
// To regenerate this file follow OpenTitan topgen documentations.

#![allow(dead_code)]

//! Rust Top-Specific Definitions.
//!
//! This file contains const definitions for use within Rust code.

/// Memory base for soc_proxy_ctn in top darjeeling.
pub const TOP_DARJEELING_CTN_BASE_ADDR: usize = 0x40000000;

/// Memory size for soc_proxy_ctn in top darjeeling.
pub const TOP_DARJEELING_CTN_SIZE_BYTES: usize = 0x40000000;
/// Memory base for sram_ctrl_ret_aon_ram_ret_aon in top darjeeling.
pub const TOP_DARJEELING_RAM_RET_AON_BASE_ADDR: usize = 0x30600000;

/// Memory size for sram_ctrl_ret_aon_ram_ret_aon in top darjeeling.
pub const TOP_DARJEELING_RAM_RET_AON_SIZE_BYTES: usize = 0x1000;
/// Memory base for flash_ctrl_eflash in top darjeeling.
pub const TOP_DARJEELING_EFLASH_BASE_ADDR: usize = 0x34000000;

/// Memory size for flash_ctrl_eflash in top darjeeling.
pub const TOP_DARJEELING_EFLASH_SIZE_BYTES: usize = 0x100000;
/// Memory base for sram_ctrl_main_ram_main in top darjeeling.
pub const TOP_DARJEELING_RAM_MAIN_BASE_ADDR: usize = 0x10000000;

/// Memory size for sram_ctrl_main_ram_main in top darjeeling.
pub const TOP_DARJEELING_RAM_MAIN_SIZE_BYTES: usize = 0x10000;
/// Memory base for sram_ctrl_mbox_ram_mbox in top darjeeling.
pub const TOP_DARJEELING_RAM_MBOX_BASE_ADDR: usize = 0x11000000;

/// Memory size for sram_ctrl_mbox_ram_mbox in top darjeeling.
pub const TOP_DARJEELING_RAM_MBOX_SIZE_BYTES: usize = 0x1000;
/// Memory base for rom_ctrl0_rom0 in top darjeeling.
pub const TOP_DARJEELING_ROM0_BASE_ADDR: usize = 0x00008000;

/// Memory size for rom_ctrl0_rom0 in top darjeeling.
pub const TOP_DARJEELING_ROM0_SIZE_BYTES: usize = 0x8000;
/// Memory base for rom_ctrl1_rom1 in top darjeeling.
pub const TOP_DARJEELING_ROM1_BASE_ADDR: usize = 0x00020000;

/// Memory size for rom_ctrl1_rom1 in top darjeeling.
pub const TOP_DARJEELING_ROM1_SIZE_BYTES: usize = 0x10000;

/// Peripheral base address for uart0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_UART0_BASE_ADDR: usize = 0x30010000;

/// Peripheral size for uart0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_UART0_BASE_ADDR and
/// `TOP_DARJEELING_UART0_BASE_ADDR + TOP_DARJEELING_UART0_SIZE_BYTES`.
pub const TOP_DARJEELING_UART0_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for gpio in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_GPIO_BASE_ADDR: usize = 0x30000000;

/// Peripheral size for gpio in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_GPIO_BASE_ADDR and
/// `TOP_DARJEELING_GPIO_BASE_ADDR + TOP_DARJEELING_GPIO_SIZE_BYTES`.
pub const TOP_DARJEELING_GPIO_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for spi_device in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SPI_DEVICE_BASE_ADDR: usize = 0x30310000;

/// Peripheral size for spi_device in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SPI_DEVICE_BASE_ADDR and
/// `TOP_DARJEELING_SPI_DEVICE_BASE_ADDR + TOP_DARJEELING_SPI_DEVICE_SIZE_BYTES`.
pub const TOP_DARJEELING_SPI_DEVICE_SIZE_BYTES: usize = 0x2000;

/// Peripheral base address for i2c0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_I2C0_BASE_ADDR: usize = 0x30080000;

/// Peripheral size for i2c0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_I2C0_BASE_ADDR and
/// `TOP_DARJEELING_I2C0_BASE_ADDR + TOP_DARJEELING_I2C0_SIZE_BYTES`.
pub const TOP_DARJEELING_I2C0_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for i2c1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_I2C1_BASE_ADDR: usize = 0x31030000;

/// Peripheral size for i2c1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_I2C1_BASE_ADDR and
/// `TOP_DARJEELING_I2C1_BASE_ADDR + TOP_DARJEELING_I2C1_SIZE_BYTES`.
pub const TOP_DARJEELING_I2C1_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for i2c2 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_I2C2_BASE_ADDR: usize = 0x31040000;

/// Peripheral size for i2c2 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_I2C2_BASE_ADDR and
/// `TOP_DARJEELING_I2C2_BASE_ADDR + TOP_DARJEELING_I2C2_SIZE_BYTES`.
pub const TOP_DARJEELING_I2C2_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for rv_timer in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_TIMER_BASE_ADDR: usize = 0x30100000;

/// Peripheral size for rv_timer in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_TIMER_BASE_ADDR and
/// `TOP_DARJEELING_RV_TIMER_BASE_ADDR + TOP_DARJEELING_RV_TIMER_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_TIMER_SIZE_BYTES: usize = 0x200;

/// Peripheral base address for core device on otp_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_OTP_CTRL_CORE_BASE_ADDR: usize = 0x30130000;

/// Peripheral size for core device on otp_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_OTP_CTRL_CORE_BASE_ADDR and
/// `TOP_DARJEELING_OTP_CTRL_CORE_BASE_ADDR + TOP_DARJEELING_OTP_CTRL_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_OTP_CTRL_CORE_SIZE_BYTES: usize = 0x2000;

/// Peripheral base address for prim device on otp_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_OTP_CTRL_PRIM_BASE_ADDR: usize = 0x30134000;

/// Peripheral size for prim device on otp_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_OTP_CTRL_PRIM_BASE_ADDR and
/// `TOP_DARJEELING_OTP_CTRL_PRIM_BASE_ADDR + TOP_DARJEELING_OTP_CTRL_PRIM_SIZE_BYTES`.
pub const TOP_DARJEELING_OTP_CTRL_PRIM_SIZE_BYTES: usize = 0x20;

/// Peripheral base address for lc_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_LC_CTRL_BASE_ADDR: usize = 0x30140000;

/// Peripheral size for lc_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_LC_CTRL_BASE_ADDR and
/// `TOP_DARJEELING_LC_CTRL_BASE_ADDR + TOP_DARJEELING_LC_CTRL_SIZE_BYTES`.
pub const TOP_DARJEELING_LC_CTRL_SIZE_BYTES: usize = 0x100;

/// Peripheral base address for alert_handler in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ALERT_HANDLER_BASE_ADDR: usize = 0x30150000;

/// Peripheral size for alert_handler in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ALERT_HANDLER_BASE_ADDR and
/// `TOP_DARJEELING_ALERT_HANDLER_BASE_ADDR + TOP_DARJEELING_ALERT_HANDLER_SIZE_BYTES`.
pub const TOP_DARJEELING_ALERT_HANDLER_SIZE_BYTES: usize = 0x800;

/// Peripheral base address for spi_host0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SPI_HOST0_BASE_ADDR: usize = 0x30300000;

/// Peripheral size for spi_host0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SPI_HOST0_BASE_ADDR and
/// `TOP_DARJEELING_SPI_HOST0_BASE_ADDR + TOP_DARJEELING_SPI_HOST0_SIZE_BYTES`.
pub const TOP_DARJEELING_SPI_HOST0_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for spi_host1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SPI_HOST1_BASE_ADDR: usize = 0x32000000;

/// Peripheral size for spi_host1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SPI_HOST1_BASE_ADDR and
/// `TOP_DARJEELING_SPI_HOST1_BASE_ADDR + TOP_DARJEELING_SPI_HOST1_SIZE_BYTES`.
pub const TOP_DARJEELING_SPI_HOST1_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for usbdev in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_USBDEV_BASE_ADDR: usize = 0x32010000;

/// Peripheral size for usbdev in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_USBDEV_BASE_ADDR and
/// `TOP_DARJEELING_USBDEV_BASE_ADDR + TOP_DARJEELING_USBDEV_SIZE_BYTES`.
pub const TOP_DARJEELING_USBDEV_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for pwrmgr_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_PWRMGR_AON_BASE_ADDR: usize = 0x30400000;

/// Peripheral size for pwrmgr_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_PWRMGR_AON_BASE_ADDR and
/// `TOP_DARJEELING_PWRMGR_AON_BASE_ADDR + TOP_DARJEELING_PWRMGR_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_PWRMGR_AON_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for rstmgr_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RSTMGR_AON_BASE_ADDR: usize = 0x30410000;

/// Peripheral size for rstmgr_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RSTMGR_AON_BASE_ADDR and
/// `TOP_DARJEELING_RSTMGR_AON_BASE_ADDR + TOP_DARJEELING_RSTMGR_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_RSTMGR_AON_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for clkmgr_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_CLKMGR_AON_BASE_ADDR: usize = 0x30420000;

/// Peripheral size for clkmgr_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_CLKMGR_AON_BASE_ADDR and
/// `TOP_DARJEELING_CLKMGR_AON_BASE_ADDR + TOP_DARJEELING_CLKMGR_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_CLKMGR_AON_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for sysrst_ctrl_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SYSRST_CTRL_AON_BASE_ADDR: usize = 0x31060000;

/// Peripheral size for sysrst_ctrl_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SYSRST_CTRL_AON_BASE_ADDR and
/// `TOP_DARJEELING_SYSRST_CTRL_AON_BASE_ADDR + TOP_DARJEELING_SYSRST_CTRL_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_SYSRST_CTRL_AON_SIZE_BYTES: usize = 0x100;

/// Peripheral base address for adc_ctrl_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ADC_CTRL_AON_BASE_ADDR: usize = 0x31070000;

/// Peripheral size for adc_ctrl_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ADC_CTRL_AON_BASE_ADDR and
/// `TOP_DARJEELING_ADC_CTRL_AON_BASE_ADDR + TOP_DARJEELING_ADC_CTRL_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_ADC_CTRL_AON_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for pinmux_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_PINMUX_AON_BASE_ADDR: usize = 0x30460000;

/// Peripheral size for pinmux_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_PINMUX_AON_BASE_ADDR and
/// `TOP_DARJEELING_PINMUX_AON_BASE_ADDR + TOP_DARJEELING_PINMUX_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_PINMUX_AON_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for aon_timer_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_AON_TIMER_AON_BASE_ADDR: usize = 0x30470000;

/// Peripheral size for aon_timer_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_AON_TIMER_AON_BASE_ADDR and
/// `TOP_DARJEELING_AON_TIMER_AON_BASE_ADDR + TOP_DARJEELING_AON_TIMER_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_AON_TIMER_AON_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for ast in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_AST_BASE_ADDR: usize = 0x30480000;

/// Peripheral size for ast in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_AST_BASE_ADDR and
/// `TOP_DARJEELING_AST_BASE_ADDR + TOP_DARJEELING_AST_SIZE_BYTES`.
pub const TOP_DARJEELING_AST_SIZE_BYTES: usize = 0x400;

/// Peripheral base address for sensor_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SENSOR_CTRL_BASE_ADDR: usize = 0x30020000;

/// Peripheral size for sensor_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SENSOR_CTRL_BASE_ADDR and
/// `TOP_DARJEELING_SENSOR_CTRL_BASE_ADDR + TOP_DARJEELING_SENSOR_CTRL_SIZE_BYTES`.
pub const TOP_DARJEELING_SENSOR_CTRL_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for core device on soc_proxy in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SOC_PROXY_CORE_BASE_ADDR: usize = 0x22030000;

/// Peripheral size for core device on soc_proxy in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SOC_PROXY_CORE_BASE_ADDR and
/// `TOP_DARJEELING_SOC_PROXY_CORE_BASE_ADDR + TOP_DARJEELING_SOC_PROXY_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_SOC_PROXY_CORE_SIZE_BYTES: usize = 0x4;

/// Peripheral base address for ctn device on soc_proxy in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SOC_PROXY_CTN_BASE_ADDR: usize = 0x40000000;

/// Peripheral size for ctn device on soc_proxy in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SOC_PROXY_CTN_BASE_ADDR and
/// `TOP_DARJEELING_SOC_PROXY_CTN_BASE_ADDR + TOP_DARJEELING_SOC_PROXY_CTN_SIZE_BYTES`.
pub const TOP_DARJEELING_SOC_PROXY_CTN_SIZE_BYTES: usize = 0x40000000;

/// Peripheral base address for regs device on sram_ctrl_ret_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_BASE_ADDR: usize = 0x30500000;

/// Peripheral size for regs device on sram_ctrl_ret_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_SIZE_BYTES: usize = 0x20;

/// Peripheral base address for ram device on sram_ctrl_ret_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_BASE_ADDR: usize = 0x30600000;

/// Peripheral size for ram device on sram_ctrl_ret_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for core device on flash_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_FLASH_CTRL_CORE_BASE_ADDR: usize = 0x33000000;

/// Peripheral size for core device on flash_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_FLASH_CTRL_CORE_BASE_ADDR and
/// `TOP_DARJEELING_FLASH_CTRL_CORE_BASE_ADDR + TOP_DARJEELING_FLASH_CTRL_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_FLASH_CTRL_CORE_SIZE_BYTES: usize = 0x200;

/// Peripheral base address for prim device on flash_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_FLASH_CTRL_PRIM_BASE_ADDR: usize = 0x33008000;

/// Peripheral size for prim device on flash_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_FLASH_CTRL_PRIM_BASE_ADDR and
/// `TOP_DARJEELING_FLASH_CTRL_PRIM_BASE_ADDR + TOP_DARJEELING_FLASH_CTRL_PRIM_SIZE_BYTES`.
pub const TOP_DARJEELING_FLASH_CTRL_PRIM_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for mem device on flash_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_FLASH_CTRL_MEM_BASE_ADDR: usize = 0x34000000;

/// Peripheral size for mem device on flash_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_FLASH_CTRL_MEM_BASE_ADDR and
/// `TOP_DARJEELING_FLASH_CTRL_MEM_BASE_ADDR + TOP_DARJEELING_FLASH_CTRL_MEM_SIZE_BYTES`.
pub const TOP_DARJEELING_FLASH_CTRL_MEM_SIZE_BYTES: usize = 0x100000;

/// Peripheral base address for regs device on rv_dm in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_DM_REGS_BASE_ADDR: usize = 0x21200000;

/// Peripheral size for regs device on rv_dm in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_DM_REGS_BASE_ADDR and
/// `TOP_DARJEELING_RV_DM_REGS_BASE_ADDR + TOP_DARJEELING_RV_DM_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_DM_REGS_SIZE_BYTES: usize = 0x4;

/// Peripheral base address for mem device on rv_dm in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_DM_MEM_BASE_ADDR: usize = 0x40000;

/// Peripheral size for mem device on rv_dm in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_DM_MEM_BASE_ADDR and
/// `TOP_DARJEELING_RV_DM_MEM_BASE_ADDR + TOP_DARJEELING_RV_DM_MEM_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_DM_MEM_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for rv_plic in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_PLIC_BASE_ADDR: usize = 0x28000000;

/// Peripheral size for rv_plic in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_PLIC_BASE_ADDR and
/// `TOP_DARJEELING_RV_PLIC_BASE_ADDR + TOP_DARJEELING_RV_PLIC_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_PLIC_SIZE_BYTES: usize = 0x8000000;

/// Peripheral base address for aes in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_AES_BASE_ADDR: usize = 0x21100000;

/// Peripheral size for aes in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_AES_BASE_ADDR and
/// `TOP_DARJEELING_AES_BASE_ADDR + TOP_DARJEELING_AES_SIZE_BYTES`.
pub const TOP_DARJEELING_AES_SIZE_BYTES: usize = 0x100;

/// Peripheral base address for hmac in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_HMAC_BASE_ADDR: usize = 0x21110000;

/// Peripheral size for hmac in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_HMAC_BASE_ADDR and
/// `TOP_DARJEELING_HMAC_BASE_ADDR + TOP_DARJEELING_HMAC_SIZE_BYTES`.
pub const TOP_DARJEELING_HMAC_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for kmac in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_KMAC_BASE_ADDR: usize = 0x21120000;

/// Peripheral size for kmac in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_KMAC_BASE_ADDR and
/// `TOP_DARJEELING_KMAC_BASE_ADDR + TOP_DARJEELING_KMAC_SIZE_BYTES`.
pub const TOP_DARJEELING_KMAC_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for otbn in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_OTBN_BASE_ADDR: usize = 0x21130000;

/// Peripheral size for otbn in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_OTBN_BASE_ADDR and
/// `TOP_DARJEELING_OTBN_BASE_ADDR + TOP_DARJEELING_OTBN_SIZE_BYTES`.
pub const TOP_DARJEELING_OTBN_SIZE_BYTES: usize = 0x10000;

/// Peripheral base address for keymgr in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_KEYMGR_BASE_ADDR: usize = 0x21140000;

/// Peripheral size for keymgr in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_KEYMGR_BASE_ADDR and
/// `TOP_DARJEELING_KEYMGR_BASE_ADDR + TOP_DARJEELING_KEYMGR_SIZE_BYTES`.
pub const TOP_DARJEELING_KEYMGR_SIZE_BYTES: usize = 0x100;

/// Peripheral base address for csrng in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_CSRNG_BASE_ADDR: usize = 0x21150000;

/// Peripheral size for csrng in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_CSRNG_BASE_ADDR and
/// `TOP_DARJEELING_CSRNG_BASE_ADDR + TOP_DARJEELING_CSRNG_SIZE_BYTES`.
pub const TOP_DARJEELING_CSRNG_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for edn0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_EDN0_BASE_ADDR: usize = 0x21170000;

/// Peripheral size for edn0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_EDN0_BASE_ADDR and
/// `TOP_DARJEELING_EDN0_BASE_ADDR + TOP_DARJEELING_EDN0_SIZE_BYTES`.
pub const TOP_DARJEELING_EDN0_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for edn1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_EDN1_BASE_ADDR: usize = 0x21180000;

/// Peripheral size for edn1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_EDN1_BASE_ADDR and
/// `TOP_DARJEELING_EDN1_BASE_ADDR + TOP_DARJEELING_EDN1_SIZE_BYTES`.
pub const TOP_DARJEELING_EDN1_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for regs device on sram_ctrl_main in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_BASE_ADDR: usize = 0x211C0000;

/// Peripheral size for regs device on sram_ctrl_main in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_SIZE_BYTES: usize = 0x20;

/// Peripheral base address for ram device on sram_ctrl_main in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_BASE_ADDR: usize = 0x10000000;

/// Peripheral size for ram device on sram_ctrl_main in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_SIZE_BYTES: usize = 0x10000;

/// Peripheral base address for regs device on sram_ctrl_mbox in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_BASE_ADDR: usize = 0x211D0000;

/// Peripheral size for regs device on sram_ctrl_mbox in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_SIZE_BYTES: usize = 0x20;

/// Peripheral base address for ram device on sram_ctrl_mbox in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_BASE_ADDR: usize = 0x11000000;

/// Peripheral size for ram device on sram_ctrl_mbox in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for regs device on rom_ctrl0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ROM_CTRL0_REGS_BASE_ADDR: usize = 0x211E0000;

/// Peripheral size for regs device on rom_ctrl0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ROM_CTRL0_REGS_BASE_ADDR and
/// `TOP_DARJEELING_ROM_CTRL0_REGS_BASE_ADDR + TOP_DARJEELING_ROM_CTRL0_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_ROM_CTRL0_REGS_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for rom device on rom_ctrl0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ROM_CTRL0_ROM_BASE_ADDR: usize = 0x8000;

/// Peripheral size for rom device on rom_ctrl0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ROM_CTRL0_ROM_BASE_ADDR and
/// `TOP_DARJEELING_ROM_CTRL0_ROM_BASE_ADDR + TOP_DARJEELING_ROM_CTRL0_ROM_SIZE_BYTES`.
pub const TOP_DARJEELING_ROM_CTRL0_ROM_SIZE_BYTES: usize = 0x8000;

/// Peripheral base address for regs device on rom_ctrl1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ROM_CTRL1_REGS_BASE_ADDR: usize = 0x211E1000;

/// Peripheral size for regs device on rom_ctrl1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ROM_CTRL1_REGS_BASE_ADDR and
/// `TOP_DARJEELING_ROM_CTRL1_REGS_BASE_ADDR + TOP_DARJEELING_ROM_CTRL1_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_ROM_CTRL1_REGS_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for rom device on rom_ctrl1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ROM_CTRL1_ROM_BASE_ADDR: usize = 0x20000;

/// Peripheral size for rom device on rom_ctrl1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ROM_CTRL1_ROM_BASE_ADDR and
/// `TOP_DARJEELING_ROM_CTRL1_ROM_BASE_ADDR + TOP_DARJEELING_ROM_CTRL1_ROM_SIZE_BYTES`.
pub const TOP_DARJEELING_ROM_CTRL1_ROM_SIZE_BYTES: usize = 0x10000;

/// Peripheral base address for dma in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_DMA_BASE_ADDR: usize = 0x22010000;

/// Peripheral size for dma in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_DMA_BASE_ADDR and
/// `TOP_DARJEELING_DMA_BASE_ADDR + TOP_DARJEELING_DMA_SIZE_BYTES`.
pub const TOP_DARJEELING_DMA_SIZE_BYTES: usize = 0x100;

/// Peripheral base address for cfg device on rv_core_ibex in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_CORE_IBEX_CFG_BASE_ADDR: usize = 0x211F0000;

/// Peripheral size for cfg device on rv_core_ibex in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_CORE_IBEX_CFG_BASE_ADDR and
/// `TOP_DARJEELING_RV_CORE_IBEX_CFG_BASE_ADDR + TOP_DARJEELING_RV_CORE_IBEX_CFG_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_CORE_IBEX_CFG_SIZE_BYTES: usize = 0x800;

/// MMIO Region
///
/// MMIO region excludes any memory that is separate from the module
/// configuration space, i.e. ROM, main SRAM, and flash are excluded but
/// retention SRAM, spi_device memory, or usbdev memory are included.
pub const TOP_DARJEELING_MMIO_BASE_ADDR: usize = 0x21100000;
pub const TOP_DARJEELING_MMIO_SIZE_BYTES: usize = 0x11F08080;
