// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// This file was generated automatically.
// Please do not modify content of this file directly.
// File generated by using template: "toplevel.rs.tpl"
// To regenerate this file follow OpenTitan topgen documentations.

#![allow(dead_code)]

//! This file contains enums and consts for use within the Rust codebase.
//!
//! These definitions are for information that depends on the top-specific chip
//! configuration, which includes:
//! - Device Memory Information (for Peripherals and Memory)
//! - PLIC Interrupt ID Names and Source Mappings
//! - Alert ID Names and Source Mappings
//! - Pinmux Pin/Select Names
//! - Power Manager Wakeups

use core::convert::TryFrom;

/// Peripheral base address for uart0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_UART0_BASE_ADDR: usize = 0x30010000;

/// Peripheral size for uart0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_UART0_BASE_ADDR and
/// `TOP_DARJEELING_UART0_BASE_ADDR + TOP_DARJEELING_UART0_SIZE_BYTES`.
pub const TOP_DARJEELING_UART0_SIZE_BYTES: usize = 0x40;
/// Peripheral base address for gpio in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_GPIO_BASE_ADDR: usize = 0x30000000;

/// Peripheral size for gpio in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_GPIO_BASE_ADDR and
/// `TOP_DARJEELING_GPIO_BASE_ADDR + TOP_DARJEELING_GPIO_SIZE_BYTES`.
pub const TOP_DARJEELING_GPIO_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for spi_device in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SPI_DEVICE_BASE_ADDR: usize = 0x30310000;

/// Peripheral size for spi_device in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SPI_DEVICE_BASE_ADDR and
/// `TOP_DARJEELING_SPI_DEVICE_BASE_ADDR + TOP_DARJEELING_SPI_DEVICE_SIZE_BYTES`.
pub const TOP_DARJEELING_SPI_DEVICE_SIZE_BYTES: usize = 0x2000;
/// Peripheral base address for i2c0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_I2C0_BASE_ADDR: usize = 0x30080000;

/// Peripheral size for i2c0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_I2C0_BASE_ADDR and
/// `TOP_DARJEELING_I2C0_BASE_ADDR + TOP_DARJEELING_I2C0_SIZE_BYTES`.
pub const TOP_DARJEELING_I2C0_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for rv_timer in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_TIMER_BASE_ADDR: usize = 0x30100000;

/// Peripheral size for rv_timer in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_TIMER_BASE_ADDR and
/// `TOP_DARJEELING_RV_TIMER_BASE_ADDR + TOP_DARJEELING_RV_TIMER_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_TIMER_SIZE_BYTES: usize = 0x200;
/// Peripheral base address for core device on otp_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_OTP_CTRL_CORE_BASE_ADDR: usize = 0x30130000;

/// Peripheral size for core device on otp_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_OTP_CTRL_CORE_BASE_ADDR and
/// `TOP_DARJEELING_OTP_CTRL_CORE_BASE_ADDR + TOP_DARJEELING_OTP_CTRL_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_OTP_CTRL_CORE_SIZE_BYTES: usize = 0x8000;
/// Peripheral base address for prim device on otp_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_OTP_CTRL_PRIM_BASE_ADDR: usize = 0x30138000;

/// Peripheral size for prim device on otp_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_OTP_CTRL_PRIM_BASE_ADDR and
/// `TOP_DARJEELING_OTP_CTRL_PRIM_BASE_ADDR + TOP_DARJEELING_OTP_CTRL_PRIM_SIZE_BYTES`.
pub const TOP_DARJEELING_OTP_CTRL_PRIM_SIZE_BYTES: usize = 0x20;
/// Peripheral base address for lc_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_LC_CTRL_BASE_ADDR: usize = 0x30140000;

/// Peripheral size for lc_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_LC_CTRL_BASE_ADDR and
/// `TOP_DARJEELING_LC_CTRL_BASE_ADDR + TOP_DARJEELING_LC_CTRL_SIZE_BYTES`.
pub const TOP_DARJEELING_LC_CTRL_SIZE_BYTES: usize = 0x100;
/// Peripheral base address for alert_handler in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ALERT_HANDLER_BASE_ADDR: usize = 0x30150000;

/// Peripheral size for alert_handler in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ALERT_HANDLER_BASE_ADDR and
/// `TOP_DARJEELING_ALERT_HANDLER_BASE_ADDR + TOP_DARJEELING_ALERT_HANDLER_SIZE_BYTES`.
pub const TOP_DARJEELING_ALERT_HANDLER_SIZE_BYTES: usize = 0x800;
/// Peripheral base address for spi_host0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SPI_HOST0_BASE_ADDR: usize = 0x30300000;

/// Peripheral size for spi_host0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SPI_HOST0_BASE_ADDR and
/// `TOP_DARJEELING_SPI_HOST0_BASE_ADDR + TOP_DARJEELING_SPI_HOST0_SIZE_BYTES`.
pub const TOP_DARJEELING_SPI_HOST0_SIZE_BYTES: usize = 0x40;
/// Peripheral base address for pwrmgr_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_PWRMGR_AON_BASE_ADDR: usize = 0x30400000;

/// Peripheral size for pwrmgr_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_PWRMGR_AON_BASE_ADDR and
/// `TOP_DARJEELING_PWRMGR_AON_BASE_ADDR + TOP_DARJEELING_PWRMGR_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_PWRMGR_AON_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for rstmgr_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RSTMGR_AON_BASE_ADDR: usize = 0x30410000;

/// Peripheral size for rstmgr_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RSTMGR_AON_BASE_ADDR and
/// `TOP_DARJEELING_RSTMGR_AON_BASE_ADDR + TOP_DARJEELING_RSTMGR_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_RSTMGR_AON_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for clkmgr_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_CLKMGR_AON_BASE_ADDR: usize = 0x30420000;

/// Peripheral size for clkmgr_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_CLKMGR_AON_BASE_ADDR and
/// `TOP_DARJEELING_CLKMGR_AON_BASE_ADDR + TOP_DARJEELING_CLKMGR_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_CLKMGR_AON_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for adc_ctrl_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ADC_CTRL_AON_BASE_ADDR: usize = 0x31070000;

/// Peripheral size for adc_ctrl_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ADC_CTRL_AON_BASE_ADDR and
/// `TOP_DARJEELING_ADC_CTRL_AON_BASE_ADDR + TOP_DARJEELING_ADC_CTRL_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_ADC_CTRL_AON_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for pinmux_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_PINMUX_AON_BASE_ADDR: usize = 0x30460000;

/// Peripheral size for pinmux_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_PINMUX_AON_BASE_ADDR and
/// `TOP_DARJEELING_PINMUX_AON_BASE_ADDR + TOP_DARJEELING_PINMUX_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_PINMUX_AON_SIZE_BYTES: usize = 0x800;
/// Peripheral base address for aon_timer_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_AON_TIMER_AON_BASE_ADDR: usize = 0x30470000;

/// Peripheral size for aon_timer_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_AON_TIMER_AON_BASE_ADDR and
/// `TOP_DARJEELING_AON_TIMER_AON_BASE_ADDR + TOP_DARJEELING_AON_TIMER_AON_SIZE_BYTES`.
pub const TOP_DARJEELING_AON_TIMER_AON_SIZE_BYTES: usize = 0x40;
/// Peripheral base address for ast in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_AST_BASE_ADDR: usize = 0x30480000;

/// Peripheral size for ast in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_AST_BASE_ADDR and
/// `TOP_DARJEELING_AST_BASE_ADDR + TOP_DARJEELING_AST_SIZE_BYTES`.
pub const TOP_DARJEELING_AST_SIZE_BYTES: usize = 0x400;
/// Peripheral base address for sensor_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SENSOR_CTRL_BASE_ADDR: usize = 0x30020000;

/// Peripheral size for sensor_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SENSOR_CTRL_BASE_ADDR and
/// `TOP_DARJEELING_SENSOR_CTRL_BASE_ADDR + TOP_DARJEELING_SENSOR_CTRL_SIZE_BYTES`.
pub const TOP_DARJEELING_SENSOR_CTRL_SIZE_BYTES: usize = 0x40;
/// Peripheral base address for core device on soc_proxy in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SOC_PROXY_CORE_BASE_ADDR: usize = 0x22030000;

/// Peripheral size for core device on soc_proxy in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SOC_PROXY_CORE_BASE_ADDR and
/// `TOP_DARJEELING_SOC_PROXY_CORE_BASE_ADDR + TOP_DARJEELING_SOC_PROXY_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_SOC_PROXY_CORE_SIZE_BYTES: usize = 0x10;
/// Peripheral base address for ctn device on soc_proxy in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SOC_PROXY_CTN_BASE_ADDR: usize = 0x40000000;

/// Peripheral size for ctn device on soc_proxy in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SOC_PROXY_CTN_BASE_ADDR and
/// `TOP_DARJEELING_SOC_PROXY_CTN_BASE_ADDR + TOP_DARJEELING_SOC_PROXY_CTN_SIZE_BYTES`.
pub const TOP_DARJEELING_SOC_PROXY_CTN_SIZE_BYTES: usize = 0x40000000;
/// Peripheral base address for regs device on sram_ctrl_ret_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_BASE_ADDR: usize = 0x30500000;

/// Peripheral size for regs device on sram_ctrl_ret_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_RET_AON_REGS_SIZE_BYTES: usize = 0x20;
/// Peripheral base address for ram device on sram_ctrl_ret_aon in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_BASE_ADDR: usize = 0x30600000;

/// Peripheral size for ram device on sram_ctrl_ret_aon in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_RET_AON_RAM_SIZE_BYTES: usize = 0x1000;
/// Peripheral base address for regs device on rv_dm in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_DM_REGS_BASE_ADDR: usize = 0x21200000;

/// Peripheral size for regs device on rv_dm in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_DM_REGS_BASE_ADDR and
/// `TOP_DARJEELING_RV_DM_REGS_BASE_ADDR + TOP_DARJEELING_RV_DM_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_DM_REGS_SIZE_BYTES: usize = 0x4;
/// Peripheral base address for mem device on rv_dm in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_DM_MEM_BASE_ADDR: usize = 0x40000;

/// Peripheral size for mem device on rv_dm in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_DM_MEM_BASE_ADDR and
/// `TOP_DARJEELING_RV_DM_MEM_BASE_ADDR + TOP_DARJEELING_RV_DM_MEM_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_DM_MEM_SIZE_BYTES: usize = 0x1000;
/// Peripheral base address for rv_plic in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_PLIC_BASE_ADDR: usize = 0x28000000;

/// Peripheral size for rv_plic in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_PLIC_BASE_ADDR and
/// `TOP_DARJEELING_RV_PLIC_BASE_ADDR + TOP_DARJEELING_RV_PLIC_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_PLIC_SIZE_BYTES: usize = 0x8000000;
/// Peripheral base address for aes in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_AES_BASE_ADDR: usize = 0x21100000;

/// Peripheral size for aes in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_AES_BASE_ADDR and
/// `TOP_DARJEELING_AES_BASE_ADDR + TOP_DARJEELING_AES_SIZE_BYTES`.
pub const TOP_DARJEELING_AES_SIZE_BYTES: usize = 0x100;
/// Peripheral base address for hmac in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_HMAC_BASE_ADDR: usize = 0x21110000;

/// Peripheral size for hmac in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_HMAC_BASE_ADDR and
/// `TOP_DARJEELING_HMAC_BASE_ADDR + TOP_DARJEELING_HMAC_SIZE_BYTES`.
pub const TOP_DARJEELING_HMAC_SIZE_BYTES: usize = 0x1000;
/// Peripheral base address for kmac in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_KMAC_BASE_ADDR: usize = 0x21120000;

/// Peripheral size for kmac in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_KMAC_BASE_ADDR and
/// `TOP_DARJEELING_KMAC_BASE_ADDR + TOP_DARJEELING_KMAC_SIZE_BYTES`.
pub const TOP_DARJEELING_KMAC_SIZE_BYTES: usize = 0x1000;
/// Peripheral base address for otbn in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_OTBN_BASE_ADDR: usize = 0x21130000;

/// Peripheral size for otbn in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_OTBN_BASE_ADDR and
/// `TOP_DARJEELING_OTBN_BASE_ADDR + TOP_DARJEELING_OTBN_SIZE_BYTES`.
pub const TOP_DARJEELING_OTBN_SIZE_BYTES: usize = 0x10000;
/// Peripheral base address for keymgr_dpe in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_KEYMGR_DPE_BASE_ADDR: usize = 0x21140000;

/// Peripheral size for keymgr_dpe in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_KEYMGR_DPE_BASE_ADDR and
/// `TOP_DARJEELING_KEYMGR_DPE_BASE_ADDR + TOP_DARJEELING_KEYMGR_DPE_SIZE_BYTES`.
pub const TOP_DARJEELING_KEYMGR_DPE_SIZE_BYTES: usize = 0x100;
/// Peripheral base address for csrng in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_CSRNG_BASE_ADDR: usize = 0x21150000;

/// Peripheral size for csrng in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_CSRNG_BASE_ADDR and
/// `TOP_DARJEELING_CSRNG_BASE_ADDR + TOP_DARJEELING_CSRNG_SIZE_BYTES`.
pub const TOP_DARJEELING_CSRNG_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for edn0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_EDN0_BASE_ADDR: usize = 0x21170000;

/// Peripheral size for edn0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_EDN0_BASE_ADDR and
/// `TOP_DARJEELING_EDN0_BASE_ADDR + TOP_DARJEELING_EDN0_SIZE_BYTES`.
pub const TOP_DARJEELING_EDN0_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for edn1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_EDN1_BASE_ADDR: usize = 0x21180000;

/// Peripheral size for edn1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_EDN1_BASE_ADDR and
/// `TOP_DARJEELING_EDN1_BASE_ADDR + TOP_DARJEELING_EDN1_SIZE_BYTES`.
pub const TOP_DARJEELING_EDN1_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for regs device on sram_ctrl_main in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_BASE_ADDR: usize = 0x211C0000;

/// Peripheral size for regs device on sram_ctrl_main in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_MAIN_REGS_SIZE_BYTES: usize = 0x20;
/// Peripheral base address for ram device on sram_ctrl_main in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_BASE_ADDR: usize = 0x10000000;

/// Peripheral size for ram device on sram_ctrl_main in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_MAIN_RAM_SIZE_BYTES: usize = 0x10000;
/// Peripheral base address for regs device on sram_ctrl_mbox in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_BASE_ADDR: usize = 0x211D0000;

/// Peripheral size for regs device on sram_ctrl_mbox in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_MBOX_REGS_SIZE_BYTES: usize = 0x20;
/// Peripheral base address for ram device on sram_ctrl_mbox in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_BASE_ADDR: usize = 0x11000000;

/// Peripheral size for ram device on sram_ctrl_mbox in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_BASE_ADDR and
/// `TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_BASE_ADDR + TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_SIZE_BYTES`.
pub const TOP_DARJEELING_SRAM_CTRL_MBOX_RAM_SIZE_BYTES: usize = 0x1000;
/// Peripheral base address for regs device on rom_ctrl0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ROM_CTRL0_REGS_BASE_ADDR: usize = 0x211E0000;

/// Peripheral size for regs device on rom_ctrl0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ROM_CTRL0_REGS_BASE_ADDR and
/// `TOP_DARJEELING_ROM_CTRL0_REGS_BASE_ADDR + TOP_DARJEELING_ROM_CTRL0_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_ROM_CTRL0_REGS_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for rom device on rom_ctrl0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ROM_CTRL0_ROM_BASE_ADDR: usize = 0x8000;

/// Peripheral size for rom device on rom_ctrl0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ROM_CTRL0_ROM_BASE_ADDR and
/// `TOP_DARJEELING_ROM_CTRL0_ROM_BASE_ADDR + TOP_DARJEELING_ROM_CTRL0_ROM_SIZE_BYTES`.
pub const TOP_DARJEELING_ROM_CTRL0_ROM_SIZE_BYTES: usize = 0x8000;
/// Peripheral base address for regs device on rom_ctrl1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ROM_CTRL1_REGS_BASE_ADDR: usize = 0x211E1000;

/// Peripheral size for regs device on rom_ctrl1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ROM_CTRL1_REGS_BASE_ADDR and
/// `TOP_DARJEELING_ROM_CTRL1_REGS_BASE_ADDR + TOP_DARJEELING_ROM_CTRL1_REGS_SIZE_BYTES`.
pub const TOP_DARJEELING_ROM_CTRL1_REGS_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for rom device on rom_ctrl1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_ROM_CTRL1_ROM_BASE_ADDR: usize = 0x20000;

/// Peripheral size for rom device on rom_ctrl1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_ROM_CTRL1_ROM_BASE_ADDR and
/// `TOP_DARJEELING_ROM_CTRL1_ROM_BASE_ADDR + TOP_DARJEELING_ROM_CTRL1_ROM_SIZE_BYTES`.
pub const TOP_DARJEELING_ROM_CTRL1_ROM_SIZE_BYTES: usize = 0x10000;
/// Peripheral base address for dma in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_DMA_BASE_ADDR: usize = 0x22010000;

/// Peripheral size for dma in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_DMA_BASE_ADDR and
/// `TOP_DARJEELING_DMA_BASE_ADDR + TOP_DARJEELING_DMA_SIZE_BYTES`.
pub const TOP_DARJEELING_DMA_SIZE_BYTES: usize = 0x100;
/// Peripheral base address for core device on mbx0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX0_CORE_BASE_ADDR: usize = 0x22000000;

/// Peripheral size for core device on mbx0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX0_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX0_CORE_BASE_ADDR + TOP_DARJEELING_MBX0_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX0_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for core device on mbx1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX1_CORE_BASE_ADDR: usize = 0x22000100;

/// Peripheral size for core device on mbx1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX1_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX1_CORE_BASE_ADDR + TOP_DARJEELING_MBX1_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX1_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for core device on mbx2 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX2_CORE_BASE_ADDR: usize = 0x22000200;

/// Peripheral size for core device on mbx2 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX2_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX2_CORE_BASE_ADDR + TOP_DARJEELING_MBX2_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX2_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for core device on mbx3 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX3_CORE_BASE_ADDR: usize = 0x22000300;

/// Peripheral size for core device on mbx3 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX3_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX3_CORE_BASE_ADDR + TOP_DARJEELING_MBX3_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX3_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for core device on mbx4 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX4_CORE_BASE_ADDR: usize = 0x22000400;

/// Peripheral size for core device on mbx4 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX4_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX4_CORE_BASE_ADDR + TOP_DARJEELING_MBX4_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX4_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for core device on mbx5 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX5_CORE_BASE_ADDR: usize = 0x22000500;

/// Peripheral size for core device on mbx5 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX5_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX5_CORE_BASE_ADDR + TOP_DARJEELING_MBX5_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX5_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for core device on mbx6 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX6_CORE_BASE_ADDR: usize = 0x22000600;

/// Peripheral size for core device on mbx6 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX6_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX6_CORE_BASE_ADDR + TOP_DARJEELING_MBX6_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX6_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for core device on mbx_jtag in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX_JTAG_CORE_BASE_ADDR: usize = 0x22000800;

/// Peripheral size for core device on mbx_jtag in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX_JTAG_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX_JTAG_CORE_BASE_ADDR + TOP_DARJEELING_MBX_JTAG_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX_JTAG_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for core device on mbx_pcie0 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX_PCIE0_CORE_BASE_ADDR: usize = 0x22040000;

/// Peripheral size for core device on mbx_pcie0 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX_PCIE0_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX_PCIE0_CORE_BASE_ADDR + TOP_DARJEELING_MBX_PCIE0_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX_PCIE0_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for core device on mbx_pcie1 in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_MBX_PCIE1_CORE_BASE_ADDR: usize = 0x22040100;

/// Peripheral size for core device on mbx_pcie1 in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_MBX_PCIE1_CORE_BASE_ADDR and
/// `TOP_DARJEELING_MBX_PCIE1_CORE_BASE_ADDR + TOP_DARJEELING_MBX_PCIE1_CORE_SIZE_BYTES`.
pub const TOP_DARJEELING_MBX_PCIE1_CORE_SIZE_BYTES: usize = 0x80;
/// Peripheral base address for cfg device on rv_core_ibex in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const TOP_DARJEELING_RV_CORE_IBEX_CFG_BASE_ADDR: usize = 0x211F0000;

/// Peripheral size for cfg device on rv_core_ibex in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #TOP_DARJEELING_RV_CORE_IBEX_CFG_BASE_ADDR and
/// `TOP_DARJEELING_RV_CORE_IBEX_CFG_BASE_ADDR + TOP_DARJEELING_RV_CORE_IBEX_CFG_SIZE_BYTES`.
pub const TOP_DARJEELING_RV_CORE_IBEX_CFG_SIZE_BYTES: usize = 0x800;

/// Memory base address for ctn in top darjeeling.
pub const CTN_BASE_ADDR: usize = 0x40000000;

/// Memory size for ctn in top darjeeling.
pub const CTN_SIZE_BYTES: usize = 0x40000000;

/// Memory base address for ram_ctn in top darjeeling.
pub const RAM_CTN_BASE_ADDR: usize = 0x41000000;

/// Memory size for ram_ctn in top darjeeling.
pub const RAM_CTN_SIZE_BYTES: usize = 0x100000;
/// Memory base address for ram_ret_aon in top darjeeling.
pub const RAM_RET_AON_BASE_ADDR: usize = 0x30600000;

/// Memory size for ram_ret_aon in top darjeeling.
pub const RAM_RET_AON_SIZE_BYTES: usize = 0x1000;

/// Memory base address for ram_main in top darjeeling.
pub const RAM_MAIN_BASE_ADDR: usize = 0x10000000;

/// Memory size for ram_main in top darjeeling.
pub const RAM_MAIN_SIZE_BYTES: usize = 0x10000;

/// Memory base address for ram_mbox in top darjeeling.
pub const RAM_MBOX_BASE_ADDR: usize = 0x11000000;

/// Memory size for ram_mbox in top darjeeling.
pub const RAM_MBOX_SIZE_BYTES: usize = 0x1000;

/// Memory base address for rom0 in top darjeeling.
pub const ROM0_BASE_ADDR: usize = 0x8000;

/// Memory size for rom0 in top darjeeling.
pub const ROM0_SIZE_BYTES: usize = 0x8000;

/// Memory base address for rom1 in top darjeeling.
pub const ROM1_BASE_ADDR: usize = 0x20000;

/// Memory size for rom1 in top darjeeling.
pub const ROM1_SIZE_BYTES: usize = 0x10000;

/// PLIC Interrupt Source Peripheral.
///
/// Enumeration used to determine which peripheral asserted the corresponding
/// interrupt.
#[repr(u32)]
pub enum TopDarjeelingPlicPeripheral {
    /// Unknown Peripheral
    Unknown = 0,
    /// uart0
    Uart0 = 1,
    /// gpio
    Gpio = 2,
    /// spi_device
    SpiDevice = 3,
    /// i2c0
    I2c0 = 4,
    /// rv_timer
    RvTimer = 5,
    /// otp_ctrl
    OtpCtrl = 6,
    /// alert_handler
    AlertHandler = 7,
    /// spi_host0
    SpiHost0 = 8,
    /// pwrmgr_aon
    PwrmgrAon = 9,
    /// adc_ctrl_aon
    AdcCtrlAon = 10,
    /// aon_timer_aon
    AonTimerAon = 11,
    /// sensor_ctrl
    SensorCtrl = 12,
    /// soc_proxy
    SocProxy = 13,
    /// hmac
    Hmac = 14,
    /// kmac
    Kmac = 15,
    /// otbn
    Otbn = 16,
    /// keymgr_dpe
    KeymgrDpe = 17,
    /// csrng
    Csrng = 18,
    /// edn0
    Edn0 = 19,
    /// edn1
    Edn1 = 20,
    /// dma
    Dma = 21,
    /// mbx0
    Mbx0 = 22,
    /// mbx1
    Mbx1 = 23,
    /// mbx2
    Mbx2 = 24,
    /// mbx3
    Mbx3 = 25,
    /// mbx4
    Mbx4 = 26,
    /// mbx5
    Mbx5 = 27,
    /// mbx6
    Mbx6 = 28,
    /// mbx_jtag
    MbxJtag = 29,
    /// mbx_pcie0
    MbxPcie0 = 30,
    /// mbx_pcie1
    MbxPcie1 = 31,
}

impl TryFrom<u32> for TopDarjeelingPlicPeripheral {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::Unknown),
            1 => Ok(Self::Uart0),
            2 => Ok(Self::Gpio),
            3 => Ok(Self::SpiDevice),
            4 => Ok(Self::I2c0),
            5 => Ok(Self::RvTimer),
            6 => Ok(Self::OtpCtrl),
            7 => Ok(Self::AlertHandler),
            8 => Ok(Self::SpiHost0),
            9 => Ok(Self::PwrmgrAon),
            10 => Ok(Self::AdcCtrlAon),
            11 => Ok(Self::AonTimerAon),
            12 => Ok(Self::SensorCtrl),
            13 => Ok(Self::SocProxy),
            14 => Ok(Self::Hmac),
            15 => Ok(Self::Kmac),
            16 => Ok(Self::Otbn),
            17 => Ok(Self::KeymgrDpe),
            18 => Ok(Self::Csrng),
            19 => Ok(Self::Edn0),
            20 => Ok(Self::Edn1),
            21 => Ok(Self::Dma),
            22 => Ok(Self::Mbx0),
            23 => Ok(Self::Mbx1),
            24 => Ok(Self::Mbx2),
            25 => Ok(Self::Mbx3),
            26 => Ok(Self::Mbx4),
            27 => Ok(Self::Mbx5),
            28 => Ok(Self::Mbx6),
            29 => Ok(Self::MbxJtag),
            30 => Ok(Self::MbxPcie0),
            31 => Ok(Self::MbxPcie1),
            _ => Err(val),
        }
    }
}

/// PLIC Interrupt Source.
///
/// Enumeration of all PLIC interrupt sources. The interrupt sources belonging to
/// the same peripheral are guaranteed to be consecutive.
#[repr(u32)]
pub enum TopDarjeelingPlicIrqId {
    /// No Interrupt
    None = 0,
    /// uart0_tx_watermark
    Uart0TxWatermark = 1,
    /// uart0_rx_watermark
    Uart0RxWatermark = 2,
    /// uart0_tx_empty
    Uart0TxEmpty = 3,
    /// uart0_rx_overflow
    Uart0RxOverflow = 4,
    /// uart0_rx_frame_err
    Uart0RxFrameErr = 5,
    /// uart0_rx_break_err
    Uart0RxBreakErr = 6,
    /// uart0_rx_timeout
    Uart0RxTimeout = 7,
    /// uart0_rx_parity_err
    Uart0RxParityErr = 8,
    /// gpio_gpio 0
    GpioGpio0 = 9,
    /// gpio_gpio 1
    GpioGpio1 = 10,
    /// gpio_gpio 2
    GpioGpio2 = 11,
    /// gpio_gpio 3
    GpioGpio3 = 12,
    /// gpio_gpio 4
    GpioGpio4 = 13,
    /// gpio_gpio 5
    GpioGpio5 = 14,
    /// gpio_gpio 6
    GpioGpio6 = 15,
    /// gpio_gpio 7
    GpioGpio7 = 16,
    /// gpio_gpio 8
    GpioGpio8 = 17,
    /// gpio_gpio 9
    GpioGpio9 = 18,
    /// gpio_gpio 10
    GpioGpio10 = 19,
    /// gpio_gpio 11
    GpioGpio11 = 20,
    /// gpio_gpio 12
    GpioGpio12 = 21,
    /// gpio_gpio 13
    GpioGpio13 = 22,
    /// gpio_gpio 14
    GpioGpio14 = 23,
    /// gpio_gpio 15
    GpioGpio15 = 24,
    /// gpio_gpio 16
    GpioGpio16 = 25,
    /// gpio_gpio 17
    GpioGpio17 = 26,
    /// gpio_gpio 18
    GpioGpio18 = 27,
    /// gpio_gpio 19
    GpioGpio19 = 28,
    /// gpio_gpio 20
    GpioGpio20 = 29,
    /// gpio_gpio 21
    GpioGpio21 = 30,
    /// gpio_gpio 22
    GpioGpio22 = 31,
    /// gpio_gpio 23
    GpioGpio23 = 32,
    /// gpio_gpio 24
    GpioGpio24 = 33,
    /// gpio_gpio 25
    GpioGpio25 = 34,
    /// gpio_gpio 26
    GpioGpio26 = 35,
    /// gpio_gpio 27
    GpioGpio27 = 36,
    /// gpio_gpio 28
    GpioGpio28 = 37,
    /// gpio_gpio 29
    GpioGpio29 = 38,
    /// gpio_gpio 30
    GpioGpio30 = 39,
    /// gpio_gpio 31
    GpioGpio31 = 40,
    /// spi_device_generic_rx_full
    SpiDeviceGenericRxFull = 41,
    /// spi_device_generic_rx_watermark
    SpiDeviceGenericRxWatermark = 42,
    /// spi_device_generic_tx_watermark
    SpiDeviceGenericTxWatermark = 43,
    /// spi_device_generic_rx_error
    SpiDeviceGenericRxError = 44,
    /// spi_device_generic_rx_overflow
    SpiDeviceGenericRxOverflow = 45,
    /// spi_device_generic_tx_underflow
    SpiDeviceGenericTxUnderflow = 46,
    /// spi_device_upload_cmdfifo_not_empty
    SpiDeviceUploadCmdfifoNotEmpty = 47,
    /// spi_device_upload_payload_not_empty
    SpiDeviceUploadPayloadNotEmpty = 48,
    /// spi_device_upload_payload_overflow
    SpiDeviceUploadPayloadOverflow = 49,
    /// spi_device_readbuf_watermark
    SpiDeviceReadbufWatermark = 50,
    /// spi_device_readbuf_flip
    SpiDeviceReadbufFlip = 51,
    /// spi_device_tpm_header_not_empty
    SpiDeviceTpmHeaderNotEmpty = 52,
    /// i2c0_fmt_threshold
    I2c0FmtThreshold = 53,
    /// i2c0_rx_threshold
    I2c0RxThreshold = 54,
    /// i2c0_fmt_overflow
    I2c0FmtOverflow = 55,
    /// i2c0_rx_overflow
    I2c0RxOverflow = 56,
    /// i2c0_nak
    I2c0Nak = 57,
    /// i2c0_scl_interference
    I2c0SclInterference = 58,
    /// i2c0_sda_interference
    I2c0SdaInterference = 59,
    /// i2c0_stretch_timeout
    I2c0StretchTimeout = 60,
    /// i2c0_sda_unstable
    I2c0SdaUnstable = 61,
    /// i2c0_cmd_complete
    I2c0CmdComplete = 62,
    /// i2c0_tx_stretch
    I2c0TxStretch = 63,
    /// i2c0_tx_overflow
    I2c0TxOverflow = 64,
    /// i2c0_acq_full
    I2c0AcqFull = 65,
    /// i2c0_unexp_stop
    I2c0UnexpStop = 66,
    /// i2c0_host_timeout
    I2c0HostTimeout = 67,
    /// rv_timer_timer_expired_hart0_timer0
    RvTimerTimerExpiredHart0Timer0 = 68,
    /// otp_ctrl_otp_operation_done
    OtpCtrlOtpOperationDone = 69,
    /// otp_ctrl_otp_error
    OtpCtrlOtpError = 70,
    /// alert_handler_classa
    AlertHandlerClassa = 71,
    /// alert_handler_classb
    AlertHandlerClassb = 72,
    /// alert_handler_classc
    AlertHandlerClassc = 73,
    /// alert_handler_classd
    AlertHandlerClassd = 74,
    /// spi_host0_error
    SpiHost0Error = 75,
    /// spi_host0_spi_event
    SpiHost0SpiEvent = 76,
    /// pwrmgr_aon_wakeup
    PwrmgrAonWakeup = 77,
    /// adc_ctrl_aon_match_done
    AdcCtrlAonMatchDone = 78,
    /// aon_timer_aon_wkup_timer_expired
    AonTimerAonWkupTimerExpired = 79,
    /// aon_timer_aon_wdog_timer_bark
    AonTimerAonWdogTimerBark = 80,
    /// sensor_ctrl_io_status_change
    SensorCtrlIoStatusChange = 81,
    /// sensor_ctrl_init_status_change
    SensorCtrlInitStatusChange = 82,
    /// soc_proxy_external 0
    SocProxyExternal0 = 83,
    /// soc_proxy_external 1
    SocProxyExternal1 = 84,
    /// soc_proxy_external 2
    SocProxyExternal2 = 85,
    /// soc_proxy_external 3
    SocProxyExternal3 = 86,
    /// soc_proxy_external 4
    SocProxyExternal4 = 87,
    /// soc_proxy_external 5
    SocProxyExternal5 = 88,
    /// soc_proxy_external 6
    SocProxyExternal6 = 89,
    /// soc_proxy_external 7
    SocProxyExternal7 = 90,
    /// hmac_hmac_done
    HmacHmacDone = 91,
    /// hmac_fifo_empty
    HmacFifoEmpty = 92,
    /// hmac_hmac_err
    HmacHmacErr = 93,
    /// kmac_kmac_done
    KmacKmacDone = 94,
    /// kmac_fifo_empty
    KmacFifoEmpty = 95,
    /// kmac_kmac_err
    KmacKmacErr = 96,
    /// otbn_done
    OtbnDone = 97,
    /// keymgr_dpe_op_done
    KeymgrDpeOpDone = 98,
    /// csrng_cs_cmd_req_done
    CsrngCsCmdReqDone = 99,
    /// csrng_cs_entropy_req
    CsrngCsEntropyReq = 100,
    /// csrng_cs_hw_inst_exc
    CsrngCsHwInstExc = 101,
    /// csrng_cs_fatal_err
    CsrngCsFatalErr = 102,
    /// edn0_edn_cmd_req_done
    Edn0EdnCmdReqDone = 103,
    /// edn0_edn_fatal_err
    Edn0EdnFatalErr = 104,
    /// edn1_edn_cmd_req_done
    Edn1EdnCmdReqDone = 105,
    /// edn1_edn_fatal_err
    Edn1EdnFatalErr = 106,
    /// dma_dma_done
    DmaDmaDone = 107,
    /// dma_dma_error
    DmaDmaError = 108,
    /// dma_dma_memory_buffer_limit
    DmaDmaMemoryBufferLimit = 109,
    /// mbx0_mbx_ready
    Mbx0MbxReady = 110,
    /// mbx0_mbx_abort
    Mbx0MbxAbort = 111,
    /// mbx1_mbx_ready
    Mbx1MbxReady = 112,
    /// mbx1_mbx_abort
    Mbx1MbxAbort = 113,
    /// mbx2_mbx_ready
    Mbx2MbxReady = 114,
    /// mbx2_mbx_abort
    Mbx2MbxAbort = 115,
    /// mbx3_mbx_ready
    Mbx3MbxReady = 116,
    /// mbx3_mbx_abort
    Mbx3MbxAbort = 117,
    /// mbx4_mbx_ready
    Mbx4MbxReady = 118,
    /// mbx4_mbx_abort
    Mbx4MbxAbort = 119,
    /// mbx5_mbx_ready
    Mbx5MbxReady = 120,
    /// mbx5_mbx_abort
    Mbx5MbxAbort = 121,
    /// mbx6_mbx_ready
    Mbx6MbxReady = 122,
    /// mbx6_mbx_abort
    Mbx6MbxAbort = 123,
    /// mbx_jtag_mbx_ready
    MbxJtagMbxReady = 124,
    /// mbx_jtag_mbx_abort
    MbxJtagMbxAbort = 125,
    /// mbx_pcie0_mbx_ready
    MbxPcie0MbxReady = 126,
    /// mbx_pcie0_mbx_abort
    MbxPcie0MbxAbort = 127,
    /// mbx_pcie1_mbx_ready
    MbxPcie1MbxReady = 128,
    /// mbx_pcie1_mbx_abort
    MbxPcie1MbxAbort = 129,
}

impl TryFrom<u32> for TopDarjeelingPlicIrqId {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::None),
            1 => Ok(Self::Uart0TxWatermark),
            2 => Ok(Self::Uart0RxWatermark),
            3 => Ok(Self::Uart0TxEmpty),
            4 => Ok(Self::Uart0RxOverflow),
            5 => Ok(Self::Uart0RxFrameErr),
            6 => Ok(Self::Uart0RxBreakErr),
            7 => Ok(Self::Uart0RxTimeout),
            8 => Ok(Self::Uart0RxParityErr),
            9 => Ok(Self::GpioGpio0),
            10 => Ok(Self::GpioGpio1),
            11 => Ok(Self::GpioGpio2),
            12 => Ok(Self::GpioGpio3),
            13 => Ok(Self::GpioGpio4),
            14 => Ok(Self::GpioGpio5),
            15 => Ok(Self::GpioGpio6),
            16 => Ok(Self::GpioGpio7),
            17 => Ok(Self::GpioGpio8),
            18 => Ok(Self::GpioGpio9),
            19 => Ok(Self::GpioGpio10),
            20 => Ok(Self::GpioGpio11),
            21 => Ok(Self::GpioGpio12),
            22 => Ok(Self::GpioGpio13),
            23 => Ok(Self::GpioGpio14),
            24 => Ok(Self::GpioGpio15),
            25 => Ok(Self::GpioGpio16),
            26 => Ok(Self::GpioGpio17),
            27 => Ok(Self::GpioGpio18),
            28 => Ok(Self::GpioGpio19),
            29 => Ok(Self::GpioGpio20),
            30 => Ok(Self::GpioGpio21),
            31 => Ok(Self::GpioGpio22),
            32 => Ok(Self::GpioGpio23),
            33 => Ok(Self::GpioGpio24),
            34 => Ok(Self::GpioGpio25),
            35 => Ok(Self::GpioGpio26),
            36 => Ok(Self::GpioGpio27),
            37 => Ok(Self::GpioGpio28),
            38 => Ok(Self::GpioGpio29),
            39 => Ok(Self::GpioGpio30),
            40 => Ok(Self::GpioGpio31),
            41 => Ok(Self::SpiDeviceGenericRxFull),
            42 => Ok(Self::SpiDeviceGenericRxWatermark),
            43 => Ok(Self::SpiDeviceGenericTxWatermark),
            44 => Ok(Self::SpiDeviceGenericRxError),
            45 => Ok(Self::SpiDeviceGenericRxOverflow),
            46 => Ok(Self::SpiDeviceGenericTxUnderflow),
            47 => Ok(Self::SpiDeviceUploadCmdfifoNotEmpty),
            48 => Ok(Self::SpiDeviceUploadPayloadNotEmpty),
            49 => Ok(Self::SpiDeviceUploadPayloadOverflow),
            50 => Ok(Self::SpiDeviceReadbufWatermark),
            51 => Ok(Self::SpiDeviceReadbufFlip),
            52 => Ok(Self::SpiDeviceTpmHeaderNotEmpty),
            53 => Ok(Self::I2c0FmtThreshold),
            54 => Ok(Self::I2c0RxThreshold),
            55 => Ok(Self::I2c0FmtOverflow),
            56 => Ok(Self::I2c0RxOverflow),
            57 => Ok(Self::I2c0Nak),
            58 => Ok(Self::I2c0SclInterference),
            59 => Ok(Self::I2c0SdaInterference),
            60 => Ok(Self::I2c0StretchTimeout),
            61 => Ok(Self::I2c0SdaUnstable),
            62 => Ok(Self::I2c0CmdComplete),
            63 => Ok(Self::I2c0TxStretch),
            64 => Ok(Self::I2c0TxOverflow),
            65 => Ok(Self::I2c0AcqFull),
            66 => Ok(Self::I2c0UnexpStop),
            67 => Ok(Self::I2c0HostTimeout),
            68 => Ok(Self::RvTimerTimerExpiredHart0Timer0),
            69 => Ok(Self::OtpCtrlOtpOperationDone),
            70 => Ok(Self::OtpCtrlOtpError),
            71 => Ok(Self::AlertHandlerClassa),
            72 => Ok(Self::AlertHandlerClassb),
            73 => Ok(Self::AlertHandlerClassc),
            74 => Ok(Self::AlertHandlerClassd),
            75 => Ok(Self::SpiHost0Error),
            76 => Ok(Self::SpiHost0SpiEvent),
            77 => Ok(Self::PwrmgrAonWakeup),
            78 => Ok(Self::AdcCtrlAonMatchDone),
            79 => Ok(Self::AonTimerAonWkupTimerExpired),
            80 => Ok(Self::AonTimerAonWdogTimerBark),
            81 => Ok(Self::SensorCtrlIoStatusChange),
            82 => Ok(Self::SensorCtrlInitStatusChange),
            83 => Ok(Self::SocProxyExternal0),
            84 => Ok(Self::SocProxyExternal1),
            85 => Ok(Self::SocProxyExternal2),
            86 => Ok(Self::SocProxyExternal3),
            87 => Ok(Self::SocProxyExternal4),
            88 => Ok(Self::SocProxyExternal5),
            89 => Ok(Self::SocProxyExternal6),
            90 => Ok(Self::SocProxyExternal7),
            91 => Ok(Self::HmacHmacDone),
            92 => Ok(Self::HmacFifoEmpty),
            93 => Ok(Self::HmacHmacErr),
            94 => Ok(Self::KmacKmacDone),
            95 => Ok(Self::KmacFifoEmpty),
            96 => Ok(Self::KmacKmacErr),
            97 => Ok(Self::OtbnDone),
            98 => Ok(Self::KeymgrDpeOpDone),
            99 => Ok(Self::CsrngCsCmdReqDone),
            100 => Ok(Self::CsrngCsEntropyReq),
            101 => Ok(Self::CsrngCsHwInstExc),
            102 => Ok(Self::CsrngCsFatalErr),
            103 => Ok(Self::Edn0EdnCmdReqDone),
            104 => Ok(Self::Edn0EdnFatalErr),
            105 => Ok(Self::Edn1EdnCmdReqDone),
            106 => Ok(Self::Edn1EdnFatalErr),
            107 => Ok(Self::DmaDmaDone),
            108 => Ok(Self::DmaDmaError),
            109 => Ok(Self::DmaDmaMemoryBufferLimit),
            110 => Ok(Self::Mbx0MbxReady),
            111 => Ok(Self::Mbx0MbxAbort),
            112 => Ok(Self::Mbx1MbxReady),
            113 => Ok(Self::Mbx1MbxAbort),
            114 => Ok(Self::Mbx2MbxReady),
            115 => Ok(Self::Mbx2MbxAbort),
            116 => Ok(Self::Mbx3MbxReady),
            117 => Ok(Self::Mbx3MbxAbort),
            118 => Ok(Self::Mbx4MbxReady),
            119 => Ok(Self::Mbx4MbxAbort),
            120 => Ok(Self::Mbx5MbxReady),
            121 => Ok(Self::Mbx5MbxAbort),
            122 => Ok(Self::Mbx6MbxReady),
            123 => Ok(Self::Mbx6MbxAbort),
            124 => Ok(Self::MbxJtagMbxReady),
            125 => Ok(Self::MbxJtagMbxAbort),
            126 => Ok(Self::MbxPcie0MbxReady),
            127 => Ok(Self::MbxPcie0MbxAbort),
            128 => Ok(Self::MbxPcie1MbxReady),
            129 => Ok(Self::MbxPcie1MbxAbort),
            _ => Err(val),
        }
    }
}

/// PLIC Interrupt Target.
///
/// Enumeration used to determine which set of IE, CC, threshold registers to
/// access for a given interrupt target.
#[repr(u32)]
pub enum TopDarjeelingPlicTarget {
    /// Ibex Core 0
    Ibex0 = 0,
}

/// Alert Handler Source Peripheral.
///
/// Enumeration used to determine which peripheral asserted the corresponding
/// alert.
#[repr(u32)]
pub enum TopDarjeelingAlertPeripheral {
    /// uart0
    Uart0 = 0,
    /// gpio
    Gpio = 1,
    /// spi_device
    SpiDevice = 2,
    /// i2c0
    I2c0 = 3,
    /// rv_timer
    RvTimer = 4,
    /// otp_ctrl
    OtpCtrl = 5,
    /// lc_ctrl
    LcCtrl = 6,
    /// spi_host0
    SpiHost0 = 7,
    /// pwrmgr_aon
    PwrmgrAon = 8,
    /// rstmgr_aon
    RstmgrAon = 9,
    /// clkmgr_aon
    ClkmgrAon = 10,
    /// adc_ctrl_aon
    AdcCtrlAon = 11,
    /// pinmux_aon
    PinmuxAon = 12,
    /// aon_timer_aon
    AonTimerAon = 13,
    /// sensor_ctrl
    SensorCtrl = 14,
    /// soc_proxy
    SocProxy = 15,
    /// sram_ctrl_ret_aon
    SramCtrlRetAon = 16,
    /// rv_dm
    RvDm = 17,
    /// rv_plic
    RvPlic = 18,
    /// aes
    Aes = 19,
    /// hmac
    Hmac = 20,
    /// kmac
    Kmac = 21,
    /// otbn
    Otbn = 22,
    /// keymgr_dpe
    KeymgrDpe = 23,
    /// csrng
    Csrng = 24,
    /// edn0
    Edn0 = 25,
    /// edn1
    Edn1 = 26,
    /// sram_ctrl_main
    SramCtrlMain = 27,
    /// sram_ctrl_mbox
    SramCtrlMbox = 28,
    /// rom_ctrl0
    RomCtrl0 = 29,
    /// rom_ctrl1
    RomCtrl1 = 30,
    /// dma
    Dma = 31,
    /// mbx0
    Mbx0 = 32,
    /// mbx1
    Mbx1 = 33,
    /// mbx2
    Mbx2 = 34,
    /// mbx3
    Mbx3 = 35,
    /// mbx4
    Mbx4 = 36,
    /// mbx5
    Mbx5 = 37,
    /// mbx6
    Mbx6 = 38,
    /// mbx_jtag
    MbxJtag = 39,
    /// mbx_pcie0
    MbxPcie0 = 40,
    /// mbx_pcie1
    MbxPcie1 = 41,
    /// rv_core_ibex
    RvCoreIbex = 42,
}

/// Alert Handler Alert Source.
///
/// Enumeration of all Alert Handler Alert Sources. The alert sources belonging to
/// the same peripheral are guaranteed to be consecutive.
#[repr(u32)]
pub enum TopDarjeelingAlertId {
    /// uart0_fatal_fault
    Uart0FatalFault = 0,
    /// gpio_fatal_fault
    GpioFatalFault = 1,
    /// spi_device_fatal_fault
    SpiDeviceFatalFault = 2,
    /// i2c0_fatal_fault
    I2c0FatalFault = 3,
    /// rv_timer_fatal_fault
    RvTimerFatalFault = 4,
    /// otp_ctrl_fatal_macro_error
    OtpCtrlFatalMacroError = 5,
    /// otp_ctrl_fatal_check_error
    OtpCtrlFatalCheckError = 6,
    /// otp_ctrl_fatal_bus_integ_error
    OtpCtrlFatalBusIntegError = 7,
    /// otp_ctrl_fatal_prim_otp_alert
    OtpCtrlFatalPrimOtpAlert = 8,
    /// otp_ctrl_recov_prim_otp_alert
    OtpCtrlRecovPrimOtpAlert = 9,
    /// lc_ctrl_fatal_prog_error
    LcCtrlFatalProgError = 10,
    /// lc_ctrl_fatal_state_error
    LcCtrlFatalStateError = 11,
    /// lc_ctrl_fatal_bus_integ_error
    LcCtrlFatalBusIntegError = 12,
    /// spi_host0_fatal_fault
    SpiHost0FatalFault = 13,
    /// pwrmgr_aon_fatal_fault
    PwrmgrAonFatalFault = 14,
    /// rstmgr_aon_fatal_fault
    RstmgrAonFatalFault = 15,
    /// rstmgr_aon_fatal_cnsty_fault
    RstmgrAonFatalCnstyFault = 16,
    /// clkmgr_aon_recov_fault
    ClkmgrAonRecovFault = 17,
    /// clkmgr_aon_fatal_fault
    ClkmgrAonFatalFault = 18,
    /// adc_ctrl_aon_fatal_fault
    AdcCtrlAonFatalFault = 19,
    /// pinmux_aon_fatal_fault
    PinmuxAonFatalFault = 20,
    /// aon_timer_aon_fatal_fault
    AonTimerAonFatalFault = 21,
    /// sensor_ctrl_recov_alert
    SensorCtrlRecovAlert = 22,
    /// sensor_ctrl_fatal_alert
    SensorCtrlFatalAlert = 23,
    /// soc_proxy_fatal_alert_intg
    SocProxyFatalAlertIntg = 24,
    /// soc_proxy_fatal_alert_external_0
    SocProxyFatalAlertExternal0 = 25,
    /// soc_proxy_fatal_alert_external_1
    SocProxyFatalAlertExternal1 = 26,
    /// soc_proxy_fatal_alert_external_2
    SocProxyFatalAlertExternal2 = 27,
    /// soc_proxy_fatal_alert_external_3
    SocProxyFatalAlertExternal3 = 28,
    /// soc_proxy_fatal_alert_external_4
    SocProxyFatalAlertExternal4 = 29,
    /// soc_proxy_fatal_alert_external_5
    SocProxyFatalAlertExternal5 = 30,
    /// soc_proxy_fatal_alert_external_6
    SocProxyFatalAlertExternal6 = 31,
    /// soc_proxy_fatal_alert_external_7
    SocProxyFatalAlertExternal7 = 32,
    /// soc_proxy_recov_alert_external_0
    SocProxyRecovAlertExternal0 = 33,
    /// soc_proxy_recov_alert_external_1
    SocProxyRecovAlertExternal1 = 34,
    /// soc_proxy_recov_alert_external_2
    SocProxyRecovAlertExternal2 = 35,
    /// soc_proxy_recov_alert_external_3
    SocProxyRecovAlertExternal3 = 36,
    /// soc_proxy_recov_alert_external_4
    SocProxyRecovAlertExternal4 = 37,
    /// soc_proxy_recov_alert_external_5
    SocProxyRecovAlertExternal5 = 38,
    /// soc_proxy_recov_alert_external_6
    SocProxyRecovAlertExternal6 = 39,
    /// soc_proxy_recov_alert_external_7
    SocProxyRecovAlertExternal7 = 40,
    /// sram_ctrl_ret_aon_fatal_error
    SramCtrlRetAonFatalError = 41,
    /// rv_dm_fatal_fault
    RvDmFatalFault = 42,
    /// rv_plic_fatal_fault
    RvPlicFatalFault = 43,
    /// aes_recov_ctrl_update_err
    AesRecovCtrlUpdateErr = 44,
    /// aes_fatal_fault
    AesFatalFault = 45,
    /// hmac_fatal_fault
    HmacFatalFault = 46,
    /// kmac_recov_operation_err
    KmacRecovOperationErr = 47,
    /// kmac_fatal_fault_err
    KmacFatalFaultErr = 48,
    /// otbn_fatal
    OtbnFatal = 49,
    /// otbn_recov
    OtbnRecov = 50,
    /// keymgr_dpe_recov_operation_err
    KeymgrDpeRecovOperationErr = 51,
    /// keymgr_dpe_fatal_fault_err
    KeymgrDpeFatalFaultErr = 52,
    /// csrng_recov_alert
    CsrngRecovAlert = 53,
    /// csrng_fatal_alert
    CsrngFatalAlert = 54,
    /// edn0_recov_alert
    Edn0RecovAlert = 55,
    /// edn0_fatal_alert
    Edn0FatalAlert = 56,
    /// edn1_recov_alert
    Edn1RecovAlert = 57,
    /// edn1_fatal_alert
    Edn1FatalAlert = 58,
    /// sram_ctrl_main_fatal_error
    SramCtrlMainFatalError = 59,
    /// sram_ctrl_mbox_fatal_error
    SramCtrlMboxFatalError = 60,
    /// rom_ctrl0_fatal
    RomCtrl0Fatal = 61,
    /// rom_ctrl1_fatal
    RomCtrl1Fatal = 62,
    /// dma_fatal_fault
    DmaFatalFault = 63,
    /// mbx0_fatal_fault
    Mbx0FatalFault = 64,
    /// mbx0_recov_fault
    Mbx0RecovFault = 65,
    /// mbx1_fatal_fault
    Mbx1FatalFault = 66,
    /// mbx1_recov_fault
    Mbx1RecovFault = 67,
    /// mbx2_fatal_fault
    Mbx2FatalFault = 68,
    /// mbx2_recov_fault
    Mbx2RecovFault = 69,
    /// mbx3_fatal_fault
    Mbx3FatalFault = 70,
    /// mbx3_recov_fault
    Mbx3RecovFault = 71,
    /// mbx4_fatal_fault
    Mbx4FatalFault = 72,
    /// mbx4_recov_fault
    Mbx4RecovFault = 73,
    /// mbx5_fatal_fault
    Mbx5FatalFault = 74,
    /// mbx5_recov_fault
    Mbx5RecovFault = 75,
    /// mbx6_fatal_fault
    Mbx6FatalFault = 76,
    /// mbx6_recov_fault
    Mbx6RecovFault = 77,
    /// mbx_jtag_fatal_fault
    MbxJtagFatalFault = 78,
    /// mbx_jtag_recov_fault
    MbxJtagRecovFault = 79,
    /// mbx_pcie0_fatal_fault
    MbxPcie0FatalFault = 80,
    /// mbx_pcie0_recov_fault
    MbxPcie0RecovFault = 81,
    /// mbx_pcie1_fatal_fault
    MbxPcie1FatalFault = 82,
    /// mbx_pcie1_recov_fault
    MbxPcie1RecovFault = 83,
    /// rv_core_ibex_fatal_sw_err
    RvCoreIbexFatalSwErr = 84,
    /// rv_core_ibex_recov_sw_err
    RvCoreIbexRecovSwErr = 85,
    /// rv_core_ibex_fatal_hw_err
    RvCoreIbexFatalHwErr = 86,
    /// rv_core_ibex_recov_hw_err
    RvCoreIbexRecovHwErr = 87,
}

impl TryFrom<u32> for TopDarjeelingAlertId {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::Uart0FatalFault),
            1 => Ok(Self::GpioFatalFault),
            2 => Ok(Self::SpiDeviceFatalFault),
            3 => Ok(Self::I2c0FatalFault),
            4 => Ok(Self::RvTimerFatalFault),
            5 => Ok(Self::OtpCtrlFatalMacroError),
            6 => Ok(Self::OtpCtrlFatalCheckError),
            7 => Ok(Self::OtpCtrlFatalBusIntegError),
            8 => Ok(Self::OtpCtrlFatalPrimOtpAlert),
            9 => Ok(Self::OtpCtrlRecovPrimOtpAlert),
            10 => Ok(Self::LcCtrlFatalProgError),
            11 => Ok(Self::LcCtrlFatalStateError),
            12 => Ok(Self::LcCtrlFatalBusIntegError),
            13 => Ok(Self::SpiHost0FatalFault),
            14 => Ok(Self::PwrmgrAonFatalFault),
            15 => Ok(Self::RstmgrAonFatalFault),
            16 => Ok(Self::RstmgrAonFatalCnstyFault),
            17 => Ok(Self::ClkmgrAonRecovFault),
            18 => Ok(Self::ClkmgrAonFatalFault),
            19 => Ok(Self::AdcCtrlAonFatalFault),
            20 => Ok(Self::PinmuxAonFatalFault),
            21 => Ok(Self::AonTimerAonFatalFault),
            22 => Ok(Self::SensorCtrlRecovAlert),
            23 => Ok(Self::SensorCtrlFatalAlert),
            24 => Ok(Self::SocProxyFatalAlertIntg),
            25 => Ok(Self::SocProxyFatalAlertExternal0),
            26 => Ok(Self::SocProxyFatalAlertExternal1),
            27 => Ok(Self::SocProxyFatalAlertExternal2),
            28 => Ok(Self::SocProxyFatalAlertExternal3),
            29 => Ok(Self::SocProxyFatalAlertExternal4),
            30 => Ok(Self::SocProxyFatalAlertExternal5),
            31 => Ok(Self::SocProxyFatalAlertExternal6),
            32 => Ok(Self::SocProxyFatalAlertExternal7),
            33 => Ok(Self::SocProxyRecovAlertExternal0),
            34 => Ok(Self::SocProxyRecovAlertExternal1),
            35 => Ok(Self::SocProxyRecovAlertExternal2),
            36 => Ok(Self::SocProxyRecovAlertExternal3),
            37 => Ok(Self::SocProxyRecovAlertExternal4),
            38 => Ok(Self::SocProxyRecovAlertExternal5),
            39 => Ok(Self::SocProxyRecovAlertExternal6),
            40 => Ok(Self::SocProxyRecovAlertExternal7),
            41 => Ok(Self::SramCtrlRetAonFatalError),
            42 => Ok(Self::RvDmFatalFault),
            43 => Ok(Self::RvPlicFatalFault),
            44 => Ok(Self::AesRecovCtrlUpdateErr),
            45 => Ok(Self::AesFatalFault),
            46 => Ok(Self::HmacFatalFault),
            47 => Ok(Self::KmacRecovOperationErr),
            48 => Ok(Self::KmacFatalFaultErr),
            49 => Ok(Self::OtbnFatal),
            50 => Ok(Self::OtbnRecov),
            51 => Ok(Self::KeymgrDpeRecovOperationErr),
            52 => Ok(Self::KeymgrDpeFatalFaultErr),
            53 => Ok(Self::CsrngRecovAlert),
            54 => Ok(Self::CsrngFatalAlert),
            55 => Ok(Self::Edn0RecovAlert),
            56 => Ok(Self::Edn0FatalAlert),
            57 => Ok(Self::Edn1RecovAlert),
            58 => Ok(Self::Edn1FatalAlert),
            59 => Ok(Self::SramCtrlMainFatalError),
            60 => Ok(Self::SramCtrlMboxFatalError),
            61 => Ok(Self::RomCtrl0Fatal),
            62 => Ok(Self::RomCtrl1Fatal),
            63 => Ok(Self::DmaFatalFault),
            64 => Ok(Self::Mbx0FatalFault),
            65 => Ok(Self::Mbx0RecovFault),
            66 => Ok(Self::Mbx1FatalFault),
            67 => Ok(Self::Mbx1RecovFault),
            68 => Ok(Self::Mbx2FatalFault),
            69 => Ok(Self::Mbx2RecovFault),
            70 => Ok(Self::Mbx3FatalFault),
            71 => Ok(Self::Mbx3RecovFault),
            72 => Ok(Self::Mbx4FatalFault),
            73 => Ok(Self::Mbx4RecovFault),
            74 => Ok(Self::Mbx5FatalFault),
            75 => Ok(Self::Mbx5RecovFault),
            76 => Ok(Self::Mbx6FatalFault),
            77 => Ok(Self::Mbx6RecovFault),
            78 => Ok(Self::MbxJtagFatalFault),
            79 => Ok(Self::MbxJtagRecovFault),
            80 => Ok(Self::MbxPcie0FatalFault),
            81 => Ok(Self::MbxPcie0RecovFault),
            82 => Ok(Self::MbxPcie1FatalFault),
            83 => Ok(Self::MbxPcie1RecovFault),
            84 => Ok(Self::RvCoreIbexFatalSwErr),
            85 => Ok(Self::RvCoreIbexRecovSwErr),
            86 => Ok(Self::RvCoreIbexFatalHwErr),
            87 => Ok(Self::RvCoreIbexRecovHwErr),
            _ => Err(val),
        }
    }
}

/// PLIC Interrupt Source to Peripheral Map
///
/// This array is a mapping from `TopDarjeelingPlicIrqId` to
/// `TopDarjeelingPlicPeripheral`.
pub const TOP_DARJEELING_PLIC_INTERRUPT_FOR_PERIPHERAL: [TopDarjeelingPlicPeripheral; 130] = [
    // None -> TopDarjeelingPlicPeripheral::Unknown
    TopDarjeelingPlicPeripheral::Unknown,
    // Uart0TxWatermark -> TopDarjeelingPlicPeripheral::Uart0
    TopDarjeelingPlicPeripheral::Uart0,
    // Uart0RxWatermark -> TopDarjeelingPlicPeripheral::Uart0
    TopDarjeelingPlicPeripheral::Uart0,
    // Uart0TxEmpty -> TopDarjeelingPlicPeripheral::Uart0
    TopDarjeelingPlicPeripheral::Uart0,
    // Uart0RxOverflow -> TopDarjeelingPlicPeripheral::Uart0
    TopDarjeelingPlicPeripheral::Uart0,
    // Uart0RxFrameErr -> TopDarjeelingPlicPeripheral::Uart0
    TopDarjeelingPlicPeripheral::Uart0,
    // Uart0RxBreakErr -> TopDarjeelingPlicPeripheral::Uart0
    TopDarjeelingPlicPeripheral::Uart0,
    // Uart0RxTimeout -> TopDarjeelingPlicPeripheral::Uart0
    TopDarjeelingPlicPeripheral::Uart0,
    // Uart0RxParityErr -> TopDarjeelingPlicPeripheral::Uart0
    TopDarjeelingPlicPeripheral::Uart0,
    // GpioGpio0 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio1 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio2 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio3 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio4 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio5 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio6 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio7 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio8 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio9 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio10 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio11 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio12 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio13 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio14 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio15 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio16 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio17 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio18 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio19 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio20 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio21 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio22 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio23 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio24 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio25 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio26 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio27 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio28 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio29 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio30 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // GpioGpio31 -> TopDarjeelingPlicPeripheral::Gpio
    TopDarjeelingPlicPeripheral::Gpio,
    // SpiDeviceGenericRxFull -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceGenericRxWatermark -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceGenericTxWatermark -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceGenericRxError -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceGenericRxOverflow -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceGenericTxUnderflow -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceUploadCmdfifoNotEmpty -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceUploadPayloadNotEmpty -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceUploadPayloadOverflow -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceReadbufWatermark -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceReadbufFlip -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // SpiDeviceTpmHeaderNotEmpty -> TopDarjeelingPlicPeripheral::SpiDevice
    TopDarjeelingPlicPeripheral::SpiDevice,
    // I2c0FmtThreshold -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0RxThreshold -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0FmtOverflow -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0RxOverflow -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0Nak -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0SclInterference -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0SdaInterference -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0StretchTimeout -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0SdaUnstable -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0CmdComplete -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0TxStretch -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0TxOverflow -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0AcqFull -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0UnexpStop -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // I2c0HostTimeout -> TopDarjeelingPlicPeripheral::I2c0
    TopDarjeelingPlicPeripheral::I2c0,
    // RvTimerTimerExpiredHart0Timer0 -> TopDarjeelingPlicPeripheral::RvTimer
    TopDarjeelingPlicPeripheral::RvTimer,
    // OtpCtrlOtpOperationDone -> TopDarjeelingPlicPeripheral::OtpCtrl
    TopDarjeelingPlicPeripheral::OtpCtrl,
    // OtpCtrlOtpError -> TopDarjeelingPlicPeripheral::OtpCtrl
    TopDarjeelingPlicPeripheral::OtpCtrl,
    // AlertHandlerClassa -> TopDarjeelingPlicPeripheral::AlertHandler
    TopDarjeelingPlicPeripheral::AlertHandler,
    // AlertHandlerClassb -> TopDarjeelingPlicPeripheral::AlertHandler
    TopDarjeelingPlicPeripheral::AlertHandler,
    // AlertHandlerClassc -> TopDarjeelingPlicPeripheral::AlertHandler
    TopDarjeelingPlicPeripheral::AlertHandler,
    // AlertHandlerClassd -> TopDarjeelingPlicPeripheral::AlertHandler
    TopDarjeelingPlicPeripheral::AlertHandler,
    // SpiHost0Error -> TopDarjeelingPlicPeripheral::SpiHost0
    TopDarjeelingPlicPeripheral::SpiHost0,
    // SpiHost0SpiEvent -> TopDarjeelingPlicPeripheral::SpiHost0
    TopDarjeelingPlicPeripheral::SpiHost0,
    // PwrmgrAonWakeup -> TopDarjeelingPlicPeripheral::PwrmgrAon
    TopDarjeelingPlicPeripheral::PwrmgrAon,
    // AdcCtrlAonMatchDone -> TopDarjeelingPlicPeripheral::AdcCtrlAon
    TopDarjeelingPlicPeripheral::AdcCtrlAon,
    // AonTimerAonWkupTimerExpired -> TopDarjeelingPlicPeripheral::AonTimerAon
    TopDarjeelingPlicPeripheral::AonTimerAon,
    // AonTimerAonWdogTimerBark -> TopDarjeelingPlicPeripheral::AonTimerAon
    TopDarjeelingPlicPeripheral::AonTimerAon,
    // SensorCtrlIoStatusChange -> TopDarjeelingPlicPeripheral::SensorCtrl
    TopDarjeelingPlicPeripheral::SensorCtrl,
    // SensorCtrlInitStatusChange -> TopDarjeelingPlicPeripheral::SensorCtrl
    TopDarjeelingPlicPeripheral::SensorCtrl,
    // SocProxyExternal0 -> TopDarjeelingPlicPeripheral::SocProxy
    TopDarjeelingPlicPeripheral::SocProxy,
    // SocProxyExternal1 -> TopDarjeelingPlicPeripheral::SocProxy
    TopDarjeelingPlicPeripheral::SocProxy,
    // SocProxyExternal2 -> TopDarjeelingPlicPeripheral::SocProxy
    TopDarjeelingPlicPeripheral::SocProxy,
    // SocProxyExternal3 -> TopDarjeelingPlicPeripheral::SocProxy
    TopDarjeelingPlicPeripheral::SocProxy,
    // SocProxyExternal4 -> TopDarjeelingPlicPeripheral::SocProxy
    TopDarjeelingPlicPeripheral::SocProxy,
    // SocProxyExternal5 -> TopDarjeelingPlicPeripheral::SocProxy
    TopDarjeelingPlicPeripheral::SocProxy,
    // SocProxyExternal6 -> TopDarjeelingPlicPeripheral::SocProxy
    TopDarjeelingPlicPeripheral::SocProxy,
    // SocProxyExternal7 -> TopDarjeelingPlicPeripheral::SocProxy
    TopDarjeelingPlicPeripheral::SocProxy,
    // HmacHmacDone -> TopDarjeelingPlicPeripheral::Hmac
    TopDarjeelingPlicPeripheral::Hmac,
    // HmacFifoEmpty -> TopDarjeelingPlicPeripheral::Hmac
    TopDarjeelingPlicPeripheral::Hmac,
    // HmacHmacErr -> TopDarjeelingPlicPeripheral::Hmac
    TopDarjeelingPlicPeripheral::Hmac,
    // KmacKmacDone -> TopDarjeelingPlicPeripheral::Kmac
    TopDarjeelingPlicPeripheral::Kmac,
    // KmacFifoEmpty -> TopDarjeelingPlicPeripheral::Kmac
    TopDarjeelingPlicPeripheral::Kmac,
    // KmacKmacErr -> TopDarjeelingPlicPeripheral::Kmac
    TopDarjeelingPlicPeripheral::Kmac,
    // OtbnDone -> TopDarjeelingPlicPeripheral::Otbn
    TopDarjeelingPlicPeripheral::Otbn,
    // KeymgrDpeOpDone -> TopDarjeelingPlicPeripheral::KeymgrDpe
    TopDarjeelingPlicPeripheral::KeymgrDpe,
    // CsrngCsCmdReqDone -> TopDarjeelingPlicPeripheral::Csrng
    TopDarjeelingPlicPeripheral::Csrng,
    // CsrngCsEntropyReq -> TopDarjeelingPlicPeripheral::Csrng
    TopDarjeelingPlicPeripheral::Csrng,
    // CsrngCsHwInstExc -> TopDarjeelingPlicPeripheral::Csrng
    TopDarjeelingPlicPeripheral::Csrng,
    // CsrngCsFatalErr -> TopDarjeelingPlicPeripheral::Csrng
    TopDarjeelingPlicPeripheral::Csrng,
    // Edn0EdnCmdReqDone -> TopDarjeelingPlicPeripheral::Edn0
    TopDarjeelingPlicPeripheral::Edn0,
    // Edn0EdnFatalErr -> TopDarjeelingPlicPeripheral::Edn0
    TopDarjeelingPlicPeripheral::Edn0,
    // Edn1EdnCmdReqDone -> TopDarjeelingPlicPeripheral::Edn1
    TopDarjeelingPlicPeripheral::Edn1,
    // Edn1EdnFatalErr -> TopDarjeelingPlicPeripheral::Edn1
    TopDarjeelingPlicPeripheral::Edn1,
    // DmaDmaDone -> TopDarjeelingPlicPeripheral::Dma
    TopDarjeelingPlicPeripheral::Dma,
    // DmaDmaError -> TopDarjeelingPlicPeripheral::Dma
    TopDarjeelingPlicPeripheral::Dma,
    // DmaDmaMemoryBufferLimit -> TopDarjeelingPlicPeripheral::Dma
    TopDarjeelingPlicPeripheral::Dma,
    // Mbx0MbxReady -> TopDarjeelingPlicPeripheral::Mbx0
    TopDarjeelingPlicPeripheral::Mbx0,
    // Mbx0MbxAbort -> TopDarjeelingPlicPeripheral::Mbx0
    TopDarjeelingPlicPeripheral::Mbx0,
    // Mbx1MbxReady -> TopDarjeelingPlicPeripheral::Mbx1
    TopDarjeelingPlicPeripheral::Mbx1,
    // Mbx1MbxAbort -> TopDarjeelingPlicPeripheral::Mbx1
    TopDarjeelingPlicPeripheral::Mbx1,
    // Mbx2MbxReady -> TopDarjeelingPlicPeripheral::Mbx2
    TopDarjeelingPlicPeripheral::Mbx2,
    // Mbx2MbxAbort -> TopDarjeelingPlicPeripheral::Mbx2
    TopDarjeelingPlicPeripheral::Mbx2,
    // Mbx3MbxReady -> TopDarjeelingPlicPeripheral::Mbx3
    TopDarjeelingPlicPeripheral::Mbx3,
    // Mbx3MbxAbort -> TopDarjeelingPlicPeripheral::Mbx3
    TopDarjeelingPlicPeripheral::Mbx3,
    // Mbx4MbxReady -> TopDarjeelingPlicPeripheral::Mbx4
    TopDarjeelingPlicPeripheral::Mbx4,
    // Mbx4MbxAbort -> TopDarjeelingPlicPeripheral::Mbx4
    TopDarjeelingPlicPeripheral::Mbx4,
    // Mbx5MbxReady -> TopDarjeelingPlicPeripheral::Mbx5
    TopDarjeelingPlicPeripheral::Mbx5,
    // Mbx5MbxAbort -> TopDarjeelingPlicPeripheral::Mbx5
    TopDarjeelingPlicPeripheral::Mbx5,
    // Mbx6MbxReady -> TopDarjeelingPlicPeripheral::Mbx6
    TopDarjeelingPlicPeripheral::Mbx6,
    // Mbx6MbxAbort -> TopDarjeelingPlicPeripheral::Mbx6
    TopDarjeelingPlicPeripheral::Mbx6,
    // MbxJtagMbxReady -> TopDarjeelingPlicPeripheral::MbxJtag
    TopDarjeelingPlicPeripheral::MbxJtag,
    // MbxJtagMbxAbort -> TopDarjeelingPlicPeripheral::MbxJtag
    TopDarjeelingPlicPeripheral::MbxJtag,
    // MbxPcie0MbxReady -> TopDarjeelingPlicPeripheral::MbxPcie0
    TopDarjeelingPlicPeripheral::MbxPcie0,
    // MbxPcie0MbxAbort -> TopDarjeelingPlicPeripheral::MbxPcie0
    TopDarjeelingPlicPeripheral::MbxPcie0,
    // MbxPcie1MbxReady -> TopDarjeelingPlicPeripheral::MbxPcie1
    TopDarjeelingPlicPeripheral::MbxPcie1,
    // MbxPcie1MbxAbort -> TopDarjeelingPlicPeripheral::MbxPcie1
    TopDarjeelingPlicPeripheral::MbxPcie1,
];

/// Alert Handler Alert Source to Peripheral Map
///
/// This array is a mapping from `TopDarjeelingAlertId` to
/// `TopDarjeelingAlertPeripheral`.
pub const TOP_DARJEELING_ALERT_FOR_PERIPHERAL: [TopDarjeelingAlertPeripheral; 88] = [
    // Uart0FatalFault -> TopDarjeelingAlertPeripheral::Uart0
    TopDarjeelingAlertPeripheral::Uart0,
    // GpioFatalFault -> TopDarjeelingAlertPeripheral::Gpio
    TopDarjeelingAlertPeripheral::Gpio,
    // SpiDeviceFatalFault -> TopDarjeelingAlertPeripheral::SpiDevice
    TopDarjeelingAlertPeripheral::SpiDevice,
    // I2c0FatalFault -> TopDarjeelingAlertPeripheral::I2c0
    TopDarjeelingAlertPeripheral::I2c0,
    // RvTimerFatalFault -> TopDarjeelingAlertPeripheral::RvTimer
    TopDarjeelingAlertPeripheral::RvTimer,
    // OtpCtrlFatalMacroError -> TopDarjeelingAlertPeripheral::OtpCtrl
    TopDarjeelingAlertPeripheral::OtpCtrl,
    // OtpCtrlFatalCheckError -> TopDarjeelingAlertPeripheral::OtpCtrl
    TopDarjeelingAlertPeripheral::OtpCtrl,
    // OtpCtrlFatalBusIntegError -> TopDarjeelingAlertPeripheral::OtpCtrl
    TopDarjeelingAlertPeripheral::OtpCtrl,
    // OtpCtrlFatalPrimOtpAlert -> TopDarjeelingAlertPeripheral::OtpCtrl
    TopDarjeelingAlertPeripheral::OtpCtrl,
    // OtpCtrlRecovPrimOtpAlert -> TopDarjeelingAlertPeripheral::OtpCtrl
    TopDarjeelingAlertPeripheral::OtpCtrl,
    // LcCtrlFatalProgError -> TopDarjeelingAlertPeripheral::LcCtrl
    TopDarjeelingAlertPeripheral::LcCtrl,
    // LcCtrlFatalStateError -> TopDarjeelingAlertPeripheral::LcCtrl
    TopDarjeelingAlertPeripheral::LcCtrl,
    // LcCtrlFatalBusIntegError -> TopDarjeelingAlertPeripheral::LcCtrl
    TopDarjeelingAlertPeripheral::LcCtrl,
    // SpiHost0FatalFault -> TopDarjeelingAlertPeripheral::SpiHost0
    TopDarjeelingAlertPeripheral::SpiHost0,
    // PwrmgrAonFatalFault -> TopDarjeelingAlertPeripheral::PwrmgrAon
    TopDarjeelingAlertPeripheral::PwrmgrAon,
    // RstmgrAonFatalFault -> TopDarjeelingAlertPeripheral::RstmgrAon
    TopDarjeelingAlertPeripheral::RstmgrAon,
    // RstmgrAonFatalCnstyFault -> TopDarjeelingAlertPeripheral::RstmgrAon
    TopDarjeelingAlertPeripheral::RstmgrAon,
    // ClkmgrAonRecovFault -> TopDarjeelingAlertPeripheral::ClkmgrAon
    TopDarjeelingAlertPeripheral::ClkmgrAon,
    // ClkmgrAonFatalFault -> TopDarjeelingAlertPeripheral::ClkmgrAon
    TopDarjeelingAlertPeripheral::ClkmgrAon,
    // AdcCtrlAonFatalFault -> TopDarjeelingAlertPeripheral::AdcCtrlAon
    TopDarjeelingAlertPeripheral::AdcCtrlAon,
    // PinmuxAonFatalFault -> TopDarjeelingAlertPeripheral::PinmuxAon
    TopDarjeelingAlertPeripheral::PinmuxAon,
    // AonTimerAonFatalFault -> TopDarjeelingAlertPeripheral::AonTimerAon
    TopDarjeelingAlertPeripheral::AonTimerAon,
    // SensorCtrlRecovAlert -> TopDarjeelingAlertPeripheral::SensorCtrl
    TopDarjeelingAlertPeripheral::SensorCtrl,
    // SensorCtrlFatalAlert -> TopDarjeelingAlertPeripheral::SensorCtrl
    TopDarjeelingAlertPeripheral::SensorCtrl,
    // SocProxyFatalAlertIntg -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal0 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal1 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal2 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal3 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal4 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal5 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal6 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal7 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal0 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal1 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal2 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal3 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal4 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal5 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal6 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal7 -> TopDarjeelingAlertPeripheral::SocProxy
    TopDarjeelingAlertPeripheral::SocProxy,
    // SramCtrlRetAonFatalError -> TopDarjeelingAlertPeripheral::SramCtrlRetAon
    TopDarjeelingAlertPeripheral::SramCtrlRetAon,
    // RvDmFatalFault -> TopDarjeelingAlertPeripheral::RvDm
    TopDarjeelingAlertPeripheral::RvDm,
    // RvPlicFatalFault -> TopDarjeelingAlertPeripheral::RvPlic
    TopDarjeelingAlertPeripheral::RvPlic,
    // AesRecovCtrlUpdateErr -> TopDarjeelingAlertPeripheral::Aes
    TopDarjeelingAlertPeripheral::Aes,
    // AesFatalFault -> TopDarjeelingAlertPeripheral::Aes
    TopDarjeelingAlertPeripheral::Aes,
    // HmacFatalFault -> TopDarjeelingAlertPeripheral::Hmac
    TopDarjeelingAlertPeripheral::Hmac,
    // KmacRecovOperationErr -> TopDarjeelingAlertPeripheral::Kmac
    TopDarjeelingAlertPeripheral::Kmac,
    // KmacFatalFaultErr -> TopDarjeelingAlertPeripheral::Kmac
    TopDarjeelingAlertPeripheral::Kmac,
    // OtbnFatal -> TopDarjeelingAlertPeripheral::Otbn
    TopDarjeelingAlertPeripheral::Otbn,
    // OtbnRecov -> TopDarjeelingAlertPeripheral::Otbn
    TopDarjeelingAlertPeripheral::Otbn,
    // KeymgrDpeRecovOperationErr -> TopDarjeelingAlertPeripheral::KeymgrDpe
    TopDarjeelingAlertPeripheral::KeymgrDpe,
    // KeymgrDpeFatalFaultErr -> TopDarjeelingAlertPeripheral::KeymgrDpe
    TopDarjeelingAlertPeripheral::KeymgrDpe,
    // CsrngRecovAlert -> TopDarjeelingAlertPeripheral::Csrng
    TopDarjeelingAlertPeripheral::Csrng,
    // CsrngFatalAlert -> TopDarjeelingAlertPeripheral::Csrng
    TopDarjeelingAlertPeripheral::Csrng,
    // Edn0RecovAlert -> TopDarjeelingAlertPeripheral::Edn0
    TopDarjeelingAlertPeripheral::Edn0,
    // Edn0FatalAlert -> TopDarjeelingAlertPeripheral::Edn0
    TopDarjeelingAlertPeripheral::Edn0,
    // Edn1RecovAlert -> TopDarjeelingAlertPeripheral::Edn1
    TopDarjeelingAlertPeripheral::Edn1,
    // Edn1FatalAlert -> TopDarjeelingAlertPeripheral::Edn1
    TopDarjeelingAlertPeripheral::Edn1,
    // SramCtrlMainFatalError -> TopDarjeelingAlertPeripheral::SramCtrlMain
    TopDarjeelingAlertPeripheral::SramCtrlMain,
    // SramCtrlMboxFatalError -> TopDarjeelingAlertPeripheral::SramCtrlMbox
    TopDarjeelingAlertPeripheral::SramCtrlMbox,
    // RomCtrl0Fatal -> TopDarjeelingAlertPeripheral::RomCtrl0
    TopDarjeelingAlertPeripheral::RomCtrl0,
    // RomCtrl1Fatal -> TopDarjeelingAlertPeripheral::RomCtrl1
    TopDarjeelingAlertPeripheral::RomCtrl1,
    // DmaFatalFault -> TopDarjeelingAlertPeripheral::Dma
    TopDarjeelingAlertPeripheral::Dma,
    // Mbx0FatalFault -> TopDarjeelingAlertPeripheral::Mbx0
    TopDarjeelingAlertPeripheral::Mbx0,
    // Mbx0RecovFault -> TopDarjeelingAlertPeripheral::Mbx0
    TopDarjeelingAlertPeripheral::Mbx0,
    // Mbx1FatalFault -> TopDarjeelingAlertPeripheral::Mbx1
    TopDarjeelingAlertPeripheral::Mbx1,
    // Mbx1RecovFault -> TopDarjeelingAlertPeripheral::Mbx1
    TopDarjeelingAlertPeripheral::Mbx1,
    // Mbx2FatalFault -> TopDarjeelingAlertPeripheral::Mbx2
    TopDarjeelingAlertPeripheral::Mbx2,
    // Mbx2RecovFault -> TopDarjeelingAlertPeripheral::Mbx2
    TopDarjeelingAlertPeripheral::Mbx2,
    // Mbx3FatalFault -> TopDarjeelingAlertPeripheral::Mbx3
    TopDarjeelingAlertPeripheral::Mbx3,
    // Mbx3RecovFault -> TopDarjeelingAlertPeripheral::Mbx3
    TopDarjeelingAlertPeripheral::Mbx3,
    // Mbx4FatalFault -> TopDarjeelingAlertPeripheral::Mbx4
    TopDarjeelingAlertPeripheral::Mbx4,
    // Mbx4RecovFault -> TopDarjeelingAlertPeripheral::Mbx4
    TopDarjeelingAlertPeripheral::Mbx4,
    // Mbx5FatalFault -> TopDarjeelingAlertPeripheral::Mbx5
    TopDarjeelingAlertPeripheral::Mbx5,
    // Mbx5RecovFault -> TopDarjeelingAlertPeripheral::Mbx5
    TopDarjeelingAlertPeripheral::Mbx5,
    // Mbx6FatalFault -> TopDarjeelingAlertPeripheral::Mbx6
    TopDarjeelingAlertPeripheral::Mbx6,
    // Mbx6RecovFault -> TopDarjeelingAlertPeripheral::Mbx6
    TopDarjeelingAlertPeripheral::Mbx6,
    // MbxJtagFatalFault -> TopDarjeelingAlertPeripheral::MbxJtag
    TopDarjeelingAlertPeripheral::MbxJtag,
    // MbxJtagRecovFault -> TopDarjeelingAlertPeripheral::MbxJtag
    TopDarjeelingAlertPeripheral::MbxJtag,
    // MbxPcie0FatalFault -> TopDarjeelingAlertPeripheral::MbxPcie0
    TopDarjeelingAlertPeripheral::MbxPcie0,
    // MbxPcie0RecovFault -> TopDarjeelingAlertPeripheral::MbxPcie0
    TopDarjeelingAlertPeripheral::MbxPcie0,
    // MbxPcie1FatalFault -> TopDarjeelingAlertPeripheral::MbxPcie1
    TopDarjeelingAlertPeripheral::MbxPcie1,
    // MbxPcie1RecovFault -> TopDarjeelingAlertPeripheral::MbxPcie1
    TopDarjeelingAlertPeripheral::MbxPcie1,
    // RvCoreIbexFatalSwErr -> TopDarjeelingAlertPeripheral::RvCoreIbex
    TopDarjeelingAlertPeripheral::RvCoreIbex,
    // RvCoreIbexRecovSwErr -> TopDarjeelingAlertPeripheral::RvCoreIbex
    TopDarjeelingAlertPeripheral::RvCoreIbex,
    // RvCoreIbexFatalHwErr -> TopDarjeelingAlertPeripheral::RvCoreIbex
    TopDarjeelingAlertPeripheral::RvCoreIbex,
    // RvCoreIbexRecovHwErr -> TopDarjeelingAlertPeripheral::RvCoreIbex
    TopDarjeelingAlertPeripheral::RvCoreIbex,
];

// PERIPH_INSEL ranges from 0 to TOP_DARJEELING_NUM_MIO_PADS + 2 -1}
//  0 and 1 are tied to value 0 and 1
pub const TOP_DARJEELING_NUM_MIO_PADS: usize = 47;
pub const TOP_DARJEELING_NUM_DIO_PADS: usize = 12;

pub const TOP_DARJEELING_PINMUX_MIO_PERIPH_INSEL_IDX_OFFSET: usize = 2;
pub const TOP_DARJEELING_PINMUX_PERIPH_OUTSEL_IDX_OFFSET: usize = 3;

/// Pinmux Peripheral Input.
#[repr(u32)]
pub enum TopDarjeelingPinmuxPeripheralIn {
    /// Peripheral Input 0
    GpioGpio0 = 0,
    /// Peripheral Input 1
    GpioGpio1 = 1,
    /// Peripheral Input 2
    GpioGpio2 = 2,
    /// Peripheral Input 3
    GpioGpio3 = 3,
    /// Peripheral Input 4
    GpioGpio4 = 4,
    /// Peripheral Input 5
    GpioGpio5 = 5,
    /// Peripheral Input 6
    GpioGpio6 = 6,
    /// Peripheral Input 7
    GpioGpio7 = 7,
    /// Peripheral Input 8
    GpioGpio8 = 8,
    /// Peripheral Input 9
    GpioGpio9 = 9,
    /// Peripheral Input 10
    GpioGpio10 = 10,
    /// Peripheral Input 11
    GpioGpio11 = 11,
    /// Peripheral Input 12
    GpioGpio12 = 12,
    /// Peripheral Input 13
    GpioGpio13 = 13,
    /// Peripheral Input 14
    GpioGpio14 = 14,
    /// Peripheral Input 15
    GpioGpio15 = 15,
    /// Peripheral Input 16
    GpioGpio16 = 16,
    /// Peripheral Input 17
    GpioGpio17 = 17,
    /// Peripheral Input 18
    GpioGpio18 = 18,
    /// Peripheral Input 19
    GpioGpio19 = 19,
    /// Peripheral Input 20
    GpioGpio20 = 20,
    /// Peripheral Input 21
    GpioGpio21 = 21,
    /// Peripheral Input 22
    GpioGpio22 = 22,
    /// Peripheral Input 23
    GpioGpio23 = 23,
    /// Peripheral Input 24
    GpioGpio24 = 24,
    /// Peripheral Input 25
    GpioGpio25 = 25,
    /// Peripheral Input 26
    GpioGpio26 = 26,
    /// Peripheral Input 27
    GpioGpio27 = 27,
    /// Peripheral Input 28
    GpioGpio28 = 28,
    /// Peripheral Input 29
    GpioGpio29 = 29,
    /// Peripheral Input 30
    GpioGpio30 = 30,
    /// Peripheral Input 31
    GpioGpio31 = 31,
    /// Peripheral Input 32
    I2c0Sda = 32,
    /// Peripheral Input 33
    I2c0Scl = 33,
    /// Peripheral Input 34
    Uart0Rx = 34,
    /// Peripheral Input 35
    SpiDeviceTpmCsb = 35,
}

impl TryFrom<u32> for TopDarjeelingPinmuxPeripheralIn {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::GpioGpio0),
            1 => Ok(Self::GpioGpio1),
            2 => Ok(Self::GpioGpio2),
            3 => Ok(Self::GpioGpio3),
            4 => Ok(Self::GpioGpio4),
            5 => Ok(Self::GpioGpio5),
            6 => Ok(Self::GpioGpio6),
            7 => Ok(Self::GpioGpio7),
            8 => Ok(Self::GpioGpio8),
            9 => Ok(Self::GpioGpio9),
            10 => Ok(Self::GpioGpio10),
            11 => Ok(Self::GpioGpio11),
            12 => Ok(Self::GpioGpio12),
            13 => Ok(Self::GpioGpio13),
            14 => Ok(Self::GpioGpio14),
            15 => Ok(Self::GpioGpio15),
            16 => Ok(Self::GpioGpio16),
            17 => Ok(Self::GpioGpio17),
            18 => Ok(Self::GpioGpio18),
            19 => Ok(Self::GpioGpio19),
            20 => Ok(Self::GpioGpio20),
            21 => Ok(Self::GpioGpio21),
            22 => Ok(Self::GpioGpio22),
            23 => Ok(Self::GpioGpio23),
            24 => Ok(Self::GpioGpio24),
            25 => Ok(Self::GpioGpio25),
            26 => Ok(Self::GpioGpio26),
            27 => Ok(Self::GpioGpio27),
            28 => Ok(Self::GpioGpio28),
            29 => Ok(Self::GpioGpio29),
            30 => Ok(Self::GpioGpio30),
            31 => Ok(Self::GpioGpio31),
            32 => Ok(Self::I2c0Sda),
            33 => Ok(Self::I2c0Scl),
            34 => Ok(Self::Uart0Rx),
            35 => Ok(Self::SpiDeviceTpmCsb),
            _ => Err(val),
        }
    }
}

/// Pinmux MIO Input Selector.
#[repr(u32)]
pub enum TopDarjeelingPinmuxInsel {
    /// Tie constantly to zero
    ConstantZero = 0,
    /// Tie constantly to one
    ConstantOne = 1,
    /// MIO Pad 0
    Ioa0 = 2,
    /// MIO Pad 1
    Ioa1 = 3,
    /// MIO Pad 2
    Ioa2 = 4,
    /// MIO Pad 3
    Ioa3 = 5,
    /// MIO Pad 4
    Ioa4 = 6,
    /// MIO Pad 5
    Ioa5 = 7,
    /// MIO Pad 6
    Ioa6 = 8,
    /// MIO Pad 7
    Ioa7 = 9,
    /// MIO Pad 8
    Ioa8 = 10,
    /// MIO Pad 9
    Iob0 = 11,
    /// MIO Pad 10
    Iob1 = 12,
    /// MIO Pad 11
    Iob2 = 13,
    /// MIO Pad 12
    Iob3 = 14,
    /// MIO Pad 13
    Iob4 = 15,
    /// MIO Pad 14
    Iob5 = 16,
    /// MIO Pad 15
    Iob6 = 17,
    /// MIO Pad 16
    Iob7 = 18,
    /// MIO Pad 17
    Iob8 = 19,
    /// MIO Pad 18
    Iob9 = 20,
    /// MIO Pad 19
    Iob10 = 21,
    /// MIO Pad 20
    Iob11 = 22,
    /// MIO Pad 21
    Iob12 = 23,
    /// MIO Pad 22
    Ioc0 = 24,
    /// MIO Pad 23
    Ioc1 = 25,
    /// MIO Pad 24
    Ioc2 = 26,
    /// MIO Pad 25
    Ioc3 = 27,
    /// MIO Pad 26
    Ioc4 = 28,
    /// MIO Pad 27
    Ioc5 = 29,
    /// MIO Pad 28
    Ioc6 = 30,
    /// MIO Pad 29
    Ioc7 = 31,
    /// MIO Pad 30
    Ioc8 = 32,
    /// MIO Pad 31
    Ioc9 = 33,
    /// MIO Pad 32
    Ioc10 = 34,
    /// MIO Pad 33
    Ioc11 = 35,
    /// MIO Pad 34
    Ioc12 = 36,
    /// MIO Pad 35
    Ior0 = 37,
    /// MIO Pad 36
    Ior1 = 38,
    /// MIO Pad 37
    Ior2 = 39,
    /// MIO Pad 38
    Ior3 = 40,
    /// MIO Pad 39
    Ior4 = 41,
    /// MIO Pad 40
    Ior5 = 42,
    /// MIO Pad 41
    Ior6 = 43,
    /// MIO Pad 42
    Ior7 = 44,
    /// MIO Pad 43
    Ior10 = 45,
    /// MIO Pad 44
    Ior11 = 46,
    /// MIO Pad 45
    Ior12 = 47,
    /// MIO Pad 46
    Ior13 = 48,
}

impl TryFrom<u32> for TopDarjeelingPinmuxInsel {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::ConstantZero),
            1 => Ok(Self::ConstantOne),
            2 => Ok(Self::Ioa0),
            3 => Ok(Self::Ioa1),
            4 => Ok(Self::Ioa2),
            5 => Ok(Self::Ioa3),
            6 => Ok(Self::Ioa4),
            7 => Ok(Self::Ioa5),
            8 => Ok(Self::Ioa6),
            9 => Ok(Self::Ioa7),
            10 => Ok(Self::Ioa8),
            11 => Ok(Self::Iob0),
            12 => Ok(Self::Iob1),
            13 => Ok(Self::Iob2),
            14 => Ok(Self::Iob3),
            15 => Ok(Self::Iob4),
            16 => Ok(Self::Iob5),
            17 => Ok(Self::Iob6),
            18 => Ok(Self::Iob7),
            19 => Ok(Self::Iob8),
            20 => Ok(Self::Iob9),
            21 => Ok(Self::Iob10),
            22 => Ok(Self::Iob11),
            23 => Ok(Self::Iob12),
            24 => Ok(Self::Ioc0),
            25 => Ok(Self::Ioc1),
            26 => Ok(Self::Ioc2),
            27 => Ok(Self::Ioc3),
            28 => Ok(Self::Ioc4),
            29 => Ok(Self::Ioc5),
            30 => Ok(Self::Ioc6),
            31 => Ok(Self::Ioc7),
            32 => Ok(Self::Ioc8),
            33 => Ok(Self::Ioc9),
            34 => Ok(Self::Ioc10),
            35 => Ok(Self::Ioc11),
            36 => Ok(Self::Ioc12),
            37 => Ok(Self::Ior0),
            38 => Ok(Self::Ior1),
            39 => Ok(Self::Ior2),
            40 => Ok(Self::Ior3),
            41 => Ok(Self::Ior4),
            42 => Ok(Self::Ior5),
            43 => Ok(Self::Ior6),
            44 => Ok(Self::Ior7),
            45 => Ok(Self::Ior10),
            46 => Ok(Self::Ior11),
            47 => Ok(Self::Ior12),
            48 => Ok(Self::Ior13),
            _ => Err(val),
        }
    }
}

/// Pinmux MIO Output.
#[repr(u32)]
pub enum TopDarjeelingPinmuxMioOut {
    /// MIO Pad 0
    Ioa0 = 0,
    /// MIO Pad 1
    Ioa1 = 1,
    /// MIO Pad 2
    Ioa2 = 2,
    /// MIO Pad 3
    Ioa3 = 3,
    /// MIO Pad 4
    Ioa4 = 4,
    /// MIO Pad 5
    Ioa5 = 5,
    /// MIO Pad 6
    Ioa6 = 6,
    /// MIO Pad 7
    Ioa7 = 7,
    /// MIO Pad 8
    Ioa8 = 8,
    /// MIO Pad 9
    Iob0 = 9,
    /// MIO Pad 10
    Iob1 = 10,
    /// MIO Pad 11
    Iob2 = 11,
    /// MIO Pad 12
    Iob3 = 12,
    /// MIO Pad 13
    Iob4 = 13,
    /// MIO Pad 14
    Iob5 = 14,
    /// MIO Pad 15
    Iob6 = 15,
    /// MIO Pad 16
    Iob7 = 16,
    /// MIO Pad 17
    Iob8 = 17,
    /// MIO Pad 18
    Iob9 = 18,
    /// MIO Pad 19
    Iob10 = 19,
    /// MIO Pad 20
    Iob11 = 20,
    /// MIO Pad 21
    Iob12 = 21,
    /// MIO Pad 22
    Ioc0 = 22,
    /// MIO Pad 23
    Ioc1 = 23,
    /// MIO Pad 24
    Ioc2 = 24,
    /// MIO Pad 25
    Ioc3 = 25,
    /// MIO Pad 26
    Ioc4 = 26,
    /// MIO Pad 27
    Ioc5 = 27,
    /// MIO Pad 28
    Ioc6 = 28,
    /// MIO Pad 29
    Ioc7 = 29,
    /// MIO Pad 30
    Ioc8 = 30,
    /// MIO Pad 31
    Ioc9 = 31,
    /// MIO Pad 32
    Ioc10 = 32,
    /// MIO Pad 33
    Ioc11 = 33,
    /// MIO Pad 34
    Ioc12 = 34,
    /// MIO Pad 35
    Ior0 = 35,
    /// MIO Pad 36
    Ior1 = 36,
    /// MIO Pad 37
    Ior2 = 37,
    /// MIO Pad 38
    Ior3 = 38,
    /// MIO Pad 39
    Ior4 = 39,
    /// MIO Pad 40
    Ior5 = 40,
    /// MIO Pad 41
    Ior6 = 41,
    /// MIO Pad 42
    Ior7 = 42,
    /// MIO Pad 43
    Ior10 = 43,
    /// MIO Pad 44
    Ior11 = 44,
    /// MIO Pad 45
    Ior12 = 45,
    /// MIO Pad 46
    Ior13 = 46,
}

impl TryFrom<u32> for TopDarjeelingPinmuxMioOut {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::Ioa0),
            1 => Ok(Self::Ioa1),
            2 => Ok(Self::Ioa2),
            3 => Ok(Self::Ioa3),
            4 => Ok(Self::Ioa4),
            5 => Ok(Self::Ioa5),
            6 => Ok(Self::Ioa6),
            7 => Ok(Self::Ioa7),
            8 => Ok(Self::Ioa8),
            9 => Ok(Self::Iob0),
            10 => Ok(Self::Iob1),
            11 => Ok(Self::Iob2),
            12 => Ok(Self::Iob3),
            13 => Ok(Self::Iob4),
            14 => Ok(Self::Iob5),
            15 => Ok(Self::Iob6),
            16 => Ok(Self::Iob7),
            17 => Ok(Self::Iob8),
            18 => Ok(Self::Iob9),
            19 => Ok(Self::Iob10),
            20 => Ok(Self::Iob11),
            21 => Ok(Self::Iob12),
            22 => Ok(Self::Ioc0),
            23 => Ok(Self::Ioc1),
            24 => Ok(Self::Ioc2),
            25 => Ok(Self::Ioc3),
            26 => Ok(Self::Ioc4),
            27 => Ok(Self::Ioc5),
            28 => Ok(Self::Ioc6),
            29 => Ok(Self::Ioc7),
            30 => Ok(Self::Ioc8),
            31 => Ok(Self::Ioc9),
            32 => Ok(Self::Ioc10),
            33 => Ok(Self::Ioc11),
            34 => Ok(Self::Ioc12),
            35 => Ok(Self::Ior0),
            36 => Ok(Self::Ior1),
            37 => Ok(Self::Ior2),
            38 => Ok(Self::Ior3),
            39 => Ok(Self::Ior4),
            40 => Ok(Self::Ior5),
            41 => Ok(Self::Ior6),
            42 => Ok(Self::Ior7),
            43 => Ok(Self::Ior10),
            44 => Ok(Self::Ior11),
            45 => Ok(Self::Ior12),
            46 => Ok(Self::Ior13),
            _ => Err(val),
        }
    }
}

/// Pinmux Peripheral Output Selector.
#[repr(u32)]
pub enum TopDarjeelingPinmuxOutsel {
    /// Tie constantly to zero
    ConstantZero = 0,
    /// Tie constantly to one
    ConstantOne = 1,
    /// Tie constantly to high-Z
    ConstantHighZ = 2,
    /// Peripheral Output 0
    GpioGpio0 = 3,
    /// Peripheral Output 1
    GpioGpio1 = 4,
    /// Peripheral Output 2
    GpioGpio2 = 5,
    /// Peripheral Output 3
    GpioGpio3 = 6,
    /// Peripheral Output 4
    GpioGpio4 = 7,
    /// Peripheral Output 5
    GpioGpio5 = 8,
    /// Peripheral Output 6
    GpioGpio6 = 9,
    /// Peripheral Output 7
    GpioGpio7 = 10,
    /// Peripheral Output 8
    GpioGpio8 = 11,
    /// Peripheral Output 9
    GpioGpio9 = 12,
    /// Peripheral Output 10
    GpioGpio10 = 13,
    /// Peripheral Output 11
    GpioGpio11 = 14,
    /// Peripheral Output 12
    GpioGpio12 = 15,
    /// Peripheral Output 13
    GpioGpio13 = 16,
    /// Peripheral Output 14
    GpioGpio14 = 17,
    /// Peripheral Output 15
    GpioGpio15 = 18,
    /// Peripheral Output 16
    GpioGpio16 = 19,
    /// Peripheral Output 17
    GpioGpio17 = 20,
    /// Peripheral Output 18
    GpioGpio18 = 21,
    /// Peripheral Output 19
    GpioGpio19 = 22,
    /// Peripheral Output 20
    GpioGpio20 = 23,
    /// Peripheral Output 21
    GpioGpio21 = 24,
    /// Peripheral Output 22
    GpioGpio22 = 25,
    /// Peripheral Output 23
    GpioGpio23 = 26,
    /// Peripheral Output 24
    GpioGpio24 = 27,
    /// Peripheral Output 25
    GpioGpio25 = 28,
    /// Peripheral Output 26
    GpioGpio26 = 29,
    /// Peripheral Output 27
    GpioGpio27 = 30,
    /// Peripheral Output 28
    GpioGpio28 = 31,
    /// Peripheral Output 29
    GpioGpio29 = 32,
    /// Peripheral Output 30
    GpioGpio30 = 33,
    /// Peripheral Output 31
    GpioGpio31 = 34,
    /// Peripheral Output 32
    I2c0Sda = 35,
    /// Peripheral Output 33
    I2c0Scl = 36,
    /// Peripheral Output 34
    Uart0Tx = 37,
    /// Peripheral Output 35
    SensorCtrlAstDebugOut0 = 38,
    /// Peripheral Output 36
    SensorCtrlAstDebugOut1 = 39,
    /// Peripheral Output 37
    SensorCtrlAstDebugOut2 = 40,
    /// Peripheral Output 38
    SensorCtrlAstDebugOut3 = 41,
    /// Peripheral Output 39
    SensorCtrlAstDebugOut4 = 42,
    /// Peripheral Output 40
    SensorCtrlAstDebugOut5 = 43,
    /// Peripheral Output 41
    SensorCtrlAstDebugOut6 = 44,
    /// Peripheral Output 42
    SensorCtrlAstDebugOut7 = 45,
    /// Peripheral Output 43
    SensorCtrlAstDebugOut8 = 46,
    /// Peripheral Output 44
    OtpCtrlTest0 = 47,
}

impl TryFrom<u32> for TopDarjeelingPinmuxOutsel {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::ConstantZero),
            1 => Ok(Self::ConstantOne),
            2 => Ok(Self::ConstantHighZ),
            3 => Ok(Self::GpioGpio0),
            4 => Ok(Self::GpioGpio1),
            5 => Ok(Self::GpioGpio2),
            6 => Ok(Self::GpioGpio3),
            7 => Ok(Self::GpioGpio4),
            8 => Ok(Self::GpioGpio5),
            9 => Ok(Self::GpioGpio6),
            10 => Ok(Self::GpioGpio7),
            11 => Ok(Self::GpioGpio8),
            12 => Ok(Self::GpioGpio9),
            13 => Ok(Self::GpioGpio10),
            14 => Ok(Self::GpioGpio11),
            15 => Ok(Self::GpioGpio12),
            16 => Ok(Self::GpioGpio13),
            17 => Ok(Self::GpioGpio14),
            18 => Ok(Self::GpioGpio15),
            19 => Ok(Self::GpioGpio16),
            20 => Ok(Self::GpioGpio17),
            21 => Ok(Self::GpioGpio18),
            22 => Ok(Self::GpioGpio19),
            23 => Ok(Self::GpioGpio20),
            24 => Ok(Self::GpioGpio21),
            25 => Ok(Self::GpioGpio22),
            26 => Ok(Self::GpioGpio23),
            27 => Ok(Self::GpioGpio24),
            28 => Ok(Self::GpioGpio25),
            29 => Ok(Self::GpioGpio26),
            30 => Ok(Self::GpioGpio27),
            31 => Ok(Self::GpioGpio28),
            32 => Ok(Self::GpioGpio29),
            33 => Ok(Self::GpioGpio30),
            34 => Ok(Self::GpioGpio31),
            35 => Ok(Self::I2c0Sda),
            36 => Ok(Self::I2c0Scl),
            37 => Ok(Self::Uart0Tx),
            38 => Ok(Self::SensorCtrlAstDebugOut0),
            39 => Ok(Self::SensorCtrlAstDebugOut1),
            40 => Ok(Self::SensorCtrlAstDebugOut2),
            41 => Ok(Self::SensorCtrlAstDebugOut3),
            42 => Ok(Self::SensorCtrlAstDebugOut4),
            43 => Ok(Self::SensorCtrlAstDebugOut5),
            44 => Ok(Self::SensorCtrlAstDebugOut6),
            45 => Ok(Self::SensorCtrlAstDebugOut7),
            46 => Ok(Self::SensorCtrlAstDebugOut8),
            47 => Ok(Self::OtpCtrlTest0),
            _ => Err(val),
        }
    }
}

/// Dedicated Pad Selects
#[repr(u32)]
pub enum TopDarjeelingDirectPads {
    SpiHost0Sd0 = 0,
    SpiHost0Sd1 = 1,
    SpiHost0Sd2 = 2,
    SpiHost0Sd3 = 3,
    SpiDeviceSd0 = 4,
    SpiDeviceSd1 = 5,
    SpiDeviceSd2 = 6,
    SpiDeviceSd3 = 7,
    SpiDeviceSck = 8,
    SpiDeviceCsb = 9,
    SpiHost0Sck = 10,
    SpiHost0Csb = 11,
}

impl TryFrom<u32> for TopDarjeelingDirectPads {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::SpiHost0Sd0),
            1 => Ok(Self::SpiHost0Sd1),
            2 => Ok(Self::SpiHost0Sd2),
            3 => Ok(Self::SpiHost0Sd3),
            4 => Ok(Self::SpiDeviceSd0),
            5 => Ok(Self::SpiDeviceSd1),
            6 => Ok(Self::SpiDeviceSd2),
            7 => Ok(Self::SpiDeviceSd3),
            8 => Ok(Self::SpiDeviceSck),
            9 => Ok(Self::SpiDeviceCsb),
            10 => Ok(Self::SpiHost0Sck),
            11 => Ok(Self::SpiHost0Csb),
            _ => Err(val),
        }
    }
}

/// Muxed Pad Selects
#[repr(u32)]
pub enum TopDarjeelingMuxedPads {
    Ioa0 = 0,
    Ioa1 = 1,
    Ioa2 = 2,
    Ioa3 = 3,
    Ioa4 = 4,
    Ioa5 = 5,
    Ioa6 = 6,
    Ioa7 = 7,
    Ioa8 = 8,
    Iob0 = 9,
    Iob1 = 10,
    Iob2 = 11,
    Iob3 = 12,
    Iob4 = 13,
    Iob5 = 14,
    Iob6 = 15,
    Iob7 = 16,
    Iob8 = 17,
    Iob9 = 18,
    Iob10 = 19,
    Iob11 = 20,
    Iob12 = 21,
    Ioc0 = 22,
    Ioc1 = 23,
    Ioc2 = 24,
    Ioc3 = 25,
    Ioc4 = 26,
    Ioc5 = 27,
    Ioc6 = 28,
    Ioc7 = 29,
    Ioc8 = 30,
    Ioc9 = 31,
    Ioc10 = 32,
    Ioc11 = 33,
    Ioc12 = 34,
    Ior0 = 35,
    Ior1 = 36,
    Ior2 = 37,
    Ior3 = 38,
    Ior4 = 39,
    Ior5 = 40,
    Ior6 = 41,
    Ior7 = 42,
    Ior10 = 43,
    Ior11 = 44,
    Ior12 = 45,
    Ior13 = 46,
}

impl TryFrom<u32> for TopDarjeelingMuxedPads {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::Ioa0),
            1 => Ok(Self::Ioa1),
            2 => Ok(Self::Ioa2),
            3 => Ok(Self::Ioa3),
            4 => Ok(Self::Ioa4),
            5 => Ok(Self::Ioa5),
            6 => Ok(Self::Ioa6),
            7 => Ok(Self::Ioa7),
            8 => Ok(Self::Ioa8),
            9 => Ok(Self::Iob0),
            10 => Ok(Self::Iob1),
            11 => Ok(Self::Iob2),
            12 => Ok(Self::Iob3),
            13 => Ok(Self::Iob4),
            14 => Ok(Self::Iob5),
            15 => Ok(Self::Iob6),
            16 => Ok(Self::Iob7),
            17 => Ok(Self::Iob8),
            18 => Ok(Self::Iob9),
            19 => Ok(Self::Iob10),
            20 => Ok(Self::Iob11),
            21 => Ok(Self::Iob12),
            22 => Ok(Self::Ioc0),
            23 => Ok(Self::Ioc1),
            24 => Ok(Self::Ioc2),
            25 => Ok(Self::Ioc3),
            26 => Ok(Self::Ioc4),
            27 => Ok(Self::Ioc5),
            28 => Ok(Self::Ioc6),
            29 => Ok(Self::Ioc7),
            30 => Ok(Self::Ioc8),
            31 => Ok(Self::Ioc9),
            32 => Ok(Self::Ioc10),
            33 => Ok(Self::Ioc11),
            34 => Ok(Self::Ioc12),
            35 => Ok(Self::Ior0),
            36 => Ok(Self::Ior1),
            37 => Ok(Self::Ior2),
            38 => Ok(Self::Ior3),
            39 => Ok(Self::Ior4),
            40 => Ok(Self::Ior5),
            41 => Ok(Self::Ior6),
            42 => Ok(Self::Ior7),
            43 => Ok(Self::Ior10),
            44 => Ok(Self::Ior11),
            45 => Ok(Self::Ior12),
            46 => Ok(Self::Ior13),
            _ => Err(val),
        }
    }
}

/// Power Manager Wakeup Signals
#[repr(u32)]
pub enum TopDarjeelingPowerManagerWakeUps {
    AdcCtrlAonWkupReq = 0,
    PinmuxAonPinWkupReq = 1,
    PinmuxAonUsbWkupReq = 2,
    AonTimerAonWkupReq = 3,
    SensorCtrlWkupReq = 4,
    SocProxyWkupInternalReq = 5,
    SocProxyWkupExternalReq = 6,
}

/// Reset Manager Software Controlled Resets
#[repr(u32)]
pub enum TopDarjeelingResetManagerSwResets {
    SpiDevice = 0,
    SpiHost0 = 1,
    I2c0 = 2,
}

/// Power Manager Reset Request Signals
#[repr(u32)]
pub enum TopDarjeelingPowerManagerResetRequests {
    AonTimerAonAonTimerRstReq = 0,
    SocProxyRstReqExternal = 1,
}

/// Clock Manager Software-Controlled ("Gated") Clocks.
///
/// The Software has full control over these clocks.
#[repr(u32)]
pub enum TopDarjeelingGateableClocks {
    /// Clock clk_io_div4_peri in group peri
    IoDiv4Peri = 0,
    /// Clock clk_io_div2_peri in group peri
    IoDiv2Peri = 1,
    /// Clock clk_io_peri in group peri
    IoPeri = 2,
    /// Clock clk_usb_peri in group peri
    UsbPeri = 3,
}

/// Clock Manager Software-Hinted Clocks.
///
/// The Software has partial control over these clocks. It can ask them to stop,
/// but the clock manager is in control of whether the clock actually is stopped.
#[repr(u32)]
pub enum TopDarjeelingHintableClocks {
    /// Clock clk_main_aes in group trans
    MainAes = 0,
    /// Clock clk_main_hmac in group trans
    MainHmac = 1,
    /// Clock clk_main_kmac in group trans
    MainKmac = 2,
    /// Clock clk_main_otbn in group trans
    MainOtbn = 3,
}

/// MMIO Region
///
/// MMIO region excludes any memory that is separate from the module
/// configuration space, i.e. ROM, main SRAM, and flash are excluded but
/// retention SRAM, spi_device memory, or usbdev memory are included.
pub const TOP_DARJEELING_MMIO_BASE_ADDR: usize = 0x21100000;
pub const TOP_DARJEELING_MMIO_SIZE_BYTES: usize = 0xFF70080;
